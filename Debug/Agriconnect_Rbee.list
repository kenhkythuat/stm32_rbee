
Agriconnect_Rbee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbf4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800dcb8  0800dcb8  0001dcb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e280  0800e280  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e280  0800e280  0001e280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e288  0800e288  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e288  0800e288  0001e288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e28c  0800e28c  0001e28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800e290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000784  200002e0  0800e570  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  0800e570  00020a64  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010eb4  00000000  00000000  0002034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c48  00000000  00000000  000311ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00033e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c75  00000000  00000000  00034e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015043  00000000  00000000  00035ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ff6  00000000  00000000  0004ab18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f3d3  00000000  00000000  0005cb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050e4  00000000  00000000  000dbee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000e0fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002e0 	.word	0x200002e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800dc9c 	.word	0x0800dc9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002e4 	.word	0x200002e4
 8000104:	0800dc9c 	.word	0x0800dc9c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f817 	bl	8002470 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff67 	bl	8002320 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f002 f809 	bl	8002470 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ffff 	bl	8002470 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff8f 	bl	80023a4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff85 	bl	80023a4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcfb 	bl	8000eac <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc87 	bl	8000dd4 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fced 	bl	8000eac <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fce3 	bl	8000eac <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc93 	bl	8000e20 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc89 	bl	8000e20 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f8bc 	bl	80006c8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	; 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ffa1 	bl	8001510 <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	; 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fdfb 	bl	80011d0 <__aeabi_fsub>
 80005da:	f000 ff99 	bl	8001510 <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fdfd 	bl	80031fc <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa56 	bl	8002abc <__aeabi_dsub>
 8000610:	f002 fdf4 	bl	80031fc <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__aeabi_d2lz>:
 8000624:	b570      	push	{r4, r5, r6, lr}
 8000626:	0005      	movs	r5, r0
 8000628:	000c      	movs	r4, r1
 800062a:	2200      	movs	r2, #0
 800062c:	2300      	movs	r3, #0
 800062e:	0028      	movs	r0, r5
 8000630:	0021      	movs	r1, r4
 8000632:	f7ff ff11 	bl	8000458 <__aeabi_dcmplt>
 8000636:	2800      	cmp	r0, #0
 8000638:	d108      	bne.n	800064c <__aeabi_d2lz+0x28>
 800063a:	0028      	movs	r0, r5
 800063c:	0021      	movs	r1, r4
 800063e:	f000 f80f 	bl	8000660 <__aeabi_d2ulz>
 8000642:	0002      	movs	r2, r0
 8000644:	000b      	movs	r3, r1
 8000646:	0010      	movs	r0, r2
 8000648:	0019      	movs	r1, r3
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	061b      	lsls	r3, r3, #24
 8000650:	18e1      	adds	r1, r4, r3
 8000652:	0028      	movs	r0, r5
 8000654:	f000 f804 	bl	8000660 <__aeabi_d2ulz>
 8000658:	2300      	movs	r3, #0
 800065a:	4242      	negs	r2, r0
 800065c:	418b      	sbcs	r3, r1
 800065e:	e7f2      	b.n	8000646 <__aeabi_d2lz+0x22>

08000660 <__aeabi_d2ulz>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	2200      	movs	r2, #0
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <__aeabi_d2ulz+0x34>)
 8000666:	000d      	movs	r5, r1
 8000668:	0004      	movs	r4, r0
 800066a:	f001 ff65 	bl	8002538 <__aeabi_dmul>
 800066e:	f7ff ffbb 	bl	80005e8 <__aeabi_d2uiz>
 8000672:	0006      	movs	r6, r0
 8000674:	f002 fe28 	bl	80032c8 <__aeabi_ui2d>
 8000678:	2200      	movs	r2, #0
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <__aeabi_d2ulz+0x38>)
 800067c:	f001 ff5c 	bl	8002538 <__aeabi_dmul>
 8000680:	0002      	movs	r2, r0
 8000682:	000b      	movs	r3, r1
 8000684:	0020      	movs	r0, r4
 8000686:	0029      	movs	r1, r5
 8000688:	f002 fa18 	bl	8002abc <__aeabi_dsub>
 800068c:	f7ff ffac 	bl	80005e8 <__aeabi_d2uiz>
 8000690:	0031      	movs	r1, r6
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	3df00000 	.word	0x3df00000
 8000698:	41f00000 	.word	0x41f00000

0800069c <__aeabi_l2d>:
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	0006      	movs	r6, r0
 80006a0:	0008      	movs	r0, r1
 80006a2:	f002 fde1 	bl	8003268 <__aeabi_i2d>
 80006a6:	2200      	movs	r2, #0
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <__aeabi_l2d+0x28>)
 80006aa:	f001 ff45 	bl	8002538 <__aeabi_dmul>
 80006ae:	000d      	movs	r5, r1
 80006b0:	0004      	movs	r4, r0
 80006b2:	0030      	movs	r0, r6
 80006b4:	f002 fe08 	bl	80032c8 <__aeabi_ui2d>
 80006b8:	002b      	movs	r3, r5
 80006ba:	0022      	movs	r2, r4
 80006bc:	f000 ffe2 	bl	8001684 <__aeabi_dadd>
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	41f00000 	.word	0x41f00000

080006c8 <__udivmoddi4>:
 80006c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ca:	4657      	mov	r7, sl
 80006cc:	464e      	mov	r6, r9
 80006ce:	4645      	mov	r5, r8
 80006d0:	46de      	mov	lr, fp
 80006d2:	b5e0      	push	{r5, r6, r7, lr}
 80006d4:	0004      	movs	r4, r0
 80006d6:	000d      	movs	r5, r1
 80006d8:	4692      	mov	sl, r2
 80006da:	4699      	mov	r9, r3
 80006dc:	b083      	sub	sp, #12
 80006de:	428b      	cmp	r3, r1
 80006e0:	d830      	bhi.n	8000744 <__udivmoddi4+0x7c>
 80006e2:	d02d      	beq.n	8000740 <__udivmoddi4+0x78>
 80006e4:	4649      	mov	r1, r9
 80006e6:	4650      	mov	r0, sl
 80006e8:	f002 ff00 	bl	80034ec <__clzdi2>
 80006ec:	0029      	movs	r1, r5
 80006ee:	0006      	movs	r6, r0
 80006f0:	0020      	movs	r0, r4
 80006f2:	f002 fefb 	bl	80034ec <__clzdi2>
 80006f6:	1a33      	subs	r3, r6, r0
 80006f8:	4698      	mov	r8, r3
 80006fa:	3b20      	subs	r3, #32
 80006fc:	d434      	bmi.n	8000768 <__udivmoddi4+0xa0>
 80006fe:	469b      	mov	fp, r3
 8000700:	4653      	mov	r3, sl
 8000702:	465a      	mov	r2, fp
 8000704:	4093      	lsls	r3, r2
 8000706:	4642      	mov	r2, r8
 8000708:	001f      	movs	r7, r3
 800070a:	4653      	mov	r3, sl
 800070c:	4093      	lsls	r3, r2
 800070e:	001e      	movs	r6, r3
 8000710:	42af      	cmp	r7, r5
 8000712:	d83b      	bhi.n	800078c <__udivmoddi4+0xc4>
 8000714:	42af      	cmp	r7, r5
 8000716:	d100      	bne.n	800071a <__udivmoddi4+0x52>
 8000718:	e079      	b.n	800080e <__udivmoddi4+0x146>
 800071a:	465b      	mov	r3, fp
 800071c:	1ba4      	subs	r4, r4, r6
 800071e:	41bd      	sbcs	r5, r7
 8000720:	2b00      	cmp	r3, #0
 8000722:	da00      	bge.n	8000726 <__udivmoddi4+0x5e>
 8000724:	e076      	b.n	8000814 <__udivmoddi4+0x14c>
 8000726:	2200      	movs	r2, #0
 8000728:	2300      	movs	r3, #0
 800072a:	9200      	str	r2, [sp, #0]
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	2301      	movs	r3, #1
 8000730:	465a      	mov	r2, fp
 8000732:	4093      	lsls	r3, r2
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	2301      	movs	r3, #1
 8000738:	4642      	mov	r2, r8
 800073a:	4093      	lsls	r3, r2
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	e029      	b.n	8000794 <__udivmoddi4+0xcc>
 8000740:	4282      	cmp	r2, r0
 8000742:	d9cf      	bls.n	80006e4 <__udivmoddi4+0x1c>
 8000744:	2200      	movs	r2, #0
 8000746:	2300      	movs	r3, #0
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <__udivmoddi4+0x8e>
 8000752:	601c      	str	r4, [r3, #0]
 8000754:	605d      	str	r5, [r3, #4]
 8000756:	9800      	ldr	r0, [sp, #0]
 8000758:	9901      	ldr	r1, [sp, #4]
 800075a:	b003      	add	sp, #12
 800075c:	bcf0      	pop	{r4, r5, r6, r7}
 800075e:	46bb      	mov	fp, r7
 8000760:	46b2      	mov	sl, r6
 8000762:	46a9      	mov	r9, r5
 8000764:	46a0      	mov	r8, r4
 8000766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000768:	4642      	mov	r2, r8
 800076a:	469b      	mov	fp, r3
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	4652      	mov	r2, sl
 8000772:	40da      	lsrs	r2, r3
 8000774:	4641      	mov	r1, r8
 8000776:	0013      	movs	r3, r2
 8000778:	464a      	mov	r2, r9
 800077a:	408a      	lsls	r2, r1
 800077c:	0017      	movs	r7, r2
 800077e:	4642      	mov	r2, r8
 8000780:	431f      	orrs	r7, r3
 8000782:	4653      	mov	r3, sl
 8000784:	4093      	lsls	r3, r2
 8000786:	001e      	movs	r6, r3
 8000788:	42af      	cmp	r7, r5
 800078a:	d9c3      	bls.n	8000714 <__udivmoddi4+0x4c>
 800078c:	2200      	movs	r2, #0
 800078e:	2300      	movs	r3, #0
 8000790:	9200      	str	r2, [sp, #0]
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	4643      	mov	r3, r8
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0d8      	beq.n	800074c <__udivmoddi4+0x84>
 800079a:	07fb      	lsls	r3, r7, #31
 800079c:	0872      	lsrs	r2, r6, #1
 800079e:	431a      	orrs	r2, r3
 80007a0:	4646      	mov	r6, r8
 80007a2:	087b      	lsrs	r3, r7, #1
 80007a4:	e00e      	b.n	80007c4 <__udivmoddi4+0xfc>
 80007a6:	42ab      	cmp	r3, r5
 80007a8:	d101      	bne.n	80007ae <__udivmoddi4+0xe6>
 80007aa:	42a2      	cmp	r2, r4
 80007ac:	d80c      	bhi.n	80007c8 <__udivmoddi4+0x100>
 80007ae:	1aa4      	subs	r4, r4, r2
 80007b0:	419d      	sbcs	r5, r3
 80007b2:	2001      	movs	r0, #1
 80007b4:	1924      	adds	r4, r4, r4
 80007b6:	416d      	adcs	r5, r5
 80007b8:	2100      	movs	r1, #0
 80007ba:	3e01      	subs	r6, #1
 80007bc:	1824      	adds	r4, r4, r0
 80007be:	414d      	adcs	r5, r1
 80007c0:	2e00      	cmp	r6, #0
 80007c2:	d006      	beq.n	80007d2 <__udivmoddi4+0x10a>
 80007c4:	42ab      	cmp	r3, r5
 80007c6:	d9ee      	bls.n	80007a6 <__udivmoddi4+0xde>
 80007c8:	3e01      	subs	r6, #1
 80007ca:	1924      	adds	r4, r4, r4
 80007cc:	416d      	adcs	r5, r5
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d1f8      	bne.n	80007c4 <__udivmoddi4+0xfc>
 80007d2:	9800      	ldr	r0, [sp, #0]
 80007d4:	9901      	ldr	r1, [sp, #4]
 80007d6:	465b      	mov	r3, fp
 80007d8:	1900      	adds	r0, r0, r4
 80007da:	4169      	adcs	r1, r5
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db24      	blt.n	800082a <__udivmoddi4+0x162>
 80007e0:	002b      	movs	r3, r5
 80007e2:	465a      	mov	r2, fp
 80007e4:	4644      	mov	r4, r8
 80007e6:	40d3      	lsrs	r3, r2
 80007e8:	002a      	movs	r2, r5
 80007ea:	40e2      	lsrs	r2, r4
 80007ec:	001c      	movs	r4, r3
 80007ee:	465b      	mov	r3, fp
 80007f0:	0015      	movs	r5, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	db2a      	blt.n	800084c <__udivmoddi4+0x184>
 80007f6:	0026      	movs	r6, r4
 80007f8:	409e      	lsls	r6, r3
 80007fa:	0033      	movs	r3, r6
 80007fc:	0026      	movs	r6, r4
 80007fe:	4647      	mov	r7, r8
 8000800:	40be      	lsls	r6, r7
 8000802:	0032      	movs	r2, r6
 8000804:	1a80      	subs	r0, r0, r2
 8000806:	4199      	sbcs	r1, r3
 8000808:	9000      	str	r0, [sp, #0]
 800080a:	9101      	str	r1, [sp, #4]
 800080c:	e79e      	b.n	800074c <__udivmoddi4+0x84>
 800080e:	42a3      	cmp	r3, r4
 8000810:	d8bc      	bhi.n	800078c <__udivmoddi4+0xc4>
 8000812:	e782      	b.n	800071a <__udivmoddi4+0x52>
 8000814:	4642      	mov	r2, r8
 8000816:	2320      	movs	r3, #32
 8000818:	2100      	movs	r1, #0
 800081a:	1a9b      	subs	r3, r3, r2
 800081c:	2200      	movs	r2, #0
 800081e:	9100      	str	r1, [sp, #0]
 8000820:	9201      	str	r2, [sp, #4]
 8000822:	2201      	movs	r2, #1
 8000824:	40da      	lsrs	r2, r3
 8000826:	9201      	str	r2, [sp, #4]
 8000828:	e785      	b.n	8000736 <__udivmoddi4+0x6e>
 800082a:	4642      	mov	r2, r8
 800082c:	2320      	movs	r3, #32
 800082e:	1a9b      	subs	r3, r3, r2
 8000830:	002a      	movs	r2, r5
 8000832:	4646      	mov	r6, r8
 8000834:	409a      	lsls	r2, r3
 8000836:	0023      	movs	r3, r4
 8000838:	40f3      	lsrs	r3, r6
 800083a:	4644      	mov	r4, r8
 800083c:	4313      	orrs	r3, r2
 800083e:	002a      	movs	r2, r5
 8000840:	40e2      	lsrs	r2, r4
 8000842:	001c      	movs	r4, r3
 8000844:	465b      	mov	r3, fp
 8000846:	0015      	movs	r5, r2
 8000848:	2b00      	cmp	r3, #0
 800084a:	dad4      	bge.n	80007f6 <__udivmoddi4+0x12e>
 800084c:	4642      	mov	r2, r8
 800084e:	002f      	movs	r7, r5
 8000850:	2320      	movs	r3, #32
 8000852:	0026      	movs	r6, r4
 8000854:	4097      	lsls	r7, r2
 8000856:	1a9b      	subs	r3, r3, r2
 8000858:	40de      	lsrs	r6, r3
 800085a:	003b      	movs	r3, r7
 800085c:	4333      	orrs	r3, r6
 800085e:	e7cd      	b.n	80007fc <__udivmoddi4+0x134>

08000860 <__aeabi_fadd>:
 8000860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000862:	4647      	mov	r7, r8
 8000864:	46ce      	mov	lr, r9
 8000866:	024a      	lsls	r2, r1, #9
 8000868:	0243      	lsls	r3, r0, #9
 800086a:	0045      	lsls	r5, r0, #1
 800086c:	0fc4      	lsrs	r4, r0, #31
 800086e:	0a50      	lsrs	r0, r2, #9
 8000870:	4680      	mov	r8, r0
 8000872:	0048      	lsls	r0, r1, #1
 8000874:	0a5b      	lsrs	r3, r3, #9
 8000876:	0e00      	lsrs	r0, r0, #24
 8000878:	0992      	lsrs	r2, r2, #6
 800087a:	4694      	mov	ip, r2
 800087c:	b580      	push	{r7, lr}
 800087e:	001e      	movs	r6, r3
 8000880:	4681      	mov	r9, r0
 8000882:	0002      	movs	r2, r0
 8000884:	0e2d      	lsrs	r5, r5, #24
 8000886:	00df      	lsls	r7, r3, #3
 8000888:	0fc9      	lsrs	r1, r1, #31
 800088a:	428c      	cmp	r4, r1
 800088c:	d024      	beq.n	80008d8 <__aeabi_fadd+0x78>
 800088e:	1a28      	subs	r0, r5, r0
 8000890:	2800      	cmp	r0, #0
 8000892:	dd0e      	ble.n	80008b2 <__aeabi_fadd+0x52>
 8000894:	2a00      	cmp	r2, #0
 8000896:	d13e      	bne.n	8000916 <__aeabi_fadd+0xb6>
 8000898:	4662      	mov	r2, ip
 800089a:	2a00      	cmp	r2, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_fadd+0x40>
 800089e:	e0fd      	b.n	8000a9c <__aeabi_fadd+0x23c>
 80008a0:	1e42      	subs	r2, r0, #1
 80008a2:	2801      	cmp	r0, #1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_fadd+0x48>
 80008a6:	e137      	b.n	8000b18 <__aeabi_fadd+0x2b8>
 80008a8:	28ff      	cmp	r0, #255	; 0xff
 80008aa:	d100      	bne.n	80008ae <__aeabi_fadd+0x4e>
 80008ac:	e0a9      	b.n	8000a02 <__aeabi_fadd+0x1a2>
 80008ae:	0010      	movs	r0, r2
 80008b0:	e039      	b.n	8000926 <__aeabi_fadd+0xc6>
 80008b2:	2800      	cmp	r0, #0
 80008b4:	d063      	beq.n	800097e <__aeabi_fadd+0x11e>
 80008b6:	464b      	mov	r3, r9
 80008b8:	1b52      	subs	r2, r2, r5
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fadd+0x60>
 80008be:	e0e0      	b.n	8000a82 <__aeabi_fadd+0x222>
 80008c0:	2f00      	cmp	r7, #0
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fadd+0x66>
 80008c4:	e0ce      	b.n	8000a64 <__aeabi_fadd+0x204>
 80008c6:	1e53      	subs	r3, r2, #1
 80008c8:	2a01      	cmp	r2, #1
 80008ca:	d100      	bne.n	80008ce <__aeabi_fadd+0x6e>
 80008cc:	e155      	b.n	8000b7a <__aeabi_fadd+0x31a>
 80008ce:	2aff      	cmp	r2, #255	; 0xff
 80008d0:	d100      	bne.n	80008d4 <__aeabi_fadd+0x74>
 80008d2:	e094      	b.n	80009fe <__aeabi_fadd+0x19e>
 80008d4:	001a      	movs	r2, r3
 80008d6:	e0d9      	b.n	8000a8c <__aeabi_fadd+0x22c>
 80008d8:	1a2a      	subs	r2, r5, r0
 80008da:	2a00      	cmp	r2, #0
 80008dc:	dc00      	bgt.n	80008e0 <__aeabi_fadd+0x80>
 80008de:	e099      	b.n	8000a14 <__aeabi_fadd+0x1b4>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d062      	beq.n	80009aa <__aeabi_fadd+0x14a>
 80008e4:	2dff      	cmp	r5, #255	; 0xff
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x8a>
 80008e8:	e08b      	b.n	8000a02 <__aeabi_fadd+0x1a2>
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	4661      	mov	r1, ip
 80008ee:	04db      	lsls	r3, r3, #19
 80008f0:	4319      	orrs	r1, r3
 80008f2:	468c      	mov	ip, r1
 80008f4:	2a1b      	cmp	r2, #27
 80008f6:	dc00      	bgt.n	80008fa <__aeabi_fadd+0x9a>
 80008f8:	e0d2      	b.n	8000aa0 <__aeabi_fadd+0x240>
 80008fa:	2301      	movs	r3, #1
 80008fc:	19db      	adds	r3, r3, r7
 80008fe:	015a      	lsls	r2, r3, #5
 8000900:	d56a      	bpl.n	80009d8 <__aeabi_fadd+0x178>
 8000902:	3501      	adds	r5, #1
 8000904:	2dff      	cmp	r5, #255	; 0xff
 8000906:	d05b      	beq.n	80009c0 <__aeabi_fadd+0x160>
 8000908:	2201      	movs	r2, #1
 800090a:	49a3      	ldr	r1, [pc, #652]	; (8000b98 <__aeabi_fadd+0x338>)
 800090c:	401a      	ands	r2, r3
 800090e:	085b      	lsrs	r3, r3, #1
 8000910:	400b      	ands	r3, r1
 8000912:	4313      	orrs	r3, r2
 8000914:	e01c      	b.n	8000950 <__aeabi_fadd+0xf0>
 8000916:	2dff      	cmp	r5, #255	; 0xff
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0xbc>
 800091a:	e072      	b.n	8000a02 <__aeabi_fadd+0x1a2>
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	4662      	mov	r2, ip
 8000920:	04db      	lsls	r3, r3, #19
 8000922:	431a      	orrs	r2, r3
 8000924:	4694      	mov	ip, r2
 8000926:	281b      	cmp	r0, #27
 8000928:	dc00      	bgt.n	800092c <__aeabi_fadd+0xcc>
 800092a:	e090      	b.n	8000a4e <__aeabi_fadd+0x1ee>
 800092c:	2301      	movs	r3, #1
 800092e:	1afb      	subs	r3, r7, r3
 8000930:	015a      	lsls	r2, r3, #5
 8000932:	d551      	bpl.n	80009d8 <__aeabi_fadd+0x178>
 8000934:	019b      	lsls	r3, r3, #6
 8000936:	099e      	lsrs	r6, r3, #6
 8000938:	0030      	movs	r0, r6
 800093a:	f002 fdb9 	bl	80034b0 <__clzsi2>
 800093e:	0033      	movs	r3, r6
 8000940:	3805      	subs	r0, #5
 8000942:	4083      	lsls	r3, r0
 8000944:	4285      	cmp	r5, r0
 8000946:	dc00      	bgt.n	800094a <__aeabi_fadd+0xea>
 8000948:	e075      	b.n	8000a36 <__aeabi_fadd+0x1d6>
 800094a:	4a94      	ldr	r2, [pc, #592]	; (8000b9c <__aeabi_fadd+0x33c>)
 800094c:	1a2d      	subs	r5, r5, r0
 800094e:	4013      	ands	r3, r2
 8000950:	075a      	lsls	r2, r3, #29
 8000952:	d004      	beq.n	800095e <__aeabi_fadd+0xfe>
 8000954:	220f      	movs	r2, #15
 8000956:	401a      	ands	r2, r3
 8000958:	2a04      	cmp	r2, #4
 800095a:	d000      	beq.n	800095e <__aeabi_fadd+0xfe>
 800095c:	3304      	adds	r3, #4
 800095e:	015a      	lsls	r2, r3, #5
 8000960:	d53c      	bpl.n	80009dc <__aeabi_fadd+0x17c>
 8000962:	1c68      	adds	r0, r5, #1
 8000964:	2dfe      	cmp	r5, #254	; 0xfe
 8000966:	d02b      	beq.n	80009c0 <__aeabi_fadd+0x160>
 8000968:	019b      	lsls	r3, r3, #6
 800096a:	0a5e      	lsrs	r6, r3, #9
 800096c:	b2c0      	uxtb	r0, r0
 800096e:	05c0      	lsls	r0, r0, #23
 8000970:	4330      	orrs	r0, r6
 8000972:	07e4      	lsls	r4, r4, #31
 8000974:	4320      	orrs	r0, r4
 8000976:	bcc0      	pop	{r6, r7}
 8000978:	46b9      	mov	r9, r7
 800097a:	46b0      	mov	r8, r6
 800097c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800097e:	20fe      	movs	r0, #254	; 0xfe
 8000980:	1c6a      	adds	r2, r5, #1
 8000982:	4210      	tst	r0, r2
 8000984:	d172      	bne.n	8000a6c <__aeabi_fadd+0x20c>
 8000986:	2d00      	cmp	r5, #0
 8000988:	d000      	beq.n	800098c <__aeabi_fadd+0x12c>
 800098a:	e0ae      	b.n	8000aea <__aeabi_fadd+0x28a>
 800098c:	2f00      	cmp	r7, #0
 800098e:	d100      	bne.n	8000992 <__aeabi_fadd+0x132>
 8000990:	e0ec      	b.n	8000b6c <__aeabi_fadd+0x30c>
 8000992:	4663      	mov	r3, ip
 8000994:	2000      	movs	r0, #0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0e9      	beq.n	800096e <__aeabi_fadd+0x10e>
 800099a:	1afb      	subs	r3, r7, r3
 800099c:	015a      	lsls	r2, r3, #5
 800099e:	d400      	bmi.n	80009a2 <__aeabi_fadd+0x142>
 80009a0:	e0f3      	b.n	8000b8a <__aeabi_fadd+0x32a>
 80009a2:	4663      	mov	r3, ip
 80009a4:	000c      	movs	r4, r1
 80009a6:	1bdb      	subs	r3, r3, r7
 80009a8:	e7d2      	b.n	8000950 <__aeabi_fadd+0xf0>
 80009aa:	4661      	mov	r1, ip
 80009ac:	2900      	cmp	r1, #0
 80009ae:	d05b      	beq.n	8000a68 <__aeabi_fadd+0x208>
 80009b0:	1e51      	subs	r1, r2, #1
 80009b2:	2a01      	cmp	r2, #1
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fadd+0x158>
 80009b6:	e0a7      	b.n	8000b08 <__aeabi_fadd+0x2a8>
 80009b8:	2aff      	cmp	r2, #255	; 0xff
 80009ba:	d022      	beq.n	8000a02 <__aeabi_fadd+0x1a2>
 80009bc:	000a      	movs	r2, r1
 80009be:	e799      	b.n	80008f4 <__aeabi_fadd+0x94>
 80009c0:	20ff      	movs	r0, #255	; 0xff
 80009c2:	2600      	movs	r6, #0
 80009c4:	e7d3      	b.n	800096e <__aeabi_fadd+0x10e>
 80009c6:	21fe      	movs	r1, #254	; 0xfe
 80009c8:	1c6a      	adds	r2, r5, #1
 80009ca:	4211      	tst	r1, r2
 80009cc:	d073      	beq.n	8000ab6 <__aeabi_fadd+0x256>
 80009ce:	2aff      	cmp	r2, #255	; 0xff
 80009d0:	d0f6      	beq.n	80009c0 <__aeabi_fadd+0x160>
 80009d2:	0015      	movs	r5, r2
 80009d4:	4467      	add	r7, ip
 80009d6:	087b      	lsrs	r3, r7, #1
 80009d8:	075a      	lsls	r2, r3, #29
 80009da:	d1bb      	bne.n	8000954 <__aeabi_fadd+0xf4>
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	2dff      	cmp	r5, #255	; 0xff
 80009e0:	d00f      	beq.n	8000a02 <__aeabi_fadd+0x1a2>
 80009e2:	025b      	lsls	r3, r3, #9
 80009e4:	0a5e      	lsrs	r6, r3, #9
 80009e6:	b2e8      	uxtb	r0, r5
 80009e8:	e7c1      	b.n	800096e <__aeabi_fadd+0x10e>
 80009ea:	4662      	mov	r2, ip
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	d008      	beq.n	8000a02 <__aeabi_fadd+0x1a2>
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	03d2      	lsls	r2, r2, #15
 80009f4:	4213      	tst	r3, r2
 80009f6:	d004      	beq.n	8000a02 <__aeabi_fadd+0x1a2>
 80009f8:	4640      	mov	r0, r8
 80009fa:	4210      	tst	r0, r2
 80009fc:	d101      	bne.n	8000a02 <__aeabi_fadd+0x1a2>
 80009fe:	000c      	movs	r4, r1
 8000a00:	4643      	mov	r3, r8
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0dc      	beq.n	80009c0 <__aeabi_fadd+0x160>
 8000a06:	2680      	movs	r6, #128	; 0x80
 8000a08:	03f6      	lsls	r6, r6, #15
 8000a0a:	431e      	orrs	r6, r3
 8000a0c:	0276      	lsls	r6, r6, #9
 8000a0e:	20ff      	movs	r0, #255	; 0xff
 8000a10:	0a76      	lsrs	r6, r6, #9
 8000a12:	e7ac      	b.n	800096e <__aeabi_fadd+0x10e>
 8000a14:	2a00      	cmp	r2, #0
 8000a16:	d0d6      	beq.n	80009c6 <__aeabi_fadd+0x166>
 8000a18:	1b42      	subs	r2, r0, r5
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d05c      	beq.n	8000ad8 <__aeabi_fadd+0x278>
 8000a1e:	28ff      	cmp	r0, #255	; 0xff
 8000a20:	d0ee      	beq.n	8000a00 <__aeabi_fadd+0x1a0>
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	04db      	lsls	r3, r3, #19
 8000a26:	431f      	orrs	r7, r3
 8000a28:	2a1b      	cmp	r2, #27
 8000a2a:	dc00      	bgt.n	8000a2e <__aeabi_fadd+0x1ce>
 8000a2c:	e082      	b.n	8000b34 <__aeabi_fadd+0x2d4>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	464d      	mov	r5, r9
 8000a32:	4463      	add	r3, ip
 8000a34:	e763      	b.n	80008fe <__aeabi_fadd+0x9e>
 8000a36:	2220      	movs	r2, #32
 8000a38:	1b40      	subs	r0, r0, r5
 8000a3a:	3001      	adds	r0, #1
 8000a3c:	1a12      	subs	r2, r2, r0
 8000a3e:	0019      	movs	r1, r3
 8000a40:	4093      	lsls	r3, r2
 8000a42:	40c1      	lsrs	r1, r0
 8000a44:	1e5a      	subs	r2, r3, #1
 8000a46:	4193      	sbcs	r3, r2
 8000a48:	2500      	movs	r5, #0
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	e780      	b.n	8000950 <__aeabi_fadd+0xf0>
 8000a4e:	2320      	movs	r3, #32
 8000a50:	4661      	mov	r1, ip
 8000a52:	1a1b      	subs	r3, r3, r0
 8000a54:	4099      	lsls	r1, r3
 8000a56:	4662      	mov	r2, ip
 8000a58:	000b      	movs	r3, r1
 8000a5a:	40c2      	lsrs	r2, r0
 8000a5c:	1e59      	subs	r1, r3, #1
 8000a5e:	418b      	sbcs	r3, r1
 8000a60:	4313      	orrs	r3, r2
 8000a62:	e764      	b.n	800092e <__aeabi_fadd+0xce>
 8000a64:	000c      	movs	r4, r1
 8000a66:	4643      	mov	r3, r8
 8000a68:	0015      	movs	r5, r2
 8000a6a:	e7b8      	b.n	80009de <__aeabi_fadd+0x17e>
 8000a6c:	4663      	mov	r3, ip
 8000a6e:	1afe      	subs	r6, r7, r3
 8000a70:	0173      	lsls	r3, r6, #5
 8000a72:	d445      	bmi.n	8000b00 <__aeabi_fadd+0x2a0>
 8000a74:	2e00      	cmp	r6, #0
 8000a76:	d000      	beq.n	8000a7a <__aeabi_fadd+0x21a>
 8000a78:	e75e      	b.n	8000938 <__aeabi_fadd+0xd8>
 8000a7a:	2400      	movs	r4, #0
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	2600      	movs	r6, #0
 8000a80:	e775      	b.n	800096e <__aeabi_fadd+0x10e>
 8000a82:	2bff      	cmp	r3, #255	; 0xff
 8000a84:	d0bb      	beq.n	80009fe <__aeabi_fadd+0x19e>
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	04db      	lsls	r3, r3, #19
 8000a8a:	431f      	orrs	r7, r3
 8000a8c:	2a1b      	cmp	r2, #27
 8000a8e:	dd47      	ble.n	8000b20 <__aeabi_fadd+0x2c0>
 8000a90:	2301      	movs	r3, #1
 8000a92:	4662      	mov	r2, ip
 8000a94:	000c      	movs	r4, r1
 8000a96:	464d      	mov	r5, r9
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	e749      	b.n	8000930 <__aeabi_fadd+0xd0>
 8000a9c:	0005      	movs	r5, r0
 8000a9e:	e79e      	b.n	80009de <__aeabi_fadd+0x17e>
 8000aa0:	4661      	mov	r1, ip
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	40d1      	lsrs	r1, r2
 8000aa6:	1a9b      	subs	r3, r3, r2
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	0013      	movs	r3, r2
 8000aae:	1e5a      	subs	r2, r3, #1
 8000ab0:	4193      	sbcs	r3, r2
 8000ab2:	430b      	orrs	r3, r1
 8000ab4:	e722      	b.n	80008fc <__aeabi_fadd+0x9c>
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d146      	bne.n	8000b48 <__aeabi_fadd+0x2e8>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d062      	beq.n	8000b84 <__aeabi_fadd+0x324>
 8000abe:	4663      	mov	r3, ip
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_fadd+0x268>
 8000ac6:	e752      	b.n	800096e <__aeabi_fadd+0x10e>
 8000ac8:	003b      	movs	r3, r7
 8000aca:	4463      	add	r3, ip
 8000acc:	015a      	lsls	r2, r3, #5
 8000ace:	d583      	bpl.n	80009d8 <__aeabi_fadd+0x178>
 8000ad0:	4a32      	ldr	r2, [pc, #200]	; (8000b9c <__aeabi_fadd+0x33c>)
 8000ad2:	3501      	adds	r5, #1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	e77f      	b.n	80009d8 <__aeabi_fadd+0x178>
 8000ad8:	2f00      	cmp	r7, #0
 8000ada:	d0c4      	beq.n	8000a66 <__aeabi_fadd+0x206>
 8000adc:	1e53      	subs	r3, r2, #1
 8000ade:	2a01      	cmp	r2, #1
 8000ae0:	d012      	beq.n	8000b08 <__aeabi_fadd+0x2a8>
 8000ae2:	2aff      	cmp	r2, #255	; 0xff
 8000ae4:	d08c      	beq.n	8000a00 <__aeabi_fadd+0x1a0>
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	e79e      	b.n	8000a28 <__aeabi_fadd+0x1c8>
 8000aea:	2f00      	cmp	r7, #0
 8000aec:	d000      	beq.n	8000af0 <__aeabi_fadd+0x290>
 8000aee:	e77c      	b.n	80009ea <__aeabi_fadd+0x18a>
 8000af0:	4663      	mov	r3, ip
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d183      	bne.n	80009fe <__aeabi_fadd+0x19e>
 8000af6:	2680      	movs	r6, #128	; 0x80
 8000af8:	2400      	movs	r4, #0
 8000afa:	20ff      	movs	r0, #255	; 0xff
 8000afc:	03f6      	lsls	r6, r6, #15
 8000afe:	e736      	b.n	800096e <__aeabi_fadd+0x10e>
 8000b00:	4663      	mov	r3, ip
 8000b02:	000c      	movs	r4, r1
 8000b04:	1bde      	subs	r6, r3, r7
 8000b06:	e717      	b.n	8000938 <__aeabi_fadd+0xd8>
 8000b08:	003b      	movs	r3, r7
 8000b0a:	4463      	add	r3, ip
 8000b0c:	2501      	movs	r5, #1
 8000b0e:	015a      	lsls	r2, r3, #5
 8000b10:	d400      	bmi.n	8000b14 <__aeabi_fadd+0x2b4>
 8000b12:	e761      	b.n	80009d8 <__aeabi_fadd+0x178>
 8000b14:	2502      	movs	r5, #2
 8000b16:	e6f7      	b.n	8000908 <__aeabi_fadd+0xa8>
 8000b18:	4663      	mov	r3, ip
 8000b1a:	2501      	movs	r5, #1
 8000b1c:	1afb      	subs	r3, r7, r3
 8000b1e:	e707      	b.n	8000930 <__aeabi_fadd+0xd0>
 8000b20:	2320      	movs	r3, #32
 8000b22:	1a9b      	subs	r3, r3, r2
 8000b24:	0038      	movs	r0, r7
 8000b26:	409f      	lsls	r7, r3
 8000b28:	003b      	movs	r3, r7
 8000b2a:	40d0      	lsrs	r0, r2
 8000b2c:	1e5a      	subs	r2, r3, #1
 8000b2e:	4193      	sbcs	r3, r2
 8000b30:	4303      	orrs	r3, r0
 8000b32:	e7ae      	b.n	8000a92 <__aeabi_fadd+0x232>
 8000b34:	2320      	movs	r3, #32
 8000b36:	1a9b      	subs	r3, r3, r2
 8000b38:	0039      	movs	r1, r7
 8000b3a:	409f      	lsls	r7, r3
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	40d1      	lsrs	r1, r2
 8000b40:	1e5a      	subs	r2, r3, #1
 8000b42:	4193      	sbcs	r3, r2
 8000b44:	430b      	orrs	r3, r1
 8000b46:	e773      	b.n	8000a30 <__aeabi_fadd+0x1d0>
 8000b48:	2f00      	cmp	r7, #0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_fadd+0x2ee>
 8000b4c:	e758      	b.n	8000a00 <__aeabi_fadd+0x1a0>
 8000b4e:	4662      	mov	r2, ip
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_fadd+0x2f6>
 8000b54:	e755      	b.n	8000a02 <__aeabi_fadd+0x1a2>
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	03d2      	lsls	r2, r2, #15
 8000b5a:	4213      	tst	r3, r2
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_fadd+0x300>
 8000b5e:	e750      	b.n	8000a02 <__aeabi_fadd+0x1a2>
 8000b60:	4641      	mov	r1, r8
 8000b62:	4211      	tst	r1, r2
 8000b64:	d000      	beq.n	8000b68 <__aeabi_fadd+0x308>
 8000b66:	e74c      	b.n	8000a02 <__aeabi_fadd+0x1a2>
 8000b68:	4643      	mov	r3, r8
 8000b6a:	e74a      	b.n	8000a02 <__aeabi_fadd+0x1a2>
 8000b6c:	4663      	mov	r3, ip
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d083      	beq.n	8000a7a <__aeabi_fadd+0x21a>
 8000b72:	000c      	movs	r4, r1
 8000b74:	4646      	mov	r6, r8
 8000b76:	2000      	movs	r0, #0
 8000b78:	e6f9      	b.n	800096e <__aeabi_fadd+0x10e>
 8000b7a:	4663      	mov	r3, ip
 8000b7c:	000c      	movs	r4, r1
 8000b7e:	1bdb      	subs	r3, r3, r7
 8000b80:	3501      	adds	r5, #1
 8000b82:	e6d5      	b.n	8000930 <__aeabi_fadd+0xd0>
 8000b84:	4646      	mov	r6, r8
 8000b86:	2000      	movs	r0, #0
 8000b88:	e6f1      	b.n	800096e <__aeabi_fadd+0x10e>
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d000      	beq.n	8000b90 <__aeabi_fadd+0x330>
 8000b8e:	e723      	b.n	80009d8 <__aeabi_fadd+0x178>
 8000b90:	2400      	movs	r4, #0
 8000b92:	2600      	movs	r6, #0
 8000b94:	e6eb      	b.n	800096e <__aeabi_fadd+0x10e>
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	7dffffff 	.word	0x7dffffff
 8000b9c:	fbffffff 	.word	0xfbffffff

08000ba0 <__aeabi_fdiv>:
 8000ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba2:	464f      	mov	r7, r9
 8000ba4:	4646      	mov	r6, r8
 8000ba6:	46d6      	mov	lr, sl
 8000ba8:	0245      	lsls	r5, r0, #9
 8000baa:	b5c0      	push	{r6, r7, lr}
 8000bac:	0047      	lsls	r7, r0, #1
 8000bae:	1c0c      	adds	r4, r1, #0
 8000bb0:	0a6d      	lsrs	r5, r5, #9
 8000bb2:	0e3f      	lsrs	r7, r7, #24
 8000bb4:	0fc6      	lsrs	r6, r0, #31
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fdiv+0x1c>
 8000bba:	e06f      	b.n	8000c9c <__aeabi_fdiv+0xfc>
 8000bbc:	2fff      	cmp	r7, #255	; 0xff
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_fdiv+0x22>
 8000bc0:	e074      	b.n	8000cac <__aeabi_fdiv+0x10c>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	469a      	mov	sl, r3
 8000bca:	00ed      	lsls	r5, r5, #3
 8000bcc:	04d2      	lsls	r2, r2, #19
 8000bce:	4315      	orrs	r5, r2
 8000bd0:	3f7f      	subs	r7, #127	; 0x7f
 8000bd2:	0263      	lsls	r3, r4, #9
 8000bd4:	0a5b      	lsrs	r3, r3, #9
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	0063      	lsls	r3, r4, #1
 8000bda:	0e1b      	lsrs	r3, r3, #24
 8000bdc:	0fe4      	lsrs	r4, r4, #31
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d04d      	beq.n	8000c7e <__aeabi_fdiv+0xde>
 8000be2:	2bff      	cmp	r3, #255	; 0xff
 8000be4:	d045      	beq.n	8000c72 <__aeabi_fdiv+0xd2>
 8000be6:	4642      	mov	r2, r8
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	00d2      	lsls	r2, r2, #3
 8000bec:	04c9      	lsls	r1, r1, #19
 8000bee:	4311      	orrs	r1, r2
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	3b7f      	subs	r3, #127	; 0x7f
 8000bf6:	0031      	movs	r1, r6
 8000bf8:	1aff      	subs	r7, r7, r3
 8000bfa:	464b      	mov	r3, r9
 8000bfc:	4061      	eors	r1, r4
 8000bfe:	b2c9      	uxtb	r1, r1
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d900      	bls.n	8000c06 <__aeabi_fdiv+0x66>
 8000c04:	e0b8      	b.n	8000d78 <__aeabi_fdiv+0x1d8>
 8000c06:	4870      	ldr	r0, [pc, #448]	; (8000dc8 <__aeabi_fdiv+0x228>)
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	58c3      	ldr	r3, [r0, r3]
 8000c0c:	469f      	mov	pc, r3
 8000c0e:	2300      	movs	r3, #0
 8000c10:	4698      	mov	r8, r3
 8000c12:	0026      	movs	r6, r4
 8000c14:	4645      	mov	r5, r8
 8000c16:	4692      	mov	sl, r2
 8000c18:	4653      	mov	r3, sl
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_fdiv+0x80>
 8000c1e:	e08d      	b.n	8000d3c <__aeabi_fdiv+0x19c>
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d100      	bne.n	8000c26 <__aeabi_fdiv+0x86>
 8000c24:	e0a1      	b.n	8000d6a <__aeabi_fdiv+0x1ca>
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d018      	beq.n	8000c5c <__aeabi_fdiv+0xbc>
 8000c2a:	003b      	movs	r3, r7
 8000c2c:	337f      	adds	r3, #127	; 0x7f
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	dd6d      	ble.n	8000d0e <__aeabi_fdiv+0x16e>
 8000c32:	076a      	lsls	r2, r5, #29
 8000c34:	d004      	beq.n	8000c40 <__aeabi_fdiv+0xa0>
 8000c36:	220f      	movs	r2, #15
 8000c38:	402a      	ands	r2, r5
 8000c3a:	2a04      	cmp	r2, #4
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_fdiv+0xa0>
 8000c3e:	3504      	adds	r5, #4
 8000c40:	012a      	lsls	r2, r5, #4
 8000c42:	d503      	bpl.n	8000c4c <__aeabi_fdiv+0xac>
 8000c44:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <__aeabi_fdiv+0x22c>)
 8000c46:	401d      	ands	r5, r3
 8000c48:	003b      	movs	r3, r7
 8000c4a:	3380      	adds	r3, #128	; 0x80
 8000c4c:	2bfe      	cmp	r3, #254	; 0xfe
 8000c4e:	dd00      	ble.n	8000c52 <__aeabi_fdiv+0xb2>
 8000c50:	e074      	b.n	8000d3c <__aeabi_fdiv+0x19c>
 8000c52:	01aa      	lsls	r2, r5, #6
 8000c54:	0a52      	lsrs	r2, r2, #9
 8000c56:	b2d8      	uxtb	r0, r3
 8000c58:	e002      	b.n	8000c60 <__aeabi_fdiv+0xc0>
 8000c5a:	000e      	movs	r6, r1
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	2200      	movs	r2, #0
 8000c60:	05c0      	lsls	r0, r0, #23
 8000c62:	07f6      	lsls	r6, r6, #31
 8000c64:	4310      	orrs	r0, r2
 8000c66:	4330      	orrs	r0, r6
 8000c68:	bce0      	pop	{r5, r6, r7}
 8000c6a:	46ba      	mov	sl, r7
 8000c6c:	46b1      	mov	r9, r6
 8000c6e:	46a8      	mov	r8, r5
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c72:	4643      	mov	r3, r8
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d13f      	bne.n	8000cf8 <__aeabi_fdiv+0x158>
 8000c78:	2202      	movs	r2, #2
 8000c7a:	3fff      	subs	r7, #255	; 0xff
 8000c7c:	e003      	b.n	8000c86 <__aeabi_fdiv+0xe6>
 8000c7e:	4643      	mov	r3, r8
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d12d      	bne.n	8000ce0 <__aeabi_fdiv+0x140>
 8000c84:	2201      	movs	r2, #1
 8000c86:	0031      	movs	r1, r6
 8000c88:	464b      	mov	r3, r9
 8000c8a:	4061      	eors	r1, r4
 8000c8c:	b2c9      	uxtb	r1, r1
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d838      	bhi.n	8000d06 <__aeabi_fdiv+0x166>
 8000c94:	484e      	ldr	r0, [pc, #312]	; (8000dd0 <__aeabi_fdiv+0x230>)
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	58c3      	ldr	r3, [r0, r3]
 8000c9a:	469f      	mov	pc, r3
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d113      	bne.n	8000cc8 <__aeabi_fdiv+0x128>
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	4699      	mov	r9, r3
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	2700      	movs	r7, #0
 8000ca8:	469a      	mov	sl, r3
 8000caa:	e792      	b.n	8000bd2 <__aeabi_fdiv+0x32>
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d105      	bne.n	8000cbc <__aeabi_fdiv+0x11c>
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	4699      	mov	r9, r3
 8000cb4:	3b06      	subs	r3, #6
 8000cb6:	27ff      	movs	r7, #255	; 0xff
 8000cb8:	469a      	mov	sl, r3
 8000cba:	e78a      	b.n	8000bd2 <__aeabi_fdiv+0x32>
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	4699      	mov	r9, r3
 8000cc0:	3b09      	subs	r3, #9
 8000cc2:	27ff      	movs	r7, #255	; 0xff
 8000cc4:	469a      	mov	sl, r3
 8000cc6:	e784      	b.n	8000bd2 <__aeabi_fdiv+0x32>
 8000cc8:	0028      	movs	r0, r5
 8000cca:	f002 fbf1 	bl	80034b0 <__clzsi2>
 8000cce:	2776      	movs	r7, #118	; 0x76
 8000cd0:	1f43      	subs	r3, r0, #5
 8000cd2:	409d      	lsls	r5, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	427f      	negs	r7, r7
 8000cd8:	4699      	mov	r9, r3
 8000cda:	469a      	mov	sl, r3
 8000cdc:	1a3f      	subs	r7, r7, r0
 8000cde:	e778      	b.n	8000bd2 <__aeabi_fdiv+0x32>
 8000ce0:	4640      	mov	r0, r8
 8000ce2:	f002 fbe5 	bl	80034b0 <__clzsi2>
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	1f43      	subs	r3, r0, #5
 8000cea:	409a      	lsls	r2, r3
 8000cec:	2376      	movs	r3, #118	; 0x76
 8000cee:	425b      	negs	r3, r3
 8000cf0:	4690      	mov	r8, r2
 8000cf2:	1a1b      	subs	r3, r3, r0
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e77e      	b.n	8000bf6 <__aeabi_fdiv+0x56>
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	464a      	mov	r2, r9
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	4691      	mov	r9, r2
 8000d00:	33fc      	adds	r3, #252	; 0xfc
 8000d02:	2203      	movs	r2, #3
 8000d04:	e777      	b.n	8000bf6 <__aeabi_fdiv+0x56>
 8000d06:	000e      	movs	r6, r1
 8000d08:	20ff      	movs	r0, #255	; 0xff
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	e7a8      	b.n	8000c60 <__aeabi_fdiv+0xc0>
 8000d0e:	2201      	movs	r2, #1
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b1b      	cmp	r3, #27
 8000d14:	dca2      	bgt.n	8000c5c <__aeabi_fdiv+0xbc>
 8000d16:	379e      	adds	r7, #158	; 0x9e
 8000d18:	002a      	movs	r2, r5
 8000d1a:	40bd      	lsls	r5, r7
 8000d1c:	40da      	lsrs	r2, r3
 8000d1e:	1e6b      	subs	r3, r5, #1
 8000d20:	419d      	sbcs	r5, r3
 8000d22:	4315      	orrs	r5, r2
 8000d24:	076a      	lsls	r2, r5, #29
 8000d26:	d004      	beq.n	8000d32 <__aeabi_fdiv+0x192>
 8000d28:	220f      	movs	r2, #15
 8000d2a:	402a      	ands	r2, r5
 8000d2c:	2a04      	cmp	r2, #4
 8000d2e:	d000      	beq.n	8000d32 <__aeabi_fdiv+0x192>
 8000d30:	3504      	adds	r5, #4
 8000d32:	016a      	lsls	r2, r5, #5
 8000d34:	d544      	bpl.n	8000dc0 <__aeabi_fdiv+0x220>
 8000d36:	2001      	movs	r0, #1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e791      	b.n	8000c60 <__aeabi_fdiv+0xc0>
 8000d3c:	20ff      	movs	r0, #255	; 0xff
 8000d3e:	2200      	movs	r2, #0
 8000d40:	e78e      	b.n	8000c60 <__aeabi_fdiv+0xc0>
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	2600      	movs	r6, #0
 8000d46:	20ff      	movs	r0, #255	; 0xff
 8000d48:	03d2      	lsls	r2, r2, #15
 8000d4a:	e789      	b.n	8000c60 <__aeabi_fdiv+0xc0>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	4698      	mov	r8, r3
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	4215      	tst	r5, r2
 8000d56:	d008      	beq.n	8000d6a <__aeabi_fdiv+0x1ca>
 8000d58:	4643      	mov	r3, r8
 8000d5a:	4213      	tst	r3, r2
 8000d5c:	d105      	bne.n	8000d6a <__aeabi_fdiv+0x1ca>
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	0252      	lsls	r2, r2, #9
 8000d62:	0026      	movs	r6, r4
 8000d64:	20ff      	movs	r0, #255	; 0xff
 8000d66:	0a52      	lsrs	r2, r2, #9
 8000d68:	e77a      	b.n	8000c60 <__aeabi_fdiv+0xc0>
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	03d2      	lsls	r2, r2, #15
 8000d6e:	432a      	orrs	r2, r5
 8000d70:	0252      	lsls	r2, r2, #9
 8000d72:	20ff      	movs	r0, #255	; 0xff
 8000d74:	0a52      	lsrs	r2, r2, #9
 8000d76:	e773      	b.n	8000c60 <__aeabi_fdiv+0xc0>
 8000d78:	4642      	mov	r2, r8
 8000d7a:	016b      	lsls	r3, r5, #5
 8000d7c:	0155      	lsls	r5, r2, #5
 8000d7e:	42ab      	cmp	r3, r5
 8000d80:	d21a      	bcs.n	8000db8 <__aeabi_fdiv+0x218>
 8000d82:	201b      	movs	r0, #27
 8000d84:	2200      	movs	r2, #0
 8000d86:	3f01      	subs	r7, #1
 8000d88:	2601      	movs	r6, #1
 8000d8a:	001c      	movs	r4, r3
 8000d8c:	0052      	lsls	r2, r2, #1
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2c00      	cmp	r4, #0
 8000d92:	db01      	blt.n	8000d98 <__aeabi_fdiv+0x1f8>
 8000d94:	429d      	cmp	r5, r3
 8000d96:	d801      	bhi.n	8000d9c <__aeabi_fdiv+0x1fc>
 8000d98:	1b5b      	subs	r3, r3, r5
 8000d9a:	4332      	orrs	r2, r6
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d1f3      	bne.n	8000d8a <__aeabi_fdiv+0x1ea>
 8000da2:	1e58      	subs	r0, r3, #1
 8000da4:	4183      	sbcs	r3, r0
 8000da6:	4313      	orrs	r3, r2
 8000da8:	001d      	movs	r5, r3
 8000daa:	003b      	movs	r3, r7
 8000dac:	337f      	adds	r3, #127	; 0x7f
 8000dae:	000e      	movs	r6, r1
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	dd00      	ble.n	8000db6 <__aeabi_fdiv+0x216>
 8000db4:	e73d      	b.n	8000c32 <__aeabi_fdiv+0x92>
 8000db6:	e7aa      	b.n	8000d0e <__aeabi_fdiv+0x16e>
 8000db8:	201a      	movs	r0, #26
 8000dba:	2201      	movs	r2, #1
 8000dbc:	1b5b      	subs	r3, r3, r5
 8000dbe:	e7e3      	b.n	8000d88 <__aeabi_fdiv+0x1e8>
 8000dc0:	01aa      	lsls	r2, r5, #6
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	0a52      	lsrs	r2, r2, #9
 8000dc6:	e74b      	b.n	8000c60 <__aeabi_fdiv+0xc0>
 8000dc8:	0800dd28 	.word	0x0800dd28
 8000dcc:	f7ffffff 	.word	0xf7ffffff
 8000dd0:	0800dd68 	.word	0x0800dd68

08000dd4 <__eqsf2>:
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	0042      	lsls	r2, r0, #1
 8000dd8:	0245      	lsls	r5, r0, #9
 8000dda:	024e      	lsls	r6, r1, #9
 8000ddc:	004c      	lsls	r4, r1, #1
 8000dde:	0fc3      	lsrs	r3, r0, #31
 8000de0:	0a6d      	lsrs	r5, r5, #9
 8000de2:	2001      	movs	r0, #1
 8000de4:	0e12      	lsrs	r2, r2, #24
 8000de6:	0a76      	lsrs	r6, r6, #9
 8000de8:	0e24      	lsrs	r4, r4, #24
 8000dea:	0fc9      	lsrs	r1, r1, #31
 8000dec:	2aff      	cmp	r2, #255	; 0xff
 8000dee:	d006      	beq.n	8000dfe <__eqsf2+0x2a>
 8000df0:	2cff      	cmp	r4, #255	; 0xff
 8000df2:	d003      	beq.n	8000dfc <__eqsf2+0x28>
 8000df4:	42a2      	cmp	r2, r4
 8000df6:	d101      	bne.n	8000dfc <__eqsf2+0x28>
 8000df8:	42b5      	cmp	r5, r6
 8000dfa:	d006      	beq.n	8000e0a <__eqsf2+0x36>
 8000dfc:	bd70      	pop	{r4, r5, r6, pc}
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d1fc      	bne.n	8000dfc <__eqsf2+0x28>
 8000e02:	2cff      	cmp	r4, #255	; 0xff
 8000e04:	d1fa      	bne.n	8000dfc <__eqsf2+0x28>
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	d1f8      	bne.n	8000dfc <__eqsf2+0x28>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d006      	beq.n	8000e1c <__eqsf2+0x48>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	d1f3      	bne.n	8000dfc <__eqsf2+0x28>
 8000e14:	0028      	movs	r0, r5
 8000e16:	1e43      	subs	r3, r0, #1
 8000e18:	4198      	sbcs	r0, r3
 8000e1a:	e7ef      	b.n	8000dfc <__eqsf2+0x28>
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	e7ed      	b.n	8000dfc <__eqsf2+0x28>

08000e20 <__gesf2>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	0042      	lsls	r2, r0, #1
 8000e24:	0245      	lsls	r5, r0, #9
 8000e26:	024e      	lsls	r6, r1, #9
 8000e28:	004c      	lsls	r4, r1, #1
 8000e2a:	0fc3      	lsrs	r3, r0, #31
 8000e2c:	0a6d      	lsrs	r5, r5, #9
 8000e2e:	0e12      	lsrs	r2, r2, #24
 8000e30:	0a76      	lsrs	r6, r6, #9
 8000e32:	0e24      	lsrs	r4, r4, #24
 8000e34:	0fc8      	lsrs	r0, r1, #31
 8000e36:	2aff      	cmp	r2, #255	; 0xff
 8000e38:	d01b      	beq.n	8000e72 <__gesf2+0x52>
 8000e3a:	2cff      	cmp	r4, #255	; 0xff
 8000e3c:	d00e      	beq.n	8000e5c <__gesf2+0x3c>
 8000e3e:	2a00      	cmp	r2, #0
 8000e40:	d11b      	bne.n	8000e7a <__gesf2+0x5a>
 8000e42:	2c00      	cmp	r4, #0
 8000e44:	d101      	bne.n	8000e4a <__gesf2+0x2a>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	d01c      	beq.n	8000e84 <__gesf2+0x64>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	d00c      	beq.n	8000e68 <__gesf2+0x48>
 8000e4e:	4283      	cmp	r3, r0
 8000e50:	d01c      	beq.n	8000e8c <__gesf2+0x6c>
 8000e52:	2102      	movs	r1, #2
 8000e54:	1e58      	subs	r0, r3, #1
 8000e56:	4008      	ands	r0, r1
 8000e58:	3801      	subs	r0, #1
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d122      	bne.n	8000ea6 <__gesf2+0x86>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	d1f4      	bne.n	8000e4e <__gesf2+0x2e>
 8000e64:	2d00      	cmp	r5, #0
 8000e66:	d1f2      	bne.n	8000e4e <__gesf2+0x2e>
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	d1f6      	bne.n	8000e5a <__gesf2+0x3a>
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4240      	negs	r0, r0
 8000e70:	e7f3      	b.n	8000e5a <__gesf2+0x3a>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d117      	bne.n	8000ea6 <__gesf2+0x86>
 8000e76:	2cff      	cmp	r4, #255	; 0xff
 8000e78:	d0f0      	beq.n	8000e5c <__gesf2+0x3c>
 8000e7a:	2c00      	cmp	r4, #0
 8000e7c:	d1e7      	bne.n	8000e4e <__gesf2+0x2e>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d1e5      	bne.n	8000e4e <__gesf2+0x2e>
 8000e82:	e7e6      	b.n	8000e52 <__gesf2+0x32>
 8000e84:	2000      	movs	r0, #0
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	d0e7      	beq.n	8000e5a <__gesf2+0x3a>
 8000e8a:	e7e2      	b.n	8000e52 <__gesf2+0x32>
 8000e8c:	42a2      	cmp	r2, r4
 8000e8e:	dc05      	bgt.n	8000e9c <__gesf2+0x7c>
 8000e90:	dbea      	blt.n	8000e68 <__gesf2+0x48>
 8000e92:	42b5      	cmp	r5, r6
 8000e94:	d802      	bhi.n	8000e9c <__gesf2+0x7c>
 8000e96:	d3e7      	bcc.n	8000e68 <__gesf2+0x48>
 8000e98:	2000      	movs	r0, #0
 8000e9a:	e7de      	b.n	8000e5a <__gesf2+0x3a>
 8000e9c:	4243      	negs	r3, r0
 8000e9e:	4158      	adcs	r0, r3
 8000ea0:	0040      	lsls	r0, r0, #1
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	e7d9      	b.n	8000e5a <__gesf2+0x3a>
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	4240      	negs	r0, r0
 8000eaa:	e7d6      	b.n	8000e5a <__gesf2+0x3a>

08000eac <__lesf2>:
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	0042      	lsls	r2, r0, #1
 8000eb0:	0245      	lsls	r5, r0, #9
 8000eb2:	024e      	lsls	r6, r1, #9
 8000eb4:	004c      	lsls	r4, r1, #1
 8000eb6:	0fc3      	lsrs	r3, r0, #31
 8000eb8:	0a6d      	lsrs	r5, r5, #9
 8000eba:	0e12      	lsrs	r2, r2, #24
 8000ebc:	0a76      	lsrs	r6, r6, #9
 8000ebe:	0e24      	lsrs	r4, r4, #24
 8000ec0:	0fc8      	lsrs	r0, r1, #31
 8000ec2:	2aff      	cmp	r2, #255	; 0xff
 8000ec4:	d00b      	beq.n	8000ede <__lesf2+0x32>
 8000ec6:	2cff      	cmp	r4, #255	; 0xff
 8000ec8:	d00d      	beq.n	8000ee6 <__lesf2+0x3a>
 8000eca:	2a00      	cmp	r2, #0
 8000ecc:	d11f      	bne.n	8000f0e <__lesf2+0x62>
 8000ece:	2c00      	cmp	r4, #0
 8000ed0:	d116      	bne.n	8000f00 <__lesf2+0x54>
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d114      	bne.n	8000f00 <__lesf2+0x54>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d010      	beq.n	8000efe <__lesf2+0x52>
 8000edc:	e009      	b.n	8000ef2 <__lesf2+0x46>
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d10c      	bne.n	8000efc <__lesf2+0x50>
 8000ee2:	2cff      	cmp	r4, #255	; 0xff
 8000ee4:	d113      	bne.n	8000f0e <__lesf2+0x62>
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	d108      	bne.n	8000efc <__lesf2+0x50>
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d008      	beq.n	8000f00 <__lesf2+0x54>
 8000eee:	4283      	cmp	r3, r0
 8000ef0:	d012      	beq.n	8000f18 <__lesf2+0x6c>
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	1e58      	subs	r0, r3, #1
 8000ef6:	4008      	ands	r0, r1
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e000      	b.n	8000efe <__lesf2+0x52>
 8000efc:	2002      	movs	r0, #2
 8000efe:	bd70      	pop	{r4, r5, r6, pc}
 8000f00:	2d00      	cmp	r5, #0
 8000f02:	d1f4      	bne.n	8000eee <__lesf2+0x42>
 8000f04:	2800      	cmp	r0, #0
 8000f06:	d1fa      	bne.n	8000efe <__lesf2+0x52>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	4240      	negs	r0, r0
 8000f0c:	e7f7      	b.n	8000efe <__lesf2+0x52>
 8000f0e:	2c00      	cmp	r4, #0
 8000f10:	d1ed      	bne.n	8000eee <__lesf2+0x42>
 8000f12:	2e00      	cmp	r6, #0
 8000f14:	d1eb      	bne.n	8000eee <__lesf2+0x42>
 8000f16:	e7ec      	b.n	8000ef2 <__lesf2+0x46>
 8000f18:	42a2      	cmp	r2, r4
 8000f1a:	dc05      	bgt.n	8000f28 <__lesf2+0x7c>
 8000f1c:	dbf2      	blt.n	8000f04 <__lesf2+0x58>
 8000f1e:	42b5      	cmp	r5, r6
 8000f20:	d802      	bhi.n	8000f28 <__lesf2+0x7c>
 8000f22:	d3ef      	bcc.n	8000f04 <__lesf2+0x58>
 8000f24:	2000      	movs	r0, #0
 8000f26:	e7ea      	b.n	8000efe <__lesf2+0x52>
 8000f28:	4243      	negs	r3, r0
 8000f2a:	4158      	adcs	r0, r3
 8000f2c:	0040      	lsls	r0, r0, #1
 8000f2e:	3801      	subs	r0, #1
 8000f30:	e7e5      	b.n	8000efe <__lesf2+0x52>
 8000f32:	46c0      	nop			; (mov r8, r8)

08000f34 <__aeabi_fmul>:
 8000f34:	0243      	lsls	r3, r0, #9
 8000f36:	0a5b      	lsrs	r3, r3, #9
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	464f      	mov	r7, r9
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	4699      	mov	r9, r3
 8000f40:	46d6      	mov	lr, sl
 8000f42:	0fc3      	lsrs	r3, r0, #31
 8000f44:	0045      	lsls	r5, r0, #1
 8000f46:	4698      	mov	r8, r3
 8000f48:	b5c0      	push	{r6, r7, lr}
 8000f4a:	464b      	mov	r3, r9
 8000f4c:	1c0f      	adds	r7, r1, #0
 8000f4e:	0e2d      	lsrs	r5, r5, #24
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fmul+0x20>
 8000f52:	e0cb      	b.n	80010ec <__aeabi_fmul+0x1b8>
 8000f54:	2dff      	cmp	r5, #255	; 0xff
 8000f56:	d100      	bne.n	8000f5a <__aeabi_fmul+0x26>
 8000f58:	e0cf      	b.n	80010fa <__aeabi_fmul+0x1c6>
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	04d2      	lsls	r2, r2, #19
 8000f60:	431a      	orrs	r2, r3
 8000f62:	2300      	movs	r3, #0
 8000f64:	4691      	mov	r9, r2
 8000f66:	2600      	movs	r6, #0
 8000f68:	469a      	mov	sl, r3
 8000f6a:	3d7f      	subs	r5, #127	; 0x7f
 8000f6c:	027c      	lsls	r4, r7, #9
 8000f6e:	007b      	lsls	r3, r7, #1
 8000f70:	0a64      	lsrs	r4, r4, #9
 8000f72:	0e1b      	lsrs	r3, r3, #24
 8000f74:	0fff      	lsrs	r7, r7, #31
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fmul+0x48>
 8000f7a:	e0a9      	b.n	80010d0 <__aeabi_fmul+0x19c>
 8000f7c:	2bff      	cmp	r3, #255	; 0xff
 8000f7e:	d011      	beq.n	8000fa4 <__aeabi_fmul+0x70>
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	00e4      	lsls	r4, r4, #3
 8000f84:	04d2      	lsls	r2, r2, #19
 8000f86:	4314      	orrs	r4, r2
 8000f88:	4642      	mov	r2, r8
 8000f8a:	3b7f      	subs	r3, #127	; 0x7f
 8000f8c:	195b      	adds	r3, r3, r5
 8000f8e:	407a      	eors	r2, r7
 8000f90:	2000      	movs	r0, #0
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	1c5d      	adds	r5, r3, #1
 8000f96:	2e0a      	cmp	r6, #10
 8000f98:	dd13      	ble.n	8000fc2 <__aeabi_fmul+0x8e>
 8000f9a:	003a      	movs	r2, r7
 8000f9c:	2e0b      	cmp	r6, #11
 8000f9e:	d047      	beq.n	8001030 <__aeabi_fmul+0xfc>
 8000fa0:	4647      	mov	r7, r8
 8000fa2:	e03f      	b.n	8001024 <__aeabi_fmul+0xf0>
 8000fa4:	002b      	movs	r3, r5
 8000fa6:	33ff      	adds	r3, #255	; 0xff
 8000fa8:	2c00      	cmp	r4, #0
 8000faa:	d11e      	bne.n	8000fea <__aeabi_fmul+0xb6>
 8000fac:	2202      	movs	r2, #2
 8000fae:	4316      	orrs	r6, r2
 8000fb0:	4642      	mov	r2, r8
 8000fb2:	3501      	adds	r5, #1
 8000fb4:	407a      	eors	r2, r7
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	35ff      	adds	r5, #255	; 0xff
 8000fba:	2e0a      	cmp	r6, #10
 8000fbc:	dd00      	ble.n	8000fc0 <__aeabi_fmul+0x8c>
 8000fbe:	e0e4      	b.n	800118a <__aeabi_fmul+0x256>
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	2e02      	cmp	r6, #2
 8000fc4:	dc1c      	bgt.n	8001000 <__aeabi_fmul+0xcc>
 8000fc6:	3e01      	subs	r6, #1
 8000fc8:	2e01      	cmp	r6, #1
 8000fca:	d842      	bhi.n	8001052 <__aeabi_fmul+0x11e>
 8000fcc:	2802      	cmp	r0, #2
 8000fce:	d03d      	beq.n	800104c <__aeabi_fmul+0x118>
 8000fd0:	2801      	cmp	r0, #1
 8000fd2:	d166      	bne.n	80010a2 <__aeabi_fmul+0x16e>
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	05c0      	lsls	r0, r0, #23
 8000fda:	4308      	orrs	r0, r1
 8000fdc:	07d2      	lsls	r2, r2, #31
 8000fde:	4310      	orrs	r0, r2
 8000fe0:	bce0      	pop	{r5, r6, r7}
 8000fe2:	46ba      	mov	sl, r7
 8000fe4:	46b1      	mov	r9, r6
 8000fe6:	46a8      	mov	r8, r5
 8000fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fea:	2203      	movs	r2, #3
 8000fec:	4316      	orrs	r6, r2
 8000fee:	4642      	mov	r2, r8
 8000ff0:	3501      	adds	r5, #1
 8000ff2:	407a      	eors	r2, r7
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	35ff      	adds	r5, #255	; 0xff
 8000ff8:	2e0a      	cmp	r6, #10
 8000ffa:	dd00      	ble.n	8000ffe <__aeabi_fmul+0xca>
 8000ffc:	e0e4      	b.n	80011c8 <__aeabi_fmul+0x294>
 8000ffe:	2003      	movs	r0, #3
 8001000:	2101      	movs	r1, #1
 8001002:	40b1      	lsls	r1, r6
 8001004:	26a6      	movs	r6, #166	; 0xa6
 8001006:	00f6      	lsls	r6, r6, #3
 8001008:	4231      	tst	r1, r6
 800100a:	d10a      	bne.n	8001022 <__aeabi_fmul+0xee>
 800100c:	2690      	movs	r6, #144	; 0x90
 800100e:	00b6      	lsls	r6, r6, #2
 8001010:	4231      	tst	r1, r6
 8001012:	d116      	bne.n	8001042 <__aeabi_fmul+0x10e>
 8001014:	3eb9      	subs	r6, #185	; 0xb9
 8001016:	3eff      	subs	r6, #255	; 0xff
 8001018:	420e      	tst	r6, r1
 800101a:	d01a      	beq.n	8001052 <__aeabi_fmul+0x11e>
 800101c:	46a1      	mov	r9, r4
 800101e:	4682      	mov	sl, r0
 8001020:	e000      	b.n	8001024 <__aeabi_fmul+0xf0>
 8001022:	0017      	movs	r7, r2
 8001024:	4653      	mov	r3, sl
 8001026:	003a      	movs	r2, r7
 8001028:	2b02      	cmp	r3, #2
 800102a:	d00f      	beq.n	800104c <__aeabi_fmul+0x118>
 800102c:	464c      	mov	r4, r9
 800102e:	4650      	mov	r0, sl
 8001030:	2803      	cmp	r0, #3
 8001032:	d1cd      	bne.n	8000fd0 <__aeabi_fmul+0x9c>
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	03c9      	lsls	r1, r1, #15
 8001038:	4321      	orrs	r1, r4
 800103a:	0249      	lsls	r1, r1, #9
 800103c:	20ff      	movs	r0, #255	; 0xff
 800103e:	0a49      	lsrs	r1, r1, #9
 8001040:	e7ca      	b.n	8000fd8 <__aeabi_fmul+0xa4>
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	2200      	movs	r2, #0
 8001046:	20ff      	movs	r0, #255	; 0xff
 8001048:	03c9      	lsls	r1, r1, #15
 800104a:	e7c5      	b.n	8000fd8 <__aeabi_fmul+0xa4>
 800104c:	20ff      	movs	r0, #255	; 0xff
 800104e:	2100      	movs	r1, #0
 8001050:	e7c2      	b.n	8000fd8 <__aeabi_fmul+0xa4>
 8001052:	0c20      	lsrs	r0, r4, #16
 8001054:	4649      	mov	r1, r9
 8001056:	0424      	lsls	r4, r4, #16
 8001058:	0c24      	lsrs	r4, r4, #16
 800105a:	0027      	movs	r7, r4
 800105c:	0c0e      	lsrs	r6, r1, #16
 800105e:	0409      	lsls	r1, r1, #16
 8001060:	0c09      	lsrs	r1, r1, #16
 8001062:	4374      	muls	r4, r6
 8001064:	434f      	muls	r7, r1
 8001066:	4346      	muls	r6, r0
 8001068:	4348      	muls	r0, r1
 800106a:	0c39      	lsrs	r1, r7, #16
 800106c:	1900      	adds	r0, r0, r4
 800106e:	1809      	adds	r1, r1, r0
 8001070:	428c      	cmp	r4, r1
 8001072:	d903      	bls.n	800107c <__aeabi_fmul+0x148>
 8001074:	2080      	movs	r0, #128	; 0x80
 8001076:	0240      	lsls	r0, r0, #9
 8001078:	4684      	mov	ip, r0
 800107a:	4466      	add	r6, ip
 800107c:	043f      	lsls	r7, r7, #16
 800107e:	0408      	lsls	r0, r1, #16
 8001080:	0c3f      	lsrs	r7, r7, #16
 8001082:	19c0      	adds	r0, r0, r7
 8001084:	0184      	lsls	r4, r0, #6
 8001086:	1e67      	subs	r7, r4, #1
 8001088:	41bc      	sbcs	r4, r7
 800108a:	0c09      	lsrs	r1, r1, #16
 800108c:	0e80      	lsrs	r0, r0, #26
 800108e:	1989      	adds	r1, r1, r6
 8001090:	4304      	orrs	r4, r0
 8001092:	0189      	lsls	r1, r1, #6
 8001094:	430c      	orrs	r4, r1
 8001096:	0109      	lsls	r1, r1, #4
 8001098:	d571      	bpl.n	800117e <__aeabi_fmul+0x24a>
 800109a:	2301      	movs	r3, #1
 800109c:	0861      	lsrs	r1, r4, #1
 800109e:	401c      	ands	r4, r3
 80010a0:	430c      	orrs	r4, r1
 80010a2:	002b      	movs	r3, r5
 80010a4:	337f      	adds	r3, #127	; 0x7f
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	dd51      	ble.n	800114e <__aeabi_fmul+0x21a>
 80010aa:	0761      	lsls	r1, r4, #29
 80010ac:	d004      	beq.n	80010b8 <__aeabi_fmul+0x184>
 80010ae:	210f      	movs	r1, #15
 80010b0:	4021      	ands	r1, r4
 80010b2:	2904      	cmp	r1, #4
 80010b4:	d000      	beq.n	80010b8 <__aeabi_fmul+0x184>
 80010b6:	3404      	adds	r4, #4
 80010b8:	0121      	lsls	r1, r4, #4
 80010ba:	d503      	bpl.n	80010c4 <__aeabi_fmul+0x190>
 80010bc:	4b43      	ldr	r3, [pc, #268]	; (80011cc <__aeabi_fmul+0x298>)
 80010be:	401c      	ands	r4, r3
 80010c0:	002b      	movs	r3, r5
 80010c2:	3380      	adds	r3, #128	; 0x80
 80010c4:	2bfe      	cmp	r3, #254	; 0xfe
 80010c6:	dcc1      	bgt.n	800104c <__aeabi_fmul+0x118>
 80010c8:	01a1      	lsls	r1, r4, #6
 80010ca:	0a49      	lsrs	r1, r1, #9
 80010cc:	b2d8      	uxtb	r0, r3
 80010ce:	e783      	b.n	8000fd8 <__aeabi_fmul+0xa4>
 80010d0:	2c00      	cmp	r4, #0
 80010d2:	d12c      	bne.n	800112e <__aeabi_fmul+0x1fa>
 80010d4:	2301      	movs	r3, #1
 80010d6:	4642      	mov	r2, r8
 80010d8:	431e      	orrs	r6, r3
 80010da:	002b      	movs	r3, r5
 80010dc:	407a      	eors	r2, r7
 80010de:	2001      	movs	r0, #1
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	1c5d      	adds	r5, r3, #1
 80010e4:	2e0a      	cmp	r6, #10
 80010e6:	dd00      	ble.n	80010ea <__aeabi_fmul+0x1b6>
 80010e8:	e757      	b.n	8000f9a <__aeabi_fmul+0x66>
 80010ea:	e76a      	b.n	8000fc2 <__aeabi_fmul+0x8e>
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d110      	bne.n	8001112 <__aeabi_fmul+0x1de>
 80010f0:	2301      	movs	r3, #1
 80010f2:	2604      	movs	r6, #4
 80010f4:	2500      	movs	r5, #0
 80010f6:	469a      	mov	sl, r3
 80010f8:	e738      	b.n	8000f6c <__aeabi_fmul+0x38>
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d104      	bne.n	8001108 <__aeabi_fmul+0x1d4>
 80010fe:	2302      	movs	r3, #2
 8001100:	2608      	movs	r6, #8
 8001102:	25ff      	movs	r5, #255	; 0xff
 8001104:	469a      	mov	sl, r3
 8001106:	e731      	b.n	8000f6c <__aeabi_fmul+0x38>
 8001108:	2303      	movs	r3, #3
 800110a:	260c      	movs	r6, #12
 800110c:	25ff      	movs	r5, #255	; 0xff
 800110e:	469a      	mov	sl, r3
 8001110:	e72c      	b.n	8000f6c <__aeabi_fmul+0x38>
 8001112:	4648      	mov	r0, r9
 8001114:	f002 f9cc 	bl	80034b0 <__clzsi2>
 8001118:	464a      	mov	r2, r9
 800111a:	1f43      	subs	r3, r0, #5
 800111c:	2576      	movs	r5, #118	; 0x76
 800111e:	409a      	lsls	r2, r3
 8001120:	2300      	movs	r3, #0
 8001122:	426d      	negs	r5, r5
 8001124:	4691      	mov	r9, r2
 8001126:	2600      	movs	r6, #0
 8001128:	469a      	mov	sl, r3
 800112a:	1a2d      	subs	r5, r5, r0
 800112c:	e71e      	b.n	8000f6c <__aeabi_fmul+0x38>
 800112e:	0020      	movs	r0, r4
 8001130:	f002 f9be 	bl	80034b0 <__clzsi2>
 8001134:	4642      	mov	r2, r8
 8001136:	1f43      	subs	r3, r0, #5
 8001138:	409c      	lsls	r4, r3
 800113a:	1a2b      	subs	r3, r5, r0
 800113c:	3b76      	subs	r3, #118	; 0x76
 800113e:	407a      	eors	r2, r7
 8001140:	2000      	movs	r0, #0
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	1c5d      	adds	r5, r3, #1
 8001146:	2e0a      	cmp	r6, #10
 8001148:	dd00      	ble.n	800114c <__aeabi_fmul+0x218>
 800114a:	e726      	b.n	8000f9a <__aeabi_fmul+0x66>
 800114c:	e739      	b.n	8000fc2 <__aeabi_fmul+0x8e>
 800114e:	2101      	movs	r1, #1
 8001150:	1acb      	subs	r3, r1, r3
 8001152:	2b1b      	cmp	r3, #27
 8001154:	dd00      	ble.n	8001158 <__aeabi_fmul+0x224>
 8001156:	e73d      	b.n	8000fd4 <__aeabi_fmul+0xa0>
 8001158:	359e      	adds	r5, #158	; 0x9e
 800115a:	0021      	movs	r1, r4
 800115c:	40ac      	lsls	r4, r5
 800115e:	40d9      	lsrs	r1, r3
 8001160:	1e63      	subs	r3, r4, #1
 8001162:	419c      	sbcs	r4, r3
 8001164:	4321      	orrs	r1, r4
 8001166:	074b      	lsls	r3, r1, #29
 8001168:	d004      	beq.n	8001174 <__aeabi_fmul+0x240>
 800116a:	230f      	movs	r3, #15
 800116c:	400b      	ands	r3, r1
 800116e:	2b04      	cmp	r3, #4
 8001170:	d000      	beq.n	8001174 <__aeabi_fmul+0x240>
 8001172:	3104      	adds	r1, #4
 8001174:	014b      	lsls	r3, r1, #5
 8001176:	d504      	bpl.n	8001182 <__aeabi_fmul+0x24e>
 8001178:	2001      	movs	r0, #1
 800117a:	2100      	movs	r1, #0
 800117c:	e72c      	b.n	8000fd8 <__aeabi_fmul+0xa4>
 800117e:	001d      	movs	r5, r3
 8001180:	e78f      	b.n	80010a2 <__aeabi_fmul+0x16e>
 8001182:	0189      	lsls	r1, r1, #6
 8001184:	2000      	movs	r0, #0
 8001186:	0a49      	lsrs	r1, r1, #9
 8001188:	e726      	b.n	8000fd8 <__aeabi_fmul+0xa4>
 800118a:	2302      	movs	r3, #2
 800118c:	2e0f      	cmp	r6, #15
 800118e:	d10c      	bne.n	80011aa <__aeabi_fmul+0x276>
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	464b      	mov	r3, r9
 8001194:	03c9      	lsls	r1, r1, #15
 8001196:	420b      	tst	r3, r1
 8001198:	d00d      	beq.n	80011b6 <__aeabi_fmul+0x282>
 800119a:	420c      	tst	r4, r1
 800119c:	d10b      	bne.n	80011b6 <__aeabi_fmul+0x282>
 800119e:	4321      	orrs	r1, r4
 80011a0:	0249      	lsls	r1, r1, #9
 80011a2:	003a      	movs	r2, r7
 80011a4:	20ff      	movs	r0, #255	; 0xff
 80011a6:	0a49      	lsrs	r1, r1, #9
 80011a8:	e716      	b.n	8000fd8 <__aeabi_fmul+0xa4>
 80011aa:	2e0b      	cmp	r6, #11
 80011ac:	d000      	beq.n	80011b0 <__aeabi_fmul+0x27c>
 80011ae:	e6f7      	b.n	8000fa0 <__aeabi_fmul+0x6c>
 80011b0:	46a1      	mov	r9, r4
 80011b2:	469a      	mov	sl, r3
 80011b4:	e736      	b.n	8001024 <__aeabi_fmul+0xf0>
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	464b      	mov	r3, r9
 80011ba:	03c9      	lsls	r1, r1, #15
 80011bc:	4319      	orrs	r1, r3
 80011be:	0249      	lsls	r1, r1, #9
 80011c0:	4642      	mov	r2, r8
 80011c2:	20ff      	movs	r0, #255	; 0xff
 80011c4:	0a49      	lsrs	r1, r1, #9
 80011c6:	e707      	b.n	8000fd8 <__aeabi_fmul+0xa4>
 80011c8:	2303      	movs	r3, #3
 80011ca:	e7df      	b.n	800118c <__aeabi_fmul+0x258>
 80011cc:	f7ffffff 	.word	0xf7ffffff

080011d0 <__aeabi_fsub>:
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	46c6      	mov	lr, r8
 80011d4:	0243      	lsls	r3, r0, #9
 80011d6:	0a5b      	lsrs	r3, r3, #9
 80011d8:	0045      	lsls	r5, r0, #1
 80011da:	00da      	lsls	r2, r3, #3
 80011dc:	0fc4      	lsrs	r4, r0, #31
 80011de:	0248      	lsls	r0, r1, #9
 80011e0:	004f      	lsls	r7, r1, #1
 80011e2:	4694      	mov	ip, r2
 80011e4:	0a42      	lsrs	r2, r0, #9
 80011e6:	001e      	movs	r6, r3
 80011e8:	4690      	mov	r8, r2
 80011ea:	b500      	push	{lr}
 80011ec:	0e2d      	lsrs	r5, r5, #24
 80011ee:	0e3f      	lsrs	r7, r7, #24
 80011f0:	0fc9      	lsrs	r1, r1, #31
 80011f2:	0980      	lsrs	r0, r0, #6
 80011f4:	2fff      	cmp	r7, #255	; 0xff
 80011f6:	d059      	beq.n	80012ac <__aeabi_fsub+0xdc>
 80011f8:	2201      	movs	r2, #1
 80011fa:	4051      	eors	r1, r2
 80011fc:	428c      	cmp	r4, r1
 80011fe:	d039      	beq.n	8001274 <__aeabi_fsub+0xa4>
 8001200:	1bea      	subs	r2, r5, r7
 8001202:	2a00      	cmp	r2, #0
 8001204:	dd58      	ble.n	80012b8 <__aeabi_fsub+0xe8>
 8001206:	2f00      	cmp	r7, #0
 8001208:	d068      	beq.n	80012dc <__aeabi_fsub+0x10c>
 800120a:	2dff      	cmp	r5, #255	; 0xff
 800120c:	d100      	bne.n	8001210 <__aeabi_fsub+0x40>
 800120e:	e0d1      	b.n	80013b4 <__aeabi_fsub+0x1e4>
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	04db      	lsls	r3, r3, #19
 8001214:	4318      	orrs	r0, r3
 8001216:	2a1b      	cmp	r2, #27
 8001218:	dc00      	bgt.n	800121c <__aeabi_fsub+0x4c>
 800121a:	e0e3      	b.n	80013e4 <__aeabi_fsub+0x214>
 800121c:	2301      	movs	r3, #1
 800121e:	4662      	mov	r2, ip
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	015a      	lsls	r2, r3, #5
 8001224:	d400      	bmi.n	8001228 <__aeabi_fsub+0x58>
 8001226:	e0ac      	b.n	8001382 <__aeabi_fsub+0x1b2>
 8001228:	019b      	lsls	r3, r3, #6
 800122a:	099e      	lsrs	r6, r3, #6
 800122c:	0030      	movs	r0, r6
 800122e:	f002 f93f 	bl	80034b0 <__clzsi2>
 8001232:	0033      	movs	r3, r6
 8001234:	3805      	subs	r0, #5
 8001236:	4083      	lsls	r3, r0
 8001238:	4285      	cmp	r5, r0
 800123a:	dc00      	bgt.n	800123e <__aeabi_fsub+0x6e>
 800123c:	e0c6      	b.n	80013cc <__aeabi_fsub+0x1fc>
 800123e:	4ab2      	ldr	r2, [pc, #712]	; (8001508 <__aeabi_fsub+0x338>)
 8001240:	1a2d      	subs	r5, r5, r0
 8001242:	4013      	ands	r3, r2
 8001244:	075a      	lsls	r2, r3, #29
 8001246:	d004      	beq.n	8001252 <__aeabi_fsub+0x82>
 8001248:	220f      	movs	r2, #15
 800124a:	401a      	ands	r2, r3
 800124c:	2a04      	cmp	r2, #4
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x82>
 8001250:	3304      	adds	r3, #4
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	d400      	bmi.n	8001258 <__aeabi_fsub+0x88>
 8001256:	e097      	b.n	8001388 <__aeabi_fsub+0x1b8>
 8001258:	1c6a      	adds	r2, r5, #1
 800125a:	2dfe      	cmp	r5, #254	; 0xfe
 800125c:	d100      	bne.n	8001260 <__aeabi_fsub+0x90>
 800125e:	e084      	b.n	800136a <__aeabi_fsub+0x19a>
 8001260:	019b      	lsls	r3, r3, #6
 8001262:	0a5e      	lsrs	r6, r3, #9
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	05d0      	lsls	r0, r2, #23
 8001268:	4330      	orrs	r0, r6
 800126a:	07e4      	lsls	r4, r4, #31
 800126c:	4320      	orrs	r0, r4
 800126e:	bc80      	pop	{r7}
 8001270:	46b8      	mov	r8, r7
 8001272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001274:	1bea      	subs	r2, r5, r7
 8001276:	2a00      	cmp	r2, #0
 8001278:	dd41      	ble.n	80012fe <__aeabi_fsub+0x12e>
 800127a:	2f00      	cmp	r7, #0
 800127c:	d06b      	beq.n	8001356 <__aeabi_fsub+0x186>
 800127e:	2dff      	cmp	r5, #255	; 0xff
 8001280:	d100      	bne.n	8001284 <__aeabi_fsub+0xb4>
 8001282:	e097      	b.n	80013b4 <__aeabi_fsub+0x1e4>
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	04db      	lsls	r3, r3, #19
 8001288:	4318      	orrs	r0, r3
 800128a:	2a1b      	cmp	r2, #27
 800128c:	dc00      	bgt.n	8001290 <__aeabi_fsub+0xc0>
 800128e:	e0cc      	b.n	800142a <__aeabi_fsub+0x25a>
 8001290:	2301      	movs	r3, #1
 8001292:	4463      	add	r3, ip
 8001294:	015a      	lsls	r2, r3, #5
 8001296:	d574      	bpl.n	8001382 <__aeabi_fsub+0x1b2>
 8001298:	3501      	adds	r5, #1
 800129a:	2dff      	cmp	r5, #255	; 0xff
 800129c:	d065      	beq.n	800136a <__aeabi_fsub+0x19a>
 800129e:	2201      	movs	r2, #1
 80012a0:	499a      	ldr	r1, [pc, #616]	; (800150c <__aeabi_fsub+0x33c>)
 80012a2:	401a      	ands	r2, r3
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	400b      	ands	r3, r1
 80012a8:	4313      	orrs	r3, r2
 80012aa:	e7cb      	b.n	8001244 <__aeabi_fsub+0x74>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d01f      	beq.n	80012f0 <__aeabi_fsub+0x120>
 80012b0:	428c      	cmp	r4, r1
 80012b2:	d022      	beq.n	80012fa <__aeabi_fsub+0x12a>
 80012b4:	002a      	movs	r2, r5
 80012b6:	3aff      	subs	r2, #255	; 0xff
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d035      	beq.n	8001328 <__aeabi_fsub+0x158>
 80012bc:	1b7a      	subs	r2, r7, r5
 80012be:	2d00      	cmp	r5, #0
 80012c0:	d000      	beq.n	80012c4 <__aeabi_fsub+0xf4>
 80012c2:	e099      	b.n	80013f8 <__aeabi_fsub+0x228>
 80012c4:	4663      	mov	r3, ip
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d100      	bne.n	80012cc <__aeabi_fsub+0xfc>
 80012ca:	e0dd      	b.n	8001488 <__aeabi_fsub+0x2b8>
 80012cc:	1e53      	subs	r3, r2, #1
 80012ce:	2a01      	cmp	r2, #1
 80012d0:	d100      	bne.n	80012d4 <__aeabi_fsub+0x104>
 80012d2:	e105      	b.n	80014e0 <__aeabi_fsub+0x310>
 80012d4:	2aff      	cmp	r2, #255	; 0xff
 80012d6:	d06b      	beq.n	80013b0 <__aeabi_fsub+0x1e0>
 80012d8:	001a      	movs	r2, r3
 80012da:	e094      	b.n	8001406 <__aeabi_fsub+0x236>
 80012dc:	2800      	cmp	r0, #0
 80012de:	d073      	beq.n	80013c8 <__aeabi_fsub+0x1f8>
 80012e0:	1e51      	subs	r1, r2, #1
 80012e2:	2a01      	cmp	r2, #1
 80012e4:	d100      	bne.n	80012e8 <__aeabi_fsub+0x118>
 80012e6:	e0df      	b.n	80014a8 <__aeabi_fsub+0x2d8>
 80012e8:	2aff      	cmp	r2, #255	; 0xff
 80012ea:	d063      	beq.n	80013b4 <__aeabi_fsub+0x1e4>
 80012ec:	000a      	movs	r2, r1
 80012ee:	e792      	b.n	8001216 <__aeabi_fsub+0x46>
 80012f0:	2201      	movs	r2, #1
 80012f2:	4051      	eors	r1, r2
 80012f4:	42a1      	cmp	r1, r4
 80012f6:	d000      	beq.n	80012fa <__aeabi_fsub+0x12a>
 80012f8:	e782      	b.n	8001200 <__aeabi_fsub+0x30>
 80012fa:	002a      	movs	r2, r5
 80012fc:	3aff      	subs	r2, #255	; 0xff
 80012fe:	2a00      	cmp	r2, #0
 8001300:	d036      	beq.n	8001370 <__aeabi_fsub+0x1a0>
 8001302:	1b7a      	subs	r2, r7, r5
 8001304:	2d00      	cmp	r5, #0
 8001306:	d100      	bne.n	800130a <__aeabi_fsub+0x13a>
 8001308:	e0aa      	b.n	8001460 <__aeabi_fsub+0x290>
 800130a:	2fff      	cmp	r7, #255	; 0xff
 800130c:	d100      	bne.n	8001310 <__aeabi_fsub+0x140>
 800130e:	e0da      	b.n	80014c6 <__aeabi_fsub+0x2f6>
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	4661      	mov	r1, ip
 8001314:	04db      	lsls	r3, r3, #19
 8001316:	4319      	orrs	r1, r3
 8001318:	468c      	mov	ip, r1
 800131a:	2a1b      	cmp	r2, #27
 800131c:	dc00      	bgt.n	8001320 <__aeabi_fsub+0x150>
 800131e:	e0d4      	b.n	80014ca <__aeabi_fsub+0x2fa>
 8001320:	2301      	movs	r3, #1
 8001322:	003d      	movs	r5, r7
 8001324:	181b      	adds	r3, r3, r0
 8001326:	e7b5      	b.n	8001294 <__aeabi_fsub+0xc4>
 8001328:	27fe      	movs	r7, #254	; 0xfe
 800132a:	1c6a      	adds	r2, r5, #1
 800132c:	4217      	tst	r7, r2
 800132e:	d171      	bne.n	8001414 <__aeabi_fsub+0x244>
 8001330:	2d00      	cmp	r5, #0
 8001332:	d000      	beq.n	8001336 <__aeabi_fsub+0x166>
 8001334:	e09e      	b.n	8001474 <__aeabi_fsub+0x2a4>
 8001336:	4663      	mov	r3, ip
 8001338:	2b00      	cmp	r3, #0
 800133a:	d100      	bne.n	800133e <__aeabi_fsub+0x16e>
 800133c:	e0d5      	b.n	80014ea <__aeabi_fsub+0x31a>
 800133e:	2200      	movs	r2, #0
 8001340:	2800      	cmp	r0, #0
 8001342:	d100      	bne.n	8001346 <__aeabi_fsub+0x176>
 8001344:	e78f      	b.n	8001266 <__aeabi_fsub+0x96>
 8001346:	1a1b      	subs	r3, r3, r0
 8001348:	015e      	lsls	r6, r3, #5
 800134a:	d400      	bmi.n	800134e <__aeabi_fsub+0x17e>
 800134c:	e0d6      	b.n	80014fc <__aeabi_fsub+0x32c>
 800134e:	4663      	mov	r3, ip
 8001350:	000c      	movs	r4, r1
 8001352:	1ac3      	subs	r3, r0, r3
 8001354:	e776      	b.n	8001244 <__aeabi_fsub+0x74>
 8001356:	2800      	cmp	r0, #0
 8001358:	d036      	beq.n	80013c8 <__aeabi_fsub+0x1f8>
 800135a:	1e51      	subs	r1, r2, #1
 800135c:	2a01      	cmp	r2, #1
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x192>
 8001360:	e09a      	b.n	8001498 <__aeabi_fsub+0x2c8>
 8001362:	2aff      	cmp	r2, #255	; 0xff
 8001364:	d026      	beq.n	80013b4 <__aeabi_fsub+0x1e4>
 8001366:	000a      	movs	r2, r1
 8001368:	e78f      	b.n	800128a <__aeabi_fsub+0xba>
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	2600      	movs	r6, #0
 800136e:	e77a      	b.n	8001266 <__aeabi_fsub+0x96>
 8001370:	27fe      	movs	r7, #254	; 0xfe
 8001372:	1c6a      	adds	r2, r5, #1
 8001374:	4217      	tst	r7, r2
 8001376:	d062      	beq.n	800143e <__aeabi_fsub+0x26e>
 8001378:	2aff      	cmp	r2, #255	; 0xff
 800137a:	d0f6      	beq.n	800136a <__aeabi_fsub+0x19a>
 800137c:	0015      	movs	r5, r2
 800137e:	4460      	add	r0, ip
 8001380:	0843      	lsrs	r3, r0, #1
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d000      	beq.n	8001388 <__aeabi_fsub+0x1b8>
 8001386:	e75f      	b.n	8001248 <__aeabi_fsub+0x78>
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	2dff      	cmp	r5, #255	; 0xff
 800138c:	d012      	beq.n	80013b4 <__aeabi_fsub+0x1e4>
 800138e:	025b      	lsls	r3, r3, #9
 8001390:	0a5e      	lsrs	r6, r3, #9
 8001392:	b2ea      	uxtb	r2, r5
 8001394:	e767      	b.n	8001266 <__aeabi_fsub+0x96>
 8001396:	4662      	mov	r2, ip
 8001398:	2a00      	cmp	r2, #0
 800139a:	d100      	bne.n	800139e <__aeabi_fsub+0x1ce>
 800139c:	e093      	b.n	80014c6 <__aeabi_fsub+0x2f6>
 800139e:	2800      	cmp	r0, #0
 80013a0:	d008      	beq.n	80013b4 <__aeabi_fsub+0x1e4>
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	03d2      	lsls	r2, r2, #15
 80013a6:	4213      	tst	r3, r2
 80013a8:	d004      	beq.n	80013b4 <__aeabi_fsub+0x1e4>
 80013aa:	4640      	mov	r0, r8
 80013ac:	4210      	tst	r0, r2
 80013ae:	d101      	bne.n	80013b4 <__aeabi_fsub+0x1e4>
 80013b0:	000c      	movs	r4, r1
 80013b2:	4643      	mov	r3, r8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0d8      	beq.n	800136a <__aeabi_fsub+0x19a>
 80013b8:	2680      	movs	r6, #128	; 0x80
 80013ba:	03f6      	lsls	r6, r6, #15
 80013bc:	431e      	orrs	r6, r3
 80013be:	0276      	lsls	r6, r6, #9
 80013c0:	22ff      	movs	r2, #255	; 0xff
 80013c2:	0a76      	lsrs	r6, r6, #9
 80013c4:	e74f      	b.n	8001266 <__aeabi_fsub+0x96>
 80013c6:	4643      	mov	r3, r8
 80013c8:	0015      	movs	r5, r2
 80013ca:	e7de      	b.n	800138a <__aeabi_fsub+0x1ba>
 80013cc:	2220      	movs	r2, #32
 80013ce:	1b40      	subs	r0, r0, r5
 80013d0:	3001      	adds	r0, #1
 80013d2:	1a12      	subs	r2, r2, r0
 80013d4:	0019      	movs	r1, r3
 80013d6:	4093      	lsls	r3, r2
 80013d8:	40c1      	lsrs	r1, r0
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	4193      	sbcs	r3, r2
 80013de:	2500      	movs	r5, #0
 80013e0:	430b      	orrs	r3, r1
 80013e2:	e72f      	b.n	8001244 <__aeabi_fsub+0x74>
 80013e4:	2320      	movs	r3, #32
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	0001      	movs	r1, r0
 80013ea:	4098      	lsls	r0, r3
 80013ec:	0003      	movs	r3, r0
 80013ee:	40d1      	lsrs	r1, r2
 80013f0:	1e5a      	subs	r2, r3, #1
 80013f2:	4193      	sbcs	r3, r2
 80013f4:	430b      	orrs	r3, r1
 80013f6:	e712      	b.n	800121e <__aeabi_fsub+0x4e>
 80013f8:	2fff      	cmp	r7, #255	; 0xff
 80013fa:	d0d9      	beq.n	80013b0 <__aeabi_fsub+0x1e0>
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	4664      	mov	r4, ip
 8001400:	04db      	lsls	r3, r3, #19
 8001402:	431c      	orrs	r4, r3
 8001404:	46a4      	mov	ip, r4
 8001406:	2a1b      	cmp	r2, #27
 8001408:	dd52      	ble.n	80014b0 <__aeabi_fsub+0x2e0>
 800140a:	2301      	movs	r3, #1
 800140c:	000c      	movs	r4, r1
 800140e:	003d      	movs	r5, r7
 8001410:	1ac3      	subs	r3, r0, r3
 8001412:	e706      	b.n	8001222 <__aeabi_fsub+0x52>
 8001414:	4663      	mov	r3, ip
 8001416:	1a1e      	subs	r6, r3, r0
 8001418:	0173      	lsls	r3, r6, #5
 800141a:	d439      	bmi.n	8001490 <__aeabi_fsub+0x2c0>
 800141c:	2e00      	cmp	r6, #0
 800141e:	d000      	beq.n	8001422 <__aeabi_fsub+0x252>
 8001420:	e704      	b.n	800122c <__aeabi_fsub+0x5c>
 8001422:	2400      	movs	r4, #0
 8001424:	2200      	movs	r2, #0
 8001426:	2600      	movs	r6, #0
 8001428:	e71d      	b.n	8001266 <__aeabi_fsub+0x96>
 800142a:	2320      	movs	r3, #32
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	0001      	movs	r1, r0
 8001430:	4098      	lsls	r0, r3
 8001432:	0003      	movs	r3, r0
 8001434:	40d1      	lsrs	r1, r2
 8001436:	1e5a      	subs	r2, r3, #1
 8001438:	4193      	sbcs	r3, r2
 800143a:	430b      	orrs	r3, r1
 800143c:	e729      	b.n	8001292 <__aeabi_fsub+0xc2>
 800143e:	2d00      	cmp	r5, #0
 8001440:	d1a9      	bne.n	8001396 <__aeabi_fsub+0x1c6>
 8001442:	4663      	mov	r3, ip
 8001444:	2b00      	cmp	r3, #0
 8001446:	d056      	beq.n	80014f6 <__aeabi_fsub+0x326>
 8001448:	2200      	movs	r2, #0
 800144a:	2800      	cmp	r0, #0
 800144c:	d100      	bne.n	8001450 <__aeabi_fsub+0x280>
 800144e:	e70a      	b.n	8001266 <__aeabi_fsub+0x96>
 8001450:	0003      	movs	r3, r0
 8001452:	4463      	add	r3, ip
 8001454:	015a      	lsls	r2, r3, #5
 8001456:	d594      	bpl.n	8001382 <__aeabi_fsub+0x1b2>
 8001458:	4a2b      	ldr	r2, [pc, #172]	; (8001508 <__aeabi_fsub+0x338>)
 800145a:	3501      	adds	r5, #1
 800145c:	4013      	ands	r3, r2
 800145e:	e790      	b.n	8001382 <__aeabi_fsub+0x1b2>
 8001460:	4663      	mov	r3, ip
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0af      	beq.n	80013c6 <__aeabi_fsub+0x1f6>
 8001466:	1e53      	subs	r3, r2, #1
 8001468:	2a01      	cmp	r2, #1
 800146a:	d015      	beq.n	8001498 <__aeabi_fsub+0x2c8>
 800146c:	2aff      	cmp	r2, #255	; 0xff
 800146e:	d02a      	beq.n	80014c6 <__aeabi_fsub+0x2f6>
 8001470:	001a      	movs	r2, r3
 8001472:	e752      	b.n	800131a <__aeabi_fsub+0x14a>
 8001474:	4662      	mov	r2, ip
 8001476:	2a00      	cmp	r2, #0
 8001478:	d191      	bne.n	800139e <__aeabi_fsub+0x1ce>
 800147a:	2800      	cmp	r0, #0
 800147c:	d198      	bne.n	80013b0 <__aeabi_fsub+0x1e0>
 800147e:	2680      	movs	r6, #128	; 0x80
 8001480:	2400      	movs	r4, #0
 8001482:	22ff      	movs	r2, #255	; 0xff
 8001484:	03f6      	lsls	r6, r6, #15
 8001486:	e6ee      	b.n	8001266 <__aeabi_fsub+0x96>
 8001488:	000c      	movs	r4, r1
 800148a:	4643      	mov	r3, r8
 800148c:	0015      	movs	r5, r2
 800148e:	e77c      	b.n	800138a <__aeabi_fsub+0x1ba>
 8001490:	4663      	mov	r3, ip
 8001492:	000c      	movs	r4, r1
 8001494:	1ac6      	subs	r6, r0, r3
 8001496:	e6c9      	b.n	800122c <__aeabi_fsub+0x5c>
 8001498:	0003      	movs	r3, r0
 800149a:	4463      	add	r3, ip
 800149c:	2501      	movs	r5, #1
 800149e:	015a      	lsls	r2, r3, #5
 80014a0:	d400      	bmi.n	80014a4 <__aeabi_fsub+0x2d4>
 80014a2:	e76e      	b.n	8001382 <__aeabi_fsub+0x1b2>
 80014a4:	2502      	movs	r5, #2
 80014a6:	e6fa      	b.n	800129e <__aeabi_fsub+0xce>
 80014a8:	4663      	mov	r3, ip
 80014aa:	2501      	movs	r5, #1
 80014ac:	1a1b      	subs	r3, r3, r0
 80014ae:	e6b8      	b.n	8001222 <__aeabi_fsub+0x52>
 80014b0:	4664      	mov	r4, ip
 80014b2:	2320      	movs	r3, #32
 80014b4:	40d4      	lsrs	r4, r2
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	4662      	mov	r2, ip
 80014ba:	409a      	lsls	r2, r3
 80014bc:	0013      	movs	r3, r2
 80014be:	1e5a      	subs	r2, r3, #1
 80014c0:	4193      	sbcs	r3, r2
 80014c2:	4323      	orrs	r3, r4
 80014c4:	e7a2      	b.n	800140c <__aeabi_fsub+0x23c>
 80014c6:	4643      	mov	r3, r8
 80014c8:	e774      	b.n	80013b4 <__aeabi_fsub+0x1e4>
 80014ca:	4661      	mov	r1, ip
 80014cc:	2320      	movs	r3, #32
 80014ce:	40d1      	lsrs	r1, r2
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	4662      	mov	r2, ip
 80014d4:	409a      	lsls	r2, r3
 80014d6:	0013      	movs	r3, r2
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	4193      	sbcs	r3, r2
 80014dc:	430b      	orrs	r3, r1
 80014de:	e720      	b.n	8001322 <__aeabi_fsub+0x152>
 80014e0:	4663      	mov	r3, ip
 80014e2:	000c      	movs	r4, r1
 80014e4:	2501      	movs	r5, #1
 80014e6:	1ac3      	subs	r3, r0, r3
 80014e8:	e69b      	b.n	8001222 <__aeabi_fsub+0x52>
 80014ea:	2800      	cmp	r0, #0
 80014ec:	d099      	beq.n	8001422 <__aeabi_fsub+0x252>
 80014ee:	000c      	movs	r4, r1
 80014f0:	4646      	mov	r6, r8
 80014f2:	2200      	movs	r2, #0
 80014f4:	e6b7      	b.n	8001266 <__aeabi_fsub+0x96>
 80014f6:	4646      	mov	r6, r8
 80014f8:	2200      	movs	r2, #0
 80014fa:	e6b4      	b.n	8001266 <__aeabi_fsub+0x96>
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d000      	beq.n	8001502 <__aeabi_fsub+0x332>
 8001500:	e73f      	b.n	8001382 <__aeabi_fsub+0x1b2>
 8001502:	2400      	movs	r4, #0
 8001504:	2600      	movs	r6, #0
 8001506:	e6ae      	b.n	8001266 <__aeabi_fsub+0x96>
 8001508:	fbffffff 	.word	0xfbffffff
 800150c:	7dffffff 	.word	0x7dffffff

08001510 <__aeabi_f2iz>:
 8001510:	0241      	lsls	r1, r0, #9
 8001512:	0042      	lsls	r2, r0, #1
 8001514:	0fc3      	lsrs	r3, r0, #31
 8001516:	0a49      	lsrs	r1, r1, #9
 8001518:	2000      	movs	r0, #0
 800151a:	0e12      	lsrs	r2, r2, #24
 800151c:	2a7e      	cmp	r2, #126	; 0x7e
 800151e:	dd03      	ble.n	8001528 <__aeabi_f2iz+0x18>
 8001520:	2a9d      	cmp	r2, #157	; 0x9d
 8001522:	dd02      	ble.n	800152a <__aeabi_f2iz+0x1a>
 8001524:	4a09      	ldr	r2, [pc, #36]	; (800154c <__aeabi_f2iz+0x3c>)
 8001526:	1898      	adds	r0, r3, r2
 8001528:	4770      	bx	lr
 800152a:	2080      	movs	r0, #128	; 0x80
 800152c:	0400      	lsls	r0, r0, #16
 800152e:	4301      	orrs	r1, r0
 8001530:	2a95      	cmp	r2, #149	; 0x95
 8001532:	dc07      	bgt.n	8001544 <__aeabi_f2iz+0x34>
 8001534:	2096      	movs	r0, #150	; 0x96
 8001536:	1a82      	subs	r2, r0, r2
 8001538:	40d1      	lsrs	r1, r2
 800153a:	4248      	negs	r0, r1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f3      	bne.n	8001528 <__aeabi_f2iz+0x18>
 8001540:	0008      	movs	r0, r1
 8001542:	e7f1      	b.n	8001528 <__aeabi_f2iz+0x18>
 8001544:	3a96      	subs	r2, #150	; 0x96
 8001546:	4091      	lsls	r1, r2
 8001548:	e7f7      	b.n	800153a <__aeabi_f2iz+0x2a>
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	7fffffff 	.word	0x7fffffff

08001550 <__aeabi_i2f>:
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	2800      	cmp	r0, #0
 8001554:	d013      	beq.n	800157e <__aeabi_i2f+0x2e>
 8001556:	17c3      	asrs	r3, r0, #31
 8001558:	18c5      	adds	r5, r0, r3
 800155a:	405d      	eors	r5, r3
 800155c:	0fc4      	lsrs	r4, r0, #31
 800155e:	0028      	movs	r0, r5
 8001560:	f001 ffa6 	bl	80034b0 <__clzsi2>
 8001564:	239e      	movs	r3, #158	; 0x9e
 8001566:	0001      	movs	r1, r0
 8001568:	1a1b      	subs	r3, r3, r0
 800156a:	2b96      	cmp	r3, #150	; 0x96
 800156c:	dc0f      	bgt.n	800158e <__aeabi_i2f+0x3e>
 800156e:	2808      	cmp	r0, #8
 8001570:	d031      	beq.n	80015d6 <__aeabi_i2f+0x86>
 8001572:	3908      	subs	r1, #8
 8001574:	408d      	lsls	r5, r1
 8001576:	026d      	lsls	r5, r5, #9
 8001578:	0a6d      	lsrs	r5, r5, #9
 800157a:	b2d8      	uxtb	r0, r3
 800157c:	e002      	b.n	8001584 <__aeabi_i2f+0x34>
 800157e:	2400      	movs	r4, #0
 8001580:	2000      	movs	r0, #0
 8001582:	2500      	movs	r5, #0
 8001584:	05c0      	lsls	r0, r0, #23
 8001586:	4328      	orrs	r0, r5
 8001588:	07e4      	lsls	r4, r4, #31
 800158a:	4320      	orrs	r0, r4
 800158c:	bd70      	pop	{r4, r5, r6, pc}
 800158e:	2b99      	cmp	r3, #153	; 0x99
 8001590:	dd0c      	ble.n	80015ac <__aeabi_i2f+0x5c>
 8001592:	2205      	movs	r2, #5
 8001594:	1a12      	subs	r2, r2, r0
 8001596:	0028      	movs	r0, r5
 8001598:	40d0      	lsrs	r0, r2
 800159a:	0002      	movs	r2, r0
 800159c:	0008      	movs	r0, r1
 800159e:	301b      	adds	r0, #27
 80015a0:	4085      	lsls	r5, r0
 80015a2:	0028      	movs	r0, r5
 80015a4:	1e45      	subs	r5, r0, #1
 80015a6:	41a8      	sbcs	r0, r5
 80015a8:	4302      	orrs	r2, r0
 80015aa:	0015      	movs	r5, r2
 80015ac:	2905      	cmp	r1, #5
 80015ae:	dc16      	bgt.n	80015de <__aeabi_i2f+0x8e>
 80015b0:	002a      	movs	r2, r5
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <__aeabi_i2f+0xa0>)
 80015b4:	4002      	ands	r2, r0
 80015b6:	076e      	lsls	r6, r5, #29
 80015b8:	d009      	beq.n	80015ce <__aeabi_i2f+0x7e>
 80015ba:	260f      	movs	r6, #15
 80015bc:	4035      	ands	r5, r6
 80015be:	2d04      	cmp	r5, #4
 80015c0:	d005      	beq.n	80015ce <__aeabi_i2f+0x7e>
 80015c2:	3204      	adds	r2, #4
 80015c4:	0155      	lsls	r5, r2, #5
 80015c6:	d502      	bpl.n	80015ce <__aeabi_i2f+0x7e>
 80015c8:	239f      	movs	r3, #159	; 0x9f
 80015ca:	4002      	ands	r2, r0
 80015cc:	1a5b      	subs	r3, r3, r1
 80015ce:	0192      	lsls	r2, r2, #6
 80015d0:	0a55      	lsrs	r5, r2, #9
 80015d2:	b2d8      	uxtb	r0, r3
 80015d4:	e7d6      	b.n	8001584 <__aeabi_i2f+0x34>
 80015d6:	026d      	lsls	r5, r5, #9
 80015d8:	2096      	movs	r0, #150	; 0x96
 80015da:	0a6d      	lsrs	r5, r5, #9
 80015dc:	e7d2      	b.n	8001584 <__aeabi_i2f+0x34>
 80015de:	1f4a      	subs	r2, r1, #5
 80015e0:	4095      	lsls	r5, r2
 80015e2:	002a      	movs	r2, r5
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <__aeabi_i2f+0xa0>)
 80015e6:	4002      	ands	r2, r0
 80015e8:	076e      	lsls	r6, r5, #29
 80015ea:	d0f0      	beq.n	80015ce <__aeabi_i2f+0x7e>
 80015ec:	e7e5      	b.n	80015ba <__aeabi_i2f+0x6a>
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	fbffffff 	.word	0xfbffffff

080015f4 <__aeabi_ui2f>:
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	1e04      	subs	r4, r0, #0
 80015f8:	d00e      	beq.n	8001618 <__aeabi_ui2f+0x24>
 80015fa:	f001 ff59 	bl	80034b0 <__clzsi2>
 80015fe:	239e      	movs	r3, #158	; 0x9e
 8001600:	0001      	movs	r1, r0
 8001602:	1a1b      	subs	r3, r3, r0
 8001604:	2b96      	cmp	r3, #150	; 0x96
 8001606:	dc0c      	bgt.n	8001622 <__aeabi_ui2f+0x2e>
 8001608:	2808      	cmp	r0, #8
 800160a:	d02c      	beq.n	8001666 <__aeabi_ui2f+0x72>
 800160c:	3908      	subs	r1, #8
 800160e:	408c      	lsls	r4, r1
 8001610:	0264      	lsls	r4, r4, #9
 8001612:	0a64      	lsrs	r4, r4, #9
 8001614:	b2d8      	uxtb	r0, r3
 8001616:	e001      	b.n	800161c <__aeabi_ui2f+0x28>
 8001618:	2000      	movs	r0, #0
 800161a:	2400      	movs	r4, #0
 800161c:	05c0      	lsls	r0, r0, #23
 800161e:	4320      	orrs	r0, r4
 8001620:	bd70      	pop	{r4, r5, r6, pc}
 8001622:	2b99      	cmp	r3, #153	; 0x99
 8001624:	dd0a      	ble.n	800163c <__aeabi_ui2f+0x48>
 8001626:	0002      	movs	r2, r0
 8001628:	0020      	movs	r0, r4
 800162a:	321b      	adds	r2, #27
 800162c:	4090      	lsls	r0, r2
 800162e:	0002      	movs	r2, r0
 8001630:	1e50      	subs	r0, r2, #1
 8001632:	4182      	sbcs	r2, r0
 8001634:	2005      	movs	r0, #5
 8001636:	1a40      	subs	r0, r0, r1
 8001638:	40c4      	lsrs	r4, r0
 800163a:	4314      	orrs	r4, r2
 800163c:	2905      	cmp	r1, #5
 800163e:	dc16      	bgt.n	800166e <__aeabi_ui2f+0x7a>
 8001640:	0022      	movs	r2, r4
 8001642:	480f      	ldr	r0, [pc, #60]	; (8001680 <__aeabi_ui2f+0x8c>)
 8001644:	4002      	ands	r2, r0
 8001646:	0765      	lsls	r5, r4, #29
 8001648:	d009      	beq.n	800165e <__aeabi_ui2f+0x6a>
 800164a:	250f      	movs	r5, #15
 800164c:	402c      	ands	r4, r5
 800164e:	2c04      	cmp	r4, #4
 8001650:	d005      	beq.n	800165e <__aeabi_ui2f+0x6a>
 8001652:	3204      	adds	r2, #4
 8001654:	0154      	lsls	r4, r2, #5
 8001656:	d502      	bpl.n	800165e <__aeabi_ui2f+0x6a>
 8001658:	239f      	movs	r3, #159	; 0x9f
 800165a:	4002      	ands	r2, r0
 800165c:	1a5b      	subs	r3, r3, r1
 800165e:	0192      	lsls	r2, r2, #6
 8001660:	0a54      	lsrs	r4, r2, #9
 8001662:	b2d8      	uxtb	r0, r3
 8001664:	e7da      	b.n	800161c <__aeabi_ui2f+0x28>
 8001666:	0264      	lsls	r4, r4, #9
 8001668:	2096      	movs	r0, #150	; 0x96
 800166a:	0a64      	lsrs	r4, r4, #9
 800166c:	e7d6      	b.n	800161c <__aeabi_ui2f+0x28>
 800166e:	1f4a      	subs	r2, r1, #5
 8001670:	4094      	lsls	r4, r2
 8001672:	0022      	movs	r2, r4
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <__aeabi_ui2f+0x8c>)
 8001676:	4002      	ands	r2, r0
 8001678:	0765      	lsls	r5, r4, #29
 800167a:	d0f0      	beq.n	800165e <__aeabi_ui2f+0x6a>
 800167c:	e7e5      	b.n	800164a <__aeabi_ui2f+0x56>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	fbffffff 	.word	0xfbffffff

08001684 <__aeabi_dadd>:
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	464f      	mov	r7, r9
 8001688:	4646      	mov	r6, r8
 800168a:	46d6      	mov	lr, sl
 800168c:	0004      	movs	r4, r0
 800168e:	b5c0      	push	{r6, r7, lr}
 8001690:	001f      	movs	r7, r3
 8001692:	030b      	lsls	r3, r1, #12
 8001694:	0010      	movs	r0, r2
 8001696:	004e      	lsls	r6, r1, #1
 8001698:	0a5b      	lsrs	r3, r3, #9
 800169a:	0fcd      	lsrs	r5, r1, #31
 800169c:	0f61      	lsrs	r1, r4, #29
 800169e:	007a      	lsls	r2, r7, #1
 80016a0:	4319      	orrs	r1, r3
 80016a2:	00e3      	lsls	r3, r4, #3
 80016a4:	033c      	lsls	r4, r7, #12
 80016a6:	0fff      	lsrs	r7, r7, #31
 80016a8:	46bc      	mov	ip, r7
 80016aa:	0a64      	lsrs	r4, r4, #9
 80016ac:	0f47      	lsrs	r7, r0, #29
 80016ae:	4327      	orrs	r7, r4
 80016b0:	0d76      	lsrs	r6, r6, #21
 80016b2:	0d52      	lsrs	r2, r2, #21
 80016b4:	00c0      	lsls	r0, r0, #3
 80016b6:	46b9      	mov	r9, r7
 80016b8:	4680      	mov	r8, r0
 80016ba:	1ab7      	subs	r7, r6, r2
 80016bc:	4565      	cmp	r5, ip
 80016be:	d100      	bne.n	80016c2 <__aeabi_dadd+0x3e>
 80016c0:	e09b      	b.n	80017fa <__aeabi_dadd+0x176>
 80016c2:	2f00      	cmp	r7, #0
 80016c4:	dc00      	bgt.n	80016c8 <__aeabi_dadd+0x44>
 80016c6:	e084      	b.n	80017d2 <__aeabi_dadd+0x14e>
 80016c8:	2a00      	cmp	r2, #0
 80016ca:	d100      	bne.n	80016ce <__aeabi_dadd+0x4a>
 80016cc:	e0be      	b.n	800184c <__aeabi_dadd+0x1c8>
 80016ce:	4ac8      	ldr	r2, [pc, #800]	; (80019f0 <__aeabi_dadd+0x36c>)
 80016d0:	4296      	cmp	r6, r2
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dadd+0x52>
 80016d4:	e124      	b.n	8001920 <__aeabi_dadd+0x29c>
 80016d6:	2280      	movs	r2, #128	; 0x80
 80016d8:	464c      	mov	r4, r9
 80016da:	0412      	lsls	r2, r2, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	46a1      	mov	r9, r4
 80016e0:	2f38      	cmp	r7, #56	; 0x38
 80016e2:	dd00      	ble.n	80016e6 <__aeabi_dadd+0x62>
 80016e4:	e167      	b.n	80019b6 <__aeabi_dadd+0x332>
 80016e6:	2f1f      	cmp	r7, #31
 80016e8:	dd00      	ble.n	80016ec <__aeabi_dadd+0x68>
 80016ea:	e1d6      	b.n	8001a9a <__aeabi_dadd+0x416>
 80016ec:	2220      	movs	r2, #32
 80016ee:	464c      	mov	r4, r9
 80016f0:	1bd2      	subs	r2, r2, r7
 80016f2:	4094      	lsls	r4, r2
 80016f4:	46a2      	mov	sl, r4
 80016f6:	4644      	mov	r4, r8
 80016f8:	40fc      	lsrs	r4, r7
 80016fa:	0020      	movs	r0, r4
 80016fc:	4654      	mov	r4, sl
 80016fe:	4304      	orrs	r4, r0
 8001700:	4640      	mov	r0, r8
 8001702:	4090      	lsls	r0, r2
 8001704:	1e42      	subs	r2, r0, #1
 8001706:	4190      	sbcs	r0, r2
 8001708:	464a      	mov	r2, r9
 800170a:	40fa      	lsrs	r2, r7
 800170c:	4304      	orrs	r4, r0
 800170e:	1a89      	subs	r1, r1, r2
 8001710:	1b1c      	subs	r4, r3, r4
 8001712:	42a3      	cmp	r3, r4
 8001714:	4192      	sbcs	r2, r2
 8001716:	4252      	negs	r2, r2
 8001718:	1a8b      	subs	r3, r1, r2
 800171a:	469a      	mov	sl, r3
 800171c:	4653      	mov	r3, sl
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	d400      	bmi.n	8001724 <__aeabi_dadd+0xa0>
 8001722:	e0d4      	b.n	80018ce <__aeabi_dadd+0x24a>
 8001724:	4653      	mov	r3, sl
 8001726:	025a      	lsls	r2, r3, #9
 8001728:	0a53      	lsrs	r3, r2, #9
 800172a:	469a      	mov	sl, r3
 800172c:	4653      	mov	r3, sl
 800172e:	2b00      	cmp	r3, #0
 8001730:	d100      	bne.n	8001734 <__aeabi_dadd+0xb0>
 8001732:	e104      	b.n	800193e <__aeabi_dadd+0x2ba>
 8001734:	4650      	mov	r0, sl
 8001736:	f001 febb 	bl	80034b0 <__clzsi2>
 800173a:	0003      	movs	r3, r0
 800173c:	3b08      	subs	r3, #8
 800173e:	2220      	movs	r2, #32
 8001740:	0020      	movs	r0, r4
 8001742:	1ad2      	subs	r2, r2, r3
 8001744:	4651      	mov	r1, sl
 8001746:	40d0      	lsrs	r0, r2
 8001748:	4099      	lsls	r1, r3
 800174a:	0002      	movs	r2, r0
 800174c:	409c      	lsls	r4, r3
 800174e:	430a      	orrs	r2, r1
 8001750:	42b3      	cmp	r3, r6
 8001752:	da00      	bge.n	8001756 <__aeabi_dadd+0xd2>
 8001754:	e102      	b.n	800195c <__aeabi_dadd+0x2d8>
 8001756:	1b9b      	subs	r3, r3, r6
 8001758:	1c59      	adds	r1, r3, #1
 800175a:	291f      	cmp	r1, #31
 800175c:	dd00      	ble.n	8001760 <__aeabi_dadd+0xdc>
 800175e:	e0a7      	b.n	80018b0 <__aeabi_dadd+0x22c>
 8001760:	2320      	movs	r3, #32
 8001762:	0010      	movs	r0, r2
 8001764:	0026      	movs	r6, r4
 8001766:	1a5b      	subs	r3, r3, r1
 8001768:	409c      	lsls	r4, r3
 800176a:	4098      	lsls	r0, r3
 800176c:	40ce      	lsrs	r6, r1
 800176e:	40ca      	lsrs	r2, r1
 8001770:	1e63      	subs	r3, r4, #1
 8001772:	419c      	sbcs	r4, r3
 8001774:	4330      	orrs	r0, r6
 8001776:	4692      	mov	sl, r2
 8001778:	2600      	movs	r6, #0
 800177a:	4304      	orrs	r4, r0
 800177c:	0763      	lsls	r3, r4, #29
 800177e:	d009      	beq.n	8001794 <__aeabi_dadd+0x110>
 8001780:	230f      	movs	r3, #15
 8001782:	4023      	ands	r3, r4
 8001784:	2b04      	cmp	r3, #4
 8001786:	d005      	beq.n	8001794 <__aeabi_dadd+0x110>
 8001788:	1d23      	adds	r3, r4, #4
 800178a:	42a3      	cmp	r3, r4
 800178c:	41a4      	sbcs	r4, r4
 800178e:	4264      	negs	r4, r4
 8001790:	44a2      	add	sl, r4
 8001792:	001c      	movs	r4, r3
 8001794:	4653      	mov	r3, sl
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	d400      	bmi.n	800179c <__aeabi_dadd+0x118>
 800179a:	e09b      	b.n	80018d4 <__aeabi_dadd+0x250>
 800179c:	4b94      	ldr	r3, [pc, #592]	; (80019f0 <__aeabi_dadd+0x36c>)
 800179e:	3601      	adds	r6, #1
 80017a0:	429e      	cmp	r6, r3
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dadd+0x122>
 80017a4:	e0b8      	b.n	8001918 <__aeabi_dadd+0x294>
 80017a6:	4653      	mov	r3, sl
 80017a8:	4992      	ldr	r1, [pc, #584]	; (80019f4 <__aeabi_dadd+0x370>)
 80017aa:	08e4      	lsrs	r4, r4, #3
 80017ac:	400b      	ands	r3, r1
 80017ae:	0019      	movs	r1, r3
 80017b0:	075b      	lsls	r3, r3, #29
 80017b2:	4323      	orrs	r3, r4
 80017b4:	0572      	lsls	r2, r6, #21
 80017b6:	024c      	lsls	r4, r1, #9
 80017b8:	0b24      	lsrs	r4, r4, #12
 80017ba:	0d52      	lsrs	r2, r2, #21
 80017bc:	0512      	lsls	r2, r2, #20
 80017be:	07ed      	lsls	r5, r5, #31
 80017c0:	4322      	orrs	r2, r4
 80017c2:	432a      	orrs	r2, r5
 80017c4:	0018      	movs	r0, r3
 80017c6:	0011      	movs	r1, r2
 80017c8:	bce0      	pop	{r5, r6, r7}
 80017ca:	46ba      	mov	sl, r7
 80017cc:	46b1      	mov	r9, r6
 80017ce:	46a8      	mov	r8, r5
 80017d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d2:	2f00      	cmp	r7, #0
 80017d4:	d048      	beq.n	8001868 <__aeabi_dadd+0x1e4>
 80017d6:	1b97      	subs	r7, r2, r6
 80017d8:	2e00      	cmp	r6, #0
 80017da:	d000      	beq.n	80017de <__aeabi_dadd+0x15a>
 80017dc:	e10e      	b.n	80019fc <__aeabi_dadd+0x378>
 80017de:	000c      	movs	r4, r1
 80017e0:	431c      	orrs	r4, r3
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dadd+0x162>
 80017e4:	e1b7      	b.n	8001b56 <__aeabi_dadd+0x4d2>
 80017e6:	1e7c      	subs	r4, r7, #1
 80017e8:	2f01      	cmp	r7, #1
 80017ea:	d100      	bne.n	80017ee <__aeabi_dadd+0x16a>
 80017ec:	e226      	b.n	8001c3c <__aeabi_dadd+0x5b8>
 80017ee:	4d80      	ldr	r5, [pc, #512]	; (80019f0 <__aeabi_dadd+0x36c>)
 80017f0:	42af      	cmp	r7, r5
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x172>
 80017f4:	e1d5      	b.n	8001ba2 <__aeabi_dadd+0x51e>
 80017f6:	0027      	movs	r7, r4
 80017f8:	e107      	b.n	8001a0a <__aeabi_dadd+0x386>
 80017fa:	2f00      	cmp	r7, #0
 80017fc:	dc00      	bgt.n	8001800 <__aeabi_dadd+0x17c>
 80017fe:	e0b2      	b.n	8001966 <__aeabi_dadd+0x2e2>
 8001800:	2a00      	cmp	r2, #0
 8001802:	d047      	beq.n	8001894 <__aeabi_dadd+0x210>
 8001804:	4a7a      	ldr	r2, [pc, #488]	; (80019f0 <__aeabi_dadd+0x36c>)
 8001806:	4296      	cmp	r6, r2
 8001808:	d100      	bne.n	800180c <__aeabi_dadd+0x188>
 800180a:	e089      	b.n	8001920 <__aeabi_dadd+0x29c>
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	464c      	mov	r4, r9
 8001810:	0412      	lsls	r2, r2, #16
 8001812:	4314      	orrs	r4, r2
 8001814:	46a1      	mov	r9, r4
 8001816:	2f38      	cmp	r7, #56	; 0x38
 8001818:	dc6b      	bgt.n	80018f2 <__aeabi_dadd+0x26e>
 800181a:	2f1f      	cmp	r7, #31
 800181c:	dc00      	bgt.n	8001820 <__aeabi_dadd+0x19c>
 800181e:	e16e      	b.n	8001afe <__aeabi_dadd+0x47a>
 8001820:	003a      	movs	r2, r7
 8001822:	4648      	mov	r0, r9
 8001824:	3a20      	subs	r2, #32
 8001826:	40d0      	lsrs	r0, r2
 8001828:	4684      	mov	ip, r0
 800182a:	2f20      	cmp	r7, #32
 800182c:	d007      	beq.n	800183e <__aeabi_dadd+0x1ba>
 800182e:	2240      	movs	r2, #64	; 0x40
 8001830:	4648      	mov	r0, r9
 8001832:	1bd2      	subs	r2, r2, r7
 8001834:	4090      	lsls	r0, r2
 8001836:	0002      	movs	r2, r0
 8001838:	4640      	mov	r0, r8
 800183a:	4310      	orrs	r0, r2
 800183c:	4680      	mov	r8, r0
 800183e:	4640      	mov	r0, r8
 8001840:	1e42      	subs	r2, r0, #1
 8001842:	4190      	sbcs	r0, r2
 8001844:	4662      	mov	r2, ip
 8001846:	0004      	movs	r4, r0
 8001848:	4314      	orrs	r4, r2
 800184a:	e057      	b.n	80018fc <__aeabi_dadd+0x278>
 800184c:	464a      	mov	r2, r9
 800184e:	4302      	orrs	r2, r0
 8001850:	d100      	bne.n	8001854 <__aeabi_dadd+0x1d0>
 8001852:	e103      	b.n	8001a5c <__aeabi_dadd+0x3d8>
 8001854:	1e7a      	subs	r2, r7, #1
 8001856:	2f01      	cmp	r7, #1
 8001858:	d100      	bne.n	800185c <__aeabi_dadd+0x1d8>
 800185a:	e193      	b.n	8001b84 <__aeabi_dadd+0x500>
 800185c:	4c64      	ldr	r4, [pc, #400]	; (80019f0 <__aeabi_dadd+0x36c>)
 800185e:	42a7      	cmp	r7, r4
 8001860:	d100      	bne.n	8001864 <__aeabi_dadd+0x1e0>
 8001862:	e18a      	b.n	8001b7a <__aeabi_dadd+0x4f6>
 8001864:	0017      	movs	r7, r2
 8001866:	e73b      	b.n	80016e0 <__aeabi_dadd+0x5c>
 8001868:	4c63      	ldr	r4, [pc, #396]	; (80019f8 <__aeabi_dadd+0x374>)
 800186a:	1c72      	adds	r2, r6, #1
 800186c:	4222      	tst	r2, r4
 800186e:	d000      	beq.n	8001872 <__aeabi_dadd+0x1ee>
 8001870:	e0e0      	b.n	8001a34 <__aeabi_dadd+0x3b0>
 8001872:	000a      	movs	r2, r1
 8001874:	431a      	orrs	r2, r3
 8001876:	2e00      	cmp	r6, #0
 8001878:	d000      	beq.n	800187c <__aeabi_dadd+0x1f8>
 800187a:	e174      	b.n	8001b66 <__aeabi_dadd+0x4e2>
 800187c:	2a00      	cmp	r2, #0
 800187e:	d100      	bne.n	8001882 <__aeabi_dadd+0x1fe>
 8001880:	e1d0      	b.n	8001c24 <__aeabi_dadd+0x5a0>
 8001882:	464a      	mov	r2, r9
 8001884:	4302      	orrs	r2, r0
 8001886:	d000      	beq.n	800188a <__aeabi_dadd+0x206>
 8001888:	e1e3      	b.n	8001c52 <__aeabi_dadd+0x5ce>
 800188a:	074a      	lsls	r2, r1, #29
 800188c:	08db      	lsrs	r3, r3, #3
 800188e:	4313      	orrs	r3, r2
 8001890:	08c9      	lsrs	r1, r1, #3
 8001892:	e029      	b.n	80018e8 <__aeabi_dadd+0x264>
 8001894:	464a      	mov	r2, r9
 8001896:	4302      	orrs	r2, r0
 8001898:	d100      	bne.n	800189c <__aeabi_dadd+0x218>
 800189a:	e17d      	b.n	8001b98 <__aeabi_dadd+0x514>
 800189c:	1e7a      	subs	r2, r7, #1
 800189e:	2f01      	cmp	r7, #1
 80018a0:	d100      	bne.n	80018a4 <__aeabi_dadd+0x220>
 80018a2:	e0e0      	b.n	8001a66 <__aeabi_dadd+0x3e2>
 80018a4:	4c52      	ldr	r4, [pc, #328]	; (80019f0 <__aeabi_dadd+0x36c>)
 80018a6:	42a7      	cmp	r7, r4
 80018a8:	d100      	bne.n	80018ac <__aeabi_dadd+0x228>
 80018aa:	e166      	b.n	8001b7a <__aeabi_dadd+0x4f6>
 80018ac:	0017      	movs	r7, r2
 80018ae:	e7b2      	b.n	8001816 <__aeabi_dadd+0x192>
 80018b0:	0010      	movs	r0, r2
 80018b2:	3b1f      	subs	r3, #31
 80018b4:	40d8      	lsrs	r0, r3
 80018b6:	2920      	cmp	r1, #32
 80018b8:	d003      	beq.n	80018c2 <__aeabi_dadd+0x23e>
 80018ba:	2340      	movs	r3, #64	; 0x40
 80018bc:	1a5b      	subs	r3, r3, r1
 80018be:	409a      	lsls	r2, r3
 80018c0:	4314      	orrs	r4, r2
 80018c2:	1e63      	subs	r3, r4, #1
 80018c4:	419c      	sbcs	r4, r3
 80018c6:	2300      	movs	r3, #0
 80018c8:	2600      	movs	r6, #0
 80018ca:	469a      	mov	sl, r3
 80018cc:	4304      	orrs	r4, r0
 80018ce:	0763      	lsls	r3, r4, #29
 80018d0:	d000      	beq.n	80018d4 <__aeabi_dadd+0x250>
 80018d2:	e755      	b.n	8001780 <__aeabi_dadd+0xfc>
 80018d4:	4652      	mov	r2, sl
 80018d6:	08e3      	lsrs	r3, r4, #3
 80018d8:	0752      	lsls	r2, r2, #29
 80018da:	4313      	orrs	r3, r2
 80018dc:	4652      	mov	r2, sl
 80018de:	0037      	movs	r7, r6
 80018e0:	08d1      	lsrs	r1, r2, #3
 80018e2:	4a43      	ldr	r2, [pc, #268]	; (80019f0 <__aeabi_dadd+0x36c>)
 80018e4:	4297      	cmp	r7, r2
 80018e6:	d01f      	beq.n	8001928 <__aeabi_dadd+0x2a4>
 80018e8:	0309      	lsls	r1, r1, #12
 80018ea:	057a      	lsls	r2, r7, #21
 80018ec:	0b0c      	lsrs	r4, r1, #12
 80018ee:	0d52      	lsrs	r2, r2, #21
 80018f0:	e764      	b.n	80017bc <__aeabi_dadd+0x138>
 80018f2:	4642      	mov	r2, r8
 80018f4:	464c      	mov	r4, r9
 80018f6:	4314      	orrs	r4, r2
 80018f8:	1e62      	subs	r2, r4, #1
 80018fa:	4194      	sbcs	r4, r2
 80018fc:	18e4      	adds	r4, r4, r3
 80018fe:	429c      	cmp	r4, r3
 8001900:	4192      	sbcs	r2, r2
 8001902:	4252      	negs	r2, r2
 8001904:	4692      	mov	sl, r2
 8001906:	448a      	add	sl, r1
 8001908:	4653      	mov	r3, sl
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d5df      	bpl.n	80018ce <__aeabi_dadd+0x24a>
 800190e:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <__aeabi_dadd+0x36c>)
 8001910:	3601      	adds	r6, #1
 8001912:	429e      	cmp	r6, r3
 8001914:	d000      	beq.n	8001918 <__aeabi_dadd+0x294>
 8001916:	e0b3      	b.n	8001a80 <__aeabi_dadd+0x3fc>
 8001918:	0032      	movs	r2, r6
 800191a:	2400      	movs	r4, #0
 800191c:	2300      	movs	r3, #0
 800191e:	e74d      	b.n	80017bc <__aeabi_dadd+0x138>
 8001920:	074a      	lsls	r2, r1, #29
 8001922:	08db      	lsrs	r3, r3, #3
 8001924:	4313      	orrs	r3, r2
 8001926:	08c9      	lsrs	r1, r1, #3
 8001928:	001a      	movs	r2, r3
 800192a:	430a      	orrs	r2, r1
 800192c:	d100      	bne.n	8001930 <__aeabi_dadd+0x2ac>
 800192e:	e200      	b.n	8001d32 <__aeabi_dadd+0x6ae>
 8001930:	2480      	movs	r4, #128	; 0x80
 8001932:	0324      	lsls	r4, r4, #12
 8001934:	430c      	orrs	r4, r1
 8001936:	0324      	lsls	r4, r4, #12
 8001938:	4a2d      	ldr	r2, [pc, #180]	; (80019f0 <__aeabi_dadd+0x36c>)
 800193a:	0b24      	lsrs	r4, r4, #12
 800193c:	e73e      	b.n	80017bc <__aeabi_dadd+0x138>
 800193e:	0020      	movs	r0, r4
 8001940:	f001 fdb6 	bl	80034b0 <__clzsi2>
 8001944:	0003      	movs	r3, r0
 8001946:	3318      	adds	r3, #24
 8001948:	2b1f      	cmp	r3, #31
 800194a:	dc00      	bgt.n	800194e <__aeabi_dadd+0x2ca>
 800194c:	e6f7      	b.n	800173e <__aeabi_dadd+0xba>
 800194e:	0022      	movs	r2, r4
 8001950:	3808      	subs	r0, #8
 8001952:	4082      	lsls	r2, r0
 8001954:	2400      	movs	r4, #0
 8001956:	42b3      	cmp	r3, r6
 8001958:	db00      	blt.n	800195c <__aeabi_dadd+0x2d8>
 800195a:	e6fc      	b.n	8001756 <__aeabi_dadd+0xd2>
 800195c:	1af6      	subs	r6, r6, r3
 800195e:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <__aeabi_dadd+0x370>)
 8001960:	401a      	ands	r2, r3
 8001962:	4692      	mov	sl, r2
 8001964:	e70a      	b.n	800177c <__aeabi_dadd+0xf8>
 8001966:	2f00      	cmp	r7, #0
 8001968:	d02b      	beq.n	80019c2 <__aeabi_dadd+0x33e>
 800196a:	1b97      	subs	r7, r2, r6
 800196c:	2e00      	cmp	r6, #0
 800196e:	d100      	bne.n	8001972 <__aeabi_dadd+0x2ee>
 8001970:	e0b8      	b.n	8001ae4 <__aeabi_dadd+0x460>
 8001972:	4c1f      	ldr	r4, [pc, #124]	; (80019f0 <__aeabi_dadd+0x36c>)
 8001974:	42a2      	cmp	r2, r4
 8001976:	d100      	bne.n	800197a <__aeabi_dadd+0x2f6>
 8001978:	e11c      	b.n	8001bb4 <__aeabi_dadd+0x530>
 800197a:	2480      	movs	r4, #128	; 0x80
 800197c:	0424      	lsls	r4, r4, #16
 800197e:	4321      	orrs	r1, r4
 8001980:	2f38      	cmp	r7, #56	; 0x38
 8001982:	dd00      	ble.n	8001986 <__aeabi_dadd+0x302>
 8001984:	e11e      	b.n	8001bc4 <__aeabi_dadd+0x540>
 8001986:	2f1f      	cmp	r7, #31
 8001988:	dd00      	ble.n	800198c <__aeabi_dadd+0x308>
 800198a:	e19e      	b.n	8001cca <__aeabi_dadd+0x646>
 800198c:	2620      	movs	r6, #32
 800198e:	000c      	movs	r4, r1
 8001990:	1bf6      	subs	r6, r6, r7
 8001992:	0018      	movs	r0, r3
 8001994:	40b3      	lsls	r3, r6
 8001996:	40b4      	lsls	r4, r6
 8001998:	40f8      	lsrs	r0, r7
 800199a:	1e5e      	subs	r6, r3, #1
 800199c:	41b3      	sbcs	r3, r6
 800199e:	40f9      	lsrs	r1, r7
 80019a0:	4304      	orrs	r4, r0
 80019a2:	431c      	orrs	r4, r3
 80019a4:	4489      	add	r9, r1
 80019a6:	4444      	add	r4, r8
 80019a8:	4544      	cmp	r4, r8
 80019aa:	419b      	sbcs	r3, r3
 80019ac:	425b      	negs	r3, r3
 80019ae:	444b      	add	r3, r9
 80019b0:	469a      	mov	sl, r3
 80019b2:	0016      	movs	r6, r2
 80019b4:	e7a8      	b.n	8001908 <__aeabi_dadd+0x284>
 80019b6:	4642      	mov	r2, r8
 80019b8:	464c      	mov	r4, r9
 80019ba:	4314      	orrs	r4, r2
 80019bc:	1e62      	subs	r2, r4, #1
 80019be:	4194      	sbcs	r4, r2
 80019c0:	e6a6      	b.n	8001710 <__aeabi_dadd+0x8c>
 80019c2:	4c0d      	ldr	r4, [pc, #52]	; (80019f8 <__aeabi_dadd+0x374>)
 80019c4:	1c72      	adds	r2, r6, #1
 80019c6:	4222      	tst	r2, r4
 80019c8:	d000      	beq.n	80019cc <__aeabi_dadd+0x348>
 80019ca:	e0a8      	b.n	8001b1e <__aeabi_dadd+0x49a>
 80019cc:	000a      	movs	r2, r1
 80019ce:	431a      	orrs	r2, r3
 80019d0:	2e00      	cmp	r6, #0
 80019d2:	d000      	beq.n	80019d6 <__aeabi_dadd+0x352>
 80019d4:	e10a      	b.n	8001bec <__aeabi_dadd+0x568>
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d100      	bne.n	80019dc <__aeabi_dadd+0x358>
 80019da:	e15e      	b.n	8001c9a <__aeabi_dadd+0x616>
 80019dc:	464a      	mov	r2, r9
 80019de:	4302      	orrs	r2, r0
 80019e0:	d000      	beq.n	80019e4 <__aeabi_dadd+0x360>
 80019e2:	e161      	b.n	8001ca8 <__aeabi_dadd+0x624>
 80019e4:	074a      	lsls	r2, r1, #29
 80019e6:	08db      	lsrs	r3, r3, #3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	08c9      	lsrs	r1, r1, #3
 80019ec:	e77c      	b.n	80018e8 <__aeabi_dadd+0x264>
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	000007ff 	.word	0x000007ff
 80019f4:	ff7fffff 	.word	0xff7fffff
 80019f8:	000007fe 	.word	0x000007fe
 80019fc:	4ccf      	ldr	r4, [pc, #828]	; (8001d3c <__aeabi_dadd+0x6b8>)
 80019fe:	42a2      	cmp	r2, r4
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dadd+0x380>
 8001a02:	e0ce      	b.n	8001ba2 <__aeabi_dadd+0x51e>
 8001a04:	2480      	movs	r4, #128	; 0x80
 8001a06:	0424      	lsls	r4, r4, #16
 8001a08:	4321      	orrs	r1, r4
 8001a0a:	2f38      	cmp	r7, #56	; 0x38
 8001a0c:	dc5b      	bgt.n	8001ac6 <__aeabi_dadd+0x442>
 8001a0e:	2f1f      	cmp	r7, #31
 8001a10:	dd00      	ble.n	8001a14 <__aeabi_dadd+0x390>
 8001a12:	e0dc      	b.n	8001bce <__aeabi_dadd+0x54a>
 8001a14:	2520      	movs	r5, #32
 8001a16:	000c      	movs	r4, r1
 8001a18:	1bed      	subs	r5, r5, r7
 8001a1a:	001e      	movs	r6, r3
 8001a1c:	40ab      	lsls	r3, r5
 8001a1e:	40ac      	lsls	r4, r5
 8001a20:	40fe      	lsrs	r6, r7
 8001a22:	1e5d      	subs	r5, r3, #1
 8001a24:	41ab      	sbcs	r3, r5
 8001a26:	4334      	orrs	r4, r6
 8001a28:	40f9      	lsrs	r1, r7
 8001a2a:	431c      	orrs	r4, r3
 8001a2c:	464b      	mov	r3, r9
 8001a2e:	1a5b      	subs	r3, r3, r1
 8001a30:	4699      	mov	r9, r3
 8001a32:	e04c      	b.n	8001ace <__aeabi_dadd+0x44a>
 8001a34:	464a      	mov	r2, r9
 8001a36:	1a1c      	subs	r4, r3, r0
 8001a38:	1a88      	subs	r0, r1, r2
 8001a3a:	42a3      	cmp	r3, r4
 8001a3c:	4192      	sbcs	r2, r2
 8001a3e:	4252      	negs	r2, r2
 8001a40:	4692      	mov	sl, r2
 8001a42:	0002      	movs	r2, r0
 8001a44:	4650      	mov	r0, sl
 8001a46:	1a12      	subs	r2, r2, r0
 8001a48:	4692      	mov	sl, r2
 8001a4a:	0212      	lsls	r2, r2, #8
 8001a4c:	d478      	bmi.n	8001b40 <__aeabi_dadd+0x4bc>
 8001a4e:	4653      	mov	r3, sl
 8001a50:	4323      	orrs	r3, r4
 8001a52:	d000      	beq.n	8001a56 <__aeabi_dadd+0x3d2>
 8001a54:	e66a      	b.n	800172c <__aeabi_dadd+0xa8>
 8001a56:	2100      	movs	r1, #0
 8001a58:	2500      	movs	r5, #0
 8001a5a:	e745      	b.n	80018e8 <__aeabi_dadd+0x264>
 8001a5c:	074a      	lsls	r2, r1, #29
 8001a5e:	08db      	lsrs	r3, r3, #3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	08c9      	lsrs	r1, r1, #3
 8001a64:	e73d      	b.n	80018e2 <__aeabi_dadd+0x25e>
 8001a66:	181c      	adds	r4, r3, r0
 8001a68:	429c      	cmp	r4, r3
 8001a6a:	419b      	sbcs	r3, r3
 8001a6c:	4449      	add	r1, r9
 8001a6e:	468a      	mov	sl, r1
 8001a70:	425b      	negs	r3, r3
 8001a72:	449a      	add	sl, r3
 8001a74:	4653      	mov	r3, sl
 8001a76:	2601      	movs	r6, #1
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	d400      	bmi.n	8001a7e <__aeabi_dadd+0x3fa>
 8001a7c:	e727      	b.n	80018ce <__aeabi_dadd+0x24a>
 8001a7e:	2602      	movs	r6, #2
 8001a80:	4652      	mov	r2, sl
 8001a82:	4baf      	ldr	r3, [pc, #700]	; (8001d40 <__aeabi_dadd+0x6bc>)
 8001a84:	2101      	movs	r1, #1
 8001a86:	401a      	ands	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4021      	ands	r1, r4
 8001a8c:	0862      	lsrs	r2, r4, #1
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	07dc      	lsls	r4, r3, #31
 8001a92:	085b      	lsrs	r3, r3, #1
 8001a94:	469a      	mov	sl, r3
 8001a96:	4314      	orrs	r4, r2
 8001a98:	e670      	b.n	800177c <__aeabi_dadd+0xf8>
 8001a9a:	003a      	movs	r2, r7
 8001a9c:	464c      	mov	r4, r9
 8001a9e:	3a20      	subs	r2, #32
 8001aa0:	40d4      	lsrs	r4, r2
 8001aa2:	46a4      	mov	ip, r4
 8001aa4:	2f20      	cmp	r7, #32
 8001aa6:	d007      	beq.n	8001ab8 <__aeabi_dadd+0x434>
 8001aa8:	2240      	movs	r2, #64	; 0x40
 8001aaa:	4648      	mov	r0, r9
 8001aac:	1bd2      	subs	r2, r2, r7
 8001aae:	4090      	lsls	r0, r2
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	4640      	mov	r0, r8
 8001ab4:	4310      	orrs	r0, r2
 8001ab6:	4680      	mov	r8, r0
 8001ab8:	4640      	mov	r0, r8
 8001aba:	1e42      	subs	r2, r0, #1
 8001abc:	4190      	sbcs	r0, r2
 8001abe:	4662      	mov	r2, ip
 8001ac0:	0004      	movs	r4, r0
 8001ac2:	4314      	orrs	r4, r2
 8001ac4:	e624      	b.n	8001710 <__aeabi_dadd+0x8c>
 8001ac6:	4319      	orrs	r1, r3
 8001ac8:	000c      	movs	r4, r1
 8001aca:	1e63      	subs	r3, r4, #1
 8001acc:	419c      	sbcs	r4, r3
 8001ace:	4643      	mov	r3, r8
 8001ad0:	1b1c      	subs	r4, r3, r4
 8001ad2:	45a0      	cmp	r8, r4
 8001ad4:	419b      	sbcs	r3, r3
 8001ad6:	4649      	mov	r1, r9
 8001ad8:	425b      	negs	r3, r3
 8001ada:	1acb      	subs	r3, r1, r3
 8001adc:	469a      	mov	sl, r3
 8001ade:	4665      	mov	r5, ip
 8001ae0:	0016      	movs	r6, r2
 8001ae2:	e61b      	b.n	800171c <__aeabi_dadd+0x98>
 8001ae4:	000c      	movs	r4, r1
 8001ae6:	431c      	orrs	r4, r3
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dadd+0x468>
 8001aea:	e0c7      	b.n	8001c7c <__aeabi_dadd+0x5f8>
 8001aec:	1e7c      	subs	r4, r7, #1
 8001aee:	2f01      	cmp	r7, #1
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dadd+0x470>
 8001af2:	e0f9      	b.n	8001ce8 <__aeabi_dadd+0x664>
 8001af4:	4e91      	ldr	r6, [pc, #580]	; (8001d3c <__aeabi_dadd+0x6b8>)
 8001af6:	42b7      	cmp	r7, r6
 8001af8:	d05c      	beq.n	8001bb4 <__aeabi_dadd+0x530>
 8001afa:	0027      	movs	r7, r4
 8001afc:	e740      	b.n	8001980 <__aeabi_dadd+0x2fc>
 8001afe:	2220      	movs	r2, #32
 8001b00:	464c      	mov	r4, r9
 8001b02:	4640      	mov	r0, r8
 8001b04:	1bd2      	subs	r2, r2, r7
 8001b06:	4094      	lsls	r4, r2
 8001b08:	40f8      	lsrs	r0, r7
 8001b0a:	4304      	orrs	r4, r0
 8001b0c:	4640      	mov	r0, r8
 8001b0e:	4090      	lsls	r0, r2
 8001b10:	1e42      	subs	r2, r0, #1
 8001b12:	4190      	sbcs	r0, r2
 8001b14:	464a      	mov	r2, r9
 8001b16:	40fa      	lsrs	r2, r7
 8001b18:	4304      	orrs	r4, r0
 8001b1a:	1889      	adds	r1, r1, r2
 8001b1c:	e6ee      	b.n	80018fc <__aeabi_dadd+0x278>
 8001b1e:	4c87      	ldr	r4, [pc, #540]	; (8001d3c <__aeabi_dadd+0x6b8>)
 8001b20:	42a2      	cmp	r2, r4
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dadd+0x4a2>
 8001b24:	e6f9      	b.n	800191a <__aeabi_dadd+0x296>
 8001b26:	1818      	adds	r0, r3, r0
 8001b28:	4298      	cmp	r0, r3
 8001b2a:	419b      	sbcs	r3, r3
 8001b2c:	4449      	add	r1, r9
 8001b2e:	425b      	negs	r3, r3
 8001b30:	18cb      	adds	r3, r1, r3
 8001b32:	07dc      	lsls	r4, r3, #31
 8001b34:	0840      	lsrs	r0, r0, #1
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	469a      	mov	sl, r3
 8001b3a:	0016      	movs	r6, r2
 8001b3c:	4304      	orrs	r4, r0
 8001b3e:	e6c6      	b.n	80018ce <__aeabi_dadd+0x24a>
 8001b40:	4642      	mov	r2, r8
 8001b42:	1ad4      	subs	r4, r2, r3
 8001b44:	45a0      	cmp	r8, r4
 8001b46:	4180      	sbcs	r0, r0
 8001b48:	464b      	mov	r3, r9
 8001b4a:	4240      	negs	r0, r0
 8001b4c:	1a59      	subs	r1, r3, r1
 8001b4e:	1a0b      	subs	r3, r1, r0
 8001b50:	469a      	mov	sl, r3
 8001b52:	4665      	mov	r5, ip
 8001b54:	e5ea      	b.n	800172c <__aeabi_dadd+0xa8>
 8001b56:	464b      	mov	r3, r9
 8001b58:	464a      	mov	r2, r9
 8001b5a:	08c0      	lsrs	r0, r0, #3
 8001b5c:	075b      	lsls	r3, r3, #29
 8001b5e:	4665      	mov	r5, ip
 8001b60:	4303      	orrs	r3, r0
 8001b62:	08d1      	lsrs	r1, r2, #3
 8001b64:	e6bd      	b.n	80018e2 <__aeabi_dadd+0x25e>
 8001b66:	2a00      	cmp	r2, #0
 8001b68:	d000      	beq.n	8001b6c <__aeabi_dadd+0x4e8>
 8001b6a:	e08e      	b.n	8001c8a <__aeabi_dadd+0x606>
 8001b6c:	464b      	mov	r3, r9
 8001b6e:	4303      	orrs	r3, r0
 8001b70:	d117      	bne.n	8001ba2 <__aeabi_dadd+0x51e>
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	2500      	movs	r5, #0
 8001b76:	0309      	lsls	r1, r1, #12
 8001b78:	e6da      	b.n	8001930 <__aeabi_dadd+0x2ac>
 8001b7a:	074a      	lsls	r2, r1, #29
 8001b7c:	08db      	lsrs	r3, r3, #3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	08c9      	lsrs	r1, r1, #3
 8001b82:	e6d1      	b.n	8001928 <__aeabi_dadd+0x2a4>
 8001b84:	1a1c      	subs	r4, r3, r0
 8001b86:	464a      	mov	r2, r9
 8001b88:	42a3      	cmp	r3, r4
 8001b8a:	419b      	sbcs	r3, r3
 8001b8c:	1a89      	subs	r1, r1, r2
 8001b8e:	425b      	negs	r3, r3
 8001b90:	1acb      	subs	r3, r1, r3
 8001b92:	469a      	mov	sl, r3
 8001b94:	2601      	movs	r6, #1
 8001b96:	e5c1      	b.n	800171c <__aeabi_dadd+0x98>
 8001b98:	074a      	lsls	r2, r1, #29
 8001b9a:	08db      	lsrs	r3, r3, #3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	08c9      	lsrs	r1, r1, #3
 8001ba0:	e69f      	b.n	80018e2 <__aeabi_dadd+0x25e>
 8001ba2:	4643      	mov	r3, r8
 8001ba4:	08d8      	lsrs	r0, r3, #3
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	464a      	mov	r2, r9
 8001baa:	075b      	lsls	r3, r3, #29
 8001bac:	4665      	mov	r5, ip
 8001bae:	4303      	orrs	r3, r0
 8001bb0:	08d1      	lsrs	r1, r2, #3
 8001bb2:	e6b9      	b.n	8001928 <__aeabi_dadd+0x2a4>
 8001bb4:	4643      	mov	r3, r8
 8001bb6:	08d8      	lsrs	r0, r3, #3
 8001bb8:	464b      	mov	r3, r9
 8001bba:	464a      	mov	r2, r9
 8001bbc:	075b      	lsls	r3, r3, #29
 8001bbe:	4303      	orrs	r3, r0
 8001bc0:	08d1      	lsrs	r1, r2, #3
 8001bc2:	e6b1      	b.n	8001928 <__aeabi_dadd+0x2a4>
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	000c      	movs	r4, r1
 8001bc8:	1e63      	subs	r3, r4, #1
 8001bca:	419c      	sbcs	r4, r3
 8001bcc:	e6eb      	b.n	80019a6 <__aeabi_dadd+0x322>
 8001bce:	003c      	movs	r4, r7
 8001bd0:	000d      	movs	r5, r1
 8001bd2:	3c20      	subs	r4, #32
 8001bd4:	40e5      	lsrs	r5, r4
 8001bd6:	2f20      	cmp	r7, #32
 8001bd8:	d003      	beq.n	8001be2 <__aeabi_dadd+0x55e>
 8001bda:	2440      	movs	r4, #64	; 0x40
 8001bdc:	1be4      	subs	r4, r4, r7
 8001bde:	40a1      	lsls	r1, r4
 8001be0:	430b      	orrs	r3, r1
 8001be2:	001c      	movs	r4, r3
 8001be4:	1e63      	subs	r3, r4, #1
 8001be6:	419c      	sbcs	r4, r3
 8001be8:	432c      	orrs	r4, r5
 8001bea:	e770      	b.n	8001ace <__aeabi_dadd+0x44a>
 8001bec:	2a00      	cmp	r2, #0
 8001bee:	d0e1      	beq.n	8001bb4 <__aeabi_dadd+0x530>
 8001bf0:	464a      	mov	r2, r9
 8001bf2:	4302      	orrs	r2, r0
 8001bf4:	d0c1      	beq.n	8001b7a <__aeabi_dadd+0x4f6>
 8001bf6:	074a      	lsls	r2, r1, #29
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	08c9      	lsrs	r1, r1, #3
 8001c00:	0312      	lsls	r2, r2, #12
 8001c02:	4211      	tst	r1, r2
 8001c04:	d008      	beq.n	8001c18 <__aeabi_dadd+0x594>
 8001c06:	4648      	mov	r0, r9
 8001c08:	08c4      	lsrs	r4, r0, #3
 8001c0a:	4214      	tst	r4, r2
 8001c0c:	d104      	bne.n	8001c18 <__aeabi_dadd+0x594>
 8001c0e:	4643      	mov	r3, r8
 8001c10:	0021      	movs	r1, r4
 8001c12:	08db      	lsrs	r3, r3, #3
 8001c14:	0742      	lsls	r2, r0, #29
 8001c16:	4313      	orrs	r3, r2
 8001c18:	0f5a      	lsrs	r2, r3, #29
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	0752      	lsls	r2, r2, #29
 8001c1e:	08db      	lsrs	r3, r3, #3
 8001c20:	4313      	orrs	r3, r2
 8001c22:	e681      	b.n	8001928 <__aeabi_dadd+0x2a4>
 8001c24:	464b      	mov	r3, r9
 8001c26:	4303      	orrs	r3, r0
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dadd+0x5a8>
 8001c2a:	e714      	b.n	8001a56 <__aeabi_dadd+0x3d2>
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	464a      	mov	r2, r9
 8001c30:	08c0      	lsrs	r0, r0, #3
 8001c32:	075b      	lsls	r3, r3, #29
 8001c34:	4665      	mov	r5, ip
 8001c36:	4303      	orrs	r3, r0
 8001c38:	08d1      	lsrs	r1, r2, #3
 8001c3a:	e655      	b.n	80018e8 <__aeabi_dadd+0x264>
 8001c3c:	1ac4      	subs	r4, r0, r3
 8001c3e:	45a0      	cmp	r8, r4
 8001c40:	4180      	sbcs	r0, r0
 8001c42:	464b      	mov	r3, r9
 8001c44:	4240      	negs	r0, r0
 8001c46:	1a59      	subs	r1, r3, r1
 8001c48:	1a0b      	subs	r3, r1, r0
 8001c4a:	469a      	mov	sl, r3
 8001c4c:	4665      	mov	r5, ip
 8001c4e:	2601      	movs	r6, #1
 8001c50:	e564      	b.n	800171c <__aeabi_dadd+0x98>
 8001c52:	1a1c      	subs	r4, r3, r0
 8001c54:	464a      	mov	r2, r9
 8001c56:	42a3      	cmp	r3, r4
 8001c58:	4180      	sbcs	r0, r0
 8001c5a:	1a8a      	subs	r2, r1, r2
 8001c5c:	4240      	negs	r0, r0
 8001c5e:	1a12      	subs	r2, r2, r0
 8001c60:	4692      	mov	sl, r2
 8001c62:	0212      	lsls	r2, r2, #8
 8001c64:	d549      	bpl.n	8001cfa <__aeabi_dadd+0x676>
 8001c66:	4642      	mov	r2, r8
 8001c68:	1ad4      	subs	r4, r2, r3
 8001c6a:	45a0      	cmp	r8, r4
 8001c6c:	4180      	sbcs	r0, r0
 8001c6e:	464b      	mov	r3, r9
 8001c70:	4240      	negs	r0, r0
 8001c72:	1a59      	subs	r1, r3, r1
 8001c74:	1a0b      	subs	r3, r1, r0
 8001c76:	469a      	mov	sl, r3
 8001c78:	4665      	mov	r5, ip
 8001c7a:	e57f      	b.n	800177c <__aeabi_dadd+0xf8>
 8001c7c:	464b      	mov	r3, r9
 8001c7e:	464a      	mov	r2, r9
 8001c80:	08c0      	lsrs	r0, r0, #3
 8001c82:	075b      	lsls	r3, r3, #29
 8001c84:	4303      	orrs	r3, r0
 8001c86:	08d1      	lsrs	r1, r2, #3
 8001c88:	e62b      	b.n	80018e2 <__aeabi_dadd+0x25e>
 8001c8a:	464a      	mov	r2, r9
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	4302      	orrs	r2, r0
 8001c90:	d138      	bne.n	8001d04 <__aeabi_dadd+0x680>
 8001c92:	074a      	lsls	r2, r1, #29
 8001c94:	4313      	orrs	r3, r2
 8001c96:	08c9      	lsrs	r1, r1, #3
 8001c98:	e646      	b.n	8001928 <__aeabi_dadd+0x2a4>
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	464a      	mov	r2, r9
 8001c9e:	08c0      	lsrs	r0, r0, #3
 8001ca0:	075b      	lsls	r3, r3, #29
 8001ca2:	4303      	orrs	r3, r0
 8001ca4:	08d1      	lsrs	r1, r2, #3
 8001ca6:	e61f      	b.n	80018e8 <__aeabi_dadd+0x264>
 8001ca8:	181c      	adds	r4, r3, r0
 8001caa:	429c      	cmp	r4, r3
 8001cac:	419b      	sbcs	r3, r3
 8001cae:	4449      	add	r1, r9
 8001cb0:	468a      	mov	sl, r1
 8001cb2:	425b      	negs	r3, r3
 8001cb4:	449a      	add	sl, r3
 8001cb6:	4653      	mov	r3, sl
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	d400      	bmi.n	8001cbe <__aeabi_dadd+0x63a>
 8001cbc:	e607      	b.n	80018ce <__aeabi_dadd+0x24a>
 8001cbe:	4652      	mov	r2, sl
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <__aeabi_dadd+0x6bc>)
 8001cc2:	2601      	movs	r6, #1
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	4692      	mov	sl, r2
 8001cc8:	e601      	b.n	80018ce <__aeabi_dadd+0x24a>
 8001cca:	003c      	movs	r4, r7
 8001ccc:	000e      	movs	r6, r1
 8001cce:	3c20      	subs	r4, #32
 8001cd0:	40e6      	lsrs	r6, r4
 8001cd2:	2f20      	cmp	r7, #32
 8001cd4:	d003      	beq.n	8001cde <__aeabi_dadd+0x65a>
 8001cd6:	2440      	movs	r4, #64	; 0x40
 8001cd8:	1be4      	subs	r4, r4, r7
 8001cda:	40a1      	lsls	r1, r4
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	001c      	movs	r4, r3
 8001ce0:	1e63      	subs	r3, r4, #1
 8001ce2:	419c      	sbcs	r4, r3
 8001ce4:	4334      	orrs	r4, r6
 8001ce6:	e65e      	b.n	80019a6 <__aeabi_dadd+0x322>
 8001ce8:	4443      	add	r3, r8
 8001cea:	4283      	cmp	r3, r0
 8001cec:	4180      	sbcs	r0, r0
 8001cee:	4449      	add	r1, r9
 8001cf0:	468a      	mov	sl, r1
 8001cf2:	4240      	negs	r0, r0
 8001cf4:	001c      	movs	r4, r3
 8001cf6:	4482      	add	sl, r0
 8001cf8:	e6bc      	b.n	8001a74 <__aeabi_dadd+0x3f0>
 8001cfa:	4653      	mov	r3, sl
 8001cfc:	4323      	orrs	r3, r4
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x67e>
 8001d00:	e6a9      	b.n	8001a56 <__aeabi_dadd+0x3d2>
 8001d02:	e5e4      	b.n	80018ce <__aeabi_dadd+0x24a>
 8001d04:	074a      	lsls	r2, r1, #29
 8001d06:	4313      	orrs	r3, r2
 8001d08:	2280      	movs	r2, #128	; 0x80
 8001d0a:	08c9      	lsrs	r1, r1, #3
 8001d0c:	0312      	lsls	r2, r2, #12
 8001d0e:	4211      	tst	r1, r2
 8001d10:	d009      	beq.n	8001d26 <__aeabi_dadd+0x6a2>
 8001d12:	4648      	mov	r0, r9
 8001d14:	08c4      	lsrs	r4, r0, #3
 8001d16:	4214      	tst	r4, r2
 8001d18:	d105      	bne.n	8001d26 <__aeabi_dadd+0x6a2>
 8001d1a:	4643      	mov	r3, r8
 8001d1c:	4665      	mov	r5, ip
 8001d1e:	0021      	movs	r1, r4
 8001d20:	08db      	lsrs	r3, r3, #3
 8001d22:	0742      	lsls	r2, r0, #29
 8001d24:	4313      	orrs	r3, r2
 8001d26:	0f5a      	lsrs	r2, r3, #29
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	08db      	lsrs	r3, r3, #3
 8001d2c:	0752      	lsls	r2, r2, #29
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	e5fa      	b.n	8001928 <__aeabi_dadd+0x2a4>
 8001d32:	2300      	movs	r3, #0
 8001d34:	4a01      	ldr	r2, [pc, #4]	; (8001d3c <__aeabi_dadd+0x6b8>)
 8001d36:	001c      	movs	r4, r3
 8001d38:	e540      	b.n	80017bc <__aeabi_dadd+0x138>
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	000007ff 	.word	0x000007ff
 8001d40:	ff7fffff 	.word	0xff7fffff

08001d44 <__aeabi_ddiv>:
 8001d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d46:	4657      	mov	r7, sl
 8001d48:	464e      	mov	r6, r9
 8001d4a:	4645      	mov	r5, r8
 8001d4c:	46de      	mov	lr, fp
 8001d4e:	b5e0      	push	{r5, r6, r7, lr}
 8001d50:	030c      	lsls	r4, r1, #12
 8001d52:	001f      	movs	r7, r3
 8001d54:	004b      	lsls	r3, r1, #1
 8001d56:	4681      	mov	r9, r0
 8001d58:	4692      	mov	sl, r2
 8001d5a:	0005      	movs	r5, r0
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	0b24      	lsrs	r4, r4, #12
 8001d60:	0d5b      	lsrs	r3, r3, #21
 8001d62:	0fce      	lsrs	r6, r1, #31
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d100      	bne.n	8001d6a <__aeabi_ddiv+0x26>
 8001d68:	e152      	b.n	8002010 <__aeabi_ddiv+0x2cc>
 8001d6a:	4ad2      	ldr	r2, [pc, #840]	; (80020b4 <__aeabi_ddiv+0x370>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_ddiv+0x2e>
 8001d70:	e16e      	b.n	8002050 <__aeabi_ddiv+0x30c>
 8001d72:	0f42      	lsrs	r2, r0, #29
 8001d74:	00e4      	lsls	r4, r4, #3
 8001d76:	4314      	orrs	r4, r2
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	0412      	lsls	r2, r2, #16
 8001d7c:	4322      	orrs	r2, r4
 8001d7e:	4690      	mov	r8, r2
 8001d80:	4acd      	ldr	r2, [pc, #820]	; (80020b8 <__aeabi_ddiv+0x374>)
 8001d82:	00c5      	lsls	r5, r0, #3
 8001d84:	4693      	mov	fp, r2
 8001d86:	449b      	add	fp, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	4699      	mov	r9, r3
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	033c      	lsls	r4, r7, #12
 8001d90:	007b      	lsls	r3, r7, #1
 8001d92:	4650      	mov	r0, sl
 8001d94:	0b24      	lsrs	r4, r4, #12
 8001d96:	0d5b      	lsrs	r3, r3, #21
 8001d98:	0fff      	lsrs	r7, r7, #31
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_ddiv+0x5c>
 8001d9e:	e11a      	b.n	8001fd6 <__aeabi_ddiv+0x292>
 8001da0:	4ac4      	ldr	r2, [pc, #784]	; (80020b4 <__aeabi_ddiv+0x370>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d100      	bne.n	8001da8 <__aeabi_ddiv+0x64>
 8001da6:	e15e      	b.n	8002066 <__aeabi_ddiv+0x322>
 8001da8:	0f42      	lsrs	r2, r0, #29
 8001daa:	00e4      	lsls	r4, r4, #3
 8001dac:	4322      	orrs	r2, r4
 8001dae:	2480      	movs	r4, #128	; 0x80
 8001db0:	0424      	lsls	r4, r4, #16
 8001db2:	4314      	orrs	r4, r2
 8001db4:	4ac0      	ldr	r2, [pc, #768]	; (80020b8 <__aeabi_ddiv+0x374>)
 8001db6:	00c1      	lsls	r1, r0, #3
 8001db8:	4694      	mov	ip, r2
 8001dba:	465a      	mov	r2, fp
 8001dbc:	4463      	add	r3, ip
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	469b      	mov	fp, r3
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	0033      	movs	r3, r6
 8001dc6:	407b      	eors	r3, r7
 8001dc8:	469a      	mov	sl, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d827      	bhi.n	8001e20 <__aeabi_ddiv+0xdc>
 8001dd0:	4aba      	ldr	r2, [pc, #744]	; (80020bc <__aeabi_ddiv+0x378>)
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	58d3      	ldr	r3, [r2, r3]
 8001dd6:	469f      	mov	pc, r3
 8001dd8:	46b2      	mov	sl, r6
 8001dda:	9b00      	ldr	r3, [sp, #0]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d016      	beq.n	8001e0e <__aeabi_ddiv+0xca>
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d100      	bne.n	8001de6 <__aeabi_ddiv+0xa2>
 8001de4:	e287      	b.n	80022f6 <__aeabi_ddiv+0x5b2>
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d000      	beq.n	8001dec <__aeabi_ddiv+0xa8>
 8001dea:	e0d5      	b.n	8001f98 <__aeabi_ddiv+0x254>
 8001dec:	2300      	movs	r3, #0
 8001dee:	2200      	movs	r2, #0
 8001df0:	2500      	movs	r5, #0
 8001df2:	051b      	lsls	r3, r3, #20
 8001df4:	4313      	orrs	r3, r2
 8001df6:	4652      	mov	r2, sl
 8001df8:	07d2      	lsls	r2, r2, #31
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	0028      	movs	r0, r5
 8001dfe:	0019      	movs	r1, r3
 8001e00:	b005      	add	sp, #20
 8001e02:	bcf0      	pop	{r4, r5, r6, r7}
 8001e04:	46bb      	mov	fp, r7
 8001e06:	46b2      	mov	sl, r6
 8001e08:	46a9      	mov	r9, r5
 8001e0a:	46a0      	mov	r8, r4
 8001e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2500      	movs	r5, #0
 8001e12:	4ba8      	ldr	r3, [pc, #672]	; (80020b4 <__aeabi_ddiv+0x370>)
 8001e14:	e7ed      	b.n	8001df2 <__aeabi_ddiv+0xae>
 8001e16:	46ba      	mov	sl, r7
 8001e18:	46a0      	mov	r8, r4
 8001e1a:	000d      	movs	r5, r1
 8001e1c:	9000      	str	r0, [sp, #0]
 8001e1e:	e7dc      	b.n	8001dda <__aeabi_ddiv+0x96>
 8001e20:	4544      	cmp	r4, r8
 8001e22:	d200      	bcs.n	8001e26 <__aeabi_ddiv+0xe2>
 8001e24:	e1c4      	b.n	80021b0 <__aeabi_ddiv+0x46c>
 8001e26:	d100      	bne.n	8001e2a <__aeabi_ddiv+0xe6>
 8001e28:	e1bf      	b.n	80021aa <__aeabi_ddiv+0x466>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	469c      	mov	ip, r3
 8001e30:	002e      	movs	r6, r5
 8001e32:	4640      	mov	r0, r8
 8001e34:	2500      	movs	r5, #0
 8001e36:	44e3      	add	fp, ip
 8001e38:	0223      	lsls	r3, r4, #8
 8001e3a:	0e0c      	lsrs	r4, r1, #24
 8001e3c:	431c      	orrs	r4, r3
 8001e3e:	0c1b      	lsrs	r3, r3, #16
 8001e40:	4699      	mov	r9, r3
 8001e42:	0423      	lsls	r3, r4, #16
 8001e44:	020a      	lsls	r2, r1, #8
 8001e46:	0c1f      	lsrs	r7, r3, #16
 8001e48:	4649      	mov	r1, r9
 8001e4a:	9200      	str	r2, [sp, #0]
 8001e4c:	9701      	str	r7, [sp, #4]
 8001e4e:	f7fe f9fd 	bl	800024c <__aeabi_uidivmod>
 8001e52:	0002      	movs	r2, r0
 8001e54:	437a      	muls	r2, r7
 8001e56:	040b      	lsls	r3, r1, #16
 8001e58:	0c31      	lsrs	r1, r6, #16
 8001e5a:	4680      	mov	r8, r0
 8001e5c:	4319      	orrs	r1, r3
 8001e5e:	428a      	cmp	r2, r1
 8001e60:	d907      	bls.n	8001e72 <__aeabi_ddiv+0x12e>
 8001e62:	2301      	movs	r3, #1
 8001e64:	425b      	negs	r3, r3
 8001e66:	469c      	mov	ip, r3
 8001e68:	1909      	adds	r1, r1, r4
 8001e6a:	44e0      	add	r8, ip
 8001e6c:	428c      	cmp	r4, r1
 8001e6e:	d800      	bhi.n	8001e72 <__aeabi_ddiv+0x12e>
 8001e70:	e201      	b.n	8002276 <__aeabi_ddiv+0x532>
 8001e72:	1a88      	subs	r0, r1, r2
 8001e74:	4649      	mov	r1, r9
 8001e76:	f7fe f9e9 	bl	800024c <__aeabi_uidivmod>
 8001e7a:	9a01      	ldr	r2, [sp, #4]
 8001e7c:	0436      	lsls	r6, r6, #16
 8001e7e:	4342      	muls	r2, r0
 8001e80:	0409      	lsls	r1, r1, #16
 8001e82:	0c36      	lsrs	r6, r6, #16
 8001e84:	0003      	movs	r3, r0
 8001e86:	430e      	orrs	r6, r1
 8001e88:	42b2      	cmp	r2, r6
 8001e8a:	d904      	bls.n	8001e96 <__aeabi_ddiv+0x152>
 8001e8c:	1936      	adds	r6, r6, r4
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	42b4      	cmp	r4, r6
 8001e92:	d800      	bhi.n	8001e96 <__aeabi_ddiv+0x152>
 8001e94:	e1e9      	b.n	800226a <__aeabi_ddiv+0x526>
 8001e96:	1ab0      	subs	r0, r6, r2
 8001e98:	4642      	mov	r2, r8
 8001e9a:	9e00      	ldr	r6, [sp, #0]
 8001e9c:	0412      	lsls	r2, r2, #16
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	0c33      	lsrs	r3, r6, #16
 8001ea2:	001f      	movs	r7, r3
 8001ea4:	0c11      	lsrs	r1, r2, #16
 8001ea6:	4690      	mov	r8, r2
 8001ea8:	9302      	str	r3, [sp, #8]
 8001eaa:	0413      	lsls	r3, r2, #16
 8001eac:	0432      	lsls	r2, r6, #16
 8001eae:	0c16      	lsrs	r6, r2, #16
 8001eb0:	0032      	movs	r2, r6
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	435a      	muls	r2, r3
 8001eb6:	9603      	str	r6, [sp, #12]
 8001eb8:	437b      	muls	r3, r7
 8001eba:	434e      	muls	r6, r1
 8001ebc:	4379      	muls	r1, r7
 8001ebe:	0c17      	lsrs	r7, r2, #16
 8001ec0:	46bc      	mov	ip, r7
 8001ec2:	199b      	adds	r3, r3, r6
 8001ec4:	4463      	add	r3, ip
 8001ec6:	429e      	cmp	r6, r3
 8001ec8:	d903      	bls.n	8001ed2 <__aeabi_ddiv+0x18e>
 8001eca:	2680      	movs	r6, #128	; 0x80
 8001ecc:	0276      	lsls	r6, r6, #9
 8001ece:	46b4      	mov	ip, r6
 8001ed0:	4461      	add	r1, ip
 8001ed2:	0c1e      	lsrs	r6, r3, #16
 8001ed4:	1871      	adds	r1, r6, r1
 8001ed6:	0416      	lsls	r6, r2, #16
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	0c36      	lsrs	r6, r6, #16
 8001edc:	199e      	adds	r6, r3, r6
 8001ede:	4288      	cmp	r0, r1
 8001ee0:	d302      	bcc.n	8001ee8 <__aeabi_ddiv+0x1a4>
 8001ee2:	d112      	bne.n	8001f0a <__aeabi_ddiv+0x1c6>
 8001ee4:	42b5      	cmp	r5, r6
 8001ee6:	d210      	bcs.n	8001f0a <__aeabi_ddiv+0x1c6>
 8001ee8:	4643      	mov	r3, r8
 8001eea:	1e5a      	subs	r2, r3, #1
 8001eec:	9b00      	ldr	r3, [sp, #0]
 8001eee:	469c      	mov	ip, r3
 8001ef0:	4465      	add	r5, ip
 8001ef2:	001f      	movs	r7, r3
 8001ef4:	429d      	cmp	r5, r3
 8001ef6:	419b      	sbcs	r3, r3
 8001ef8:	425b      	negs	r3, r3
 8001efa:	191b      	adds	r3, r3, r4
 8001efc:	18c0      	adds	r0, r0, r3
 8001efe:	4284      	cmp	r4, r0
 8001f00:	d200      	bcs.n	8001f04 <__aeabi_ddiv+0x1c0>
 8001f02:	e19e      	b.n	8002242 <__aeabi_ddiv+0x4fe>
 8001f04:	d100      	bne.n	8001f08 <__aeabi_ddiv+0x1c4>
 8001f06:	e199      	b.n	800223c <__aeabi_ddiv+0x4f8>
 8001f08:	4690      	mov	r8, r2
 8001f0a:	1bae      	subs	r6, r5, r6
 8001f0c:	42b5      	cmp	r5, r6
 8001f0e:	41ad      	sbcs	r5, r5
 8001f10:	1a40      	subs	r0, r0, r1
 8001f12:	426d      	negs	r5, r5
 8001f14:	1b40      	subs	r0, r0, r5
 8001f16:	4284      	cmp	r4, r0
 8001f18:	d100      	bne.n	8001f1c <__aeabi_ddiv+0x1d8>
 8001f1a:	e1d2      	b.n	80022c2 <__aeabi_ddiv+0x57e>
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	f7fe f995 	bl	800024c <__aeabi_uidivmod>
 8001f22:	9a01      	ldr	r2, [sp, #4]
 8001f24:	040b      	lsls	r3, r1, #16
 8001f26:	4342      	muls	r2, r0
 8001f28:	0c31      	lsrs	r1, r6, #16
 8001f2a:	0005      	movs	r5, r0
 8001f2c:	4319      	orrs	r1, r3
 8001f2e:	428a      	cmp	r2, r1
 8001f30:	d900      	bls.n	8001f34 <__aeabi_ddiv+0x1f0>
 8001f32:	e16c      	b.n	800220e <__aeabi_ddiv+0x4ca>
 8001f34:	1a88      	subs	r0, r1, r2
 8001f36:	4649      	mov	r1, r9
 8001f38:	f7fe f988 	bl	800024c <__aeabi_uidivmod>
 8001f3c:	9a01      	ldr	r2, [sp, #4]
 8001f3e:	0436      	lsls	r6, r6, #16
 8001f40:	4342      	muls	r2, r0
 8001f42:	0409      	lsls	r1, r1, #16
 8001f44:	0c36      	lsrs	r6, r6, #16
 8001f46:	0003      	movs	r3, r0
 8001f48:	430e      	orrs	r6, r1
 8001f4a:	42b2      	cmp	r2, r6
 8001f4c:	d900      	bls.n	8001f50 <__aeabi_ddiv+0x20c>
 8001f4e:	e153      	b.n	80021f8 <__aeabi_ddiv+0x4b4>
 8001f50:	9803      	ldr	r0, [sp, #12]
 8001f52:	1ab6      	subs	r6, r6, r2
 8001f54:	0002      	movs	r2, r0
 8001f56:	042d      	lsls	r5, r5, #16
 8001f58:	431d      	orrs	r5, r3
 8001f5a:	9f02      	ldr	r7, [sp, #8]
 8001f5c:	042b      	lsls	r3, r5, #16
 8001f5e:	0c1b      	lsrs	r3, r3, #16
 8001f60:	435a      	muls	r2, r3
 8001f62:	437b      	muls	r3, r7
 8001f64:	469c      	mov	ip, r3
 8001f66:	0c29      	lsrs	r1, r5, #16
 8001f68:	4348      	muls	r0, r1
 8001f6a:	0c13      	lsrs	r3, r2, #16
 8001f6c:	4484      	add	ip, r0
 8001f6e:	4463      	add	r3, ip
 8001f70:	4379      	muls	r1, r7
 8001f72:	4298      	cmp	r0, r3
 8001f74:	d903      	bls.n	8001f7e <__aeabi_ddiv+0x23a>
 8001f76:	2080      	movs	r0, #128	; 0x80
 8001f78:	0240      	lsls	r0, r0, #9
 8001f7a:	4684      	mov	ip, r0
 8001f7c:	4461      	add	r1, ip
 8001f7e:	0c18      	lsrs	r0, r3, #16
 8001f80:	0412      	lsls	r2, r2, #16
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	0c12      	lsrs	r2, r2, #16
 8001f86:	1840      	adds	r0, r0, r1
 8001f88:	189b      	adds	r3, r3, r2
 8001f8a:	4286      	cmp	r6, r0
 8001f8c:	d200      	bcs.n	8001f90 <__aeabi_ddiv+0x24c>
 8001f8e:	e100      	b.n	8002192 <__aeabi_ddiv+0x44e>
 8001f90:	d100      	bne.n	8001f94 <__aeabi_ddiv+0x250>
 8001f92:	e0fb      	b.n	800218c <__aeabi_ddiv+0x448>
 8001f94:	2301      	movs	r3, #1
 8001f96:	431d      	orrs	r5, r3
 8001f98:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <__aeabi_ddiv+0x37c>)
 8001f9a:	445b      	add	r3, fp
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	dc00      	bgt.n	8001fa2 <__aeabi_ddiv+0x25e>
 8001fa0:	e0aa      	b.n	80020f8 <__aeabi_ddiv+0x3b4>
 8001fa2:	076a      	lsls	r2, r5, #29
 8001fa4:	d000      	beq.n	8001fa8 <__aeabi_ddiv+0x264>
 8001fa6:	e13d      	b.n	8002224 <__aeabi_ddiv+0x4e0>
 8001fa8:	08e9      	lsrs	r1, r5, #3
 8001faa:	4642      	mov	r2, r8
 8001fac:	01d2      	lsls	r2, r2, #7
 8001fae:	d506      	bpl.n	8001fbe <__aeabi_ddiv+0x27a>
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <__aeabi_ddiv+0x380>)
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	4690      	mov	r8, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	445b      	add	r3, fp
 8001fbe:	4a42      	ldr	r2, [pc, #264]	; (80020c8 <__aeabi_ddiv+0x384>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	dd00      	ble.n	8001fc6 <__aeabi_ddiv+0x282>
 8001fc4:	e723      	b.n	8001e0e <__aeabi_ddiv+0xca>
 8001fc6:	4642      	mov	r2, r8
 8001fc8:	055b      	lsls	r3, r3, #21
 8001fca:	0755      	lsls	r5, r2, #29
 8001fcc:	0252      	lsls	r2, r2, #9
 8001fce:	430d      	orrs	r5, r1
 8001fd0:	0b12      	lsrs	r2, r2, #12
 8001fd2:	0d5b      	lsrs	r3, r3, #21
 8001fd4:	e70d      	b.n	8001df2 <__aeabi_ddiv+0xae>
 8001fd6:	4651      	mov	r1, sl
 8001fd8:	4321      	orrs	r1, r4
 8001fda:	d100      	bne.n	8001fde <__aeabi_ddiv+0x29a>
 8001fdc:	e07c      	b.n	80020d8 <__aeabi_ddiv+0x394>
 8001fde:	2c00      	cmp	r4, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_ddiv+0x2a0>
 8001fe2:	e0fb      	b.n	80021dc <__aeabi_ddiv+0x498>
 8001fe4:	0020      	movs	r0, r4
 8001fe6:	f001 fa63 	bl	80034b0 <__clzsi2>
 8001fea:	0002      	movs	r2, r0
 8001fec:	3a0b      	subs	r2, #11
 8001fee:	231d      	movs	r3, #29
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	4652      	mov	r2, sl
 8001ff4:	0001      	movs	r1, r0
 8001ff6:	40da      	lsrs	r2, r3
 8001ff8:	4653      	mov	r3, sl
 8001ffa:	3908      	subs	r1, #8
 8001ffc:	408b      	lsls	r3, r1
 8001ffe:	408c      	lsls	r4, r1
 8002000:	0019      	movs	r1, r3
 8002002:	4314      	orrs	r4, r2
 8002004:	4b31      	ldr	r3, [pc, #196]	; (80020cc <__aeabi_ddiv+0x388>)
 8002006:	4458      	add	r0, fp
 8002008:	469b      	mov	fp, r3
 800200a:	4483      	add	fp, r0
 800200c:	2000      	movs	r0, #0
 800200e:	e6d9      	b.n	8001dc4 <__aeabi_ddiv+0x80>
 8002010:	0003      	movs	r3, r0
 8002012:	4323      	orrs	r3, r4
 8002014:	4698      	mov	r8, r3
 8002016:	d044      	beq.n	80020a2 <__aeabi_ddiv+0x35e>
 8002018:	2c00      	cmp	r4, #0
 800201a:	d100      	bne.n	800201e <__aeabi_ddiv+0x2da>
 800201c:	e0cf      	b.n	80021be <__aeabi_ddiv+0x47a>
 800201e:	0020      	movs	r0, r4
 8002020:	f001 fa46 	bl	80034b0 <__clzsi2>
 8002024:	0001      	movs	r1, r0
 8002026:	0002      	movs	r2, r0
 8002028:	390b      	subs	r1, #11
 800202a:	231d      	movs	r3, #29
 800202c:	1a5b      	subs	r3, r3, r1
 800202e:	4649      	mov	r1, r9
 8002030:	0010      	movs	r0, r2
 8002032:	40d9      	lsrs	r1, r3
 8002034:	3808      	subs	r0, #8
 8002036:	4084      	lsls	r4, r0
 8002038:	000b      	movs	r3, r1
 800203a:	464d      	mov	r5, r9
 800203c:	4323      	orrs	r3, r4
 800203e:	4698      	mov	r8, r3
 8002040:	4085      	lsls	r5, r0
 8002042:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <__aeabi_ddiv+0x38c>)
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	469b      	mov	fp, r3
 8002048:	2300      	movs	r3, #0
 800204a:	4699      	mov	r9, r3
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	e69e      	b.n	8001d8e <__aeabi_ddiv+0x4a>
 8002050:	0002      	movs	r2, r0
 8002052:	4322      	orrs	r2, r4
 8002054:	4690      	mov	r8, r2
 8002056:	d11d      	bne.n	8002094 <__aeabi_ddiv+0x350>
 8002058:	2208      	movs	r2, #8
 800205a:	469b      	mov	fp, r3
 800205c:	2302      	movs	r3, #2
 800205e:	2500      	movs	r5, #0
 8002060:	4691      	mov	r9, r2
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	e693      	b.n	8001d8e <__aeabi_ddiv+0x4a>
 8002066:	4651      	mov	r1, sl
 8002068:	4321      	orrs	r1, r4
 800206a:	d109      	bne.n	8002080 <__aeabi_ddiv+0x33c>
 800206c:	2302      	movs	r3, #2
 800206e:	464a      	mov	r2, r9
 8002070:	431a      	orrs	r2, r3
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <__aeabi_ddiv+0x390>)
 8002074:	4691      	mov	r9, r2
 8002076:	469c      	mov	ip, r3
 8002078:	2400      	movs	r4, #0
 800207a:	2002      	movs	r0, #2
 800207c:	44e3      	add	fp, ip
 800207e:	e6a1      	b.n	8001dc4 <__aeabi_ddiv+0x80>
 8002080:	2303      	movs	r3, #3
 8002082:	464a      	mov	r2, r9
 8002084:	431a      	orrs	r2, r3
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <__aeabi_ddiv+0x390>)
 8002088:	4691      	mov	r9, r2
 800208a:	469c      	mov	ip, r3
 800208c:	4651      	mov	r1, sl
 800208e:	2003      	movs	r0, #3
 8002090:	44e3      	add	fp, ip
 8002092:	e697      	b.n	8001dc4 <__aeabi_ddiv+0x80>
 8002094:	220c      	movs	r2, #12
 8002096:	469b      	mov	fp, r3
 8002098:	2303      	movs	r3, #3
 800209a:	46a0      	mov	r8, r4
 800209c:	4691      	mov	r9, r2
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	e675      	b.n	8001d8e <__aeabi_ddiv+0x4a>
 80020a2:	2304      	movs	r3, #4
 80020a4:	4699      	mov	r9, r3
 80020a6:	2300      	movs	r3, #0
 80020a8:	469b      	mov	fp, r3
 80020aa:	3301      	adds	r3, #1
 80020ac:	2500      	movs	r5, #0
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	e66d      	b.n	8001d8e <__aeabi_ddiv+0x4a>
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	000007ff 	.word	0x000007ff
 80020b8:	fffffc01 	.word	0xfffffc01
 80020bc:	0800dda8 	.word	0x0800dda8
 80020c0:	000003ff 	.word	0x000003ff
 80020c4:	feffffff 	.word	0xfeffffff
 80020c8:	000007fe 	.word	0x000007fe
 80020cc:	000003f3 	.word	0x000003f3
 80020d0:	fffffc0d 	.word	0xfffffc0d
 80020d4:	fffff801 	.word	0xfffff801
 80020d8:	464a      	mov	r2, r9
 80020da:	2301      	movs	r3, #1
 80020dc:	431a      	orrs	r2, r3
 80020de:	4691      	mov	r9, r2
 80020e0:	2400      	movs	r4, #0
 80020e2:	2001      	movs	r0, #1
 80020e4:	e66e      	b.n	8001dc4 <__aeabi_ddiv+0x80>
 80020e6:	2300      	movs	r3, #0
 80020e8:	2280      	movs	r2, #128	; 0x80
 80020ea:	469a      	mov	sl, r3
 80020ec:	2500      	movs	r5, #0
 80020ee:	4b88      	ldr	r3, [pc, #544]	; (8002310 <__aeabi_ddiv+0x5cc>)
 80020f0:	0312      	lsls	r2, r2, #12
 80020f2:	e67e      	b.n	8001df2 <__aeabi_ddiv+0xae>
 80020f4:	2501      	movs	r5, #1
 80020f6:	426d      	negs	r5, r5
 80020f8:	2201      	movs	r2, #1
 80020fa:	1ad2      	subs	r2, r2, r3
 80020fc:	2a38      	cmp	r2, #56	; 0x38
 80020fe:	dd00      	ble.n	8002102 <__aeabi_ddiv+0x3be>
 8002100:	e674      	b.n	8001dec <__aeabi_ddiv+0xa8>
 8002102:	2a1f      	cmp	r2, #31
 8002104:	dc00      	bgt.n	8002108 <__aeabi_ddiv+0x3c4>
 8002106:	e0bd      	b.n	8002284 <__aeabi_ddiv+0x540>
 8002108:	211f      	movs	r1, #31
 800210a:	4249      	negs	r1, r1
 800210c:	1acb      	subs	r3, r1, r3
 800210e:	4641      	mov	r1, r8
 8002110:	40d9      	lsrs	r1, r3
 8002112:	000b      	movs	r3, r1
 8002114:	2a20      	cmp	r2, #32
 8002116:	d004      	beq.n	8002122 <__aeabi_ddiv+0x3de>
 8002118:	4641      	mov	r1, r8
 800211a:	4a7e      	ldr	r2, [pc, #504]	; (8002314 <__aeabi_ddiv+0x5d0>)
 800211c:	445a      	add	r2, fp
 800211e:	4091      	lsls	r1, r2
 8002120:	430d      	orrs	r5, r1
 8002122:	0029      	movs	r1, r5
 8002124:	1e4a      	subs	r2, r1, #1
 8002126:	4191      	sbcs	r1, r2
 8002128:	4319      	orrs	r1, r3
 800212a:	2307      	movs	r3, #7
 800212c:	001d      	movs	r5, r3
 800212e:	2200      	movs	r2, #0
 8002130:	400d      	ands	r5, r1
 8002132:	420b      	tst	r3, r1
 8002134:	d100      	bne.n	8002138 <__aeabi_ddiv+0x3f4>
 8002136:	e0d0      	b.n	80022da <__aeabi_ddiv+0x596>
 8002138:	220f      	movs	r2, #15
 800213a:	2300      	movs	r3, #0
 800213c:	400a      	ands	r2, r1
 800213e:	2a04      	cmp	r2, #4
 8002140:	d100      	bne.n	8002144 <__aeabi_ddiv+0x400>
 8002142:	e0c7      	b.n	80022d4 <__aeabi_ddiv+0x590>
 8002144:	1d0a      	adds	r2, r1, #4
 8002146:	428a      	cmp	r2, r1
 8002148:	4189      	sbcs	r1, r1
 800214a:	4249      	negs	r1, r1
 800214c:	185b      	adds	r3, r3, r1
 800214e:	0011      	movs	r1, r2
 8002150:	021a      	lsls	r2, r3, #8
 8002152:	d400      	bmi.n	8002156 <__aeabi_ddiv+0x412>
 8002154:	e0be      	b.n	80022d4 <__aeabi_ddiv+0x590>
 8002156:	2301      	movs	r3, #1
 8002158:	2200      	movs	r2, #0
 800215a:	2500      	movs	r5, #0
 800215c:	e649      	b.n	8001df2 <__aeabi_ddiv+0xae>
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	4643      	mov	r3, r8
 8002162:	0312      	lsls	r2, r2, #12
 8002164:	4213      	tst	r3, r2
 8002166:	d008      	beq.n	800217a <__aeabi_ddiv+0x436>
 8002168:	4214      	tst	r4, r2
 800216a:	d106      	bne.n	800217a <__aeabi_ddiv+0x436>
 800216c:	4322      	orrs	r2, r4
 800216e:	0312      	lsls	r2, r2, #12
 8002170:	46ba      	mov	sl, r7
 8002172:	000d      	movs	r5, r1
 8002174:	4b66      	ldr	r3, [pc, #408]	; (8002310 <__aeabi_ddiv+0x5cc>)
 8002176:	0b12      	lsrs	r2, r2, #12
 8002178:	e63b      	b.n	8001df2 <__aeabi_ddiv+0xae>
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	4643      	mov	r3, r8
 800217e:	0312      	lsls	r2, r2, #12
 8002180:	431a      	orrs	r2, r3
 8002182:	0312      	lsls	r2, r2, #12
 8002184:	46b2      	mov	sl, r6
 8002186:	4b62      	ldr	r3, [pc, #392]	; (8002310 <__aeabi_ddiv+0x5cc>)
 8002188:	0b12      	lsrs	r2, r2, #12
 800218a:	e632      	b.n	8001df2 <__aeabi_ddiv+0xae>
 800218c:	2b00      	cmp	r3, #0
 800218e:	d100      	bne.n	8002192 <__aeabi_ddiv+0x44e>
 8002190:	e702      	b.n	8001f98 <__aeabi_ddiv+0x254>
 8002192:	19a6      	adds	r6, r4, r6
 8002194:	1e6a      	subs	r2, r5, #1
 8002196:	42a6      	cmp	r6, r4
 8002198:	d200      	bcs.n	800219c <__aeabi_ddiv+0x458>
 800219a:	e089      	b.n	80022b0 <__aeabi_ddiv+0x56c>
 800219c:	4286      	cmp	r6, r0
 800219e:	d200      	bcs.n	80021a2 <__aeabi_ddiv+0x45e>
 80021a0:	e09f      	b.n	80022e2 <__aeabi_ddiv+0x59e>
 80021a2:	d100      	bne.n	80021a6 <__aeabi_ddiv+0x462>
 80021a4:	e0af      	b.n	8002306 <__aeabi_ddiv+0x5c2>
 80021a6:	0015      	movs	r5, r2
 80021a8:	e6f4      	b.n	8001f94 <__aeabi_ddiv+0x250>
 80021aa:	42a9      	cmp	r1, r5
 80021ac:	d900      	bls.n	80021b0 <__aeabi_ddiv+0x46c>
 80021ae:	e63c      	b.n	8001e2a <__aeabi_ddiv+0xe6>
 80021b0:	4643      	mov	r3, r8
 80021b2:	07de      	lsls	r6, r3, #31
 80021b4:	0858      	lsrs	r0, r3, #1
 80021b6:	086b      	lsrs	r3, r5, #1
 80021b8:	431e      	orrs	r6, r3
 80021ba:	07ed      	lsls	r5, r5, #31
 80021bc:	e63c      	b.n	8001e38 <__aeabi_ddiv+0xf4>
 80021be:	f001 f977 	bl	80034b0 <__clzsi2>
 80021c2:	0001      	movs	r1, r0
 80021c4:	0002      	movs	r2, r0
 80021c6:	3115      	adds	r1, #21
 80021c8:	3220      	adds	r2, #32
 80021ca:	291c      	cmp	r1, #28
 80021cc:	dc00      	bgt.n	80021d0 <__aeabi_ddiv+0x48c>
 80021ce:	e72c      	b.n	800202a <__aeabi_ddiv+0x2e6>
 80021d0:	464b      	mov	r3, r9
 80021d2:	3808      	subs	r0, #8
 80021d4:	4083      	lsls	r3, r0
 80021d6:	2500      	movs	r5, #0
 80021d8:	4698      	mov	r8, r3
 80021da:	e732      	b.n	8002042 <__aeabi_ddiv+0x2fe>
 80021dc:	f001 f968 	bl	80034b0 <__clzsi2>
 80021e0:	0003      	movs	r3, r0
 80021e2:	001a      	movs	r2, r3
 80021e4:	3215      	adds	r2, #21
 80021e6:	3020      	adds	r0, #32
 80021e8:	2a1c      	cmp	r2, #28
 80021ea:	dc00      	bgt.n	80021ee <__aeabi_ddiv+0x4aa>
 80021ec:	e6ff      	b.n	8001fee <__aeabi_ddiv+0x2aa>
 80021ee:	4654      	mov	r4, sl
 80021f0:	3b08      	subs	r3, #8
 80021f2:	2100      	movs	r1, #0
 80021f4:	409c      	lsls	r4, r3
 80021f6:	e705      	b.n	8002004 <__aeabi_ddiv+0x2c0>
 80021f8:	1936      	adds	r6, r6, r4
 80021fa:	3b01      	subs	r3, #1
 80021fc:	42b4      	cmp	r4, r6
 80021fe:	d900      	bls.n	8002202 <__aeabi_ddiv+0x4be>
 8002200:	e6a6      	b.n	8001f50 <__aeabi_ddiv+0x20c>
 8002202:	42b2      	cmp	r2, r6
 8002204:	d800      	bhi.n	8002208 <__aeabi_ddiv+0x4c4>
 8002206:	e6a3      	b.n	8001f50 <__aeabi_ddiv+0x20c>
 8002208:	1e83      	subs	r3, r0, #2
 800220a:	1936      	adds	r6, r6, r4
 800220c:	e6a0      	b.n	8001f50 <__aeabi_ddiv+0x20c>
 800220e:	1909      	adds	r1, r1, r4
 8002210:	3d01      	subs	r5, #1
 8002212:	428c      	cmp	r4, r1
 8002214:	d900      	bls.n	8002218 <__aeabi_ddiv+0x4d4>
 8002216:	e68d      	b.n	8001f34 <__aeabi_ddiv+0x1f0>
 8002218:	428a      	cmp	r2, r1
 800221a:	d800      	bhi.n	800221e <__aeabi_ddiv+0x4da>
 800221c:	e68a      	b.n	8001f34 <__aeabi_ddiv+0x1f0>
 800221e:	1e85      	subs	r5, r0, #2
 8002220:	1909      	adds	r1, r1, r4
 8002222:	e687      	b.n	8001f34 <__aeabi_ddiv+0x1f0>
 8002224:	220f      	movs	r2, #15
 8002226:	402a      	ands	r2, r5
 8002228:	2a04      	cmp	r2, #4
 800222a:	d100      	bne.n	800222e <__aeabi_ddiv+0x4ea>
 800222c:	e6bc      	b.n	8001fa8 <__aeabi_ddiv+0x264>
 800222e:	1d29      	adds	r1, r5, #4
 8002230:	42a9      	cmp	r1, r5
 8002232:	41ad      	sbcs	r5, r5
 8002234:	426d      	negs	r5, r5
 8002236:	08c9      	lsrs	r1, r1, #3
 8002238:	44a8      	add	r8, r5
 800223a:	e6b6      	b.n	8001faa <__aeabi_ddiv+0x266>
 800223c:	42af      	cmp	r7, r5
 800223e:	d900      	bls.n	8002242 <__aeabi_ddiv+0x4fe>
 8002240:	e662      	b.n	8001f08 <__aeabi_ddiv+0x1c4>
 8002242:	4281      	cmp	r1, r0
 8002244:	d804      	bhi.n	8002250 <__aeabi_ddiv+0x50c>
 8002246:	d000      	beq.n	800224a <__aeabi_ddiv+0x506>
 8002248:	e65e      	b.n	8001f08 <__aeabi_ddiv+0x1c4>
 800224a:	42ae      	cmp	r6, r5
 800224c:	d800      	bhi.n	8002250 <__aeabi_ddiv+0x50c>
 800224e:	e65b      	b.n	8001f08 <__aeabi_ddiv+0x1c4>
 8002250:	2302      	movs	r3, #2
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	9b00      	ldr	r3, [sp, #0]
 8002258:	44e0      	add	r8, ip
 800225a:	469c      	mov	ip, r3
 800225c:	4465      	add	r5, ip
 800225e:	429d      	cmp	r5, r3
 8002260:	419b      	sbcs	r3, r3
 8002262:	425b      	negs	r3, r3
 8002264:	191b      	adds	r3, r3, r4
 8002266:	18c0      	adds	r0, r0, r3
 8002268:	e64f      	b.n	8001f0a <__aeabi_ddiv+0x1c6>
 800226a:	42b2      	cmp	r2, r6
 800226c:	d800      	bhi.n	8002270 <__aeabi_ddiv+0x52c>
 800226e:	e612      	b.n	8001e96 <__aeabi_ddiv+0x152>
 8002270:	1e83      	subs	r3, r0, #2
 8002272:	1936      	adds	r6, r6, r4
 8002274:	e60f      	b.n	8001e96 <__aeabi_ddiv+0x152>
 8002276:	428a      	cmp	r2, r1
 8002278:	d800      	bhi.n	800227c <__aeabi_ddiv+0x538>
 800227a:	e5fa      	b.n	8001e72 <__aeabi_ddiv+0x12e>
 800227c:	1e83      	subs	r3, r0, #2
 800227e:	4698      	mov	r8, r3
 8002280:	1909      	adds	r1, r1, r4
 8002282:	e5f6      	b.n	8001e72 <__aeabi_ddiv+0x12e>
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <__aeabi_ddiv+0x5d4>)
 8002286:	0028      	movs	r0, r5
 8002288:	445b      	add	r3, fp
 800228a:	4641      	mov	r1, r8
 800228c:	409d      	lsls	r5, r3
 800228e:	4099      	lsls	r1, r3
 8002290:	40d0      	lsrs	r0, r2
 8002292:	1e6b      	subs	r3, r5, #1
 8002294:	419d      	sbcs	r5, r3
 8002296:	4643      	mov	r3, r8
 8002298:	4301      	orrs	r1, r0
 800229a:	4329      	orrs	r1, r5
 800229c:	40d3      	lsrs	r3, r2
 800229e:	074a      	lsls	r2, r1, #29
 80022a0:	d100      	bne.n	80022a4 <__aeabi_ddiv+0x560>
 80022a2:	e755      	b.n	8002150 <__aeabi_ddiv+0x40c>
 80022a4:	220f      	movs	r2, #15
 80022a6:	400a      	ands	r2, r1
 80022a8:	2a04      	cmp	r2, #4
 80022aa:	d000      	beq.n	80022ae <__aeabi_ddiv+0x56a>
 80022ac:	e74a      	b.n	8002144 <__aeabi_ddiv+0x400>
 80022ae:	e74f      	b.n	8002150 <__aeabi_ddiv+0x40c>
 80022b0:	0015      	movs	r5, r2
 80022b2:	4286      	cmp	r6, r0
 80022b4:	d000      	beq.n	80022b8 <__aeabi_ddiv+0x574>
 80022b6:	e66d      	b.n	8001f94 <__aeabi_ddiv+0x250>
 80022b8:	9a00      	ldr	r2, [sp, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d000      	beq.n	80022c0 <__aeabi_ddiv+0x57c>
 80022be:	e669      	b.n	8001f94 <__aeabi_ddiv+0x250>
 80022c0:	e66a      	b.n	8001f98 <__aeabi_ddiv+0x254>
 80022c2:	4b16      	ldr	r3, [pc, #88]	; (800231c <__aeabi_ddiv+0x5d8>)
 80022c4:	445b      	add	r3, fp
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	dc00      	bgt.n	80022cc <__aeabi_ddiv+0x588>
 80022ca:	e713      	b.n	80020f4 <__aeabi_ddiv+0x3b0>
 80022cc:	2501      	movs	r5, #1
 80022ce:	2100      	movs	r1, #0
 80022d0:	44a8      	add	r8, r5
 80022d2:	e66a      	b.n	8001faa <__aeabi_ddiv+0x266>
 80022d4:	075d      	lsls	r5, r3, #29
 80022d6:	025b      	lsls	r3, r3, #9
 80022d8:	0b1a      	lsrs	r2, r3, #12
 80022da:	08c9      	lsrs	r1, r1, #3
 80022dc:	2300      	movs	r3, #0
 80022de:	430d      	orrs	r5, r1
 80022e0:	e587      	b.n	8001df2 <__aeabi_ddiv+0xae>
 80022e2:	9900      	ldr	r1, [sp, #0]
 80022e4:	3d02      	subs	r5, #2
 80022e6:	004a      	lsls	r2, r1, #1
 80022e8:	428a      	cmp	r2, r1
 80022ea:	41bf      	sbcs	r7, r7
 80022ec:	427f      	negs	r7, r7
 80022ee:	193f      	adds	r7, r7, r4
 80022f0:	19f6      	adds	r6, r6, r7
 80022f2:	9200      	str	r2, [sp, #0]
 80022f4:	e7dd      	b.n	80022b2 <__aeabi_ddiv+0x56e>
 80022f6:	2280      	movs	r2, #128	; 0x80
 80022f8:	4643      	mov	r3, r8
 80022fa:	0312      	lsls	r2, r2, #12
 80022fc:	431a      	orrs	r2, r3
 80022fe:	0312      	lsls	r2, r2, #12
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <__aeabi_ddiv+0x5cc>)
 8002302:	0b12      	lsrs	r2, r2, #12
 8002304:	e575      	b.n	8001df2 <__aeabi_ddiv+0xae>
 8002306:	9900      	ldr	r1, [sp, #0]
 8002308:	4299      	cmp	r1, r3
 800230a:	d3ea      	bcc.n	80022e2 <__aeabi_ddiv+0x59e>
 800230c:	0015      	movs	r5, r2
 800230e:	e7d3      	b.n	80022b8 <__aeabi_ddiv+0x574>
 8002310:	000007ff 	.word	0x000007ff
 8002314:	0000043e 	.word	0x0000043e
 8002318:	0000041e 	.word	0x0000041e
 800231c:	000003ff 	.word	0x000003ff

08002320 <__eqdf2>:
 8002320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002322:	464e      	mov	r6, r9
 8002324:	4645      	mov	r5, r8
 8002326:	46de      	mov	lr, fp
 8002328:	4657      	mov	r7, sl
 800232a:	4690      	mov	r8, r2
 800232c:	b5e0      	push	{r5, r6, r7, lr}
 800232e:	0017      	movs	r7, r2
 8002330:	031a      	lsls	r2, r3, #12
 8002332:	0b12      	lsrs	r2, r2, #12
 8002334:	0005      	movs	r5, r0
 8002336:	4684      	mov	ip, r0
 8002338:	4819      	ldr	r0, [pc, #100]	; (80023a0 <__eqdf2+0x80>)
 800233a:	030e      	lsls	r6, r1, #12
 800233c:	004c      	lsls	r4, r1, #1
 800233e:	4691      	mov	r9, r2
 8002340:	005a      	lsls	r2, r3, #1
 8002342:	0fdb      	lsrs	r3, r3, #31
 8002344:	469b      	mov	fp, r3
 8002346:	0b36      	lsrs	r6, r6, #12
 8002348:	0d64      	lsrs	r4, r4, #21
 800234a:	0fc9      	lsrs	r1, r1, #31
 800234c:	0d52      	lsrs	r2, r2, #21
 800234e:	4284      	cmp	r4, r0
 8002350:	d019      	beq.n	8002386 <__eqdf2+0x66>
 8002352:	4282      	cmp	r2, r0
 8002354:	d010      	beq.n	8002378 <__eqdf2+0x58>
 8002356:	2001      	movs	r0, #1
 8002358:	4294      	cmp	r4, r2
 800235a:	d10e      	bne.n	800237a <__eqdf2+0x5a>
 800235c:	454e      	cmp	r6, r9
 800235e:	d10c      	bne.n	800237a <__eqdf2+0x5a>
 8002360:	2001      	movs	r0, #1
 8002362:	45c4      	cmp	ip, r8
 8002364:	d109      	bne.n	800237a <__eqdf2+0x5a>
 8002366:	4559      	cmp	r1, fp
 8002368:	d017      	beq.n	800239a <__eqdf2+0x7a>
 800236a:	2c00      	cmp	r4, #0
 800236c:	d105      	bne.n	800237a <__eqdf2+0x5a>
 800236e:	0030      	movs	r0, r6
 8002370:	4328      	orrs	r0, r5
 8002372:	1e43      	subs	r3, r0, #1
 8002374:	4198      	sbcs	r0, r3
 8002376:	e000      	b.n	800237a <__eqdf2+0x5a>
 8002378:	2001      	movs	r0, #1
 800237a:	bcf0      	pop	{r4, r5, r6, r7}
 800237c:	46bb      	mov	fp, r7
 800237e:	46b2      	mov	sl, r6
 8002380:	46a9      	mov	r9, r5
 8002382:	46a0      	mov	r8, r4
 8002384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002386:	0033      	movs	r3, r6
 8002388:	2001      	movs	r0, #1
 800238a:	432b      	orrs	r3, r5
 800238c:	d1f5      	bne.n	800237a <__eqdf2+0x5a>
 800238e:	42a2      	cmp	r2, r4
 8002390:	d1f3      	bne.n	800237a <__eqdf2+0x5a>
 8002392:	464b      	mov	r3, r9
 8002394:	433b      	orrs	r3, r7
 8002396:	d1f0      	bne.n	800237a <__eqdf2+0x5a>
 8002398:	e7e2      	b.n	8002360 <__eqdf2+0x40>
 800239a:	2000      	movs	r0, #0
 800239c:	e7ed      	b.n	800237a <__eqdf2+0x5a>
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	000007ff 	.word	0x000007ff

080023a4 <__gedf2>:
 80023a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a6:	4647      	mov	r7, r8
 80023a8:	46ce      	mov	lr, r9
 80023aa:	0004      	movs	r4, r0
 80023ac:	0018      	movs	r0, r3
 80023ae:	0016      	movs	r6, r2
 80023b0:	031b      	lsls	r3, r3, #12
 80023b2:	0b1b      	lsrs	r3, r3, #12
 80023b4:	4d2d      	ldr	r5, [pc, #180]	; (800246c <__gedf2+0xc8>)
 80023b6:	004a      	lsls	r2, r1, #1
 80023b8:	4699      	mov	r9, r3
 80023ba:	b580      	push	{r7, lr}
 80023bc:	0043      	lsls	r3, r0, #1
 80023be:	030f      	lsls	r7, r1, #12
 80023c0:	46a4      	mov	ip, r4
 80023c2:	46b0      	mov	r8, r6
 80023c4:	0b3f      	lsrs	r7, r7, #12
 80023c6:	0d52      	lsrs	r2, r2, #21
 80023c8:	0fc9      	lsrs	r1, r1, #31
 80023ca:	0d5b      	lsrs	r3, r3, #21
 80023cc:	0fc0      	lsrs	r0, r0, #31
 80023ce:	42aa      	cmp	r2, r5
 80023d0:	d021      	beq.n	8002416 <__gedf2+0x72>
 80023d2:	42ab      	cmp	r3, r5
 80023d4:	d013      	beq.n	80023fe <__gedf2+0x5a>
 80023d6:	2a00      	cmp	r2, #0
 80023d8:	d122      	bne.n	8002420 <__gedf2+0x7c>
 80023da:	433c      	orrs	r4, r7
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <__gedf2+0x42>
 80023e0:	464d      	mov	r5, r9
 80023e2:	432e      	orrs	r6, r5
 80023e4:	d022      	beq.n	800242c <__gedf2+0x88>
 80023e6:	2c00      	cmp	r4, #0
 80023e8:	d010      	beq.n	800240c <__gedf2+0x68>
 80023ea:	4281      	cmp	r1, r0
 80023ec:	d022      	beq.n	8002434 <__gedf2+0x90>
 80023ee:	2002      	movs	r0, #2
 80023f0:	3901      	subs	r1, #1
 80023f2:	4008      	ands	r0, r1
 80023f4:	3801      	subs	r0, #1
 80023f6:	bcc0      	pop	{r6, r7}
 80023f8:	46b9      	mov	r9, r7
 80023fa:	46b0      	mov	r8, r6
 80023fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023fe:	464d      	mov	r5, r9
 8002400:	432e      	orrs	r6, r5
 8002402:	d129      	bne.n	8002458 <__gedf2+0xb4>
 8002404:	2a00      	cmp	r2, #0
 8002406:	d1f0      	bne.n	80023ea <__gedf2+0x46>
 8002408:	433c      	orrs	r4, r7
 800240a:	d1ee      	bne.n	80023ea <__gedf2+0x46>
 800240c:	2800      	cmp	r0, #0
 800240e:	d1f2      	bne.n	80023f6 <__gedf2+0x52>
 8002410:	2001      	movs	r0, #1
 8002412:	4240      	negs	r0, r0
 8002414:	e7ef      	b.n	80023f6 <__gedf2+0x52>
 8002416:	003d      	movs	r5, r7
 8002418:	4325      	orrs	r5, r4
 800241a:	d11d      	bne.n	8002458 <__gedf2+0xb4>
 800241c:	4293      	cmp	r3, r2
 800241e:	d0ee      	beq.n	80023fe <__gedf2+0x5a>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e2      	bne.n	80023ea <__gedf2+0x46>
 8002424:	464c      	mov	r4, r9
 8002426:	4326      	orrs	r6, r4
 8002428:	d1df      	bne.n	80023ea <__gedf2+0x46>
 800242a:	e7e0      	b.n	80023ee <__gedf2+0x4a>
 800242c:	2000      	movs	r0, #0
 800242e:	2c00      	cmp	r4, #0
 8002430:	d0e1      	beq.n	80023f6 <__gedf2+0x52>
 8002432:	e7dc      	b.n	80023ee <__gedf2+0x4a>
 8002434:	429a      	cmp	r2, r3
 8002436:	dc0a      	bgt.n	800244e <__gedf2+0xaa>
 8002438:	dbe8      	blt.n	800240c <__gedf2+0x68>
 800243a:	454f      	cmp	r7, r9
 800243c:	d8d7      	bhi.n	80023ee <__gedf2+0x4a>
 800243e:	d00e      	beq.n	800245e <__gedf2+0xba>
 8002440:	2000      	movs	r0, #0
 8002442:	454f      	cmp	r7, r9
 8002444:	d2d7      	bcs.n	80023f6 <__gedf2+0x52>
 8002446:	2900      	cmp	r1, #0
 8002448:	d0e2      	beq.n	8002410 <__gedf2+0x6c>
 800244a:	0008      	movs	r0, r1
 800244c:	e7d3      	b.n	80023f6 <__gedf2+0x52>
 800244e:	4243      	negs	r3, r0
 8002450:	4158      	adcs	r0, r3
 8002452:	0040      	lsls	r0, r0, #1
 8002454:	3801      	subs	r0, #1
 8002456:	e7ce      	b.n	80023f6 <__gedf2+0x52>
 8002458:	2002      	movs	r0, #2
 800245a:	4240      	negs	r0, r0
 800245c:	e7cb      	b.n	80023f6 <__gedf2+0x52>
 800245e:	45c4      	cmp	ip, r8
 8002460:	d8c5      	bhi.n	80023ee <__gedf2+0x4a>
 8002462:	2000      	movs	r0, #0
 8002464:	45c4      	cmp	ip, r8
 8002466:	d2c6      	bcs.n	80023f6 <__gedf2+0x52>
 8002468:	e7ed      	b.n	8002446 <__gedf2+0xa2>
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	000007ff 	.word	0x000007ff

08002470 <__ledf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4647      	mov	r7, r8
 8002474:	46ce      	mov	lr, r9
 8002476:	0004      	movs	r4, r0
 8002478:	0018      	movs	r0, r3
 800247a:	0016      	movs	r6, r2
 800247c:	031b      	lsls	r3, r3, #12
 800247e:	0b1b      	lsrs	r3, r3, #12
 8002480:	4d2c      	ldr	r5, [pc, #176]	; (8002534 <__ledf2+0xc4>)
 8002482:	004a      	lsls	r2, r1, #1
 8002484:	4699      	mov	r9, r3
 8002486:	b580      	push	{r7, lr}
 8002488:	0043      	lsls	r3, r0, #1
 800248a:	030f      	lsls	r7, r1, #12
 800248c:	46a4      	mov	ip, r4
 800248e:	46b0      	mov	r8, r6
 8002490:	0b3f      	lsrs	r7, r7, #12
 8002492:	0d52      	lsrs	r2, r2, #21
 8002494:	0fc9      	lsrs	r1, r1, #31
 8002496:	0d5b      	lsrs	r3, r3, #21
 8002498:	0fc0      	lsrs	r0, r0, #31
 800249a:	42aa      	cmp	r2, r5
 800249c:	d00d      	beq.n	80024ba <__ledf2+0x4a>
 800249e:	42ab      	cmp	r3, r5
 80024a0:	d010      	beq.n	80024c4 <__ledf2+0x54>
 80024a2:	2a00      	cmp	r2, #0
 80024a4:	d127      	bne.n	80024f6 <__ledf2+0x86>
 80024a6:	433c      	orrs	r4, r7
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d111      	bne.n	80024d0 <__ledf2+0x60>
 80024ac:	464d      	mov	r5, r9
 80024ae:	432e      	orrs	r6, r5
 80024b0:	d10e      	bne.n	80024d0 <__ledf2+0x60>
 80024b2:	2000      	movs	r0, #0
 80024b4:	2c00      	cmp	r4, #0
 80024b6:	d015      	beq.n	80024e4 <__ledf2+0x74>
 80024b8:	e00e      	b.n	80024d8 <__ledf2+0x68>
 80024ba:	003d      	movs	r5, r7
 80024bc:	4325      	orrs	r5, r4
 80024be:	d110      	bne.n	80024e2 <__ledf2+0x72>
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d118      	bne.n	80024f6 <__ledf2+0x86>
 80024c4:	464d      	mov	r5, r9
 80024c6:	432e      	orrs	r6, r5
 80024c8:	d10b      	bne.n	80024e2 <__ledf2+0x72>
 80024ca:	2a00      	cmp	r2, #0
 80024cc:	d102      	bne.n	80024d4 <__ledf2+0x64>
 80024ce:	433c      	orrs	r4, r7
 80024d0:	2c00      	cmp	r4, #0
 80024d2:	d00b      	beq.n	80024ec <__ledf2+0x7c>
 80024d4:	4281      	cmp	r1, r0
 80024d6:	d014      	beq.n	8002502 <__ledf2+0x92>
 80024d8:	2002      	movs	r0, #2
 80024da:	3901      	subs	r1, #1
 80024dc:	4008      	ands	r0, r1
 80024de:	3801      	subs	r0, #1
 80024e0:	e000      	b.n	80024e4 <__ledf2+0x74>
 80024e2:	2002      	movs	r0, #2
 80024e4:	bcc0      	pop	{r6, r7}
 80024e6:	46b9      	mov	r9, r7
 80024e8:	46b0      	mov	r8, r6
 80024ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ec:	2800      	cmp	r0, #0
 80024ee:	d1f9      	bne.n	80024e4 <__ledf2+0x74>
 80024f0:	2001      	movs	r0, #1
 80024f2:	4240      	negs	r0, r0
 80024f4:	e7f6      	b.n	80024e4 <__ledf2+0x74>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1ec      	bne.n	80024d4 <__ledf2+0x64>
 80024fa:	464c      	mov	r4, r9
 80024fc:	4326      	orrs	r6, r4
 80024fe:	d1e9      	bne.n	80024d4 <__ledf2+0x64>
 8002500:	e7ea      	b.n	80024d8 <__ledf2+0x68>
 8002502:	429a      	cmp	r2, r3
 8002504:	dd04      	ble.n	8002510 <__ledf2+0xa0>
 8002506:	4243      	negs	r3, r0
 8002508:	4158      	adcs	r0, r3
 800250a:	0040      	lsls	r0, r0, #1
 800250c:	3801      	subs	r0, #1
 800250e:	e7e9      	b.n	80024e4 <__ledf2+0x74>
 8002510:	429a      	cmp	r2, r3
 8002512:	dbeb      	blt.n	80024ec <__ledf2+0x7c>
 8002514:	454f      	cmp	r7, r9
 8002516:	d8df      	bhi.n	80024d8 <__ledf2+0x68>
 8002518:	d006      	beq.n	8002528 <__ledf2+0xb8>
 800251a:	2000      	movs	r0, #0
 800251c:	454f      	cmp	r7, r9
 800251e:	d2e1      	bcs.n	80024e4 <__ledf2+0x74>
 8002520:	2900      	cmp	r1, #0
 8002522:	d0e5      	beq.n	80024f0 <__ledf2+0x80>
 8002524:	0008      	movs	r0, r1
 8002526:	e7dd      	b.n	80024e4 <__ledf2+0x74>
 8002528:	45c4      	cmp	ip, r8
 800252a:	d8d5      	bhi.n	80024d8 <__ledf2+0x68>
 800252c:	2000      	movs	r0, #0
 800252e:	45c4      	cmp	ip, r8
 8002530:	d2d8      	bcs.n	80024e4 <__ledf2+0x74>
 8002532:	e7f5      	b.n	8002520 <__ledf2+0xb0>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4645      	mov	r5, r8
 800253c:	46de      	mov	lr, fp
 800253e:	4657      	mov	r7, sl
 8002540:	464e      	mov	r6, r9
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	469b      	mov	fp, r3
 800254c:	004d      	lsls	r5, r1, #1
 800254e:	0fcb      	lsrs	r3, r1, #31
 8002550:	0004      	movs	r4, r0
 8002552:	4691      	mov	r9, r2
 8002554:	4698      	mov	r8, r3
 8002556:	b087      	sub	sp, #28
 8002558:	0d6d      	lsrs	r5, r5, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e1cd      	b.n	80028fa <__aeabi_dmul+0x3c2>
 800255e:	4bce      	ldr	r3, [pc, #824]	; (8002898 <__aeabi_dmul+0x360>)
 8002560:	429d      	cmp	r5, r3
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e1e9      	b.n	800293a <__aeabi_dmul+0x402>
 8002566:	465a      	mov	r2, fp
 8002568:	0f43      	lsrs	r3, r0, #29
 800256a:	00d2      	lsls	r2, r2, #3
 800256c:	4313      	orrs	r3, r2
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	0412      	lsls	r2, r2, #16
 8002572:	431a      	orrs	r2, r3
 8002574:	00c3      	lsls	r3, r0, #3
 8002576:	469a      	mov	sl, r3
 8002578:	4bc8      	ldr	r3, [pc, #800]	; (800289c <__aeabi_dmul+0x364>)
 800257a:	4693      	mov	fp, r2
 800257c:	469c      	mov	ip, r3
 800257e:	2300      	movs	r3, #0
 8002580:	2600      	movs	r6, #0
 8002582:	4465      	add	r5, ip
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	033c      	lsls	r4, r7, #12
 8002588:	007b      	lsls	r3, r7, #1
 800258a:	4648      	mov	r0, r9
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	0fff      	lsrs	r7, r7, #31
 8002592:	2b00      	cmp	r3, #0
 8002594:	d100      	bne.n	8002598 <__aeabi_dmul+0x60>
 8002596:	e189      	b.n	80028ac <__aeabi_dmul+0x374>
 8002598:	4abf      	ldr	r2, [pc, #764]	; (8002898 <__aeabi_dmul+0x360>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d019      	beq.n	80025d2 <__aeabi_dmul+0x9a>
 800259e:	0f42      	lsrs	r2, r0, #29
 80025a0:	00e4      	lsls	r4, r4, #3
 80025a2:	4322      	orrs	r2, r4
 80025a4:	2480      	movs	r4, #128	; 0x80
 80025a6:	0424      	lsls	r4, r4, #16
 80025a8:	4314      	orrs	r4, r2
 80025aa:	4abc      	ldr	r2, [pc, #752]	; (800289c <__aeabi_dmul+0x364>)
 80025ac:	2100      	movs	r1, #0
 80025ae:	4694      	mov	ip, r2
 80025b0:	4642      	mov	r2, r8
 80025b2:	4463      	add	r3, ip
 80025b4:	195b      	adds	r3, r3, r5
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	9b01      	ldr	r3, [sp, #4]
 80025ba:	407a      	eors	r2, r7
 80025bc:	3301      	adds	r3, #1
 80025be:	00c0      	lsls	r0, r0, #3
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	9302      	str	r3, [sp, #8]
 80025c4:	2e0a      	cmp	r6, #10
 80025c6:	dd1c      	ble.n	8002602 <__aeabi_dmul+0xca>
 80025c8:	003a      	movs	r2, r7
 80025ca:	2e0b      	cmp	r6, #11
 80025cc:	d05e      	beq.n	800268c <__aeabi_dmul+0x154>
 80025ce:	4647      	mov	r7, r8
 80025d0:	e056      	b.n	8002680 <__aeabi_dmul+0x148>
 80025d2:	4649      	mov	r1, r9
 80025d4:	4bb0      	ldr	r3, [pc, #704]	; (8002898 <__aeabi_dmul+0x360>)
 80025d6:	4321      	orrs	r1, r4
 80025d8:	18eb      	adds	r3, r5, r3
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	2900      	cmp	r1, #0
 80025de:	d12a      	bne.n	8002636 <__aeabi_dmul+0xfe>
 80025e0:	2080      	movs	r0, #128	; 0x80
 80025e2:	2202      	movs	r2, #2
 80025e4:	0100      	lsls	r0, r0, #4
 80025e6:	002b      	movs	r3, r5
 80025e8:	4684      	mov	ip, r0
 80025ea:	4316      	orrs	r6, r2
 80025ec:	4642      	mov	r2, r8
 80025ee:	4463      	add	r3, ip
 80025f0:	407a      	eors	r2, r7
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	9302      	str	r3, [sp, #8]
 80025f6:	2e0a      	cmp	r6, #10
 80025f8:	dd00      	ble.n	80025fc <__aeabi_dmul+0xc4>
 80025fa:	e231      	b.n	8002a60 <__aeabi_dmul+0x528>
 80025fc:	2000      	movs	r0, #0
 80025fe:	2400      	movs	r4, #0
 8002600:	2102      	movs	r1, #2
 8002602:	2e02      	cmp	r6, #2
 8002604:	dc26      	bgt.n	8002654 <__aeabi_dmul+0x11c>
 8002606:	3e01      	subs	r6, #1
 8002608:	2e01      	cmp	r6, #1
 800260a:	d852      	bhi.n	80026b2 <__aeabi_dmul+0x17a>
 800260c:	2902      	cmp	r1, #2
 800260e:	d04c      	beq.n	80026aa <__aeabi_dmul+0x172>
 8002610:	2901      	cmp	r1, #1
 8002612:	d000      	beq.n	8002616 <__aeabi_dmul+0xde>
 8002614:	e118      	b.n	8002848 <__aeabi_dmul+0x310>
 8002616:	2300      	movs	r3, #0
 8002618:	2400      	movs	r4, #0
 800261a:	2500      	movs	r5, #0
 800261c:	051b      	lsls	r3, r3, #20
 800261e:	4323      	orrs	r3, r4
 8002620:	07d2      	lsls	r2, r2, #31
 8002622:	4313      	orrs	r3, r2
 8002624:	0028      	movs	r0, r5
 8002626:	0019      	movs	r1, r3
 8002628:	b007      	add	sp, #28
 800262a:	bcf0      	pop	{r4, r5, r6, r7}
 800262c:	46bb      	mov	fp, r7
 800262e:	46b2      	mov	sl, r6
 8002630:	46a9      	mov	r9, r5
 8002632:	46a0      	mov	r8, r4
 8002634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	2203      	movs	r2, #3
 800263a:	0109      	lsls	r1, r1, #4
 800263c:	002b      	movs	r3, r5
 800263e:	468c      	mov	ip, r1
 8002640:	4316      	orrs	r6, r2
 8002642:	4642      	mov	r2, r8
 8002644:	4463      	add	r3, ip
 8002646:	407a      	eors	r2, r7
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	2e0a      	cmp	r6, #10
 800264e:	dd00      	ble.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e228      	b.n	8002aa4 <__aeabi_dmul+0x56c>
 8002652:	2103      	movs	r1, #3
 8002654:	2501      	movs	r5, #1
 8002656:	40b5      	lsls	r5, r6
 8002658:	46ac      	mov	ip, r5
 800265a:	26a6      	movs	r6, #166	; 0xa6
 800265c:	4663      	mov	r3, ip
 800265e:	00f6      	lsls	r6, r6, #3
 8002660:	4035      	ands	r5, r6
 8002662:	4233      	tst	r3, r6
 8002664:	d10b      	bne.n	800267e <__aeabi_dmul+0x146>
 8002666:	2690      	movs	r6, #144	; 0x90
 8002668:	00b6      	lsls	r6, r6, #2
 800266a:	4233      	tst	r3, r6
 800266c:	d118      	bne.n	80026a0 <__aeabi_dmul+0x168>
 800266e:	3eb9      	subs	r6, #185	; 0xb9
 8002670:	3eff      	subs	r6, #255	; 0xff
 8002672:	421e      	tst	r6, r3
 8002674:	d01d      	beq.n	80026b2 <__aeabi_dmul+0x17a>
 8002676:	46a3      	mov	fp, r4
 8002678:	4682      	mov	sl, r0
 800267a:	9100      	str	r1, [sp, #0]
 800267c:	e000      	b.n	8002680 <__aeabi_dmul+0x148>
 800267e:	0017      	movs	r7, r2
 8002680:	9900      	ldr	r1, [sp, #0]
 8002682:	003a      	movs	r2, r7
 8002684:	2902      	cmp	r1, #2
 8002686:	d010      	beq.n	80026aa <__aeabi_dmul+0x172>
 8002688:	465c      	mov	r4, fp
 800268a:	4650      	mov	r0, sl
 800268c:	2903      	cmp	r1, #3
 800268e:	d1bf      	bne.n	8002610 <__aeabi_dmul+0xd8>
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	031b      	lsls	r3, r3, #12
 8002694:	431c      	orrs	r4, r3
 8002696:	0324      	lsls	r4, r4, #12
 8002698:	0005      	movs	r5, r0
 800269a:	4b7f      	ldr	r3, [pc, #508]	; (8002898 <__aeabi_dmul+0x360>)
 800269c:	0b24      	lsrs	r4, r4, #12
 800269e:	e7bd      	b.n	800261c <__aeabi_dmul+0xe4>
 80026a0:	2480      	movs	r4, #128	; 0x80
 80026a2:	2200      	movs	r2, #0
 80026a4:	4b7c      	ldr	r3, [pc, #496]	; (8002898 <__aeabi_dmul+0x360>)
 80026a6:	0324      	lsls	r4, r4, #12
 80026a8:	e7b8      	b.n	800261c <__aeabi_dmul+0xe4>
 80026aa:	2400      	movs	r4, #0
 80026ac:	2500      	movs	r5, #0
 80026ae:	4b7a      	ldr	r3, [pc, #488]	; (8002898 <__aeabi_dmul+0x360>)
 80026b0:	e7b4      	b.n	800261c <__aeabi_dmul+0xe4>
 80026b2:	4653      	mov	r3, sl
 80026b4:	041e      	lsls	r6, r3, #16
 80026b6:	0c36      	lsrs	r6, r6, #16
 80026b8:	0c1f      	lsrs	r7, r3, #16
 80026ba:	0033      	movs	r3, r6
 80026bc:	0c01      	lsrs	r1, r0, #16
 80026be:	0400      	lsls	r0, r0, #16
 80026c0:	0c00      	lsrs	r0, r0, #16
 80026c2:	4343      	muls	r3, r0
 80026c4:	4698      	mov	r8, r3
 80026c6:	0003      	movs	r3, r0
 80026c8:	437b      	muls	r3, r7
 80026ca:	4699      	mov	r9, r3
 80026cc:	0033      	movs	r3, r6
 80026ce:	434b      	muls	r3, r1
 80026d0:	469c      	mov	ip, r3
 80026d2:	4643      	mov	r3, r8
 80026d4:	000d      	movs	r5, r1
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	469a      	mov	sl, r3
 80026da:	437d      	muls	r5, r7
 80026dc:	44cc      	add	ip, r9
 80026de:	44d4      	add	ip, sl
 80026e0:	9500      	str	r5, [sp, #0]
 80026e2:	45e1      	cmp	r9, ip
 80026e4:	d904      	bls.n	80026f0 <__aeabi_dmul+0x1b8>
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	025b      	lsls	r3, r3, #9
 80026ea:	4699      	mov	r9, r3
 80026ec:	444d      	add	r5, r9
 80026ee:	9500      	str	r5, [sp, #0]
 80026f0:	4663      	mov	r3, ip
 80026f2:	0c1b      	lsrs	r3, r3, #16
 80026f4:	001d      	movs	r5, r3
 80026f6:	4663      	mov	r3, ip
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	469c      	mov	ip, r3
 80026fc:	4643      	mov	r3, r8
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	4698      	mov	r8, r3
 8002704:	4663      	mov	r3, ip
 8002706:	4443      	add	r3, r8
 8002708:	9303      	str	r3, [sp, #12]
 800270a:	0c23      	lsrs	r3, r4, #16
 800270c:	4698      	mov	r8, r3
 800270e:	0033      	movs	r3, r6
 8002710:	0424      	lsls	r4, r4, #16
 8002712:	0c24      	lsrs	r4, r4, #16
 8002714:	4363      	muls	r3, r4
 8002716:	469c      	mov	ip, r3
 8002718:	0023      	movs	r3, r4
 800271a:	437b      	muls	r3, r7
 800271c:	4699      	mov	r9, r3
 800271e:	4643      	mov	r3, r8
 8002720:	435e      	muls	r6, r3
 8002722:	435f      	muls	r7, r3
 8002724:	444e      	add	r6, r9
 8002726:	4663      	mov	r3, ip
 8002728:	46b2      	mov	sl, r6
 800272a:	0c1e      	lsrs	r6, r3, #16
 800272c:	4456      	add	r6, sl
 800272e:	45b1      	cmp	r9, r6
 8002730:	d903      	bls.n	800273a <__aeabi_dmul+0x202>
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	025b      	lsls	r3, r3, #9
 8002736:	4699      	mov	r9, r3
 8002738:	444f      	add	r7, r9
 800273a:	0c33      	lsrs	r3, r6, #16
 800273c:	4699      	mov	r9, r3
 800273e:	003b      	movs	r3, r7
 8002740:	444b      	add	r3, r9
 8002742:	9305      	str	r3, [sp, #20]
 8002744:	4663      	mov	r3, ip
 8002746:	46ac      	mov	ip, r5
 8002748:	041f      	lsls	r7, r3, #16
 800274a:	0c3f      	lsrs	r7, r7, #16
 800274c:	0436      	lsls	r6, r6, #16
 800274e:	19f6      	adds	r6, r6, r7
 8002750:	44b4      	add	ip, r6
 8002752:	4663      	mov	r3, ip
 8002754:	9304      	str	r3, [sp, #16]
 8002756:	465b      	mov	r3, fp
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	469c      	mov	ip, r3
 800275c:	465b      	mov	r3, fp
 800275e:	041f      	lsls	r7, r3, #16
 8002760:	0c3f      	lsrs	r7, r7, #16
 8002762:	003b      	movs	r3, r7
 8002764:	4343      	muls	r3, r0
 8002766:	4699      	mov	r9, r3
 8002768:	4663      	mov	r3, ip
 800276a:	4343      	muls	r3, r0
 800276c:	469a      	mov	sl, r3
 800276e:	464b      	mov	r3, r9
 8002770:	4660      	mov	r0, ip
 8002772:	0c1b      	lsrs	r3, r3, #16
 8002774:	469b      	mov	fp, r3
 8002776:	4348      	muls	r0, r1
 8002778:	4379      	muls	r1, r7
 800277a:	4451      	add	r1, sl
 800277c:	4459      	add	r1, fp
 800277e:	458a      	cmp	sl, r1
 8002780:	d903      	bls.n	800278a <__aeabi_dmul+0x252>
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	025b      	lsls	r3, r3, #9
 8002786:	469a      	mov	sl, r3
 8002788:	4450      	add	r0, sl
 800278a:	0c0b      	lsrs	r3, r1, #16
 800278c:	469a      	mov	sl, r3
 800278e:	464b      	mov	r3, r9
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	4699      	mov	r9, r3
 8002796:	003b      	movs	r3, r7
 8002798:	4363      	muls	r3, r4
 800279a:	0409      	lsls	r1, r1, #16
 800279c:	4645      	mov	r5, r8
 800279e:	4449      	add	r1, r9
 80027a0:	4699      	mov	r9, r3
 80027a2:	4663      	mov	r3, ip
 80027a4:	435c      	muls	r4, r3
 80027a6:	436b      	muls	r3, r5
 80027a8:	469c      	mov	ip, r3
 80027aa:	464b      	mov	r3, r9
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	4698      	mov	r8, r3
 80027b0:	436f      	muls	r7, r5
 80027b2:	193f      	adds	r7, r7, r4
 80027b4:	4447      	add	r7, r8
 80027b6:	4450      	add	r0, sl
 80027b8:	42bc      	cmp	r4, r7
 80027ba:	d903      	bls.n	80027c4 <__aeabi_dmul+0x28c>
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	025b      	lsls	r3, r3, #9
 80027c0:	4698      	mov	r8, r3
 80027c2:	44c4      	add	ip, r8
 80027c4:	9b04      	ldr	r3, [sp, #16]
 80027c6:	9d00      	ldr	r5, [sp, #0]
 80027c8:	4698      	mov	r8, r3
 80027ca:	4445      	add	r5, r8
 80027cc:	42b5      	cmp	r5, r6
 80027ce:	41b6      	sbcs	r6, r6
 80027d0:	4273      	negs	r3, r6
 80027d2:	4698      	mov	r8, r3
 80027d4:	464b      	mov	r3, r9
 80027d6:	041e      	lsls	r6, r3, #16
 80027d8:	9b05      	ldr	r3, [sp, #20]
 80027da:	043c      	lsls	r4, r7, #16
 80027dc:	4699      	mov	r9, r3
 80027de:	0c36      	lsrs	r6, r6, #16
 80027e0:	19a4      	adds	r4, r4, r6
 80027e2:	444c      	add	r4, r9
 80027e4:	46a1      	mov	r9, r4
 80027e6:	4683      	mov	fp, r0
 80027e8:	186e      	adds	r6, r5, r1
 80027ea:	44c1      	add	r9, r8
 80027ec:	428e      	cmp	r6, r1
 80027ee:	4189      	sbcs	r1, r1
 80027f0:	44cb      	add	fp, r9
 80027f2:	465d      	mov	r5, fp
 80027f4:	4249      	negs	r1, r1
 80027f6:	186d      	adds	r5, r5, r1
 80027f8:	429c      	cmp	r4, r3
 80027fa:	41a4      	sbcs	r4, r4
 80027fc:	45c1      	cmp	r9, r8
 80027fe:	419b      	sbcs	r3, r3
 8002800:	4583      	cmp	fp, r0
 8002802:	4180      	sbcs	r0, r0
 8002804:	428d      	cmp	r5, r1
 8002806:	4189      	sbcs	r1, r1
 8002808:	425b      	negs	r3, r3
 800280a:	4264      	negs	r4, r4
 800280c:	431c      	orrs	r4, r3
 800280e:	4240      	negs	r0, r0
 8002810:	9b03      	ldr	r3, [sp, #12]
 8002812:	4249      	negs	r1, r1
 8002814:	4301      	orrs	r1, r0
 8002816:	0270      	lsls	r0, r6, #9
 8002818:	0c3f      	lsrs	r7, r7, #16
 800281a:	4318      	orrs	r0, r3
 800281c:	19e4      	adds	r4, r4, r7
 800281e:	1e47      	subs	r7, r0, #1
 8002820:	41b8      	sbcs	r0, r7
 8002822:	1864      	adds	r4, r4, r1
 8002824:	4464      	add	r4, ip
 8002826:	0df6      	lsrs	r6, r6, #23
 8002828:	0261      	lsls	r1, r4, #9
 800282a:	4330      	orrs	r0, r6
 800282c:	0dec      	lsrs	r4, r5, #23
 800282e:	026e      	lsls	r6, r5, #9
 8002830:	430c      	orrs	r4, r1
 8002832:	4330      	orrs	r0, r6
 8002834:	01c9      	lsls	r1, r1, #7
 8002836:	d400      	bmi.n	800283a <__aeabi_dmul+0x302>
 8002838:	e0f1      	b.n	8002a1e <__aeabi_dmul+0x4e6>
 800283a:	2101      	movs	r1, #1
 800283c:	0843      	lsrs	r3, r0, #1
 800283e:	4001      	ands	r1, r0
 8002840:	430b      	orrs	r3, r1
 8002842:	07e0      	lsls	r0, r4, #31
 8002844:	4318      	orrs	r0, r3
 8002846:	0864      	lsrs	r4, r4, #1
 8002848:	4915      	ldr	r1, [pc, #84]	; (80028a0 <__aeabi_dmul+0x368>)
 800284a:	9b02      	ldr	r3, [sp, #8]
 800284c:	468c      	mov	ip, r1
 800284e:	4463      	add	r3, ip
 8002850:	2b00      	cmp	r3, #0
 8002852:	dc00      	bgt.n	8002856 <__aeabi_dmul+0x31e>
 8002854:	e097      	b.n	8002986 <__aeabi_dmul+0x44e>
 8002856:	0741      	lsls	r1, r0, #29
 8002858:	d009      	beq.n	800286e <__aeabi_dmul+0x336>
 800285a:	210f      	movs	r1, #15
 800285c:	4001      	ands	r1, r0
 800285e:	2904      	cmp	r1, #4
 8002860:	d005      	beq.n	800286e <__aeabi_dmul+0x336>
 8002862:	1d01      	adds	r1, r0, #4
 8002864:	4281      	cmp	r1, r0
 8002866:	4180      	sbcs	r0, r0
 8002868:	4240      	negs	r0, r0
 800286a:	1824      	adds	r4, r4, r0
 800286c:	0008      	movs	r0, r1
 800286e:	01e1      	lsls	r1, r4, #7
 8002870:	d506      	bpl.n	8002880 <__aeabi_dmul+0x348>
 8002872:	2180      	movs	r1, #128	; 0x80
 8002874:	00c9      	lsls	r1, r1, #3
 8002876:	468c      	mov	ip, r1
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <__aeabi_dmul+0x36c>)
 800287a:	401c      	ands	r4, r3
 800287c:	9b02      	ldr	r3, [sp, #8]
 800287e:	4463      	add	r3, ip
 8002880:	4909      	ldr	r1, [pc, #36]	; (80028a8 <__aeabi_dmul+0x370>)
 8002882:	428b      	cmp	r3, r1
 8002884:	dd00      	ble.n	8002888 <__aeabi_dmul+0x350>
 8002886:	e710      	b.n	80026aa <__aeabi_dmul+0x172>
 8002888:	0761      	lsls	r1, r4, #29
 800288a:	08c5      	lsrs	r5, r0, #3
 800288c:	0264      	lsls	r4, r4, #9
 800288e:	055b      	lsls	r3, r3, #21
 8002890:	430d      	orrs	r5, r1
 8002892:	0b24      	lsrs	r4, r4, #12
 8002894:	0d5b      	lsrs	r3, r3, #21
 8002896:	e6c1      	b.n	800261c <__aeabi_dmul+0xe4>
 8002898:	000007ff 	.word	0x000007ff
 800289c:	fffffc01 	.word	0xfffffc01
 80028a0:	000003ff 	.word	0x000003ff
 80028a4:	feffffff 	.word	0xfeffffff
 80028a8:	000007fe 	.word	0x000007fe
 80028ac:	464b      	mov	r3, r9
 80028ae:	4323      	orrs	r3, r4
 80028b0:	d059      	beq.n	8002966 <__aeabi_dmul+0x42e>
 80028b2:	2c00      	cmp	r4, #0
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dmul+0x380>
 80028b6:	e0a3      	b.n	8002a00 <__aeabi_dmul+0x4c8>
 80028b8:	0020      	movs	r0, r4
 80028ba:	f000 fdf9 	bl	80034b0 <__clzsi2>
 80028be:	0001      	movs	r1, r0
 80028c0:	0003      	movs	r3, r0
 80028c2:	390b      	subs	r1, #11
 80028c4:	221d      	movs	r2, #29
 80028c6:	1a52      	subs	r2, r2, r1
 80028c8:	4649      	mov	r1, r9
 80028ca:	0018      	movs	r0, r3
 80028cc:	40d1      	lsrs	r1, r2
 80028ce:	464a      	mov	r2, r9
 80028d0:	3808      	subs	r0, #8
 80028d2:	4082      	lsls	r2, r0
 80028d4:	4084      	lsls	r4, r0
 80028d6:	0010      	movs	r0, r2
 80028d8:	430c      	orrs	r4, r1
 80028da:	4a74      	ldr	r2, [pc, #464]	; (8002aac <__aeabi_dmul+0x574>)
 80028dc:	1aeb      	subs	r3, r5, r3
 80028de:	4694      	mov	ip, r2
 80028e0:	4642      	mov	r2, r8
 80028e2:	4463      	add	r3, ip
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	9b01      	ldr	r3, [sp, #4]
 80028e8:	407a      	eors	r2, r7
 80028ea:	3301      	adds	r3, #1
 80028ec:	2100      	movs	r1, #0
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	9302      	str	r3, [sp, #8]
 80028f2:	2e0a      	cmp	r6, #10
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x3c0>
 80028f6:	e667      	b.n	80025c8 <__aeabi_dmul+0x90>
 80028f8:	e683      	b.n	8002602 <__aeabi_dmul+0xca>
 80028fa:	465b      	mov	r3, fp
 80028fc:	4303      	orrs	r3, r0
 80028fe:	469a      	mov	sl, r3
 8002900:	d02a      	beq.n	8002958 <__aeabi_dmul+0x420>
 8002902:	465b      	mov	r3, fp
 8002904:	2b00      	cmp	r3, #0
 8002906:	d06d      	beq.n	80029e4 <__aeabi_dmul+0x4ac>
 8002908:	4658      	mov	r0, fp
 800290a:	f000 fdd1 	bl	80034b0 <__clzsi2>
 800290e:	0001      	movs	r1, r0
 8002910:	0003      	movs	r3, r0
 8002912:	390b      	subs	r1, #11
 8002914:	221d      	movs	r2, #29
 8002916:	1a52      	subs	r2, r2, r1
 8002918:	0021      	movs	r1, r4
 800291a:	0018      	movs	r0, r3
 800291c:	465d      	mov	r5, fp
 800291e:	40d1      	lsrs	r1, r2
 8002920:	3808      	subs	r0, #8
 8002922:	4085      	lsls	r5, r0
 8002924:	000a      	movs	r2, r1
 8002926:	4084      	lsls	r4, r0
 8002928:	432a      	orrs	r2, r5
 800292a:	4693      	mov	fp, r2
 800292c:	46a2      	mov	sl, r4
 800292e:	4d5f      	ldr	r5, [pc, #380]	; (8002aac <__aeabi_dmul+0x574>)
 8002930:	2600      	movs	r6, #0
 8002932:	1aed      	subs	r5, r5, r3
 8002934:	2300      	movs	r3, #0
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	e625      	b.n	8002586 <__aeabi_dmul+0x4e>
 800293a:	465b      	mov	r3, fp
 800293c:	4303      	orrs	r3, r0
 800293e:	469a      	mov	sl, r3
 8002940:	d105      	bne.n	800294e <__aeabi_dmul+0x416>
 8002942:	2300      	movs	r3, #0
 8002944:	469b      	mov	fp, r3
 8002946:	3302      	adds	r3, #2
 8002948:	2608      	movs	r6, #8
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	e61b      	b.n	8002586 <__aeabi_dmul+0x4e>
 800294e:	2303      	movs	r3, #3
 8002950:	4682      	mov	sl, r0
 8002952:	260c      	movs	r6, #12
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	e616      	b.n	8002586 <__aeabi_dmul+0x4e>
 8002958:	2300      	movs	r3, #0
 800295a:	469b      	mov	fp, r3
 800295c:	3301      	adds	r3, #1
 800295e:	2604      	movs	r6, #4
 8002960:	2500      	movs	r5, #0
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	e60f      	b.n	8002586 <__aeabi_dmul+0x4e>
 8002966:	4642      	mov	r2, r8
 8002968:	3301      	adds	r3, #1
 800296a:	9501      	str	r5, [sp, #4]
 800296c:	431e      	orrs	r6, r3
 800296e:	9b01      	ldr	r3, [sp, #4]
 8002970:	407a      	eors	r2, r7
 8002972:	3301      	adds	r3, #1
 8002974:	2400      	movs	r4, #0
 8002976:	2000      	movs	r0, #0
 8002978:	2101      	movs	r1, #1
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	9302      	str	r3, [sp, #8]
 800297e:	2e0a      	cmp	r6, #10
 8002980:	dd00      	ble.n	8002984 <__aeabi_dmul+0x44c>
 8002982:	e621      	b.n	80025c8 <__aeabi_dmul+0x90>
 8002984:	e63d      	b.n	8002602 <__aeabi_dmul+0xca>
 8002986:	2101      	movs	r1, #1
 8002988:	1ac9      	subs	r1, r1, r3
 800298a:	2938      	cmp	r1, #56	; 0x38
 800298c:	dd00      	ble.n	8002990 <__aeabi_dmul+0x458>
 800298e:	e642      	b.n	8002616 <__aeabi_dmul+0xde>
 8002990:	291f      	cmp	r1, #31
 8002992:	dd47      	ble.n	8002a24 <__aeabi_dmul+0x4ec>
 8002994:	261f      	movs	r6, #31
 8002996:	0025      	movs	r5, r4
 8002998:	4276      	negs	r6, r6
 800299a:	1af3      	subs	r3, r6, r3
 800299c:	40dd      	lsrs	r5, r3
 800299e:	002b      	movs	r3, r5
 80029a0:	2920      	cmp	r1, #32
 80029a2:	d005      	beq.n	80029b0 <__aeabi_dmul+0x478>
 80029a4:	4942      	ldr	r1, [pc, #264]	; (8002ab0 <__aeabi_dmul+0x578>)
 80029a6:	9d02      	ldr	r5, [sp, #8]
 80029a8:	468c      	mov	ip, r1
 80029aa:	4465      	add	r5, ip
 80029ac:	40ac      	lsls	r4, r5
 80029ae:	4320      	orrs	r0, r4
 80029b0:	1e41      	subs	r1, r0, #1
 80029b2:	4188      	sbcs	r0, r1
 80029b4:	4318      	orrs	r0, r3
 80029b6:	2307      	movs	r3, #7
 80029b8:	001d      	movs	r5, r3
 80029ba:	2400      	movs	r4, #0
 80029bc:	4005      	ands	r5, r0
 80029be:	4203      	tst	r3, r0
 80029c0:	d04a      	beq.n	8002a58 <__aeabi_dmul+0x520>
 80029c2:	230f      	movs	r3, #15
 80029c4:	2400      	movs	r4, #0
 80029c6:	4003      	ands	r3, r0
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d042      	beq.n	8002a52 <__aeabi_dmul+0x51a>
 80029cc:	1d03      	adds	r3, r0, #4
 80029ce:	4283      	cmp	r3, r0
 80029d0:	4180      	sbcs	r0, r0
 80029d2:	4240      	negs	r0, r0
 80029d4:	1824      	adds	r4, r4, r0
 80029d6:	0018      	movs	r0, r3
 80029d8:	0223      	lsls	r3, r4, #8
 80029da:	d53a      	bpl.n	8002a52 <__aeabi_dmul+0x51a>
 80029dc:	2301      	movs	r3, #1
 80029de:	2400      	movs	r4, #0
 80029e0:	2500      	movs	r5, #0
 80029e2:	e61b      	b.n	800261c <__aeabi_dmul+0xe4>
 80029e4:	f000 fd64 	bl	80034b0 <__clzsi2>
 80029e8:	0001      	movs	r1, r0
 80029ea:	0003      	movs	r3, r0
 80029ec:	3115      	adds	r1, #21
 80029ee:	3320      	adds	r3, #32
 80029f0:	291c      	cmp	r1, #28
 80029f2:	dd8f      	ble.n	8002914 <__aeabi_dmul+0x3dc>
 80029f4:	3808      	subs	r0, #8
 80029f6:	2200      	movs	r2, #0
 80029f8:	4084      	lsls	r4, r0
 80029fa:	4692      	mov	sl, r2
 80029fc:	46a3      	mov	fp, r4
 80029fe:	e796      	b.n	800292e <__aeabi_dmul+0x3f6>
 8002a00:	f000 fd56 	bl	80034b0 <__clzsi2>
 8002a04:	0001      	movs	r1, r0
 8002a06:	0003      	movs	r3, r0
 8002a08:	3115      	adds	r1, #21
 8002a0a:	3320      	adds	r3, #32
 8002a0c:	291c      	cmp	r1, #28
 8002a0e:	dc00      	bgt.n	8002a12 <__aeabi_dmul+0x4da>
 8002a10:	e758      	b.n	80028c4 <__aeabi_dmul+0x38c>
 8002a12:	0002      	movs	r2, r0
 8002a14:	464c      	mov	r4, r9
 8002a16:	3a08      	subs	r2, #8
 8002a18:	2000      	movs	r0, #0
 8002a1a:	4094      	lsls	r4, r2
 8002a1c:	e75d      	b.n	80028da <__aeabi_dmul+0x3a2>
 8002a1e:	9b01      	ldr	r3, [sp, #4]
 8002a20:	9302      	str	r3, [sp, #8]
 8002a22:	e711      	b.n	8002848 <__aeabi_dmul+0x310>
 8002a24:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <__aeabi_dmul+0x57c>)
 8002a26:	0026      	movs	r6, r4
 8002a28:	469c      	mov	ip, r3
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	9d02      	ldr	r5, [sp, #8]
 8002a2e:	40cb      	lsrs	r3, r1
 8002a30:	4465      	add	r5, ip
 8002a32:	40ae      	lsls	r6, r5
 8002a34:	431e      	orrs	r6, r3
 8002a36:	0003      	movs	r3, r0
 8002a38:	40ab      	lsls	r3, r5
 8002a3a:	1e58      	subs	r0, r3, #1
 8002a3c:	4183      	sbcs	r3, r0
 8002a3e:	0030      	movs	r0, r6
 8002a40:	4318      	orrs	r0, r3
 8002a42:	40cc      	lsrs	r4, r1
 8002a44:	0743      	lsls	r3, r0, #29
 8002a46:	d0c7      	beq.n	80029d8 <__aeabi_dmul+0x4a0>
 8002a48:	230f      	movs	r3, #15
 8002a4a:	4003      	ands	r3, r0
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d1bd      	bne.n	80029cc <__aeabi_dmul+0x494>
 8002a50:	e7c2      	b.n	80029d8 <__aeabi_dmul+0x4a0>
 8002a52:	0765      	lsls	r5, r4, #29
 8002a54:	0264      	lsls	r4, r4, #9
 8002a56:	0b24      	lsrs	r4, r4, #12
 8002a58:	08c0      	lsrs	r0, r0, #3
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	4305      	orrs	r5, r0
 8002a5e:	e5dd      	b.n	800261c <__aeabi_dmul+0xe4>
 8002a60:	2500      	movs	r5, #0
 8002a62:	2302      	movs	r3, #2
 8002a64:	2e0f      	cmp	r6, #15
 8002a66:	d10c      	bne.n	8002a82 <__aeabi_dmul+0x54a>
 8002a68:	2480      	movs	r4, #128	; 0x80
 8002a6a:	465b      	mov	r3, fp
 8002a6c:	0324      	lsls	r4, r4, #12
 8002a6e:	4223      	tst	r3, r4
 8002a70:	d00e      	beq.n	8002a90 <__aeabi_dmul+0x558>
 8002a72:	4221      	tst	r1, r4
 8002a74:	d10c      	bne.n	8002a90 <__aeabi_dmul+0x558>
 8002a76:	430c      	orrs	r4, r1
 8002a78:	0324      	lsls	r4, r4, #12
 8002a7a:	003a      	movs	r2, r7
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <__aeabi_dmul+0x580>)
 8002a7e:	0b24      	lsrs	r4, r4, #12
 8002a80:	e5cc      	b.n	800261c <__aeabi_dmul+0xe4>
 8002a82:	2e0b      	cmp	r6, #11
 8002a84:	d000      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a86:	e5a2      	b.n	80025ce <__aeabi_dmul+0x96>
 8002a88:	468b      	mov	fp, r1
 8002a8a:	46aa      	mov	sl, r5
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	e5f7      	b.n	8002680 <__aeabi_dmul+0x148>
 8002a90:	2480      	movs	r4, #128	; 0x80
 8002a92:	465b      	mov	r3, fp
 8002a94:	0324      	lsls	r4, r4, #12
 8002a96:	431c      	orrs	r4, r3
 8002a98:	0324      	lsls	r4, r4, #12
 8002a9a:	4642      	mov	r2, r8
 8002a9c:	4655      	mov	r5, sl
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <__aeabi_dmul+0x580>)
 8002aa0:	0b24      	lsrs	r4, r4, #12
 8002aa2:	e5bb      	b.n	800261c <__aeabi_dmul+0xe4>
 8002aa4:	464d      	mov	r5, r9
 8002aa6:	0021      	movs	r1, r4
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e7db      	b.n	8002a64 <__aeabi_dmul+0x52c>
 8002aac:	fffffc0d 	.word	0xfffffc0d
 8002ab0:	0000043e 	.word	0x0000043e
 8002ab4:	0000041e 	.word	0x0000041e
 8002ab8:	000007ff 	.word	0x000007ff

08002abc <__aeabi_dsub>:
 8002abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002abe:	4657      	mov	r7, sl
 8002ac0:	464e      	mov	r6, r9
 8002ac2:	4645      	mov	r5, r8
 8002ac4:	46de      	mov	lr, fp
 8002ac6:	b5e0      	push	{r5, r6, r7, lr}
 8002ac8:	000d      	movs	r5, r1
 8002aca:	0004      	movs	r4, r0
 8002acc:	0019      	movs	r1, r3
 8002ace:	0010      	movs	r0, r2
 8002ad0:	032b      	lsls	r3, r5, #12
 8002ad2:	0a5b      	lsrs	r3, r3, #9
 8002ad4:	0f62      	lsrs	r2, r4, #29
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	00e3      	lsls	r3, r4, #3
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	0a64      	lsrs	r4, r4, #9
 8002ade:	0f47      	lsrs	r7, r0, #29
 8002ae0:	4327      	orrs	r7, r4
 8002ae2:	4cd0      	ldr	r4, [pc, #832]	; (8002e24 <__aeabi_dsub+0x368>)
 8002ae4:	006e      	lsls	r6, r5, #1
 8002ae6:	4691      	mov	r9, r2
 8002ae8:	b083      	sub	sp, #12
 8002aea:	004a      	lsls	r2, r1, #1
 8002aec:	00c0      	lsls	r0, r0, #3
 8002aee:	4698      	mov	r8, r3
 8002af0:	46a2      	mov	sl, r4
 8002af2:	0d76      	lsrs	r6, r6, #21
 8002af4:	0fed      	lsrs	r5, r5, #31
 8002af6:	0d52      	lsrs	r2, r2, #21
 8002af8:	0fc9      	lsrs	r1, r1, #31
 8002afa:	9001      	str	r0, [sp, #4]
 8002afc:	42a2      	cmp	r2, r4
 8002afe:	d100      	bne.n	8002b02 <__aeabi_dsub+0x46>
 8002b00:	e0b9      	b.n	8002c76 <__aeabi_dsub+0x1ba>
 8002b02:	2401      	movs	r4, #1
 8002b04:	4061      	eors	r1, r4
 8002b06:	468b      	mov	fp, r1
 8002b08:	428d      	cmp	r5, r1
 8002b0a:	d100      	bne.n	8002b0e <__aeabi_dsub+0x52>
 8002b0c:	e08d      	b.n	8002c2a <__aeabi_dsub+0x16e>
 8002b0e:	1ab4      	subs	r4, r6, r2
 8002b10:	46a4      	mov	ip, r4
 8002b12:	2c00      	cmp	r4, #0
 8002b14:	dc00      	bgt.n	8002b18 <__aeabi_dsub+0x5c>
 8002b16:	e0b7      	b.n	8002c88 <__aeabi_dsub+0x1cc>
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d100      	bne.n	8002b1e <__aeabi_dsub+0x62>
 8002b1c:	e0cb      	b.n	8002cb6 <__aeabi_dsub+0x1fa>
 8002b1e:	4ac1      	ldr	r2, [pc, #772]	; (8002e24 <__aeabi_dsub+0x368>)
 8002b20:	4296      	cmp	r6, r2
 8002b22:	d100      	bne.n	8002b26 <__aeabi_dsub+0x6a>
 8002b24:	e186      	b.n	8002e34 <__aeabi_dsub+0x378>
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	0412      	lsls	r2, r2, #16
 8002b2a:	4317      	orrs	r7, r2
 8002b2c:	4662      	mov	r2, ip
 8002b2e:	2a38      	cmp	r2, #56	; 0x38
 8002b30:	dd00      	ble.n	8002b34 <__aeabi_dsub+0x78>
 8002b32:	e1a4      	b.n	8002e7e <__aeabi_dsub+0x3c2>
 8002b34:	2a1f      	cmp	r2, #31
 8002b36:	dd00      	ble.n	8002b3a <__aeabi_dsub+0x7e>
 8002b38:	e21d      	b.n	8002f76 <__aeabi_dsub+0x4ba>
 8002b3a:	4661      	mov	r1, ip
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	003c      	movs	r4, r7
 8002b40:	1a52      	subs	r2, r2, r1
 8002b42:	0001      	movs	r1, r0
 8002b44:	4090      	lsls	r0, r2
 8002b46:	4094      	lsls	r4, r2
 8002b48:	1e42      	subs	r2, r0, #1
 8002b4a:	4190      	sbcs	r0, r2
 8002b4c:	4662      	mov	r2, ip
 8002b4e:	46a0      	mov	r8, r4
 8002b50:	4664      	mov	r4, ip
 8002b52:	40d7      	lsrs	r7, r2
 8002b54:	464a      	mov	r2, r9
 8002b56:	40e1      	lsrs	r1, r4
 8002b58:	4644      	mov	r4, r8
 8002b5a:	1bd2      	subs	r2, r2, r7
 8002b5c:	4691      	mov	r9, r2
 8002b5e:	430c      	orrs	r4, r1
 8002b60:	4304      	orrs	r4, r0
 8002b62:	1b1c      	subs	r4, r3, r4
 8002b64:	42a3      	cmp	r3, r4
 8002b66:	4192      	sbcs	r2, r2
 8002b68:	464b      	mov	r3, r9
 8002b6a:	4252      	negs	r2, r2
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	469a      	mov	sl, r3
 8002b70:	4653      	mov	r3, sl
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	d400      	bmi.n	8002b78 <__aeabi_dsub+0xbc>
 8002b76:	e12b      	b.n	8002dd0 <__aeabi_dsub+0x314>
 8002b78:	4653      	mov	r3, sl
 8002b7a:	025a      	lsls	r2, r3, #9
 8002b7c:	0a53      	lsrs	r3, r2, #9
 8002b7e:	469a      	mov	sl, r3
 8002b80:	4653      	mov	r3, sl
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d100      	bne.n	8002b88 <__aeabi_dsub+0xcc>
 8002b86:	e166      	b.n	8002e56 <__aeabi_dsub+0x39a>
 8002b88:	4650      	mov	r0, sl
 8002b8a:	f000 fc91 	bl	80034b0 <__clzsi2>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	3b08      	subs	r3, #8
 8002b92:	2220      	movs	r2, #32
 8002b94:	0020      	movs	r0, r4
 8002b96:	1ad2      	subs	r2, r2, r3
 8002b98:	4651      	mov	r1, sl
 8002b9a:	40d0      	lsrs	r0, r2
 8002b9c:	4099      	lsls	r1, r3
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	409c      	lsls	r4, r3
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	429e      	cmp	r6, r3
 8002ba6:	dd00      	ble.n	8002baa <__aeabi_dsub+0xee>
 8002ba8:	e164      	b.n	8002e74 <__aeabi_dsub+0x3b8>
 8002baa:	1b9b      	subs	r3, r3, r6
 8002bac:	1c59      	adds	r1, r3, #1
 8002bae:	291f      	cmp	r1, #31
 8002bb0:	dd00      	ble.n	8002bb4 <__aeabi_dsub+0xf8>
 8002bb2:	e0fe      	b.n	8002db2 <__aeabi_dsub+0x2f6>
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	0026      	movs	r6, r4
 8002bba:	1a5b      	subs	r3, r3, r1
 8002bbc:	409c      	lsls	r4, r3
 8002bbe:	4098      	lsls	r0, r3
 8002bc0:	40ce      	lsrs	r6, r1
 8002bc2:	40ca      	lsrs	r2, r1
 8002bc4:	1e63      	subs	r3, r4, #1
 8002bc6:	419c      	sbcs	r4, r3
 8002bc8:	4330      	orrs	r0, r6
 8002bca:	4692      	mov	sl, r2
 8002bcc:	2600      	movs	r6, #0
 8002bce:	4304      	orrs	r4, r0
 8002bd0:	0763      	lsls	r3, r4, #29
 8002bd2:	d009      	beq.n	8002be8 <__aeabi_dsub+0x12c>
 8002bd4:	230f      	movs	r3, #15
 8002bd6:	4023      	ands	r3, r4
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d005      	beq.n	8002be8 <__aeabi_dsub+0x12c>
 8002bdc:	1d23      	adds	r3, r4, #4
 8002bde:	42a3      	cmp	r3, r4
 8002be0:	41a4      	sbcs	r4, r4
 8002be2:	4264      	negs	r4, r4
 8002be4:	44a2      	add	sl, r4
 8002be6:	001c      	movs	r4, r3
 8002be8:	4653      	mov	r3, sl
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	d400      	bmi.n	8002bf0 <__aeabi_dsub+0x134>
 8002bee:	e0f2      	b.n	8002dd6 <__aeabi_dsub+0x31a>
 8002bf0:	4b8c      	ldr	r3, [pc, #560]	; (8002e24 <__aeabi_dsub+0x368>)
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	429e      	cmp	r6, r3
 8002bf6:	d100      	bne.n	8002bfa <__aeabi_dsub+0x13e>
 8002bf8:	e10f      	b.n	8002e1a <__aeabi_dsub+0x35e>
 8002bfa:	4653      	mov	r3, sl
 8002bfc:	498a      	ldr	r1, [pc, #552]	; (8002e28 <__aeabi_dsub+0x36c>)
 8002bfe:	08e4      	lsrs	r4, r4, #3
 8002c00:	400b      	ands	r3, r1
 8002c02:	0019      	movs	r1, r3
 8002c04:	075b      	lsls	r3, r3, #29
 8002c06:	4323      	orrs	r3, r4
 8002c08:	0572      	lsls	r2, r6, #21
 8002c0a:	024c      	lsls	r4, r1, #9
 8002c0c:	0b24      	lsrs	r4, r4, #12
 8002c0e:	0d52      	lsrs	r2, r2, #21
 8002c10:	0512      	lsls	r2, r2, #20
 8002c12:	4322      	orrs	r2, r4
 8002c14:	07ed      	lsls	r5, r5, #31
 8002c16:	432a      	orrs	r2, r5
 8002c18:	0018      	movs	r0, r3
 8002c1a:	0011      	movs	r1, r2
 8002c1c:	b003      	add	sp, #12
 8002c1e:	bcf0      	pop	{r4, r5, r6, r7}
 8002c20:	46bb      	mov	fp, r7
 8002c22:	46b2      	mov	sl, r6
 8002c24:	46a9      	mov	r9, r5
 8002c26:	46a0      	mov	r8, r4
 8002c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c2a:	1ab4      	subs	r4, r6, r2
 8002c2c:	46a4      	mov	ip, r4
 8002c2e:	2c00      	cmp	r4, #0
 8002c30:	dd59      	ble.n	8002ce6 <__aeabi_dsub+0x22a>
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d100      	bne.n	8002c38 <__aeabi_dsub+0x17c>
 8002c36:	e0b0      	b.n	8002d9a <__aeabi_dsub+0x2de>
 8002c38:	4556      	cmp	r6, sl
 8002c3a:	d100      	bne.n	8002c3e <__aeabi_dsub+0x182>
 8002c3c:	e0fa      	b.n	8002e34 <__aeabi_dsub+0x378>
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	0412      	lsls	r2, r2, #16
 8002c42:	4317      	orrs	r7, r2
 8002c44:	4662      	mov	r2, ip
 8002c46:	2a38      	cmp	r2, #56	; 0x38
 8002c48:	dd00      	ble.n	8002c4c <__aeabi_dsub+0x190>
 8002c4a:	e0d4      	b.n	8002df6 <__aeabi_dsub+0x33a>
 8002c4c:	2a1f      	cmp	r2, #31
 8002c4e:	dc00      	bgt.n	8002c52 <__aeabi_dsub+0x196>
 8002c50:	e1c0      	b.n	8002fd4 <__aeabi_dsub+0x518>
 8002c52:	0039      	movs	r1, r7
 8002c54:	3a20      	subs	r2, #32
 8002c56:	40d1      	lsrs	r1, r2
 8002c58:	4662      	mov	r2, ip
 8002c5a:	2a20      	cmp	r2, #32
 8002c5c:	d006      	beq.n	8002c6c <__aeabi_dsub+0x1b0>
 8002c5e:	4664      	mov	r4, ip
 8002c60:	2240      	movs	r2, #64	; 0x40
 8002c62:	1b12      	subs	r2, r2, r4
 8002c64:	003c      	movs	r4, r7
 8002c66:	4094      	lsls	r4, r2
 8002c68:	4304      	orrs	r4, r0
 8002c6a:	9401      	str	r4, [sp, #4]
 8002c6c:	9c01      	ldr	r4, [sp, #4]
 8002c6e:	1e62      	subs	r2, r4, #1
 8002c70:	4194      	sbcs	r4, r2
 8002c72:	430c      	orrs	r4, r1
 8002c74:	e0c3      	b.n	8002dfe <__aeabi_dsub+0x342>
 8002c76:	003c      	movs	r4, r7
 8002c78:	4304      	orrs	r4, r0
 8002c7a:	d02b      	beq.n	8002cd4 <__aeabi_dsub+0x218>
 8002c7c:	468b      	mov	fp, r1
 8002c7e:	428d      	cmp	r5, r1
 8002c80:	d02e      	beq.n	8002ce0 <__aeabi_dsub+0x224>
 8002c82:	4c6a      	ldr	r4, [pc, #424]	; (8002e2c <__aeabi_dsub+0x370>)
 8002c84:	46a4      	mov	ip, r4
 8002c86:	44b4      	add	ip, r6
 8002c88:	4664      	mov	r4, ip
 8002c8a:	2c00      	cmp	r4, #0
 8002c8c:	d05f      	beq.n	8002d4e <__aeabi_dsub+0x292>
 8002c8e:	1b94      	subs	r4, r2, r6
 8002c90:	46a4      	mov	ip, r4
 8002c92:	2e00      	cmp	r6, #0
 8002c94:	d000      	beq.n	8002c98 <__aeabi_dsub+0x1dc>
 8002c96:	e120      	b.n	8002eda <__aeabi_dsub+0x41e>
 8002c98:	464c      	mov	r4, r9
 8002c9a:	431c      	orrs	r4, r3
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0x1e4>
 8002c9e:	e1c7      	b.n	8003030 <__aeabi_dsub+0x574>
 8002ca0:	4661      	mov	r1, ip
 8002ca2:	1e4c      	subs	r4, r1, #1
 8002ca4:	2901      	cmp	r1, #1
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1ee>
 8002ca8:	e223      	b.n	80030f2 <__aeabi_dsub+0x636>
 8002caa:	4d5e      	ldr	r5, [pc, #376]	; (8002e24 <__aeabi_dsub+0x368>)
 8002cac:	45ac      	cmp	ip, r5
 8002cae:	d100      	bne.n	8002cb2 <__aeabi_dsub+0x1f6>
 8002cb0:	e1d8      	b.n	8003064 <__aeabi_dsub+0x5a8>
 8002cb2:	46a4      	mov	ip, r4
 8002cb4:	e11a      	b.n	8002eec <__aeabi_dsub+0x430>
 8002cb6:	003a      	movs	r2, r7
 8002cb8:	4302      	orrs	r2, r0
 8002cba:	d100      	bne.n	8002cbe <__aeabi_dsub+0x202>
 8002cbc:	e0e4      	b.n	8002e88 <__aeabi_dsub+0x3cc>
 8002cbe:	0022      	movs	r2, r4
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	2c01      	cmp	r4, #1
 8002cc4:	d100      	bne.n	8002cc8 <__aeabi_dsub+0x20c>
 8002cc6:	e1c3      	b.n	8003050 <__aeabi_dsub+0x594>
 8002cc8:	4956      	ldr	r1, [pc, #344]	; (8002e24 <__aeabi_dsub+0x368>)
 8002cca:	428c      	cmp	r4, r1
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dsub+0x214>
 8002cce:	e0b1      	b.n	8002e34 <__aeabi_dsub+0x378>
 8002cd0:	4694      	mov	ip, r2
 8002cd2:	e72b      	b.n	8002b2c <__aeabi_dsub+0x70>
 8002cd4:	2401      	movs	r4, #1
 8002cd6:	4061      	eors	r1, r4
 8002cd8:	468b      	mov	fp, r1
 8002cda:	428d      	cmp	r5, r1
 8002cdc:	d000      	beq.n	8002ce0 <__aeabi_dsub+0x224>
 8002cde:	e716      	b.n	8002b0e <__aeabi_dsub+0x52>
 8002ce0:	4952      	ldr	r1, [pc, #328]	; (8002e2c <__aeabi_dsub+0x370>)
 8002ce2:	468c      	mov	ip, r1
 8002ce4:	44b4      	add	ip, r6
 8002ce6:	4664      	mov	r4, ip
 8002ce8:	2c00      	cmp	r4, #0
 8002cea:	d100      	bne.n	8002cee <__aeabi_dsub+0x232>
 8002cec:	e0d3      	b.n	8002e96 <__aeabi_dsub+0x3da>
 8002cee:	1b91      	subs	r1, r2, r6
 8002cf0:	468c      	mov	ip, r1
 8002cf2:	2e00      	cmp	r6, #0
 8002cf4:	d100      	bne.n	8002cf8 <__aeabi_dsub+0x23c>
 8002cf6:	e15e      	b.n	8002fb6 <__aeabi_dsub+0x4fa>
 8002cf8:	494a      	ldr	r1, [pc, #296]	; (8002e24 <__aeabi_dsub+0x368>)
 8002cfa:	428a      	cmp	r2, r1
 8002cfc:	d100      	bne.n	8002d00 <__aeabi_dsub+0x244>
 8002cfe:	e1be      	b.n	800307e <__aeabi_dsub+0x5c2>
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	464c      	mov	r4, r9
 8002d04:	0409      	lsls	r1, r1, #16
 8002d06:	430c      	orrs	r4, r1
 8002d08:	46a1      	mov	r9, r4
 8002d0a:	4661      	mov	r1, ip
 8002d0c:	2938      	cmp	r1, #56	; 0x38
 8002d0e:	dd00      	ble.n	8002d12 <__aeabi_dsub+0x256>
 8002d10:	e1ba      	b.n	8003088 <__aeabi_dsub+0x5cc>
 8002d12:	291f      	cmp	r1, #31
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dsub+0x25c>
 8002d16:	e227      	b.n	8003168 <__aeabi_dsub+0x6ac>
 8002d18:	2420      	movs	r4, #32
 8002d1a:	1a64      	subs	r4, r4, r1
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	40a1      	lsls	r1, r4
 8002d20:	001e      	movs	r6, r3
 8002d22:	4688      	mov	r8, r1
 8002d24:	4661      	mov	r1, ip
 8002d26:	40a3      	lsls	r3, r4
 8002d28:	40ce      	lsrs	r6, r1
 8002d2a:	4641      	mov	r1, r8
 8002d2c:	1e5c      	subs	r4, r3, #1
 8002d2e:	41a3      	sbcs	r3, r4
 8002d30:	4331      	orrs	r1, r6
 8002d32:	4319      	orrs	r1, r3
 8002d34:	000c      	movs	r4, r1
 8002d36:	4663      	mov	r3, ip
 8002d38:	4649      	mov	r1, r9
 8002d3a:	40d9      	lsrs	r1, r3
 8002d3c:	187f      	adds	r7, r7, r1
 8002d3e:	1824      	adds	r4, r4, r0
 8002d40:	4284      	cmp	r4, r0
 8002d42:	419b      	sbcs	r3, r3
 8002d44:	425b      	negs	r3, r3
 8002d46:	469a      	mov	sl, r3
 8002d48:	0016      	movs	r6, r2
 8002d4a:	44ba      	add	sl, r7
 8002d4c:	e05d      	b.n	8002e0a <__aeabi_dsub+0x34e>
 8002d4e:	4c38      	ldr	r4, [pc, #224]	; (8002e30 <__aeabi_dsub+0x374>)
 8002d50:	1c72      	adds	r2, r6, #1
 8002d52:	4222      	tst	r2, r4
 8002d54:	d000      	beq.n	8002d58 <__aeabi_dsub+0x29c>
 8002d56:	e0df      	b.n	8002f18 <__aeabi_dsub+0x45c>
 8002d58:	464a      	mov	r2, r9
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	2e00      	cmp	r6, #0
 8002d5e:	d000      	beq.n	8002d62 <__aeabi_dsub+0x2a6>
 8002d60:	e15c      	b.n	800301c <__aeabi_dsub+0x560>
 8002d62:	2a00      	cmp	r2, #0
 8002d64:	d100      	bne.n	8002d68 <__aeabi_dsub+0x2ac>
 8002d66:	e1cf      	b.n	8003108 <__aeabi_dsub+0x64c>
 8002d68:	003a      	movs	r2, r7
 8002d6a:	4302      	orrs	r2, r0
 8002d6c:	d100      	bne.n	8002d70 <__aeabi_dsub+0x2b4>
 8002d6e:	e17f      	b.n	8003070 <__aeabi_dsub+0x5b4>
 8002d70:	1a1c      	subs	r4, r3, r0
 8002d72:	464a      	mov	r2, r9
 8002d74:	42a3      	cmp	r3, r4
 8002d76:	4189      	sbcs	r1, r1
 8002d78:	1bd2      	subs	r2, r2, r7
 8002d7a:	4249      	negs	r1, r1
 8002d7c:	1a52      	subs	r2, r2, r1
 8002d7e:	4692      	mov	sl, r2
 8002d80:	0212      	lsls	r2, r2, #8
 8002d82:	d400      	bmi.n	8002d86 <__aeabi_dsub+0x2ca>
 8002d84:	e20a      	b.n	800319c <__aeabi_dsub+0x6e0>
 8002d86:	1ac4      	subs	r4, r0, r3
 8002d88:	42a0      	cmp	r0, r4
 8002d8a:	4180      	sbcs	r0, r0
 8002d8c:	464b      	mov	r3, r9
 8002d8e:	4240      	negs	r0, r0
 8002d90:	1aff      	subs	r7, r7, r3
 8002d92:	1a3b      	subs	r3, r7, r0
 8002d94:	469a      	mov	sl, r3
 8002d96:	465d      	mov	r5, fp
 8002d98:	e71a      	b.n	8002bd0 <__aeabi_dsub+0x114>
 8002d9a:	003a      	movs	r2, r7
 8002d9c:	4302      	orrs	r2, r0
 8002d9e:	d073      	beq.n	8002e88 <__aeabi_dsub+0x3cc>
 8002da0:	0022      	movs	r2, r4
 8002da2:	3a01      	subs	r2, #1
 8002da4:	2c01      	cmp	r4, #1
 8002da6:	d100      	bne.n	8002daa <__aeabi_dsub+0x2ee>
 8002da8:	e0cb      	b.n	8002f42 <__aeabi_dsub+0x486>
 8002daa:	4554      	cmp	r4, sl
 8002dac:	d042      	beq.n	8002e34 <__aeabi_dsub+0x378>
 8002dae:	4694      	mov	ip, r2
 8002db0:	e748      	b.n	8002c44 <__aeabi_dsub+0x188>
 8002db2:	0010      	movs	r0, r2
 8002db4:	3b1f      	subs	r3, #31
 8002db6:	40d8      	lsrs	r0, r3
 8002db8:	2920      	cmp	r1, #32
 8002dba:	d003      	beq.n	8002dc4 <__aeabi_dsub+0x308>
 8002dbc:	2340      	movs	r3, #64	; 0x40
 8002dbe:	1a5b      	subs	r3, r3, r1
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	4314      	orrs	r4, r2
 8002dc4:	1e63      	subs	r3, r4, #1
 8002dc6:	419c      	sbcs	r4, r3
 8002dc8:	2300      	movs	r3, #0
 8002dca:	2600      	movs	r6, #0
 8002dcc:	469a      	mov	sl, r3
 8002dce:	4304      	orrs	r4, r0
 8002dd0:	0763      	lsls	r3, r4, #29
 8002dd2:	d000      	beq.n	8002dd6 <__aeabi_dsub+0x31a>
 8002dd4:	e6fe      	b.n	8002bd4 <__aeabi_dsub+0x118>
 8002dd6:	4652      	mov	r2, sl
 8002dd8:	08e3      	lsrs	r3, r4, #3
 8002dda:	0752      	lsls	r2, r2, #29
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	4652      	mov	r2, sl
 8002de0:	46b4      	mov	ip, r6
 8002de2:	08d2      	lsrs	r2, r2, #3
 8002de4:	490f      	ldr	r1, [pc, #60]	; (8002e24 <__aeabi_dsub+0x368>)
 8002de6:	458c      	cmp	ip, r1
 8002de8:	d02a      	beq.n	8002e40 <__aeabi_dsub+0x384>
 8002dea:	0312      	lsls	r2, r2, #12
 8002dec:	0b14      	lsrs	r4, r2, #12
 8002dee:	4662      	mov	r2, ip
 8002df0:	0552      	lsls	r2, r2, #21
 8002df2:	0d52      	lsrs	r2, r2, #21
 8002df4:	e70c      	b.n	8002c10 <__aeabi_dsub+0x154>
 8002df6:	003c      	movs	r4, r7
 8002df8:	4304      	orrs	r4, r0
 8002dfa:	1e62      	subs	r2, r4, #1
 8002dfc:	4194      	sbcs	r4, r2
 8002dfe:	18e4      	adds	r4, r4, r3
 8002e00:	429c      	cmp	r4, r3
 8002e02:	4192      	sbcs	r2, r2
 8002e04:	4252      	negs	r2, r2
 8002e06:	444a      	add	r2, r9
 8002e08:	4692      	mov	sl, r2
 8002e0a:	4653      	mov	r3, sl
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	d5df      	bpl.n	8002dd0 <__aeabi_dsub+0x314>
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <__aeabi_dsub+0x368>)
 8002e12:	3601      	adds	r6, #1
 8002e14:	429e      	cmp	r6, r3
 8002e16:	d000      	beq.n	8002e1a <__aeabi_dsub+0x35e>
 8002e18:	e0a0      	b.n	8002f5c <__aeabi_dsub+0x4a0>
 8002e1a:	0032      	movs	r2, r6
 8002e1c:	2400      	movs	r4, #0
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e6f6      	b.n	8002c10 <__aeabi_dsub+0x154>
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	000007ff 	.word	0x000007ff
 8002e28:	ff7fffff 	.word	0xff7fffff
 8002e2c:	fffff801 	.word	0xfffff801
 8002e30:	000007fe 	.word	0x000007fe
 8002e34:	08db      	lsrs	r3, r3, #3
 8002e36:	464a      	mov	r2, r9
 8002e38:	0752      	lsls	r2, r2, #29
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	464a      	mov	r2, r9
 8002e3e:	08d2      	lsrs	r2, r2, #3
 8002e40:	0019      	movs	r1, r3
 8002e42:	4311      	orrs	r1, r2
 8002e44:	d100      	bne.n	8002e48 <__aeabi_dsub+0x38c>
 8002e46:	e1b5      	b.n	80031b4 <__aeabi_dsub+0x6f8>
 8002e48:	2480      	movs	r4, #128	; 0x80
 8002e4a:	0324      	lsls	r4, r4, #12
 8002e4c:	4314      	orrs	r4, r2
 8002e4e:	0324      	lsls	r4, r4, #12
 8002e50:	4ad5      	ldr	r2, [pc, #852]	; (80031a8 <__aeabi_dsub+0x6ec>)
 8002e52:	0b24      	lsrs	r4, r4, #12
 8002e54:	e6dc      	b.n	8002c10 <__aeabi_dsub+0x154>
 8002e56:	0020      	movs	r0, r4
 8002e58:	f000 fb2a 	bl	80034b0 <__clzsi2>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	3318      	adds	r3, #24
 8002e60:	2b1f      	cmp	r3, #31
 8002e62:	dc00      	bgt.n	8002e66 <__aeabi_dsub+0x3aa>
 8002e64:	e695      	b.n	8002b92 <__aeabi_dsub+0xd6>
 8002e66:	0022      	movs	r2, r4
 8002e68:	3808      	subs	r0, #8
 8002e6a:	4082      	lsls	r2, r0
 8002e6c:	2400      	movs	r4, #0
 8002e6e:	429e      	cmp	r6, r3
 8002e70:	dc00      	bgt.n	8002e74 <__aeabi_dsub+0x3b8>
 8002e72:	e69a      	b.n	8002baa <__aeabi_dsub+0xee>
 8002e74:	1af6      	subs	r6, r6, r3
 8002e76:	4bcd      	ldr	r3, [pc, #820]	; (80031ac <__aeabi_dsub+0x6f0>)
 8002e78:	401a      	ands	r2, r3
 8002e7a:	4692      	mov	sl, r2
 8002e7c:	e6a8      	b.n	8002bd0 <__aeabi_dsub+0x114>
 8002e7e:	003c      	movs	r4, r7
 8002e80:	4304      	orrs	r4, r0
 8002e82:	1e62      	subs	r2, r4, #1
 8002e84:	4194      	sbcs	r4, r2
 8002e86:	e66c      	b.n	8002b62 <__aeabi_dsub+0xa6>
 8002e88:	464a      	mov	r2, r9
 8002e8a:	08db      	lsrs	r3, r3, #3
 8002e8c:	0752      	lsls	r2, r2, #29
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	464a      	mov	r2, r9
 8002e92:	08d2      	lsrs	r2, r2, #3
 8002e94:	e7a6      	b.n	8002de4 <__aeabi_dsub+0x328>
 8002e96:	4cc6      	ldr	r4, [pc, #792]	; (80031b0 <__aeabi_dsub+0x6f4>)
 8002e98:	1c72      	adds	r2, r6, #1
 8002e9a:	4222      	tst	r2, r4
 8002e9c:	d000      	beq.n	8002ea0 <__aeabi_dsub+0x3e4>
 8002e9e:	e0ac      	b.n	8002ffa <__aeabi_dsub+0x53e>
 8002ea0:	464a      	mov	r2, r9
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	2e00      	cmp	r6, #0
 8002ea6:	d000      	beq.n	8002eaa <__aeabi_dsub+0x3ee>
 8002ea8:	e105      	b.n	80030b6 <__aeabi_dsub+0x5fa>
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	d100      	bne.n	8002eb0 <__aeabi_dsub+0x3f4>
 8002eae:	e156      	b.n	800315e <__aeabi_dsub+0x6a2>
 8002eb0:	003a      	movs	r2, r7
 8002eb2:	4302      	orrs	r2, r0
 8002eb4:	d100      	bne.n	8002eb8 <__aeabi_dsub+0x3fc>
 8002eb6:	e0db      	b.n	8003070 <__aeabi_dsub+0x5b4>
 8002eb8:	181c      	adds	r4, r3, r0
 8002eba:	429c      	cmp	r4, r3
 8002ebc:	419b      	sbcs	r3, r3
 8002ebe:	444f      	add	r7, r9
 8002ec0:	46ba      	mov	sl, r7
 8002ec2:	425b      	negs	r3, r3
 8002ec4:	449a      	add	sl, r3
 8002ec6:	4653      	mov	r3, sl
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	d400      	bmi.n	8002ece <__aeabi_dsub+0x412>
 8002ecc:	e780      	b.n	8002dd0 <__aeabi_dsub+0x314>
 8002ece:	4652      	mov	r2, sl
 8002ed0:	4bb6      	ldr	r3, [pc, #728]	; (80031ac <__aeabi_dsub+0x6f0>)
 8002ed2:	2601      	movs	r6, #1
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	4692      	mov	sl, r2
 8002ed8:	e77a      	b.n	8002dd0 <__aeabi_dsub+0x314>
 8002eda:	4cb3      	ldr	r4, [pc, #716]	; (80031a8 <__aeabi_dsub+0x6ec>)
 8002edc:	42a2      	cmp	r2, r4
 8002ede:	d100      	bne.n	8002ee2 <__aeabi_dsub+0x426>
 8002ee0:	e0c0      	b.n	8003064 <__aeabi_dsub+0x5a8>
 8002ee2:	2480      	movs	r4, #128	; 0x80
 8002ee4:	464d      	mov	r5, r9
 8002ee6:	0424      	lsls	r4, r4, #16
 8002ee8:	4325      	orrs	r5, r4
 8002eea:	46a9      	mov	r9, r5
 8002eec:	4664      	mov	r4, ip
 8002eee:	2c38      	cmp	r4, #56	; 0x38
 8002ef0:	dc53      	bgt.n	8002f9a <__aeabi_dsub+0x4de>
 8002ef2:	4661      	mov	r1, ip
 8002ef4:	2c1f      	cmp	r4, #31
 8002ef6:	dd00      	ble.n	8002efa <__aeabi_dsub+0x43e>
 8002ef8:	e0cd      	b.n	8003096 <__aeabi_dsub+0x5da>
 8002efa:	2520      	movs	r5, #32
 8002efc:	001e      	movs	r6, r3
 8002efe:	1b2d      	subs	r5, r5, r4
 8002f00:	464c      	mov	r4, r9
 8002f02:	40ab      	lsls	r3, r5
 8002f04:	40ac      	lsls	r4, r5
 8002f06:	40ce      	lsrs	r6, r1
 8002f08:	1e5d      	subs	r5, r3, #1
 8002f0a:	41ab      	sbcs	r3, r5
 8002f0c:	4334      	orrs	r4, r6
 8002f0e:	4323      	orrs	r3, r4
 8002f10:	464c      	mov	r4, r9
 8002f12:	40cc      	lsrs	r4, r1
 8002f14:	1b3f      	subs	r7, r7, r4
 8002f16:	e045      	b.n	8002fa4 <__aeabi_dsub+0x4e8>
 8002f18:	464a      	mov	r2, r9
 8002f1a:	1a1c      	subs	r4, r3, r0
 8002f1c:	1bd1      	subs	r1, r2, r7
 8002f1e:	42a3      	cmp	r3, r4
 8002f20:	4192      	sbcs	r2, r2
 8002f22:	4252      	negs	r2, r2
 8002f24:	4692      	mov	sl, r2
 8002f26:	000a      	movs	r2, r1
 8002f28:	4651      	mov	r1, sl
 8002f2a:	1a52      	subs	r2, r2, r1
 8002f2c:	4692      	mov	sl, r2
 8002f2e:	0212      	lsls	r2, r2, #8
 8002f30:	d500      	bpl.n	8002f34 <__aeabi_dsub+0x478>
 8002f32:	e083      	b.n	800303c <__aeabi_dsub+0x580>
 8002f34:	4653      	mov	r3, sl
 8002f36:	4323      	orrs	r3, r4
 8002f38:	d000      	beq.n	8002f3c <__aeabi_dsub+0x480>
 8002f3a:	e621      	b.n	8002b80 <__aeabi_dsub+0xc4>
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2500      	movs	r5, #0
 8002f40:	e753      	b.n	8002dea <__aeabi_dsub+0x32e>
 8002f42:	181c      	adds	r4, r3, r0
 8002f44:	429c      	cmp	r4, r3
 8002f46:	419b      	sbcs	r3, r3
 8002f48:	444f      	add	r7, r9
 8002f4a:	46ba      	mov	sl, r7
 8002f4c:	425b      	negs	r3, r3
 8002f4e:	449a      	add	sl, r3
 8002f50:	4653      	mov	r3, sl
 8002f52:	2601      	movs	r6, #1
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	d400      	bmi.n	8002f5a <__aeabi_dsub+0x49e>
 8002f58:	e73a      	b.n	8002dd0 <__aeabi_dsub+0x314>
 8002f5a:	2602      	movs	r6, #2
 8002f5c:	4652      	mov	r2, sl
 8002f5e:	4b93      	ldr	r3, [pc, #588]	; (80031ac <__aeabi_dsub+0x6f0>)
 8002f60:	2101      	movs	r1, #1
 8002f62:	401a      	ands	r2, r3
 8002f64:	0013      	movs	r3, r2
 8002f66:	4021      	ands	r1, r4
 8002f68:	0862      	lsrs	r2, r4, #1
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	07dc      	lsls	r4, r3, #31
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	469a      	mov	sl, r3
 8002f72:	4314      	orrs	r4, r2
 8002f74:	e62c      	b.n	8002bd0 <__aeabi_dsub+0x114>
 8002f76:	0039      	movs	r1, r7
 8002f78:	3a20      	subs	r2, #32
 8002f7a:	40d1      	lsrs	r1, r2
 8002f7c:	4662      	mov	r2, ip
 8002f7e:	2a20      	cmp	r2, #32
 8002f80:	d006      	beq.n	8002f90 <__aeabi_dsub+0x4d4>
 8002f82:	4664      	mov	r4, ip
 8002f84:	2240      	movs	r2, #64	; 0x40
 8002f86:	1b12      	subs	r2, r2, r4
 8002f88:	003c      	movs	r4, r7
 8002f8a:	4094      	lsls	r4, r2
 8002f8c:	4304      	orrs	r4, r0
 8002f8e:	9401      	str	r4, [sp, #4]
 8002f90:	9c01      	ldr	r4, [sp, #4]
 8002f92:	1e62      	subs	r2, r4, #1
 8002f94:	4194      	sbcs	r4, r2
 8002f96:	430c      	orrs	r4, r1
 8002f98:	e5e3      	b.n	8002b62 <__aeabi_dsub+0xa6>
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	4319      	orrs	r1, r3
 8002f9e:	000b      	movs	r3, r1
 8002fa0:	1e5c      	subs	r4, r3, #1
 8002fa2:	41a3      	sbcs	r3, r4
 8002fa4:	1ac4      	subs	r4, r0, r3
 8002fa6:	42a0      	cmp	r0, r4
 8002fa8:	419b      	sbcs	r3, r3
 8002faa:	425b      	negs	r3, r3
 8002fac:	1afb      	subs	r3, r7, r3
 8002fae:	469a      	mov	sl, r3
 8002fb0:	465d      	mov	r5, fp
 8002fb2:	0016      	movs	r6, r2
 8002fb4:	e5dc      	b.n	8002b70 <__aeabi_dsub+0xb4>
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	4319      	orrs	r1, r3
 8002fba:	d100      	bne.n	8002fbe <__aeabi_dsub+0x502>
 8002fbc:	e0ae      	b.n	800311c <__aeabi_dsub+0x660>
 8002fbe:	4661      	mov	r1, ip
 8002fc0:	4664      	mov	r4, ip
 8002fc2:	3901      	subs	r1, #1
 8002fc4:	2c01      	cmp	r4, #1
 8002fc6:	d100      	bne.n	8002fca <__aeabi_dsub+0x50e>
 8002fc8:	e0e0      	b.n	800318c <__aeabi_dsub+0x6d0>
 8002fca:	4c77      	ldr	r4, [pc, #476]	; (80031a8 <__aeabi_dsub+0x6ec>)
 8002fcc:	45a4      	cmp	ip, r4
 8002fce:	d056      	beq.n	800307e <__aeabi_dsub+0x5c2>
 8002fd0:	468c      	mov	ip, r1
 8002fd2:	e69a      	b.n	8002d0a <__aeabi_dsub+0x24e>
 8002fd4:	4661      	mov	r1, ip
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	003c      	movs	r4, r7
 8002fda:	1a52      	subs	r2, r2, r1
 8002fdc:	4094      	lsls	r4, r2
 8002fde:	0001      	movs	r1, r0
 8002fe0:	4090      	lsls	r0, r2
 8002fe2:	46a0      	mov	r8, r4
 8002fe4:	4664      	mov	r4, ip
 8002fe6:	1e42      	subs	r2, r0, #1
 8002fe8:	4190      	sbcs	r0, r2
 8002fea:	4662      	mov	r2, ip
 8002fec:	40e1      	lsrs	r1, r4
 8002fee:	4644      	mov	r4, r8
 8002ff0:	40d7      	lsrs	r7, r2
 8002ff2:	430c      	orrs	r4, r1
 8002ff4:	4304      	orrs	r4, r0
 8002ff6:	44b9      	add	r9, r7
 8002ff8:	e701      	b.n	8002dfe <__aeabi_dsub+0x342>
 8002ffa:	496b      	ldr	r1, [pc, #428]	; (80031a8 <__aeabi_dsub+0x6ec>)
 8002ffc:	428a      	cmp	r2, r1
 8002ffe:	d100      	bne.n	8003002 <__aeabi_dsub+0x546>
 8003000:	e70c      	b.n	8002e1c <__aeabi_dsub+0x360>
 8003002:	1818      	adds	r0, r3, r0
 8003004:	4298      	cmp	r0, r3
 8003006:	419b      	sbcs	r3, r3
 8003008:	444f      	add	r7, r9
 800300a:	425b      	negs	r3, r3
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	07dc      	lsls	r4, r3, #31
 8003010:	0840      	lsrs	r0, r0, #1
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	469a      	mov	sl, r3
 8003016:	0016      	movs	r6, r2
 8003018:	4304      	orrs	r4, r0
 800301a:	e6d9      	b.n	8002dd0 <__aeabi_dsub+0x314>
 800301c:	2a00      	cmp	r2, #0
 800301e:	d000      	beq.n	8003022 <__aeabi_dsub+0x566>
 8003020:	e081      	b.n	8003126 <__aeabi_dsub+0x66a>
 8003022:	003b      	movs	r3, r7
 8003024:	4303      	orrs	r3, r0
 8003026:	d11d      	bne.n	8003064 <__aeabi_dsub+0x5a8>
 8003028:	2280      	movs	r2, #128	; 0x80
 800302a:	2500      	movs	r5, #0
 800302c:	0312      	lsls	r2, r2, #12
 800302e:	e70b      	b.n	8002e48 <__aeabi_dsub+0x38c>
 8003030:	08c0      	lsrs	r0, r0, #3
 8003032:	077b      	lsls	r3, r7, #29
 8003034:	465d      	mov	r5, fp
 8003036:	4303      	orrs	r3, r0
 8003038:	08fa      	lsrs	r2, r7, #3
 800303a:	e6d3      	b.n	8002de4 <__aeabi_dsub+0x328>
 800303c:	1ac4      	subs	r4, r0, r3
 800303e:	42a0      	cmp	r0, r4
 8003040:	4180      	sbcs	r0, r0
 8003042:	464b      	mov	r3, r9
 8003044:	4240      	negs	r0, r0
 8003046:	1aff      	subs	r7, r7, r3
 8003048:	1a3b      	subs	r3, r7, r0
 800304a:	469a      	mov	sl, r3
 800304c:	465d      	mov	r5, fp
 800304e:	e597      	b.n	8002b80 <__aeabi_dsub+0xc4>
 8003050:	1a1c      	subs	r4, r3, r0
 8003052:	464a      	mov	r2, r9
 8003054:	42a3      	cmp	r3, r4
 8003056:	419b      	sbcs	r3, r3
 8003058:	1bd7      	subs	r7, r2, r7
 800305a:	425b      	negs	r3, r3
 800305c:	1afb      	subs	r3, r7, r3
 800305e:	469a      	mov	sl, r3
 8003060:	2601      	movs	r6, #1
 8003062:	e585      	b.n	8002b70 <__aeabi_dsub+0xb4>
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	077b      	lsls	r3, r7, #29
 8003068:	465d      	mov	r5, fp
 800306a:	4303      	orrs	r3, r0
 800306c:	08fa      	lsrs	r2, r7, #3
 800306e:	e6e7      	b.n	8002e40 <__aeabi_dsub+0x384>
 8003070:	464a      	mov	r2, r9
 8003072:	08db      	lsrs	r3, r3, #3
 8003074:	0752      	lsls	r2, r2, #29
 8003076:	4313      	orrs	r3, r2
 8003078:	464a      	mov	r2, r9
 800307a:	08d2      	lsrs	r2, r2, #3
 800307c:	e6b5      	b.n	8002dea <__aeabi_dsub+0x32e>
 800307e:	08c0      	lsrs	r0, r0, #3
 8003080:	077b      	lsls	r3, r7, #29
 8003082:	4303      	orrs	r3, r0
 8003084:	08fa      	lsrs	r2, r7, #3
 8003086:	e6db      	b.n	8002e40 <__aeabi_dsub+0x384>
 8003088:	4649      	mov	r1, r9
 800308a:	4319      	orrs	r1, r3
 800308c:	000b      	movs	r3, r1
 800308e:	1e59      	subs	r1, r3, #1
 8003090:	418b      	sbcs	r3, r1
 8003092:	001c      	movs	r4, r3
 8003094:	e653      	b.n	8002d3e <__aeabi_dsub+0x282>
 8003096:	464d      	mov	r5, r9
 8003098:	3c20      	subs	r4, #32
 800309a:	40e5      	lsrs	r5, r4
 800309c:	2920      	cmp	r1, #32
 800309e:	d005      	beq.n	80030ac <__aeabi_dsub+0x5f0>
 80030a0:	2440      	movs	r4, #64	; 0x40
 80030a2:	1a64      	subs	r4, r4, r1
 80030a4:	4649      	mov	r1, r9
 80030a6:	40a1      	lsls	r1, r4
 80030a8:	430b      	orrs	r3, r1
 80030aa:	4698      	mov	r8, r3
 80030ac:	4643      	mov	r3, r8
 80030ae:	1e5c      	subs	r4, r3, #1
 80030b0:	41a3      	sbcs	r3, r4
 80030b2:	432b      	orrs	r3, r5
 80030b4:	e776      	b.n	8002fa4 <__aeabi_dsub+0x4e8>
 80030b6:	2a00      	cmp	r2, #0
 80030b8:	d0e1      	beq.n	800307e <__aeabi_dsub+0x5c2>
 80030ba:	003a      	movs	r2, r7
 80030bc:	08db      	lsrs	r3, r3, #3
 80030be:	4302      	orrs	r2, r0
 80030c0:	d100      	bne.n	80030c4 <__aeabi_dsub+0x608>
 80030c2:	e6b8      	b.n	8002e36 <__aeabi_dsub+0x37a>
 80030c4:	464a      	mov	r2, r9
 80030c6:	0752      	lsls	r2, r2, #29
 80030c8:	2480      	movs	r4, #128	; 0x80
 80030ca:	4313      	orrs	r3, r2
 80030cc:	464a      	mov	r2, r9
 80030ce:	0324      	lsls	r4, r4, #12
 80030d0:	08d2      	lsrs	r2, r2, #3
 80030d2:	4222      	tst	r2, r4
 80030d4:	d007      	beq.n	80030e6 <__aeabi_dsub+0x62a>
 80030d6:	08fe      	lsrs	r6, r7, #3
 80030d8:	4226      	tst	r6, r4
 80030da:	d104      	bne.n	80030e6 <__aeabi_dsub+0x62a>
 80030dc:	465d      	mov	r5, fp
 80030de:	0032      	movs	r2, r6
 80030e0:	08c3      	lsrs	r3, r0, #3
 80030e2:	077f      	lsls	r7, r7, #29
 80030e4:	433b      	orrs	r3, r7
 80030e6:	0f59      	lsrs	r1, r3, #29
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	0749      	lsls	r1, r1, #29
 80030ec:	08db      	lsrs	r3, r3, #3
 80030ee:	430b      	orrs	r3, r1
 80030f0:	e6a6      	b.n	8002e40 <__aeabi_dsub+0x384>
 80030f2:	1ac4      	subs	r4, r0, r3
 80030f4:	42a0      	cmp	r0, r4
 80030f6:	4180      	sbcs	r0, r0
 80030f8:	464b      	mov	r3, r9
 80030fa:	4240      	negs	r0, r0
 80030fc:	1aff      	subs	r7, r7, r3
 80030fe:	1a3b      	subs	r3, r7, r0
 8003100:	469a      	mov	sl, r3
 8003102:	465d      	mov	r5, fp
 8003104:	2601      	movs	r6, #1
 8003106:	e533      	b.n	8002b70 <__aeabi_dsub+0xb4>
 8003108:	003b      	movs	r3, r7
 800310a:	4303      	orrs	r3, r0
 800310c:	d100      	bne.n	8003110 <__aeabi_dsub+0x654>
 800310e:	e715      	b.n	8002f3c <__aeabi_dsub+0x480>
 8003110:	08c0      	lsrs	r0, r0, #3
 8003112:	077b      	lsls	r3, r7, #29
 8003114:	465d      	mov	r5, fp
 8003116:	4303      	orrs	r3, r0
 8003118:	08fa      	lsrs	r2, r7, #3
 800311a:	e666      	b.n	8002dea <__aeabi_dsub+0x32e>
 800311c:	08c0      	lsrs	r0, r0, #3
 800311e:	077b      	lsls	r3, r7, #29
 8003120:	4303      	orrs	r3, r0
 8003122:	08fa      	lsrs	r2, r7, #3
 8003124:	e65e      	b.n	8002de4 <__aeabi_dsub+0x328>
 8003126:	003a      	movs	r2, r7
 8003128:	08db      	lsrs	r3, r3, #3
 800312a:	4302      	orrs	r2, r0
 800312c:	d100      	bne.n	8003130 <__aeabi_dsub+0x674>
 800312e:	e682      	b.n	8002e36 <__aeabi_dsub+0x37a>
 8003130:	464a      	mov	r2, r9
 8003132:	0752      	lsls	r2, r2, #29
 8003134:	2480      	movs	r4, #128	; 0x80
 8003136:	4313      	orrs	r3, r2
 8003138:	464a      	mov	r2, r9
 800313a:	0324      	lsls	r4, r4, #12
 800313c:	08d2      	lsrs	r2, r2, #3
 800313e:	4222      	tst	r2, r4
 8003140:	d007      	beq.n	8003152 <__aeabi_dsub+0x696>
 8003142:	08fe      	lsrs	r6, r7, #3
 8003144:	4226      	tst	r6, r4
 8003146:	d104      	bne.n	8003152 <__aeabi_dsub+0x696>
 8003148:	465d      	mov	r5, fp
 800314a:	0032      	movs	r2, r6
 800314c:	08c3      	lsrs	r3, r0, #3
 800314e:	077f      	lsls	r7, r7, #29
 8003150:	433b      	orrs	r3, r7
 8003152:	0f59      	lsrs	r1, r3, #29
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	08db      	lsrs	r3, r3, #3
 8003158:	0749      	lsls	r1, r1, #29
 800315a:	430b      	orrs	r3, r1
 800315c:	e670      	b.n	8002e40 <__aeabi_dsub+0x384>
 800315e:	08c0      	lsrs	r0, r0, #3
 8003160:	077b      	lsls	r3, r7, #29
 8003162:	4303      	orrs	r3, r0
 8003164:	08fa      	lsrs	r2, r7, #3
 8003166:	e640      	b.n	8002dea <__aeabi_dsub+0x32e>
 8003168:	464c      	mov	r4, r9
 800316a:	3920      	subs	r1, #32
 800316c:	40cc      	lsrs	r4, r1
 800316e:	4661      	mov	r1, ip
 8003170:	2920      	cmp	r1, #32
 8003172:	d006      	beq.n	8003182 <__aeabi_dsub+0x6c6>
 8003174:	4666      	mov	r6, ip
 8003176:	2140      	movs	r1, #64	; 0x40
 8003178:	1b89      	subs	r1, r1, r6
 800317a:	464e      	mov	r6, r9
 800317c:	408e      	lsls	r6, r1
 800317e:	4333      	orrs	r3, r6
 8003180:	4698      	mov	r8, r3
 8003182:	4643      	mov	r3, r8
 8003184:	1e59      	subs	r1, r3, #1
 8003186:	418b      	sbcs	r3, r1
 8003188:	431c      	orrs	r4, r3
 800318a:	e5d8      	b.n	8002d3e <__aeabi_dsub+0x282>
 800318c:	181c      	adds	r4, r3, r0
 800318e:	4284      	cmp	r4, r0
 8003190:	4180      	sbcs	r0, r0
 8003192:	444f      	add	r7, r9
 8003194:	46ba      	mov	sl, r7
 8003196:	4240      	negs	r0, r0
 8003198:	4482      	add	sl, r0
 800319a:	e6d9      	b.n	8002f50 <__aeabi_dsub+0x494>
 800319c:	4653      	mov	r3, sl
 800319e:	4323      	orrs	r3, r4
 80031a0:	d100      	bne.n	80031a4 <__aeabi_dsub+0x6e8>
 80031a2:	e6cb      	b.n	8002f3c <__aeabi_dsub+0x480>
 80031a4:	e614      	b.n	8002dd0 <__aeabi_dsub+0x314>
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	000007ff 	.word	0x000007ff
 80031ac:	ff7fffff 	.word	0xff7fffff
 80031b0:	000007fe 	.word	0x000007fe
 80031b4:	2300      	movs	r3, #0
 80031b6:	4a01      	ldr	r2, [pc, #4]	; (80031bc <__aeabi_dsub+0x700>)
 80031b8:	001c      	movs	r4, r3
 80031ba:	e529      	b.n	8002c10 <__aeabi_dsub+0x154>
 80031bc:	000007ff 	.word	0x000007ff

080031c0 <__aeabi_dcmpun>:
 80031c0:	b570      	push	{r4, r5, r6, lr}
 80031c2:	0005      	movs	r5, r0
 80031c4:	480c      	ldr	r0, [pc, #48]	; (80031f8 <__aeabi_dcmpun+0x38>)
 80031c6:	031c      	lsls	r4, r3, #12
 80031c8:	0016      	movs	r6, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	030a      	lsls	r2, r1, #12
 80031ce:	0049      	lsls	r1, r1, #1
 80031d0:	0b12      	lsrs	r2, r2, #12
 80031d2:	0d49      	lsrs	r1, r1, #21
 80031d4:	0b24      	lsrs	r4, r4, #12
 80031d6:	0d5b      	lsrs	r3, r3, #21
 80031d8:	4281      	cmp	r1, r0
 80031da:	d008      	beq.n	80031ee <__aeabi_dcmpun+0x2e>
 80031dc:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <__aeabi_dcmpun+0x38>)
 80031de:	2000      	movs	r0, #0
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d103      	bne.n	80031ec <__aeabi_dcmpun+0x2c>
 80031e4:	0020      	movs	r0, r4
 80031e6:	4330      	orrs	r0, r6
 80031e8:	1e43      	subs	r3, r0, #1
 80031ea:	4198      	sbcs	r0, r3
 80031ec:	bd70      	pop	{r4, r5, r6, pc}
 80031ee:	2001      	movs	r0, #1
 80031f0:	432a      	orrs	r2, r5
 80031f2:	d1fb      	bne.n	80031ec <__aeabi_dcmpun+0x2c>
 80031f4:	e7f2      	b.n	80031dc <__aeabi_dcmpun+0x1c>
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	000007ff 	.word	0x000007ff

080031fc <__aeabi_d2iz>:
 80031fc:	000a      	movs	r2, r1
 80031fe:	b530      	push	{r4, r5, lr}
 8003200:	4c13      	ldr	r4, [pc, #76]	; (8003250 <__aeabi_d2iz+0x54>)
 8003202:	0053      	lsls	r3, r2, #1
 8003204:	0309      	lsls	r1, r1, #12
 8003206:	0005      	movs	r5, r0
 8003208:	0b09      	lsrs	r1, r1, #12
 800320a:	2000      	movs	r0, #0
 800320c:	0d5b      	lsrs	r3, r3, #21
 800320e:	0fd2      	lsrs	r2, r2, #31
 8003210:	42a3      	cmp	r3, r4
 8003212:	dd04      	ble.n	800321e <__aeabi_d2iz+0x22>
 8003214:	480f      	ldr	r0, [pc, #60]	; (8003254 <__aeabi_d2iz+0x58>)
 8003216:	4283      	cmp	r3, r0
 8003218:	dd02      	ble.n	8003220 <__aeabi_d2iz+0x24>
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <__aeabi_d2iz+0x5c>)
 800321c:	18d0      	adds	r0, r2, r3
 800321e:	bd30      	pop	{r4, r5, pc}
 8003220:	2080      	movs	r0, #128	; 0x80
 8003222:	0340      	lsls	r0, r0, #13
 8003224:	4301      	orrs	r1, r0
 8003226:	480d      	ldr	r0, [pc, #52]	; (800325c <__aeabi_d2iz+0x60>)
 8003228:	1ac0      	subs	r0, r0, r3
 800322a:	281f      	cmp	r0, #31
 800322c:	dd08      	ble.n	8003240 <__aeabi_d2iz+0x44>
 800322e:	480c      	ldr	r0, [pc, #48]	; (8003260 <__aeabi_d2iz+0x64>)
 8003230:	1ac3      	subs	r3, r0, r3
 8003232:	40d9      	lsrs	r1, r3
 8003234:	000b      	movs	r3, r1
 8003236:	4258      	negs	r0, r3
 8003238:	2a00      	cmp	r2, #0
 800323a:	d1f0      	bne.n	800321e <__aeabi_d2iz+0x22>
 800323c:	0018      	movs	r0, r3
 800323e:	e7ee      	b.n	800321e <__aeabi_d2iz+0x22>
 8003240:	4c08      	ldr	r4, [pc, #32]	; (8003264 <__aeabi_d2iz+0x68>)
 8003242:	40c5      	lsrs	r5, r0
 8003244:	46a4      	mov	ip, r4
 8003246:	4463      	add	r3, ip
 8003248:	4099      	lsls	r1, r3
 800324a:	000b      	movs	r3, r1
 800324c:	432b      	orrs	r3, r5
 800324e:	e7f2      	b.n	8003236 <__aeabi_d2iz+0x3a>
 8003250:	000003fe 	.word	0x000003fe
 8003254:	0000041d 	.word	0x0000041d
 8003258:	7fffffff 	.word	0x7fffffff
 800325c:	00000433 	.word	0x00000433
 8003260:	00000413 	.word	0x00000413
 8003264:	fffffbed 	.word	0xfffffbed

08003268 <__aeabi_i2d>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	2800      	cmp	r0, #0
 800326c:	d016      	beq.n	800329c <__aeabi_i2d+0x34>
 800326e:	17c3      	asrs	r3, r0, #31
 8003270:	18c5      	adds	r5, r0, r3
 8003272:	405d      	eors	r5, r3
 8003274:	0fc4      	lsrs	r4, r0, #31
 8003276:	0028      	movs	r0, r5
 8003278:	f000 f91a 	bl	80034b0 <__clzsi2>
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <__aeabi_i2d+0x5c>)
 800327e:	1a1b      	subs	r3, r3, r0
 8003280:	280a      	cmp	r0, #10
 8003282:	dc16      	bgt.n	80032b2 <__aeabi_i2d+0x4a>
 8003284:	0002      	movs	r2, r0
 8003286:	002e      	movs	r6, r5
 8003288:	3215      	adds	r2, #21
 800328a:	4096      	lsls	r6, r2
 800328c:	220b      	movs	r2, #11
 800328e:	1a12      	subs	r2, r2, r0
 8003290:	40d5      	lsrs	r5, r2
 8003292:	055b      	lsls	r3, r3, #21
 8003294:	032d      	lsls	r5, r5, #12
 8003296:	0b2d      	lsrs	r5, r5, #12
 8003298:	0d5b      	lsrs	r3, r3, #21
 800329a:	e003      	b.n	80032a4 <__aeabi_i2d+0x3c>
 800329c:	2400      	movs	r4, #0
 800329e:	2300      	movs	r3, #0
 80032a0:	2500      	movs	r5, #0
 80032a2:	2600      	movs	r6, #0
 80032a4:	051b      	lsls	r3, r3, #20
 80032a6:	432b      	orrs	r3, r5
 80032a8:	07e4      	lsls	r4, r4, #31
 80032aa:	4323      	orrs	r3, r4
 80032ac:	0030      	movs	r0, r6
 80032ae:	0019      	movs	r1, r3
 80032b0:	bd70      	pop	{r4, r5, r6, pc}
 80032b2:	380b      	subs	r0, #11
 80032b4:	4085      	lsls	r5, r0
 80032b6:	055b      	lsls	r3, r3, #21
 80032b8:	032d      	lsls	r5, r5, #12
 80032ba:	2600      	movs	r6, #0
 80032bc:	0b2d      	lsrs	r5, r5, #12
 80032be:	0d5b      	lsrs	r3, r3, #21
 80032c0:	e7f0      	b.n	80032a4 <__aeabi_i2d+0x3c>
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	0000041e 	.word	0x0000041e

080032c8 <__aeabi_ui2d>:
 80032c8:	b510      	push	{r4, lr}
 80032ca:	1e04      	subs	r4, r0, #0
 80032cc:	d010      	beq.n	80032f0 <__aeabi_ui2d+0x28>
 80032ce:	f000 f8ef 	bl	80034b0 <__clzsi2>
 80032d2:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <__aeabi_ui2d+0x48>)
 80032d4:	1a1b      	subs	r3, r3, r0
 80032d6:	280a      	cmp	r0, #10
 80032d8:	dc11      	bgt.n	80032fe <__aeabi_ui2d+0x36>
 80032da:	220b      	movs	r2, #11
 80032dc:	0021      	movs	r1, r4
 80032de:	1a12      	subs	r2, r2, r0
 80032e0:	40d1      	lsrs	r1, r2
 80032e2:	3015      	adds	r0, #21
 80032e4:	030a      	lsls	r2, r1, #12
 80032e6:	055b      	lsls	r3, r3, #21
 80032e8:	4084      	lsls	r4, r0
 80032ea:	0b12      	lsrs	r2, r2, #12
 80032ec:	0d5b      	lsrs	r3, r3, #21
 80032ee:	e001      	b.n	80032f4 <__aeabi_ui2d+0x2c>
 80032f0:	2300      	movs	r3, #0
 80032f2:	2200      	movs	r2, #0
 80032f4:	051b      	lsls	r3, r3, #20
 80032f6:	4313      	orrs	r3, r2
 80032f8:	0020      	movs	r0, r4
 80032fa:	0019      	movs	r1, r3
 80032fc:	bd10      	pop	{r4, pc}
 80032fe:	0022      	movs	r2, r4
 8003300:	380b      	subs	r0, #11
 8003302:	4082      	lsls	r2, r0
 8003304:	055b      	lsls	r3, r3, #21
 8003306:	0312      	lsls	r2, r2, #12
 8003308:	2400      	movs	r4, #0
 800330a:	0b12      	lsrs	r2, r2, #12
 800330c:	0d5b      	lsrs	r3, r3, #21
 800330e:	e7f1      	b.n	80032f4 <__aeabi_ui2d+0x2c>
 8003310:	0000041e 	.word	0x0000041e

08003314 <__aeabi_f2d>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	0242      	lsls	r2, r0, #9
 8003318:	0043      	lsls	r3, r0, #1
 800331a:	0fc4      	lsrs	r4, r0, #31
 800331c:	20fe      	movs	r0, #254	; 0xfe
 800331e:	0e1b      	lsrs	r3, r3, #24
 8003320:	1c59      	adds	r1, r3, #1
 8003322:	0a55      	lsrs	r5, r2, #9
 8003324:	4208      	tst	r0, r1
 8003326:	d00c      	beq.n	8003342 <__aeabi_f2d+0x2e>
 8003328:	21e0      	movs	r1, #224	; 0xe0
 800332a:	0089      	lsls	r1, r1, #2
 800332c:	468c      	mov	ip, r1
 800332e:	076d      	lsls	r5, r5, #29
 8003330:	0b12      	lsrs	r2, r2, #12
 8003332:	4463      	add	r3, ip
 8003334:	051b      	lsls	r3, r3, #20
 8003336:	4313      	orrs	r3, r2
 8003338:	07e4      	lsls	r4, r4, #31
 800333a:	4323      	orrs	r3, r4
 800333c:	0028      	movs	r0, r5
 800333e:	0019      	movs	r1, r3
 8003340:	bd70      	pop	{r4, r5, r6, pc}
 8003342:	2b00      	cmp	r3, #0
 8003344:	d114      	bne.n	8003370 <__aeabi_f2d+0x5c>
 8003346:	2d00      	cmp	r5, #0
 8003348:	d01b      	beq.n	8003382 <__aeabi_f2d+0x6e>
 800334a:	0028      	movs	r0, r5
 800334c:	f000 f8b0 	bl	80034b0 <__clzsi2>
 8003350:	280a      	cmp	r0, #10
 8003352:	dc1c      	bgt.n	800338e <__aeabi_f2d+0x7a>
 8003354:	230b      	movs	r3, #11
 8003356:	002a      	movs	r2, r5
 8003358:	1a1b      	subs	r3, r3, r0
 800335a:	40da      	lsrs	r2, r3
 800335c:	0003      	movs	r3, r0
 800335e:	3315      	adds	r3, #21
 8003360:	409d      	lsls	r5, r3
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <__aeabi_f2d+0x88>)
 8003364:	0312      	lsls	r2, r2, #12
 8003366:	1a1b      	subs	r3, r3, r0
 8003368:	055b      	lsls	r3, r3, #21
 800336a:	0b12      	lsrs	r2, r2, #12
 800336c:	0d5b      	lsrs	r3, r3, #21
 800336e:	e7e1      	b.n	8003334 <__aeabi_f2d+0x20>
 8003370:	2d00      	cmp	r5, #0
 8003372:	d009      	beq.n	8003388 <__aeabi_f2d+0x74>
 8003374:	0b13      	lsrs	r3, r2, #12
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	0312      	lsls	r2, r2, #12
 800337a:	431a      	orrs	r2, r3
 800337c:	076d      	lsls	r5, r5, #29
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <__aeabi_f2d+0x8c>)
 8003380:	e7d8      	b.n	8003334 <__aeabi_f2d+0x20>
 8003382:	2300      	movs	r3, #0
 8003384:	2200      	movs	r2, #0
 8003386:	e7d5      	b.n	8003334 <__aeabi_f2d+0x20>
 8003388:	2200      	movs	r2, #0
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <__aeabi_f2d+0x8c>)
 800338c:	e7d2      	b.n	8003334 <__aeabi_f2d+0x20>
 800338e:	0003      	movs	r3, r0
 8003390:	002a      	movs	r2, r5
 8003392:	3b0b      	subs	r3, #11
 8003394:	409a      	lsls	r2, r3
 8003396:	2500      	movs	r5, #0
 8003398:	e7e3      	b.n	8003362 <__aeabi_f2d+0x4e>
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	00000389 	.word	0x00000389
 80033a0:	000007ff 	.word	0x000007ff

080033a4 <__aeabi_d2f>:
 80033a4:	0002      	movs	r2, r0
 80033a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a8:	004b      	lsls	r3, r1, #1
 80033aa:	030d      	lsls	r5, r1, #12
 80033ac:	0f40      	lsrs	r0, r0, #29
 80033ae:	0d5b      	lsrs	r3, r3, #21
 80033b0:	0fcc      	lsrs	r4, r1, #31
 80033b2:	0a6d      	lsrs	r5, r5, #9
 80033b4:	493a      	ldr	r1, [pc, #232]	; (80034a0 <__aeabi_d2f+0xfc>)
 80033b6:	4305      	orrs	r5, r0
 80033b8:	1c58      	adds	r0, r3, #1
 80033ba:	00d7      	lsls	r7, r2, #3
 80033bc:	4208      	tst	r0, r1
 80033be:	d00a      	beq.n	80033d6 <__aeabi_d2f+0x32>
 80033c0:	4938      	ldr	r1, [pc, #224]	; (80034a4 <__aeabi_d2f+0x100>)
 80033c2:	1859      	adds	r1, r3, r1
 80033c4:	29fe      	cmp	r1, #254	; 0xfe
 80033c6:	dd16      	ble.n	80033f6 <__aeabi_d2f+0x52>
 80033c8:	20ff      	movs	r0, #255	; 0xff
 80033ca:	2200      	movs	r2, #0
 80033cc:	05c0      	lsls	r0, r0, #23
 80033ce:	4310      	orrs	r0, r2
 80033d0:	07e4      	lsls	r4, r4, #31
 80033d2:	4320      	orrs	r0, r4
 80033d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <__aeabi_d2f+0x44>
 80033da:	433d      	orrs	r5, r7
 80033dc:	d026      	beq.n	800342c <__aeabi_d2f+0x88>
 80033de:	2205      	movs	r2, #5
 80033e0:	0192      	lsls	r2, r2, #6
 80033e2:	0a52      	lsrs	r2, r2, #9
 80033e4:	b2d8      	uxtb	r0, r3
 80033e6:	e7f1      	b.n	80033cc <__aeabi_d2f+0x28>
 80033e8:	432f      	orrs	r7, r5
 80033ea:	d0ed      	beq.n	80033c8 <__aeabi_d2f+0x24>
 80033ec:	2280      	movs	r2, #128	; 0x80
 80033ee:	03d2      	lsls	r2, r2, #15
 80033f0:	20ff      	movs	r0, #255	; 0xff
 80033f2:	432a      	orrs	r2, r5
 80033f4:	e7ea      	b.n	80033cc <__aeabi_d2f+0x28>
 80033f6:	2900      	cmp	r1, #0
 80033f8:	dd1b      	ble.n	8003432 <__aeabi_d2f+0x8e>
 80033fa:	0192      	lsls	r2, r2, #6
 80033fc:	1e50      	subs	r0, r2, #1
 80033fe:	4182      	sbcs	r2, r0
 8003400:	00ed      	lsls	r5, r5, #3
 8003402:	0f7f      	lsrs	r7, r7, #29
 8003404:	432a      	orrs	r2, r5
 8003406:	433a      	orrs	r2, r7
 8003408:	0753      	lsls	r3, r2, #29
 800340a:	d047      	beq.n	800349c <__aeabi_d2f+0xf8>
 800340c:	230f      	movs	r3, #15
 800340e:	4013      	ands	r3, r2
 8003410:	2b04      	cmp	r3, #4
 8003412:	d000      	beq.n	8003416 <__aeabi_d2f+0x72>
 8003414:	3204      	adds	r2, #4
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	04db      	lsls	r3, r3, #19
 800341a:	4013      	ands	r3, r2
 800341c:	d03e      	beq.n	800349c <__aeabi_d2f+0xf8>
 800341e:	1c48      	adds	r0, r1, #1
 8003420:	29fe      	cmp	r1, #254	; 0xfe
 8003422:	d0d1      	beq.n	80033c8 <__aeabi_d2f+0x24>
 8003424:	0192      	lsls	r2, r2, #6
 8003426:	0a52      	lsrs	r2, r2, #9
 8003428:	b2c0      	uxtb	r0, r0
 800342a:	e7cf      	b.n	80033cc <__aeabi_d2f+0x28>
 800342c:	2000      	movs	r0, #0
 800342e:	2200      	movs	r2, #0
 8003430:	e7cc      	b.n	80033cc <__aeabi_d2f+0x28>
 8003432:	000a      	movs	r2, r1
 8003434:	3217      	adds	r2, #23
 8003436:	db2f      	blt.n	8003498 <__aeabi_d2f+0xf4>
 8003438:	2680      	movs	r6, #128	; 0x80
 800343a:	0436      	lsls	r6, r6, #16
 800343c:	432e      	orrs	r6, r5
 800343e:	251e      	movs	r5, #30
 8003440:	1a6d      	subs	r5, r5, r1
 8003442:	2d1f      	cmp	r5, #31
 8003444:	dd11      	ble.n	800346a <__aeabi_d2f+0xc6>
 8003446:	2202      	movs	r2, #2
 8003448:	4252      	negs	r2, r2
 800344a:	1a52      	subs	r2, r2, r1
 800344c:	0031      	movs	r1, r6
 800344e:	40d1      	lsrs	r1, r2
 8003450:	2d20      	cmp	r5, #32
 8003452:	d004      	beq.n	800345e <__aeabi_d2f+0xba>
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <__aeabi_d2f+0x104>)
 8003456:	4694      	mov	ip, r2
 8003458:	4463      	add	r3, ip
 800345a:	409e      	lsls	r6, r3
 800345c:	4337      	orrs	r7, r6
 800345e:	003a      	movs	r2, r7
 8003460:	1e53      	subs	r3, r2, #1
 8003462:	419a      	sbcs	r2, r3
 8003464:	430a      	orrs	r2, r1
 8003466:	2100      	movs	r1, #0
 8003468:	e7ce      	b.n	8003408 <__aeabi_d2f+0x64>
 800346a:	4a10      	ldr	r2, [pc, #64]	; (80034ac <__aeabi_d2f+0x108>)
 800346c:	0038      	movs	r0, r7
 800346e:	4694      	mov	ip, r2
 8003470:	4463      	add	r3, ip
 8003472:	4098      	lsls	r0, r3
 8003474:	003a      	movs	r2, r7
 8003476:	1e41      	subs	r1, r0, #1
 8003478:	4188      	sbcs	r0, r1
 800347a:	409e      	lsls	r6, r3
 800347c:	40ea      	lsrs	r2, r5
 800347e:	4330      	orrs	r0, r6
 8003480:	4302      	orrs	r2, r0
 8003482:	2100      	movs	r1, #0
 8003484:	0753      	lsls	r3, r2, #29
 8003486:	d1c1      	bne.n	800340c <__aeabi_d2f+0x68>
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	0013      	movs	r3, r2
 800348c:	04c9      	lsls	r1, r1, #19
 800348e:	2001      	movs	r0, #1
 8003490:	400b      	ands	r3, r1
 8003492:	420a      	tst	r2, r1
 8003494:	d1c6      	bne.n	8003424 <__aeabi_d2f+0x80>
 8003496:	e7a3      	b.n	80033e0 <__aeabi_d2f+0x3c>
 8003498:	2300      	movs	r3, #0
 800349a:	e7a0      	b.n	80033de <__aeabi_d2f+0x3a>
 800349c:	000b      	movs	r3, r1
 800349e:	e79f      	b.n	80033e0 <__aeabi_d2f+0x3c>
 80034a0:	000007fe 	.word	0x000007fe
 80034a4:	fffffc80 	.word	0xfffffc80
 80034a8:	fffffca2 	.word	0xfffffca2
 80034ac:	fffffc82 	.word	0xfffffc82

080034b0 <__clzsi2>:
 80034b0:	211c      	movs	r1, #28
 80034b2:	2301      	movs	r3, #1
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	4298      	cmp	r0, r3
 80034b8:	d301      	bcc.n	80034be <__clzsi2+0xe>
 80034ba:	0c00      	lsrs	r0, r0, #16
 80034bc:	3910      	subs	r1, #16
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	4298      	cmp	r0, r3
 80034c2:	d301      	bcc.n	80034c8 <__clzsi2+0x18>
 80034c4:	0a00      	lsrs	r0, r0, #8
 80034c6:	3908      	subs	r1, #8
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	4298      	cmp	r0, r3
 80034cc:	d301      	bcc.n	80034d2 <__clzsi2+0x22>
 80034ce:	0900      	lsrs	r0, r0, #4
 80034d0:	3904      	subs	r1, #4
 80034d2:	a202      	add	r2, pc, #8	; (adr r2, 80034dc <__clzsi2+0x2c>)
 80034d4:	5c10      	ldrb	r0, [r2, r0]
 80034d6:	1840      	adds	r0, r0, r1
 80034d8:	4770      	bx	lr
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	02020304 	.word	0x02020304
 80034e0:	01010101 	.word	0x01010101
	...

080034ec <__clzdi2>:
 80034ec:	b510      	push	{r4, lr}
 80034ee:	2900      	cmp	r1, #0
 80034f0:	d103      	bne.n	80034fa <__clzdi2+0xe>
 80034f2:	f7ff ffdd 	bl	80034b0 <__clzsi2>
 80034f6:	3020      	adds	r0, #32
 80034f8:	e002      	b.n	8003500 <__clzdi2+0x14>
 80034fa:	0008      	movs	r0, r1
 80034fc:	f7ff ffd8 	bl	80034b0 <__clzsi2>
 8003500:	bd10      	pop	{r4, pc}
 8003502:	46c0      	nop			; (mov r8, r8)

08003504 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003508:	f3bf 8f4f 	dsb	sy
}
 800350c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <__NVIC_SystemReset+0x1c>)
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <__NVIC_SystemReset+0x20>)
 8003512:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003514:	f3bf 8f4f 	dsb	sy
}
 8003518:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	e7fd      	b.n	800351a <__NVIC_SystemReset+0x16>
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	e000ed00 	.word	0xe000ed00
 8003524:	05fa0004 	.word	0x05fa0004

08003528 <Flash_Erase>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Flash_Erase(uint32_t address) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8003530:	f002 fa46 	bl	80059c0 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = 1;
 8003534:	210c      	movs	r1, #12
 8003536:	187b      	adds	r3, r7, r1
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.NbPages = 1;
 800353c:	187b      	adds	r3, r7, r1
 800353e:	2201      	movs	r2, #1
 8003540:	609a      	str	r2, [r3, #8]
	EraseInitStruct.PageAddress = address;
 8003542:	187b      	adds	r3, r7, r1
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003548:	187b      	adds	r3, r7, r1
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
	uint32_t pagerr;
	HAL_FLASHEx_Erase(&EraseInitStruct, &pagerr);
 800354e:	2308      	movs	r3, #8
 8003550:	18fa      	adds	r2, r7, r3
 8003552:	187b      	adds	r3, r7, r1
 8003554:	0011      	movs	r1, r2
 8003556:	0018      	movs	r0, r3
 8003558:	f002 fba8 	bl	8005cac <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800355c:	f002 fa84 	bl	8005a68 <HAL_FLASH_Lock>
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b006      	add	sp, #24
 8003566:	bd80      	pop	{r7, pc}

08003568 <Flash_Write_Init>:
void Flash_Write_Init(uint32_t address, int value) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8003572:	f002 fa25 	bl	80059c0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAMDATA_WORD, address, value);
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	0019      	movs	r1, r3
 800357c:	2002      	movs	r0, #2
 800357e:	f002 f9e3 	bl	8005948 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8003582:	f002 fa71 	bl	8005a68 <HAL_FLASH_Lock>
}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b002      	add	sp, #8
 800358c:	bd80      	pop	{r7, pc}

0800358e <Flash_Read_Init>:
int Flash_Read_Init(uint32_t address) {
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t*) (address);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b29b      	uxth	r3, r3
}
 800359c:	0018      	movs	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance) {
		// cnt_1++;
	}
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b002      	add	sp, #8
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // Chon ngat tai channel 1 | cubeMX (PWM input on CH1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	7e1b      	ldrb	r3, [r3, #24]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d139      	bne.n	8003638 <HAL_TIM_IC_CaptureCallback+0x84>
			{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1); // Do chu ky PWM tu TIM1
 80035c4:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80035c6:	2100      	movs	r1, #0
 80035c8:	0018      	movs	r0, r3
 80035ca:	f003 ff79 	bl	80074c0 <HAL_TIM_ReadCapturedValue>
 80035ce:	0002      	movs	r2, r0
 80035d0:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <HAL_TIM_IC_CaptureCallback+0x90>)
 80035d2:	601a      	str	r2, [r3, #0]

		if (ICValue != 0) {
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_TIM_IC_CaptureCallback+0x90>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d02d      	beq.n	8003638 <HAL_TIM_IC_CaptureCallback+0x84>
			// calculate the Duty Cycle
			Duty = (float) (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2)
 80035dc:	4b18      	ldr	r3, [pc, #96]	; (8003640 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80035de:	2104      	movs	r1, #4
 80035e0:	0018      	movs	r0, r3
 80035e2:	f003 ff6d 	bl	80074c0 <HAL_TIM_ReadCapturedValue>
 80035e6:	0003      	movs	r3, r0
					* 100) / ICValue; // Do do rong xung muc cao
 80035e8:	2264      	movs	r2, #100	; 0x64
 80035ea:	4353      	muls	r3, r2
			Duty = (float) (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2)
 80035ec:	0018      	movs	r0, r3
 80035ee:	f7fe f801 	bl	80015f4 <__aeabi_ui2f>
 80035f2:	1c04      	adds	r4, r0, #0
					* 100) / ICValue; // Do do rong xung muc cao
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <HAL_TIM_IC_CaptureCallback+0x90>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7fd fffb 	bl	80015f4 <__aeabi_ui2f>
 80035fe:	1c03      	adds	r3, r0, #0
 8003600:	1c19      	adds	r1, r3, #0
 8003602:	1c20      	adds	r0, r4, #0
 8003604:	f7fd facc 	bl	8000ba0 <__aeabi_fdiv>
 8003608:	1c03      	adds	r3, r0, #0
 800360a:	1c1a      	adds	r2, r3, #0
			Duty = (float) (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2)
 800360c:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <HAL_TIM_IC_CaptureCallback+0x94>)
 800360e:	601a      	str	r2, [r3, #0]
				Distance_water = 70 - ((Duty * 50) / 10);
			}
#endif
#if tube_length==90
			if (tube_length == 90) {
				Distance_water = 50 - ((Duty * 50) / 10);
 8003610:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	490d      	ldr	r1, [pc, #52]	; (800364c <HAL_TIM_IC_CaptureCallback+0x98>)
 8003616:	1c18      	adds	r0, r3, #0
 8003618:	f7fd fc8c 	bl	8000f34 <__aeabi_fmul>
 800361c:	1c03      	adds	r3, r0, #0
 800361e:	490c      	ldr	r1, [pc, #48]	; (8003650 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8003620:	1c18      	adds	r0, r3, #0
 8003622:	f7fd fabd 	bl	8000ba0 <__aeabi_fdiv>
 8003626:	1c03      	adds	r3, r0, #0
 8003628:	1c19      	adds	r1, r3, #0
 800362a:	4808      	ldr	r0, [pc, #32]	; (800364c <HAL_TIM_IC_CaptureCallback+0x98>)
 800362c:	f7fd fdd0 	bl	80011d0 <__aeabi_fsub>
 8003630:	1c03      	adds	r3, r0, #0
 8003632:	1c1a      	adds	r2, r3, #0
 8003634:	4b07      	ldr	r3, [pc, #28]	; (8003654 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8003636:	601a      	str	r2, [r3, #0]
//			else
//			Distance_water=((Duty*50)/10); //don vi CM
			//Frequency = (TIMCLOCK / PRESCALER) / ICValue;
		}
	}
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b003      	add	sp, #12
 800363e:	bd90      	pop	{r4, r7, pc}
 8003640:	20000358 	.word	0x20000358
 8003644:	2000071c 	.word	0x2000071c
 8003648:	20000720 	.word	0x20000720
 800364c:	42480000 	.word	0x42480000
 8003650:	41200000 	.word	0x41200000
 8003654:	20000724 	.word	0x20000724

08003658 <connectSimcomA76xx>:

int connectSimcomA76xx() {
 8003658:	b5b0      	push	{r4, r5, r7, lr}
 800365a:	af00      	add	r7, sp, #0
	//HAL_TIM_Base_Stop_IT(&htim6);
	previousTick = HAL_GetTick();
 800365c:	f001 fb52 	bl	8004d04 <HAL_GetTick>
 8003660:	0003      	movs	r3, r0
 8003662:	001a      	movs	r2, r3
 8003664:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <connectSimcomA76xx+0xfc>)
 8003666:	601a      	str	r2, [r3, #0]

	while (isConnectSimcomA76xx == 0
 8003668:	e059      	b.n	800371e <connectSimcomA76xx+0xc6>
			&& (previousTick + timeOutConnectA76XX) > HAL_GetTick()) {
		if (strstr((char*) rxBuffer, "PB DONE")) {
 800366a:	4a3b      	ldr	r2, [pc, #236]	; (8003758 <connectSimcomA76xx+0x100>)
 800366c:	4b3b      	ldr	r3, [pc, #236]	; (800375c <connectSimcomA76xx+0x104>)
 800366e:	0011      	movs	r1, r2
 8003670:	0018      	movs	r0, r3
 8003672:	f006 feb3 	bl	800a3dc <strstr>
 8003676:	1e03      	subs	r3, r0, #0
 8003678:	d002      	beq.n	8003680 <connectSimcomA76xx+0x28>
			isPBDONE = 1;
 800367a:	4b39      	ldr	r3, [pc, #228]	; (8003760 <connectSimcomA76xx+0x108>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]
//		if(strstr((char *)rxBuffer,"PDN ACT 1")){
//			A7677S_DONE = 1;
//			isPBDONE=1;
//			HAL_Delay(7000);
//		}
		if (isPBDONE == 1) {
 8003680:	4b37      	ldr	r3, [pc, #220]	; (8003760 <connectSimcomA76xx+0x108>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d14a      	bne.n	800371e <connectSimcomA76xx+0xc6>
			sendingToSimcomA76xx(ATE0);
 8003688:	4b36      	ldr	r3, [pc, #216]	; (8003764 <connectSimcomA76xx+0x10c>)
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f8e6 	bl	800385c <sendingToSimcomA76xx>
			HAL_Delay(200);
 8003690:	20c8      	movs	r0, #200	; 0xc8
 8003692:	f001 fb41 	bl	8004d18 <HAL_Delay>
			sendingToSimcomA76xx(AT_SIGNAL_SIM);
 8003696:	4b34      	ldr	r3, [pc, #208]	; (8003768 <connectSimcomA76xx+0x110>)
 8003698:	0018      	movs	r0, r3
 800369a:	f000 f8df 	bl	800385c <sendingToSimcomA76xx>
			HAL_Delay(200);
 800369e:	20c8      	movs	r0, #200	; 0xc8
 80036a0:	f001 fb3a 	bl	8004d18 <HAL_Delay>
			SignalStrength = (rxBuffer[8] - 48) * 10 + (rxBuffer[9] - 48);
 80036a4:	4b2d      	ldr	r3, [pc, #180]	; (800375c <connectSimcomA76xx+0x104>)
 80036a6:	7a1b      	ldrb	r3, [r3, #8]
 80036a8:	3b30      	subs	r3, #48	; 0x30
 80036aa:	001a      	movs	r2, r3
 80036ac:	0013      	movs	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	189b      	adds	r3, r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	001a      	movs	r2, r3
 80036b6:	4b29      	ldr	r3, [pc, #164]	; (800375c <connectSimcomA76xx+0x104>)
 80036b8:	7a5b      	ldrb	r3, [r3, #9]
 80036ba:	3b30      	subs	r3, #48	; 0x30
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	0018      	movs	r0, r3
 80036c0:	f7fd ff46 	bl	8001550 <__aeabi_i2f>
 80036c4:	1c02      	adds	r2, r0, #0
 80036c6:	4b29      	ldr	r3, [pc, #164]	; (800376c <connectSimcomA76xx+0x114>)
 80036c8:	601a      	str	r2, [r3, #0]
			if(SignalStrength>=31)
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <connectSimcomA76xx+0x114>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4928      	ldr	r1, [pc, #160]	; (8003770 <connectSimcomA76xx+0x118>)
 80036d0:	1c18      	adds	r0, r3, #0
 80036d2:	f7fc ff19 	bl	8000508 <__aeabi_fcmpge>
 80036d6:	1e03      	subs	r3, r0, #0
 80036d8:	d004      	beq.n	80036e4 <connectSimcomA76xx+0x8c>
			{
				rssi=-51;
 80036da:	4b26      	ldr	r3, [pc, #152]	; (8003774 <connectSimcomA76xx+0x11c>)
 80036dc:	2233      	movs	r2, #51	; 0x33
 80036de:	4252      	negs	r2, r2
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e011      	b.n	8003708 <connectSimcomA76xx+0xb0>
			}else rssi = (SignalStrength * 2 - 113);
 80036e4:	4b21      	ldr	r3, [pc, #132]	; (800376c <connectSimcomA76xx+0x114>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	1c19      	adds	r1, r3, #0
 80036ea:	1c18      	adds	r0, r3, #0
 80036ec:	f7fd f8b8 	bl	8000860 <__aeabi_fadd>
 80036f0:	1c03      	adds	r3, r0, #0
 80036f2:	4921      	ldr	r1, [pc, #132]	; (8003778 <connectSimcomA76xx+0x120>)
 80036f4:	1c18      	adds	r0, r3, #0
 80036f6:	f7fd fd6b 	bl	80011d0 <__aeabi_fsub>
 80036fa:	1c03      	adds	r3, r0, #0
 80036fc:	1c18      	adds	r0, r3, #0
 80036fe:	f7fd ff07 	bl	8001510 <__aeabi_f2iz>
 8003702:	0002      	movs	r2, r0
 8003704:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <connectSimcomA76xx+0x11c>)
 8003706:	601a      	str	r2, [r3, #0]
			isConnectSimcomA76xx = 1;
 8003708:	4b1c      	ldr	r3, [pc, #112]	; (800377c <connectSimcomA76xx+0x124>)
 800370a:	2201      	movs	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 800370e:	23fa      	movs	r3, #250	; 0xfa
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	0018      	movs	r0, r3
 8003714:	f001 fb00 	bl	8004d18 <HAL_Delay>
			return isConnectSimcomA76xx;
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <connectSimcomA76xx+0x124>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	e016      	b.n	800374c <connectSimcomA76xx+0xf4>
	while (isConnectSimcomA76xx == 0
 800371e:	4b17      	ldr	r3, [pc, #92]	; (800377c <connectSimcomA76xx+0x124>)
 8003720:	781b      	ldrb	r3, [r3, #0]
			&& (previousTick + timeOutConnectA76XX) > HAL_GetTick()) {
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <connectSimcomA76xx+0xe4>
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <connectSimcomA76xx+0xfc>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <connectSimcomA76xx+0x128>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	18d3      	adds	r3, r2, r3
 8003730:	001c      	movs	r4, r3
 8003732:	f001 fae7 	bl	8004d04 <HAL_GetTick>
 8003736:	0003      	movs	r3, r0
 8003738:	429c      	cmp	r4, r3
 800373a:	d896      	bhi.n	800366a <connectSimcomA76xx+0x12>
		}
	}
	if (isConnectSimcomA76xx == 0) {
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <connectSimcomA76xx+0x124>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <connectSimcomA76xx+0xf0>
		NVIC_SystemReset();
 8003744:	f7ff fede 	bl	8003504 <__NVIC_SystemReset>
	}

	return isConnectSimcomA76xx;
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <connectSimcomA76xx+0x124>)
 800374a:	781b      	ldrb	r3, [r3, #0]
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	bdb0      	pop	{r4, r5, r7, pc}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	200006dc 	.word	0x200006dc
 8003758:	0800dcb8 	.word	0x0800dcb8
 800375c:	200006e4 	.word	0x200006e4
 8003760:	200006e0 	.word	0x200006e0
 8003764:	20000000 	.word	0x20000000
 8003768:	20000008 	.word	0x20000008
 800376c:	20000744 	.word	0x20000744
 8003770:	41f80000 	.word	0x41f80000
 8003774:	20000108 	.word	0x20000108
 8003778:	42e20000 	.word	0x42e20000
 800377c:	20000716 	.word	0x20000716
 8003780:	200000f8 	.word	0x200000f8

08003784 <HAL_UARTEx_RxEventCallback>:
//		}
//	}
//	HAL_UART_Receive_IT(&huart1, &rxData,1);
//}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003786:	b085      	sub	sp, #20
 8003788:	af02      	add	r7, sp, #8
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	000a      	movs	r2, r1
 800378e:	1cbb      	adds	r3, r7, #2
 8003790:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1) {
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a27      	ldr	r2, [pc, #156]	; (8003834 <HAL_UARTEx_RxEventCallback+0xb0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d119      	bne.n	80037d0 <HAL_UARTEx_RxEventCallback+0x4c>
		if (strstr((char*) rxBuffer, "ERROR")) {
 800379c:	4a26      	ldr	r2, [pc, #152]	; (8003838 <HAL_UARTEx_RxEventCallback+0xb4>)
 800379e:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_UARTEx_RxEventCallback+0xb8>)
 80037a0:	0011      	movs	r1, r2
 80037a2:	0018      	movs	r0, r3
 80037a4:	f006 fe1a 	bl	800a3dc <strstr>
 80037a8:	1e03      	subs	r3, r0, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_UARTEx_RxEventCallback+0x2c>
			NVIC_SystemReset();
 80037ac:	f7ff feaa 	bl	8003504 <__NVIC_SystemReset>
		}
		if (strstr((char*) rxBuffer, "unknown")) {
 80037b0:	4a23      	ldr	r2, [pc, #140]	; (8003840 <HAL_UARTEx_RxEventCallback+0xbc>)
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_UARTEx_RxEventCallback+0xb8>)
 80037b4:	0011      	movs	r1, r2
 80037b6:	0018      	movs	r0, r3
 80037b8:	f006 fe10 	bl	800a3dc <strstr>
 80037bc:	1e03      	subs	r3, r0, #0
 80037be:	d001      	beq.n	80037c4 <HAL_UARTEx_RxEventCallback+0x40>
			NVIC_SystemReset();
 80037c0:	f7ff fea0 	bl	8003504 <__NVIC_SystemReset>
		}
		HAL_UARTEx_ReceiveToIdle_IT(huart, (uint8_t*) rxBuffer, 50);
 80037c4:	491d      	ldr	r1, [pc, #116]	; (800383c <HAL_UARTEx_RxEventCallback+0xb8>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2232      	movs	r2, #50	; 0x32
 80037ca:	0018      	movs	r0, r3
 80037cc:	f005 fd44 	bl	8009258 <HAL_UARTEx_ReceiveToIdle_IT>
	}
	if (huart->Instance == USART2) {
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1b      	ldr	r2, [pc, #108]	; (8003844 <HAL_UARTEx_RxEventCallback+0xc0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d127      	bne.n	800382a <HAL_UARTEx_RxEventCallback+0xa6>
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*) rx_VL53L1, 8);
#endif
#if wt53r_ttl
		//Distance_water= (char)rx_wt53r_ttl[36];

		sprintf(data_w53r_ttl,"%c%c%c%c",rx_wt53r_ttl[34],rx_wt53r_ttl[35],rx_wt53r_ttl[36],rx_wt53r_ttl[37]);
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_UARTEx_RxEventCallback+0xc4>)
 80037dc:	2222      	movs	r2, #34	; 0x22
 80037de:	5c9b      	ldrb	r3, [r3, r2]
 80037e0:	001d      	movs	r5, r3
 80037e2:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_UARTEx_RxEventCallback+0xc4>)
 80037e4:	2223      	movs	r2, #35	; 0x23
 80037e6:	5c9b      	ldrb	r3, [r3, r2]
 80037e8:	001e      	movs	r6, r3
 80037ea:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_UARTEx_RxEventCallback+0xc4>)
 80037ec:	2224      	movs	r2, #36	; 0x24
 80037ee:	5c9b      	ldrb	r3, [r3, r2]
 80037f0:	001c      	movs	r4, r3
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_UARTEx_RxEventCallback+0xc4>)
 80037f4:	2225      	movs	r2, #37	; 0x25
 80037f6:	5c9b      	ldrb	r3, [r3, r2]
 80037f8:	4914      	ldr	r1, [pc, #80]	; (800384c <HAL_UARTEx_RxEventCallback+0xc8>)
 80037fa:	4815      	ldr	r0, [pc, #84]	; (8003850 <HAL_UARTEx_RxEventCallback+0xcc>)
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	9400      	str	r4, [sp, #0]
 8003800:	0033      	movs	r3, r6
 8003802:	002a      	movs	r2, r5
 8003804:	f006 fd76 	bl	800a2f4 <siprintf>
		Distance_water=atoi(data_w53r_ttl);
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_UARTEx_RxEventCallback+0xcc>)
 800380a:	0018      	movs	r0, r3
 800380c:	f005 fd8c 	bl	8009328 <atoi>
 8003810:	0003      	movs	r3, r0
 8003812:	0018      	movs	r0, r3
 8003814:	f7fd fe9c 	bl	8001550 <__aeabi_i2f>
 8003818:	1c02      	adds	r2, r0, #0
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_UARTEx_RxEventCallback+0xd0>)
 800381c:	601a      	str	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*) rx_wt53r_ttl, 80);
 800381e:	490a      	ldr	r1, [pc, #40]	; (8003848 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <HAL_UARTEx_RxEventCallback+0xd4>)
 8003822:	2250      	movs	r2, #80	; 0x50
 8003824:	0018      	movs	r0, r3
 8003826:	f005 fd17 	bl	8009258 <HAL_UARTEx_ReceiveToIdle_IT>
#endif
	}

}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b003      	add	sp, #12
 8003830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	40013800 	.word	0x40013800
 8003838:	0800dcc0 	.word	0x0800dcc0
 800383c:	200006e4 	.word	0x200006e4
 8003840:	0800dcc8 	.word	0x0800dcc8
 8003844:	40004400 	.word	0x40004400
 8003848:	200008a0 	.word	0x200008a0
 800384c:	0800dcd0 	.word	0x0800dcd0
 8003850:	200008f0 	.word	0x200008f0
 8003854:	20000724 	.word	0x20000724
 8003858:	20000460 	.word	0x20000460

0800385c <sendingToSimcomA76xx>:

void sendingToSimcomA76xx(char *cmd) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) cmd, strlen(cmd), 1000);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0018      	movs	r0, r3
 8003868:	f7fc fc4e 	bl	8000108 <strlen>
 800386c:	0003      	movs	r3, r0
 800386e:	b29a      	uxth	r2, r3
 8003870:	23fa      	movs	r3, #250	; 0xfa
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4803      	ldr	r0, [pc, #12]	; (8003884 <sendingToSimcomA76xx+0x28>)
 8003878:	f004 f9b4 	bl	8007be4 <HAL_UART_Transmit>
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200003d8 	.word	0x200003d8

08003888 <writte_mode_return_rate>:
void read_vl53l1(uint8_t *data) {
	HAL_UART_Transmit(&huart2, data_vl53l1, 9, 1000);
}
void writte_mode_return_rate(uint8_t *data) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, save_mode_0_2hz, 9, 1000);
 8003890:	23fa      	movs	r3, #250	; 0xfa
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4904      	ldr	r1, [pc, #16]	; (80038a8 <writte_mode_return_rate+0x20>)
 8003896:	4805      	ldr	r0, [pc, #20]	; (80038ac <writte_mode_return_rate+0x24>)
 8003898:	2209      	movs	r2, #9
 800389a:	f004 f9a3 	bl	8007be4 <HAL_UART_Transmit>
}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b002      	add	sp, #8
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	20000100 	.word	0x20000100
 80038ac:	20000460 	.word	0x20000460

080038b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038b0:	b5b0      	push	{r4, r5, r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038b4:	f001 f9c0 	bl	8004c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038b8:	f000 f8cc 	bl	8003a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038bc:	f000 fada 	bl	8003e74 <MX_GPIO_Init>
  MX_TIM6_Init();
 80038c0:	f000 fa3a 	bl	8003d38 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80038c4:	f000 fa76 	bl	8003db4 <MX_USART1_UART_Init>
  MX_ADC_Init();
 80038c8:	f000 f940 	bl	8003b4c <MX_ADC_Init>
  MX_TIM2_Init();
 80038cc:	f000 f9a4 	bl	8003c18 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80038d0:	f000 faa0 	bl	8003e14 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	// HAL_TIM_Base_Start_IT(&htim6);
	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_SET);
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	01db      	lsls	r3, r3, #7
 80038d8:	484c      	ldr	r0, [pc, #304]	; (8003a0c <main+0x15c>)
 80038da:	2201      	movs	r2, #1
 80038dc:	0019      	movs	r1, r3
 80038de:	f002 fbeb 	bl	80060b8 <HAL_GPIO_WritePin>

	//sendingToSimcomA76xx(AT_RESET);

//  HAL_UART_Receive_IT(&huart1, &rxData,1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*) rxBuffer, 50);
 80038e2:	494b      	ldr	r1, [pc, #300]	; (8003a10 <main+0x160>)
 80038e4:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <main+0x164>)
 80038e6:	2232      	movs	r2, #50	; 0x32
 80038e8:	0018      	movs	r0, r3
 80038ea:	f005 fcb5 	bl	8009258 <HAL_UARTEx_ReceiveToIdle_IT>
#if vl53l1
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*) rx_VL53L1, 8);
#endif
#if wt53r_ttl
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*) rx_wt53r_ttl, 80);
 80038ee:	494a      	ldr	r1, [pc, #296]	; (8003a18 <main+0x168>)
 80038f0:	4b4a      	ldr	r3, [pc, #296]	; (8003a1c <main+0x16c>)
 80038f2:	2250      	movs	r2, #80	; 0x50
 80038f4:	0018      	movs	r0, r3
 80038f6:	f005 fcaf 	bl	8009258 <HAL_UARTEx_ReceiveToIdle_IT>
#endif

	intDataWater = Flash_Read_Init(DATA_INT_WATER);
 80038fa:	4b49      	ldr	r3, [pc, #292]	; (8003a20 <main+0x170>)
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7ff fe46 	bl	800358e <Flash_Read_Init>
 8003902:	0002      	movs	r2, r0
 8003904:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <main+0x174>)
 8003906:	601a      	str	r2, [r3, #0]
	floatDataWater = Flash_Read_Init(DATA_FLOAT_WATER);
 8003908:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <main+0x178>)
 800390a:	0018      	movs	r0, r3
 800390c:	f7ff fe3f 	bl	800358e <Flash_Read_Init>
 8003910:	0002      	movs	r2, r0
 8003912:	4b46      	ldr	r3, [pc, #280]	; (8003a2c <main+0x17c>)
 8003914:	601a      	str	r2, [r3, #0]
	Negative = Flash_Read_Init(DATA_NEGATIVE_WATER);
 8003916:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <main+0x180>)
 8003918:	0018      	movs	r0, r3
 800391a:	f7ff fe38 	bl	800358e <Flash_Read_Init>
 800391e:	0002      	movs	r2, r0
 8003920:	4b44      	ldr	r3, [pc, #272]	; (8003a34 <main+0x184>)
 8003922:	601a      	str	r2, [r3, #0]
	if (Negative == 2) {
 8003924:	4b43      	ldr	r3, [pc, #268]	; (8003a34 <main+0x184>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d126      	bne.n	800397a <main+0xca>
		SaveDataWater = ((float) (intDataWater + (float) floatDataWater * 0.1))
 800392c:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <main+0x174>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	0018      	movs	r0, r3
 8003932:	f7ff fc99 	bl	8003268 <__aeabi_i2d>
 8003936:	0004      	movs	r4, r0
 8003938:	000d      	movs	r5, r1
 800393a:	4b3c      	ldr	r3, [pc, #240]	; (8003a2c <main+0x17c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	0018      	movs	r0, r3
 8003940:	f7fd fe06 	bl	8001550 <__aeabi_i2f>
 8003944:	1c03      	adds	r3, r0, #0
 8003946:	1c18      	adds	r0, r3, #0
 8003948:	f7ff fce4 	bl	8003314 <__aeabi_f2d>
 800394c:	4a3a      	ldr	r2, [pc, #232]	; (8003a38 <main+0x188>)
 800394e:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <main+0x18c>)
 8003950:	f7fe fdf2 	bl	8002538 <__aeabi_dmul>
 8003954:	0002      	movs	r2, r0
 8003956:	000b      	movs	r3, r1
 8003958:	0020      	movs	r0, r4
 800395a:	0029      	movs	r1, r5
 800395c:	f7fd fe92 	bl	8001684 <__aeabi_dadd>
 8003960:	0002      	movs	r2, r0
 8003962:	000b      	movs	r3, r1
 8003964:	0010      	movs	r0, r2
 8003966:	0019      	movs	r1, r3
 8003968:	f7ff fd1c 	bl	80033a4 <__aeabi_d2f>
 800396c:	1c02      	adds	r2, r0, #0
				* -1;
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	405a      	eors	r2, r3
		SaveDataWater = ((float) (intDataWater + (float) floatDataWater * 0.1))
 8003974:	4b32      	ldr	r3, [pc, #200]	; (8003a40 <main+0x190>)
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e022      	b.n	80039c0 <main+0x110>
	} else {
		SaveDataWater = (float) (intDataWater + (float) floatDataWater * 0.1);
 800397a:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <main+0x174>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	0018      	movs	r0, r3
 8003980:	f7ff fc72 	bl	8003268 <__aeabi_i2d>
 8003984:	0004      	movs	r4, r0
 8003986:	000d      	movs	r5, r1
 8003988:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <main+0x17c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	0018      	movs	r0, r3
 800398e:	f7fd fddf 	bl	8001550 <__aeabi_i2f>
 8003992:	1c03      	adds	r3, r0, #0
 8003994:	1c18      	adds	r0, r3, #0
 8003996:	f7ff fcbd 	bl	8003314 <__aeabi_f2d>
 800399a:	4a27      	ldr	r2, [pc, #156]	; (8003a38 <main+0x188>)
 800399c:	4b27      	ldr	r3, [pc, #156]	; (8003a3c <main+0x18c>)
 800399e:	f7fe fdcb 	bl	8002538 <__aeabi_dmul>
 80039a2:	0002      	movs	r2, r0
 80039a4:	000b      	movs	r3, r1
 80039a6:	0020      	movs	r0, r4
 80039a8:	0029      	movs	r1, r5
 80039aa:	f7fd fe6b 	bl	8001684 <__aeabi_dadd>
 80039ae:	0002      	movs	r2, r0
 80039b0:	000b      	movs	r3, r1
 80039b2:	0010      	movs	r0, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	f7ff fcf5 	bl	80033a4 <__aeabi_d2f>
 80039ba:	1c02      	adds	r2, r0, #0
 80039bc:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <main+0x190>)
 80039be:	601a      	str	r2, [r3, #0]
	}
	turnOnA76XX();
 80039c0:	f000 fbb2 	bl	8004128 <turnOnA76XX>
	writte_mode_return_rate(save_mode_0_2hz);
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <main+0x194>)
 80039c6:	0018      	movs	r0, r3
 80039c8:	f7ff ff5e 	bl	8003888 <writte_mode_return_rate>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//HAL_GPIO_WritePin(OPEN_SENSOR_GPIO_Port, OPEN_SENSOR_Pin, GPIO_PIN_SET);
		if (!isConnectSimcomA76xx) {
 80039cc:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <main+0x198>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <main+0x130>
			isConnectSimcomA76xx = connectSimcomA76xx();
 80039d4:	f7ff fe40 	bl	8003658 <connectSimcomA76xx>
 80039d8:	0003      	movs	r3, r0
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <main+0x198>)
 80039de:	701a      	strb	r2, [r3, #0]
		}
		if (!isConnectMQTT) {
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <main+0x19c>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d105      	bne.n	80039f4 <main+0x144>
			isConnectMQTT = connectMQTT();
 80039e8:	f000 fc68 	bl	80042bc <connectMQTT>
 80039ec:	0003      	movs	r3, r0
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <main+0x19c>)
 80039f2:	701a      	strb	r2, [r3, #0]
		}
		if (!isSleepMode) {
 80039f4:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <main+0x1a0>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e7      	bne.n	80039cc <main+0x11c>
			isSleepMode = Sleep_Stm32_A7672S();
 80039fc:	f000 fd82 	bl	8004504 <Sleep_Stm32_A7672S>
 8003a00:	0003      	movs	r3, r0
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <main+0x1a0>)
 8003a06:	701a      	strb	r2, [r3, #0]
		if (!isConnectSimcomA76xx) {
 8003a08:	e7e0      	b.n	80039cc <main+0x11c>
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	50000400 	.word	0x50000400
 8003a10:	200006e4 	.word	0x200006e4
 8003a14:	200003d8 	.word	0x200003d8
 8003a18:	200008a0 	.word	0x200008a0
 8003a1c:	20000460 	.word	0x20000460
 8003a20:	0800fc00 	.word	0x0800fc00
 8003a24:	20000730 	.word	0x20000730
 8003a28:	0800f800 	.word	0x0800f800
 8003a2c:	20000734 	.word	0x20000734
 8003a30:	0800f400 	.word	0x0800f400
 8003a34:	20000738 	.word	0x20000738
 8003a38:	9999999a 	.word	0x9999999a
 8003a3c:	3fb99999 	.word	0x3fb99999
 8003a40:	20000728 	.word	0x20000728
 8003a44:	20000100 	.word	0x20000100
 8003a48:	20000716 	.word	0x20000716
 8003a4c:	20000717 	.word	0x20000717
 8003a50:	20000718 	.word	0x20000718

08003a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b09b      	sub	sp, #108	; 0x6c
 8003a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a5a:	2434      	movs	r4, #52	; 0x34
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	0018      	movs	r0, r3
 8003a60:	2334      	movs	r3, #52	; 0x34
 8003a62:	001a      	movs	r2, r3
 8003a64:	2100      	movs	r1, #0
 8003a66:	f006 fcb1 	bl	800a3cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	0018      	movs	r0, r3
 8003a70:	2314      	movs	r3, #20
 8003a72:	001a      	movs	r2, r3
 8003a74:	2100      	movs	r1, #0
 8003a76:	f006 fca9 	bl	800a3cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a7a:	003b      	movs	r3, r7
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	2320      	movs	r3, #32
 8003a80:	001a      	movs	r2, r3
 8003a82:	2100      	movs	r1, #0
 8003a84:	f006 fca2 	bl	800a3cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a88:	4b2e      	ldr	r3, [pc, #184]	; (8003b44 <SystemClock_Config+0xf0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a2e      	ldr	r2, [pc, #184]	; (8003b48 <SystemClock_Config+0xf4>)
 8003a8e:	401a      	ands	r2, r3
 8003a90:	4b2c      	ldr	r3, [pc, #176]	; (8003b44 <SystemClock_Config+0xf0>)
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	0109      	lsls	r1, r1, #4
 8003a96:	430a      	orrs	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003a9a:	193b      	adds	r3, r7, r4
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003aa0:	193b      	adds	r3, r7, r4
 8003aa2:	2280      	movs	r2, #128	; 0x80
 8003aa4:	0252      	lsls	r2, r2, #9
 8003aa6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003aa8:	0021      	movs	r1, r4
 8003aaa:	187b      	adds	r3, r7, r1
 8003aac:	2201      	movs	r2, #1
 8003aae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ab0:	187b      	adds	r3, r7, r1
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	2202      	movs	r2, #2
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	2280      	movs	r2, #128	; 0x80
 8003ac0:	0252      	lsls	r2, r2, #9
 8003ac2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	0412      	lsls	r2, r2, #16
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ad2:	187b      	adds	r3, r7, r1
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f002 fb65 	bl	80061a4 <HAL_RCC_OscConfig>
 8003ada:	1e03      	subs	r3, r0, #0
 8003adc:	d001      	beq.n	8003ae2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003ade:	f000 fe2f 	bl	8004740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ae2:	2120      	movs	r1, #32
 8003ae4:	187b      	adds	r3, r7, r1
 8003ae6:	220f      	movs	r2, #15
 8003ae8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aea:	187b      	adds	r3, r7, r1
 8003aec:	2203      	movs	r2, #3
 8003aee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003af0:	187b      	adds	r3, r7, r1
 8003af2:	2200      	movs	r2, #0
 8003af4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	22e0      	movs	r2, #224	; 0xe0
 8003afa:	00d2      	lsls	r2, r2, #3
 8003afc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	22e0      	movs	r2, #224	; 0xe0
 8003b02:	00d2      	lsls	r2, r2, #3
 8003b04:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	2100      	movs	r1, #0
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f002 fec6 	bl	800689c <HAL_RCC_ClockConfig>
 8003b10:	1e03      	subs	r3, r0, #0
 8003b12:	d001      	beq.n	8003b18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003b14:	f000 fe14 	bl	8004740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8003b18:	003b      	movs	r3, r7
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8003b1e:	003b      	movs	r3, r7
 8003b20:	2201      	movs	r2, #1
 8003b22:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8003b24:	003b      	movs	r3, r7
 8003b26:	2208      	movs	r2, #8
 8003b28:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b2a:	003b      	movs	r3, r7
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f003 f8d9 	bl	8006ce4 <HAL_RCCEx_PeriphCLKConfig>
 8003b32:	1e03      	subs	r3, r0, #0
 8003b34:	d001      	beq.n	8003b3a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8003b36:	f000 fe03 	bl	8004740 <Error_Handler>
  }
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b01b      	add	sp, #108	; 0x6c
 8003b40:	bd90      	pop	{r4, r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	40007000 	.word	0x40007000
 8003b48:	ffffe7ff 	.word	0xffffe7ff

08003b4c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b52:	003b      	movs	r3, r7
 8003b54:	0018      	movs	r0, r3
 8003b56:	2308      	movs	r3, #8
 8003b58:	001a      	movs	r2, r3
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	f006 fc36 	bl	800a3cc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003b60:	4b2a      	ldr	r3, [pc, #168]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003b62:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <MX_ADC_Init+0xc4>)
 8003b64:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003b66:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003b6e:	22c0      	movs	r2, #192	; 0xc0
 8003b70:	0612      	lsls	r2, r2, #24
 8003b72:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003b74:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b7a:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003b80:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b86:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003b8c:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003b8e:	2220      	movs	r2, #32
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003b94:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003b96:	2221      	movs	r2, #33	; 0x21
 8003b98:	2100      	movs	r1, #0
 8003b9a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ba2:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003ba4:	22c2      	movs	r2, #194	; 0xc2
 8003ba6:	32ff      	adds	r2, #255	; 0xff
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003baa:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003bac:	222c      	movs	r2, #44	; 0x2c
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bb2:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003bb8:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8003bc4:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f001 f8e0 	bl	8004d98 <HAL_ADC_Init>
 8003bd8:	1e03      	subs	r3, r0, #0
 8003bda:	d001      	beq.n	8003be0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003bdc:	f000 fdb0 	bl	8004740 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003be0:	003b      	movs	r3, r7
 8003be2:	4a0c      	ldr	r2, [pc, #48]	; (8003c14 <MX_ADC_Init+0xc8>)
 8003be4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003be6:	003b      	movs	r3, r7
 8003be8:	2280      	movs	r2, #128	; 0x80
 8003bea:	0152      	lsls	r2, r2, #5
 8003bec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003bee:	003a      	movs	r2, r7
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <MX_ADC_Init+0xc0>)
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f001 fb7f 	bl	80052f8 <HAL_ADC_ConfigChannel>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003bfe:	f000 fd9f 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b002      	add	sp, #8
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	200002fc 	.word	0x200002fc
 8003c10:	40012400 	.word	0x40012400
 8003c14:	14000020 	.word	0x14000020

08003c18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08c      	sub	sp, #48	; 0x30
 8003c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003c1e:	231c      	movs	r3, #28
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	0018      	movs	r0, r3
 8003c24:	2314      	movs	r3, #20
 8003c26:	001a      	movs	r2, r3
 8003c28:	2100      	movs	r1, #0
 8003c2a:	f006 fbcf 	bl	800a3cc <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c2e:	230c      	movs	r3, #12
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	0018      	movs	r0, r3
 8003c34:	2310      	movs	r3, #16
 8003c36:	001a      	movs	r2, r3
 8003c38:	2100      	movs	r1, #0
 8003c3a:	f006 fbc7 	bl	800a3cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	0018      	movs	r0, r3
 8003c42:	2308      	movs	r3, #8
 8003c44:	001a      	movs	r2, r3
 8003c46:	2100      	movs	r1, #0
 8003c48:	f006 fbc0 	bl	800a3cc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c4c:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <MX_TIM2_Init+0x118>)
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	05d2      	lsls	r2, r2, #23
 8003c52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003c54:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <MX_TIM2_Init+0x118>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c5a:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <MX_TIM2_Init+0x118>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003c60:	4b33      	ldr	r3, [pc, #204]	; (8003d30 <MX_TIM2_Init+0x118>)
 8003c62:	4a34      	ldr	r2, [pc, #208]	; (8003d34 <MX_TIM2_Init+0x11c>)
 8003c64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c66:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <MX_TIM2_Init+0x118>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c6c:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <MX_TIM2_Init+0x118>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003c72:	4b2f      	ldr	r3, [pc, #188]	; (8003d30 <MX_TIM2_Init+0x118>)
 8003c74:	0018      	movs	r0, r3
 8003c76:	f003 fa11 	bl	800709c <HAL_TIM_IC_Init>
 8003c7a:	1e03      	subs	r3, r0, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003c7e:	f000 fd5f 	bl	8004740 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003c82:	211c      	movs	r1, #28
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	2204      	movs	r2, #4
 8003c88:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	2250      	movs	r2, #80	; 0x50
 8003c8e:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003c96:	187b      	adds	r3, r7, r1
 8003c98:	2200      	movs	r2, #0
 8003c9a:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003ca2:	187a      	adds	r2, r7, r1
 8003ca4:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <MX_TIM2_Init+0x118>)
 8003ca6:	0011      	movs	r1, r2
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f003 fbc3 	bl	8007434 <HAL_TIM_SlaveConfigSynchro>
 8003cae:	1e03      	subs	r3, r0, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003cb2:	f000 fd45 	bl	8004740 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003cb6:	210c      	movs	r1, #12
 8003cb8:	187b      	adds	r3, r7, r1
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003cbe:	187b      	adds	r3, r7, r1
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003cc4:	187b      	adds	r3, r7, r1
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8003cca:	187b      	adds	r3, r7, r1
 8003ccc:	2200      	movs	r2, #0
 8003cce:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003cd0:	1879      	adds	r1, r7, r1
 8003cd2:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <MX_TIM2_Init+0x118>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f003 fb08 	bl	80072ec <HAL_TIM_IC_ConfigChannel>
 8003cdc:	1e03      	subs	r3, r0, #0
 8003cde:	d001      	beq.n	8003ce4 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8003ce0:	f000 fd2e 	bl	8004740 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003ce4:	210c      	movs	r1, #12
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	2202      	movs	r2, #2
 8003cea:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	2202      	movs	r2, #2
 8003cf0:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003cf2:	1879      	adds	r1, r7, r1
 8003cf4:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <MX_TIM2_Init+0x118>)
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f003 faf7 	bl	80072ec <HAL_TIM_IC_ConfigChannel>
 8003cfe:	1e03      	subs	r3, r0, #0
 8003d00:	d001      	beq.n	8003d06 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003d02:	f000 fd1d 	bl	8004740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d0c:	1d3b      	adds	r3, r7, #4
 8003d0e:	2200      	movs	r2, #0
 8003d10:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d12:	1d3a      	adds	r2, r7, #4
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <MX_TIM2_Init+0x118>)
 8003d16:	0011      	movs	r1, r2
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f003 feb1 	bl	8007a80 <HAL_TIMEx_MasterConfigSynchronization>
 8003d1e:	1e03      	subs	r3, r0, #0
 8003d20:	d001      	beq.n	8003d26 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8003d22:	f000 fd0d 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b00c      	add	sp, #48	; 0x30
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	20000358 	.word	0x20000358
 8003d34:	0000ffff 	.word	0x0000ffff

08003d38 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d3e:	003b      	movs	r3, r7
 8003d40:	0018      	movs	r0, r3
 8003d42:	2308      	movs	r3, #8
 8003d44:	001a      	movs	r2, r3
 8003d46:	2100      	movs	r1, #0
 8003d48:	f006 fb40 	bl	800a3cc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003d4c:	4b15      	ldr	r3, [pc, #84]	; (8003da4 <MX_TIM6_Init+0x6c>)
 8003d4e:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <MX_TIM6_Init+0x70>)
 8003d50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 8003d52:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <MX_TIM6_Init+0x6c>)
 8003d54:	4a15      	ldr	r2, [pc, #84]	; (8003dac <MX_TIM6_Init+0x74>)
 8003d56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <MX_TIM6_Init+0x6c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = time_Period;
 8003d5e:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <MX_TIM6_Init+0x6c>)
 8003d60:	4a13      	ldr	r2, [pc, #76]	; (8003db0 <MX_TIM6_Init+0x78>)
 8003d62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <MX_TIM6_Init+0x6c>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <MX_TIM6_Init+0x6c>)
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f003 f903 	bl	8006f78 <HAL_TIM_Base_Init>
 8003d72:	1e03      	subs	r3, r0, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003d76:	f000 fce3 	bl	8004740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d7a:	003b      	movs	r3, r7
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d80:	003b      	movs	r3, r7
 8003d82:	2200      	movs	r2, #0
 8003d84:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003d86:	003a      	movs	r2, r7
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <MX_TIM6_Init+0x6c>)
 8003d8a:	0011      	movs	r1, r2
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f003 fe77 	bl	8007a80 <HAL_TIMEx_MasterConfigSynchronization>
 8003d92:	1e03      	subs	r3, r0, #0
 8003d94:	d001      	beq.n	8003d9a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003d96:	f000 fcd3 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b002      	add	sp, #8
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	20000398 	.word	0x20000398
 8003da8:	40001000 	.word	0x40001000
 8003dac:	0000ea5f 	.word	0x0000ea5f
 8003db0:	00000bb7 	.word	0x00000bb7

08003db4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003db8:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <MX_USART1_UART_Init+0x58>)
 8003dba:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <MX_USART1_UART_Init+0x5c>)
 8003dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003dbe:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <MX_USART1_UART_Init+0x58>)
 8003dc0:	22e1      	movs	r2, #225	; 0xe1
 8003dc2:	0252      	lsls	r2, r2, #9
 8003dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <MX_USART1_UART_Init+0x58>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <MX_USART1_UART_Init+0x58>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003dd2:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <MX_USART1_UART_Init+0x58>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <MX_USART1_UART_Init+0x58>)
 8003dda:	220c      	movs	r2, #12
 8003ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dde:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <MX_USART1_UART_Init+0x58>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003de4:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <MX_USART1_UART_Init+0x58>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dea:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <MX_USART1_UART_Init+0x58>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <MX_USART1_UART_Init+0x58>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <MX_USART1_UART_Init+0x58>)
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f003 fe9f 	bl	8007b3c <HAL_UART_Init>
 8003dfe:	1e03      	subs	r3, r0, #0
 8003e00:	d001      	beq.n	8003e06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003e02:	f000 fc9d 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	200003d8 	.word	0x200003d8
 8003e10:	40013800 	.word	0x40013800

08003e14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e18:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <MX_USART2_UART_Init+0x58>)
 8003e1a:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <MX_USART2_UART_Init+0x5c>)
 8003e1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e1e:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <MX_USART2_UART_Init+0x58>)
 8003e20:	22e1      	movs	r2, #225	; 0xe1
 8003e22:	0252      	lsls	r2, r2, #9
 8003e24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e26:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <MX_USART2_UART_Init+0x58>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <MX_USART2_UART_Init+0x58>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e32:	4b0e      	ldr	r3, [pc, #56]	; (8003e6c <MX_USART2_UART_Init+0x58>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e38:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <MX_USART2_UART_Init+0x58>)
 8003e3a:	220c      	movs	r2, #12
 8003e3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <MX_USART2_UART_Init+0x58>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e44:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <MX_USART2_UART_Init+0x58>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <MX_USART2_UART_Init+0x58>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <MX_USART2_UART_Init+0x58>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <MX_USART2_UART_Init+0x58>)
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f003 fe6f 	bl	8007b3c <HAL_UART_Init>
 8003e5e:	1e03      	subs	r3, r0, #0
 8003e60:	d001      	beq.n	8003e66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003e62:	f000 fc6d 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000460 	.word	0x20000460
 8003e70:	40004400 	.word	0x40004400

08003e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7a:	240c      	movs	r4, #12
 8003e7c:	193b      	adds	r3, r7, r4
 8003e7e:	0018      	movs	r0, r3
 8003e80:	2314      	movs	r3, #20
 8003e82:	001a      	movs	r2, r3
 8003e84:	2100      	movs	r1, #0
 8003e86:	f006 faa1 	bl	800a3cc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e8a:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <MX_GPIO_Init+0xe0>)
 8003e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8e:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <MX_GPIO_Init+0xe0>)
 8003e90:	2180      	movs	r1, #128	; 0x80
 8003e92:	430a      	orrs	r2, r1
 8003e94:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e96:	4b2f      	ldr	r3, [pc, #188]	; (8003f54 <MX_GPIO_Init+0xe0>)
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	2280      	movs	r2, #128	; 0x80
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea2:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <MX_GPIO_Init+0xe0>)
 8003ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <MX_GPIO_Init+0xe0>)
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eae:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <MX_GPIO_Init+0xe0>)
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eba:	4b26      	ldr	r3, [pc, #152]	; (8003f54 <MX_GPIO_Init+0xe0>)
 8003ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebe:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <MX_GPIO_Init+0xe0>)
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ec6:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <MX_GPIO_Init+0xe0>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	2202      	movs	r2, #2
 8003ecc:	4013      	ands	r3, r2
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OPEN_SENSOR_GPIO_Port, OPEN_SENSOR_Pin, GPIO_PIN_RESET);
 8003ed2:	23a0      	movs	r3, #160	; 0xa0
 8003ed4:	05db      	lsls	r3, r3, #23
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2110      	movs	r1, #16
 8003eda:	0018      	movs	r0, r3
 8003edc:	f002 f8ec 	bl	80060b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	01db      	lsls	r3, r3, #7
 8003ee4:	481c      	ldr	r0, [pc, #112]	; (8003f58 <MX_GPIO_Init+0xe4>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	0019      	movs	r1, r3
 8003eea:	f002 f8e5 	bl	80060b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_A7672C_GPIO_Port, ENABLE_A7672C_Pin, GPIO_PIN_SET);
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	4819      	ldr	r0, [pc, #100]	; (8003f58 <MX_GPIO_Init+0xe4>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	f002 f8de 	bl	80060b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OPEN_SENSOR_Pin */
  GPIO_InitStruct.Pin = OPEN_SENSOR_Pin;
 8003efc:	193b      	adds	r3, r7, r4
 8003efe:	2210      	movs	r2, #16
 8003f00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f02:	193b      	adds	r3, r7, r4
 8003f04:	2201      	movs	r2, #1
 8003f06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	193b      	adds	r3, r7, r4
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0e:	193b      	adds	r3, r7, r4
 8003f10:	2200      	movs	r2, #0
 8003f12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OPEN_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8003f14:	193a      	adds	r2, r7, r4
 8003f16:	23a0      	movs	r3, #160	; 0xa0
 8003f18:	05db      	lsls	r3, r3, #23
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f001 ff4d 	bl	8005dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_Pin ENABLE_A7672C_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|ENABLE_A7672C_Pin;
 8003f22:	0021      	movs	r1, r4
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	22c0      	movs	r2, #192	; 0xc0
 8003f28:	0212      	lsls	r2, r2, #8
 8003f2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f2c:	187b      	adds	r3, r7, r1
 8003f2e:	2201      	movs	r2, #1
 8003f30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f32:	187b      	adds	r3, r7, r1
 8003f34:	2200      	movs	r2, #0
 8003f36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f38:	187b      	adds	r3, r7, r1
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f3e:	187b      	adds	r3, r7, r1
 8003f40:	4a05      	ldr	r2, [pc, #20]	; (8003f58 <MX_GPIO_Init+0xe4>)
 8003f42:	0019      	movs	r1, r3
 8003f44:	0010      	movs	r0, r2
 8003f46:	f001 ff39 	bl	8005dbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b009      	add	sp, #36	; 0x24
 8003f50:	bd90      	pop	{r4, r7, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	40021000 	.word	0x40021000
 8003f58:	50000400 	.word	0x50000400

08003f5c <Filter_Baterry_Values>:

/* USER CODE BEGIN 4 */
int Filter_Baterry_Values() {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
	for (int i = 0; i < times; i++) {
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]
 8003f66:	e019      	b.n	8003f9c <Filter_Baterry_Values+0x40>
		HAL_ADC_Start(&hadc);
 8003f68:	4b3c      	ldr	r3, [pc, #240]	; (800405c <Filter_Baterry_Values+0x100>)
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f001 f888 	bl	8005080 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 8003f70:	23fa      	movs	r3, #250	; 0xfa
 8003f72:	009a      	lsls	r2, r3, #2
 8003f74:	4b39      	ldr	r3, [pc, #228]	; (800405c <Filter_Baterry_Values+0x100>)
 8003f76:	0011      	movs	r1, r2
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f001 f915 	bl	80051a8 <HAL_ADC_PollForConversion>
		HAL_Delay(100);
 8003f7e:	2064      	movs	r0, #100	; 0x64
 8003f80:	f000 feca 	bl	8004d18 <HAL_Delay>
		arrayBattery[i] = HAL_ADC_GetValue(&hadc);
 8003f84:	4b35      	ldr	r3, [pc, #212]	; (800405c <Filter_Baterry_Values+0x100>)
 8003f86:	0018      	movs	r0, r3
 8003f88:	f001 f9aa 	bl	80052e0 <HAL_ADC_GetValue>
 8003f8c:	0001      	movs	r1, r0
 8003f8e:	4b34      	ldr	r3, [pc, #208]	; (8004060 <Filter_Baterry_Values+0x104>)
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	0092      	lsls	r2, r2, #2
 8003f94:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < times; i++) {
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	607b      	str	r3, [r7, #4]
 8003f9c:	4b31      	ldr	r3, [pc, #196]	; (8004064 <Filter_Baterry_Values+0x108>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	001a      	movs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	dbdf      	blt.n	8003f68 <Filter_Baterry_Values+0xc>
	}
	adcValue = MediumBattery();
 8003fa8:	f000 f872 	bl	8004090 <MediumBattery>
 8003fac:	0003      	movs	r3, r0
 8003fae:	001a      	movs	r2, r3
 8003fb0:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <Filter_Baterry_Values+0x10c>)
 8003fb2:	601a      	str	r2, [r3, #0]
	// vol max 2.1 vol min 1.25
	BatteryLevel = ((float) (adcValue / 4095.00) * 3.3);
 8003fb4:	4b2c      	ldr	r3, [pc, #176]	; (8004068 <Filter_Baterry_Values+0x10c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7ff f985 	bl	80032c8 <__aeabi_ui2d>
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	4b2a      	ldr	r3, [pc, #168]	; (800406c <Filter_Baterry_Values+0x110>)
 8003fc2:	f7fd febf 	bl	8001d44 <__aeabi_ddiv>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	000b      	movs	r3, r1
 8003fca:	0010      	movs	r0, r2
 8003fcc:	0019      	movs	r1, r3
 8003fce:	f7ff f9e9 	bl	80033a4 <__aeabi_d2f>
 8003fd2:	1c03      	adds	r3, r0, #0
 8003fd4:	1c18      	adds	r0, r3, #0
 8003fd6:	f7ff f99d 	bl	8003314 <__aeabi_f2d>
 8003fda:	4a25      	ldr	r2, [pc, #148]	; (8004070 <Filter_Baterry_Values+0x114>)
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <Filter_Baterry_Values+0x118>)
 8003fde:	f7fe faab 	bl	8002538 <__aeabi_dmul>
 8003fe2:	0002      	movs	r2, r0
 8003fe4:	000b      	movs	r3, r1
 8003fe6:	0010      	movs	r0, r2
 8003fe8:	0019      	movs	r1, r3
 8003fea:	f7ff f9db 	bl	80033a4 <__aeabi_d2f>
 8003fee:	1c02      	adds	r2, r0, #0
 8003ff0:	4b21      	ldr	r3, [pc, #132]	; (8004078 <Filter_Baterry_Values+0x11c>)
 8003ff2:	601a      	str	r2, [r3, #0]
	PercentageBattery = ((BatteryLevel / 2.1) * 100);
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <Filter_Baterry_Values+0x11c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	1c18      	adds	r0, r3, #0
 8003ffa:	f7ff f98b 	bl	8003314 <__aeabi_f2d>
 8003ffe:	4a1f      	ldr	r2, [pc, #124]	; (800407c <Filter_Baterry_Values+0x120>)
 8004000:	4b1f      	ldr	r3, [pc, #124]	; (8004080 <Filter_Baterry_Values+0x124>)
 8004002:	f7fd fe9f 	bl	8001d44 <__aeabi_ddiv>
 8004006:	0002      	movs	r2, r0
 8004008:	000b      	movs	r3, r1
 800400a:	0010      	movs	r0, r2
 800400c:	0019      	movs	r1, r3
 800400e:	2200      	movs	r2, #0
 8004010:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <Filter_Baterry_Values+0x128>)
 8004012:	f7fe fa91 	bl	8002538 <__aeabi_dmul>
 8004016:	0002      	movs	r2, r0
 8004018:	000b      	movs	r3, r1
 800401a:	0010      	movs	r0, r2
 800401c:	0019      	movs	r1, r3
 800401e:	f7ff f9c1 	bl	80033a4 <__aeabi_d2f>
 8004022:	1c02      	adds	r2, r0, #0
 8004024:	4b18      	ldr	r3, [pc, #96]	; (8004088 <Filter_Baterry_Values+0x12c>)
 8004026:	601a      	str	r2, [r3, #0]
	if (PercentageBattery > 100) {
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <Filter_Baterry_Values+0x12c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4917      	ldr	r1, [pc, #92]	; (800408c <Filter_Baterry_Values+0x130>)
 800402e:	1c18      	adds	r0, r3, #0
 8004030:	f7fc fa60 	bl	80004f4 <__aeabi_fcmpgt>
 8004034:	1e03      	subs	r3, r0, #0
 8004036:	d002      	beq.n	800403e <Filter_Baterry_Values+0xe2>
		PercentageBattery = 100;
 8004038:	4b13      	ldr	r3, [pc, #76]	; (8004088 <Filter_Baterry_Values+0x12c>)
 800403a:	4a14      	ldr	r2, [pc, #80]	; (800408c <Filter_Baterry_Values+0x130>)
 800403c:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc);
 800403e:	4b07      	ldr	r3, [pc, #28]	; (800405c <Filter_Baterry_Values+0x100>)
 8004040:	0018      	movs	r0, r3
 8004042:	f001 f871 	bl	8005128 <HAL_ADC_Stop>

	return PercentageBattery;
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <Filter_Baterry_Values+0x12c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	1c18      	adds	r0, r3, #0
 800404c:	f7fd fa60 	bl	8001510 <__aeabi_f2iz>
 8004050:	0003      	movs	r3, r0
}
 8004052:	0018      	movs	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	b002      	add	sp, #8
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	200002fc 	.word	0x200002fc
 8004060:	20000754 	.word	0x20000754
 8004064:	200000fc 	.word	0x200000fc
 8004068:	20000748 	.word	0x20000748
 800406c:	40affe00 	.word	0x40affe00
 8004070:	66666666 	.word	0x66666666
 8004074:	400a6666 	.word	0x400a6666
 8004078:	2000074c 	.word	0x2000074c
 800407c:	cccccccd 	.word	0xcccccccd
 8004080:	4000cccc 	.word	0x4000cccc
 8004084:	40590000 	.word	0x40590000
 8004088:	20000750 	.word	0x20000750
 800408c:	42c80000 	.word	0x42c80000

08004090 <MediumBattery>:
int MediumBattery() {
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
	for (int i = 0; i < times - 1; i++) {
 8004096:	2300      	movs	r3, #0
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	e02d      	b.n	80040f8 <MediumBattery+0x68>
		for (int j = i + 1; j < times; j++) {
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3301      	adds	r3, #1
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	e020      	b.n	80040e6 <MediumBattery+0x56>
			if (arrayBattery[i] > arrayBattery[j]) {
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <MediumBattery+0x8c>)
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	0092      	lsls	r2, r2, #2
 80040aa:	58d2      	ldr	r2, [r2, r3]
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <MediumBattery+0x8c>)
 80040ae:	6839      	ldr	r1, [r7, #0]
 80040b0:	0089      	lsls	r1, r1, #2
 80040b2:	58cb      	ldr	r3, [r1, r3]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d913      	bls.n	80040e0 <MediumBattery+0x50>

				temp = arrayBattery[i];
 80040b8:	4b18      	ldr	r3, [pc, #96]	; (800411c <MediumBattery+0x8c>)
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	0092      	lsls	r2, r2, #2
 80040be:	58d2      	ldr	r2, [r2, r3]
 80040c0:	4b17      	ldr	r3, [pc, #92]	; (8004120 <MediumBattery+0x90>)
 80040c2:	601a      	str	r2, [r3, #0]

				arrayBattery[i] = arrayBattery[j];
 80040c4:	4b15      	ldr	r3, [pc, #84]	; (800411c <MediumBattery+0x8c>)
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	0092      	lsls	r2, r2, #2
 80040ca:	58d1      	ldr	r1, [r2, r3]
 80040cc:	4b13      	ldr	r3, [pc, #76]	; (800411c <MediumBattery+0x8c>)
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	0092      	lsls	r2, r2, #2
 80040d2:	50d1      	str	r1, [r2, r3]

				arrayBattery[j] = temp;
 80040d4:	4b12      	ldr	r3, [pc, #72]	; (8004120 <MediumBattery+0x90>)
 80040d6:	6819      	ldr	r1, [r3, #0]
 80040d8:	4b10      	ldr	r3, [pc, #64]	; (800411c <MediumBattery+0x8c>)
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	0092      	lsls	r2, r2, #2
 80040de:	50d1      	str	r1, [r2, r3]
		for (int j = i + 1; j < times; j++) {
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <MediumBattery+0x94>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	001a      	movs	r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4293      	cmp	r3, r2
 80040f0:	dbd8      	blt.n	80040a4 <MediumBattery+0x14>
	for (int i = 0; i < times - 1; i++) {
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3301      	adds	r3, #1
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <MediumBattery+0x94>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	429a      	cmp	r2, r3
 8004102:	dbcb      	blt.n	800409c <MediumBattery+0xc>

			}
		}
	}
	return arrayBattery[times / 2];
 8004104:	4b07      	ldr	r3, [pc, #28]	; (8004124 <MediumBattery+0x94>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	b2db      	uxtb	r3, r3
 800410c:	001a      	movs	r2, r3
 800410e:	4b03      	ldr	r3, [pc, #12]	; (800411c <MediumBattery+0x8c>)
 8004110:	0092      	lsls	r2, r2, #2
 8004112:	58d3      	ldr	r3, [r2, r3]
}
 8004114:	0018      	movs	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	b002      	add	sp, #8
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000754 	.word	0x20000754
 8004120:	2000081c 	.word	0x2000081c
 8004124:	200000fc 	.word	0x200000fc

08004128 <turnOnA76XX>:

void turnOnA76XX() {
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENABLE_A7672C_GPIO_Port, ENABLE_A7672C_Pin,
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	481a      	ldr	r0, [pc, #104]	; (800419c <turnOnA76XX+0x74>)
 8004132:	2200      	movs	r2, #0
 8004134:	0019      	movs	r1, r3
 8004136:	f001 ffbf 	bl	80060b8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_Delay(3000);
 800413a:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <turnOnA76XX+0x78>)
 800413c:	0018      	movs	r0, r3
 800413e:	f000 fdeb 	bl	8004d18 <HAL_Delay>
	HAL_GPIO_WritePin(ENABLE_A7672C_GPIO_Port, ENABLE_A7672C_Pin, GPIO_PIN_SET);
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	4815      	ldr	r0, [pc, #84]	; (800419c <turnOnA76XX+0x74>)
 8004148:	2201      	movs	r2, #1
 800414a:	0019      	movs	r1, r3
 800414c:	f001 ffb4 	bl	80060b8 <HAL_GPIO_WritePin>
	HAL_Delay(4000);
 8004150:	23fa      	movs	r3, #250	; 0xfa
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	0018      	movs	r0, r3
 8004156:	f000 fddf 	bl	8004d18 <HAL_Delay>
	HAL_GPIO_WritePin(ENABLE_A7672C_GPIO_Port, ENABLE_A7672C_Pin,
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	480f      	ldr	r0, [pc, #60]	; (800419c <turnOnA76XX+0x74>)
 8004160:	2200      	movs	r2, #0
 8004162:	0019      	movs	r1, r3
 8004164:	f001 ffa8 	bl	80060b8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_Delay(300);
 8004168:	2396      	movs	r3, #150	; 0x96
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	0018      	movs	r0, r3
 800416e:	f000 fdd3 	bl	8004d18 <HAL_Delay>
	HAL_GPIO_WritePin(ENABLE_A7672C_GPIO_Port, ENABLE_A7672C_Pin, GPIO_PIN_SET);
 8004172:	2380      	movs	r3, #128	; 0x80
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	4809      	ldr	r0, [pc, #36]	; (800419c <turnOnA76XX+0x74>)
 8004178:	2201      	movs	r2, #1
 800417a:	0019      	movs	r1, r3
 800417c:	f001 ff9c 	bl	80060b8 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <turnOnA76XX+0x78>)
 8004182:	0018      	movs	r0, r3
 8004184:	f000 fdc8 	bl	8004d18 <HAL_Delay>
	//Start sensor
	HAL_GPIO_WritePin(OPEN_SENSOR_GPIO_Port, OPEN_SENSOR_Pin, GPIO_PIN_SET);
 8004188:	23a0      	movs	r3, #160	; 0xa0
 800418a:	05db      	lsls	r3, r3, #23
 800418c:	2201      	movs	r2, #1
 800418e:	2110      	movs	r1, #16
 8004190:	0018      	movs	r0, r3
 8004192:	f001 ff91 	bl	80060b8 <HAL_GPIO_WritePin>
}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	50000400 	.word	0x50000400
 80041a0:	00000bb8 	.word	0x00000bb8

080041a4 <get_data_sensor>:
int get_data_sensor(int times)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < times; i++) {
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e00f      	b.n	80041d2 <get_data_sensor+0x2e>
		//read_vl53l1(data_vl53l1);
		HAL_Delay(200);
 80041b2:	20c8      	movs	r0, #200	; 0xc8
 80041b4:	f000 fdb0 	bl	8004d18 <HAL_Delay>
		medium_distance[i] = Distance_water;
 80041b8:	4b28      	ldr	r3, [pc, #160]	; (800425c <get_data_sensor+0xb8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	1c18      	adds	r0, r3, #0
 80041be:	f7fc f9fb 	bl	80005b8 <__aeabi_f2uiz>
 80041c2:	0001      	movs	r1, r0
 80041c4:	4b26      	ldr	r3, [pc, #152]	; (8004260 <get_data_sensor+0xbc>)
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	0092      	lsls	r2, r2, #2
 80041ca:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < times; i++) {
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	3301      	adds	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	dbeb      	blt.n	80041b2 <get_data_sensor+0xe>
	}
	for (int i = 0; i < times - 1; i++) {
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	e02b      	b.n	8004238 <get_data_sensor+0x94>
		for (int j = i + 1; j < times; j++) {
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	3301      	adds	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e020      	b.n	800422a <get_data_sensor+0x86>
			if (medium_distance[i] > medium_distance[j]) {
 80041e8:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <get_data_sensor+0xbc>)
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	0092      	lsls	r2, r2, #2
 80041ee:	58d2      	ldr	r2, [r2, r3]
 80041f0:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <get_data_sensor+0xbc>)
 80041f2:	68f9      	ldr	r1, [r7, #12]
 80041f4:	0089      	lsls	r1, r1, #2
 80041f6:	58cb      	ldr	r3, [r1, r3]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d913      	bls.n	8004224 <get_data_sensor+0x80>

				temp_distance = medium_distance[i];
 80041fc:	4b18      	ldr	r3, [pc, #96]	; (8004260 <get_data_sensor+0xbc>)
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	0092      	lsls	r2, r2, #2
 8004202:	58d2      	ldr	r2, [r2, r3]
 8004204:	4b17      	ldr	r3, [pc, #92]	; (8004264 <get_data_sensor+0xc0>)
 8004206:	601a      	str	r2, [r3, #0]

				medium_distance[i] = medium_distance[j];
 8004208:	4b15      	ldr	r3, [pc, #84]	; (8004260 <get_data_sensor+0xbc>)
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	0092      	lsls	r2, r2, #2
 800420e:	58d1      	ldr	r1, [r2, r3]
 8004210:	4b13      	ldr	r3, [pc, #76]	; (8004260 <get_data_sensor+0xbc>)
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	0092      	lsls	r2, r2, #2
 8004216:	50d1      	str	r1, [r2, r3]

				medium_distance[j] = temp_distance;
 8004218:	4b12      	ldr	r3, [pc, #72]	; (8004264 <get_data_sensor+0xc0>)
 800421a:	6819      	ldr	r1, [r3, #0]
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <get_data_sensor+0xbc>)
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	0092      	lsls	r2, r2, #2
 8004222:	50d1      	str	r1, [r2, r3]
		for (int j = i + 1; j < times; j++) {
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	429a      	cmp	r2, r3
 8004230:	dbda      	blt.n	80041e8 <get_data_sensor+0x44>
	for (int i = 0; i < times - 1; i++) {
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3301      	adds	r3, #1
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	429a      	cmp	r2, r3
 8004240:	dbce      	blt.n	80041e0 <get_data_sensor+0x3c>
			}
		}
	}
	return medium_distance[times/2];
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	da00      	bge.n	800424a <get_data_sensor+0xa6>
 8004248:	3301      	adds	r3, #1
 800424a:	105b      	asrs	r3, r3, #1
 800424c:	001a      	movs	r2, r3
 800424e:	4b04      	ldr	r3, [pc, #16]	; (8004260 <get_data_sensor+0xbc>)
 8004250:	0092      	lsls	r2, r2, #2
 8004252:	58d3      	ldr	r3, [r2, r3]
}
 8004254:	0018      	movs	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	b006      	add	sp, #24
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000724 	.word	0x20000724
 8004260:	20000820 	.word	0x20000820
 8004264:	20000898 	.word	0x20000898

08004268 <abnormal_sensor_data>:
int abnormal_sensor_data(int difference)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	absChange = fabs(water_level - SaveDataWater);
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <abnormal_sensor_data+0x48>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <abnormal_sensor_data+0x4c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	1c19      	adds	r1, r3, #0
 800427a:	1c10      	adds	r0, r2, #0
 800427c:	f7fc ffa8 	bl	80011d0 <__aeabi_fsub>
 8004280:	1c03      	adds	r3, r0, #0
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	085a      	lsrs	r2, r3, #1
 8004286:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <abnormal_sensor_data+0x50>)
 8004288:	601a      	str	r2, [r3, #0]
	if (absChange > difference)
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fd f960 	bl	8001550 <__aeabi_i2f>
 8004290:	1c02      	adds	r2, r0, #0
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <abnormal_sensor_data+0x50>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	1c19      	adds	r1, r3, #0
 8004298:	1c10      	adds	r0, r2, #0
 800429a:	f7fc f917 	bl	80004cc <__aeabi_fcmplt>
 800429e:	1e03      	subs	r3, r0, #0
 80042a0:	d001      	beq.n	80042a6 <abnormal_sensor_data+0x3e>
		return 1;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <abnormal_sensor_data+0x40>
	 else
		return 0;
 80042a6:	2300      	movs	r3, #0
	//The difference is in cm
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b002      	add	sp, #8
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	2000089c 	.word	0x2000089c
 80042b4:	20000728 	.word	0x20000728
 80042b8:	2000073c 	.word	0x2000073c

080042bc <connectMQTT>:
int connectMQTT(void) {
 80042bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042be:	b085      	sub	sp, #20
 80042c0:	af04      	add	r7, sp, #16

#if wt53r_ttl
	//test123=get_data_sensor(30);
	water_level = (48.5-(get_data_sensor(30) * 0.1));
 80042c2:	201e      	movs	r0, #30
 80042c4:	f7ff ff6e 	bl	80041a4 <get_data_sensor>
 80042c8:	0003      	movs	r3, r0
 80042ca:	0018      	movs	r0, r3
 80042cc:	f7fe ffcc 	bl	8003268 <__aeabi_i2d>
 80042d0:	4a72      	ldr	r2, [pc, #456]	; (800449c <connectMQTT+0x1e0>)
 80042d2:	4b73      	ldr	r3, [pc, #460]	; (80044a0 <connectMQTT+0x1e4>)
 80042d4:	f7fe f930 	bl	8002538 <__aeabi_dmul>
 80042d8:	0002      	movs	r2, r0
 80042da:	000b      	movs	r3, r1
 80042dc:	2000      	movs	r0, #0
 80042de:	4971      	ldr	r1, [pc, #452]	; (80044a4 <connectMQTT+0x1e8>)
 80042e0:	f7fe fbec 	bl	8002abc <__aeabi_dsub>
 80042e4:	0002      	movs	r2, r0
 80042e6:	000b      	movs	r3, r1
 80042e8:	0010      	movs	r0, r2
 80042ea:	0019      	movs	r1, r3
 80042ec:	f7ff f85a 	bl	80033a4 <__aeabi_d2f>
 80042f0:	1c02      	adds	r2, r0, #0
 80042f2:	4b6d      	ldr	r3, [pc, #436]	; (80044a8 <connectMQTT+0x1ec>)
 80042f4:	601a      	str	r2, [r3, #0]
#endif
	big_change=abnormal_sensor_data(3);
 80042f6:	2003      	movs	r0, #3
 80042f8:	f7ff ffb6 	bl	8004268 <abnormal_sensor_data>
 80042fc:	0002      	movs	r2, r0
 80042fe:	4b6b      	ldr	r3, [pc, #428]	; (80044ac <connectMQTT+0x1f0>)
 8004300:	601a      	str	r2, [r3, #0]
	if(big_change)
 8004302:	4b6a      	ldr	r3, [pc, #424]	; (80044ac <connectMQTT+0x1f0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d01c      	beq.n	8004344 <connectMQTT+0x88>
	{
		get_data_sensor(30);
 800430a:	201e      	movs	r0, #30
 800430c:	f7ff ff4a 	bl	80041a4 <get_data_sensor>
		water_level = (48.5-(get_data_sensor(30) * 0.1));
 8004310:	201e      	movs	r0, #30
 8004312:	f7ff ff47 	bl	80041a4 <get_data_sensor>
 8004316:	0003      	movs	r3, r0
 8004318:	0018      	movs	r0, r3
 800431a:	f7fe ffa5 	bl	8003268 <__aeabi_i2d>
 800431e:	4a5f      	ldr	r2, [pc, #380]	; (800449c <connectMQTT+0x1e0>)
 8004320:	4b5f      	ldr	r3, [pc, #380]	; (80044a0 <connectMQTT+0x1e4>)
 8004322:	f7fe f909 	bl	8002538 <__aeabi_dmul>
 8004326:	0002      	movs	r2, r0
 8004328:	000b      	movs	r3, r1
 800432a:	2000      	movs	r0, #0
 800432c:	495d      	ldr	r1, [pc, #372]	; (80044a4 <connectMQTT+0x1e8>)
 800432e:	f7fe fbc5 	bl	8002abc <__aeabi_dsub>
 8004332:	0002      	movs	r2, r0
 8004334:	000b      	movs	r3, r1
 8004336:	0010      	movs	r0, r2
 8004338:	0019      	movs	r1, r3
 800433a:	f7ff f833 	bl	80033a4 <__aeabi_d2f>
 800433e:	1c02      	adds	r2, r0, #0
 8004340:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <connectMQTT+0x1ec>)
 8004342:	601a      	str	r2, [r3, #0]
	}
	Filter_Value();
 8004344:	f000 f91a 	bl	800457c <Filter_Value>
	HAL_GPIO_WritePin(OPEN_SENSOR_GPIO_Port, OPEN_SENSOR_Pin, GPIO_PIN_RESET);
 8004348:	23a0      	movs	r3, #160	; 0xa0
 800434a:	05db      	lsls	r3, r3, #23
 800434c:	2200      	movs	r2, #0
 800434e:	2110      	movs	r1, #16
 8004350:	0018      	movs	r0, r3
 8004352:	f001 feb1 	bl	80060b8 <HAL_GPIO_WritePin>
	sendingToSimcomA76xx(ATE0);
 8004356:	4b56      	ldr	r3, [pc, #344]	; (80044b0 <connectMQTT+0x1f4>)
 8004358:	0018      	movs	r0, r3
 800435a:	f7ff fa7f 	bl	800385c <sendingToSimcomA76xx>
	HAL_Delay(200);
 800435e:	20c8      	movs	r0, #200	; 0xc8
 8004360:	f000 fcda 	bl	8004d18 <HAL_Delay>
	sendingToSimcomA76xx(AT_START_MQTT);
 8004364:	4b53      	ldr	r3, [pc, #332]	; (80044b4 <connectMQTT+0x1f8>)
 8004366:	0018      	movs	r0, r3
 8004368:	f7ff fa78 	bl	800385c <sendingToSimcomA76xx>
	HAL_Delay(200);
 800436c:	20c8      	movs	r0, #200	; 0xc8
 800436e:	f000 fcd3 	bl	8004d18 <HAL_Delay>
	sprintf(AT_COMMAND, AT_ACQUIRE_CLIENT, MQTT_CLIENT_ID);
 8004372:	4a51      	ldr	r2, [pc, #324]	; (80044b8 <connectMQTT+0x1fc>)
 8004374:	4951      	ldr	r1, [pc, #324]	; (80044bc <connectMQTT+0x200>)
 8004376:	4b52      	ldr	r3, [pc, #328]	; (80044c0 <connectMQTT+0x204>)
 8004378:	0018      	movs	r0, r3
 800437a:	f005 ffbb 	bl	800a2f4 <siprintf>
	sendingToSimcomA76xx(AT_COMMAND);
 800437e:	4b50      	ldr	r3, [pc, #320]	; (80044c0 <connectMQTT+0x204>)
 8004380:	0018      	movs	r0, r3
 8004382:	f7ff fa6b 	bl	800385c <sendingToSimcomA76xx>
	HAL_Delay(500);
 8004386:	23fa      	movs	r3, #250	; 0xfa
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	0018      	movs	r0, r3
 800438c:	f000 fcc4 	bl	8004d18 <HAL_Delay>
	sprintf(AT_COMMAND, AT_CONNECT_MQTT, MQTT_HOST, MQTT_PORT, MQTT_USER,
 8004390:	4c4c      	ldr	r4, [pc, #304]	; (80044c4 <connectMQTT+0x208>)
 8004392:	4a4d      	ldr	r2, [pc, #308]	; (80044c8 <connectMQTT+0x20c>)
 8004394:	494d      	ldr	r1, [pc, #308]	; (80044cc <connectMQTT+0x210>)
 8004396:	484a      	ldr	r0, [pc, #296]	; (80044c0 <connectMQTT+0x204>)
 8004398:	4b4d      	ldr	r3, [pc, #308]	; (80044d0 <connectMQTT+0x214>)
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	4b4d      	ldr	r3, [pc, #308]	; (80044d4 <connectMQTT+0x218>)
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	0023      	movs	r3, r4
 80043a2:	f005 ffa7 	bl	800a2f4 <siprintf>
	MQTT_PASS);
	sendingToSimcomA76xx(AT_COMMAND);
 80043a6:	4b46      	ldr	r3, [pc, #280]	; (80044c0 <connectMQTT+0x204>)
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7ff fa57 	bl	800385c <sendingToSimcomA76xx>
	HAL_Delay(1000);
 80043ae:	23fa      	movs	r3, #250	; 0xfa
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	0018      	movs	r0, r3
 80043b4:	f000 fcb0 	bl	8004d18 <HAL_Delay>
	sprintf(BUFFER_TOPPIC_MQTT, "%s/sn/%s", FARM, MQTT_CLIENT_ID);
 80043b8:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <connectMQTT+0x1fc>)
 80043ba:	4a47      	ldr	r2, [pc, #284]	; (80044d8 <connectMQTT+0x21c>)
 80043bc:	4947      	ldr	r1, [pc, #284]	; (80044dc <connectMQTT+0x220>)
 80043be:	4848      	ldr	r0, [pc, #288]	; (80044e0 <connectMQTT+0x224>)
 80043c0:	f005 ff98 	bl	800a2f4 <siprintf>
	sprintf(AT_COMMAND, AT_SET_PUBLISH_TOPIC, (int) strlen(BUFFER_TOPPIC_MQTT));
 80043c4:	4b46      	ldr	r3, [pc, #280]	; (80044e0 <connectMQTT+0x224>)
 80043c6:	0018      	movs	r0, r3
 80043c8:	f7fb fe9e 	bl	8000108 <strlen>
 80043cc:	0003      	movs	r3, r0
 80043ce:	001a      	movs	r2, r3
 80043d0:	4944      	ldr	r1, [pc, #272]	; (80044e4 <connectMQTT+0x228>)
 80043d2:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <connectMQTT+0x204>)
 80043d4:	0018      	movs	r0, r3
 80043d6:	f005 ff8d 	bl	800a2f4 <siprintf>
	sendingToSimcomA76xx(AT_COMMAND);
 80043da:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <connectMQTT+0x204>)
 80043dc:	0018      	movs	r0, r3
 80043de:	f7ff fa3d 	bl	800385c <sendingToSimcomA76xx>
	HAL_Delay(500);
 80043e2:	23fa      	movs	r3, #250	; 0xfa
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	0018      	movs	r0, r3
 80043e8:	f000 fc96 	bl	8004d18 <HAL_Delay>
	sendingToSimcomA76xx(BUFFER_TOPPIC_MQTT);
 80043ec:	4b3c      	ldr	r3, [pc, #240]	; (80044e0 <connectMQTT+0x224>)
 80043ee:	0018      	movs	r0, r3
 80043f0:	f7ff fa34 	bl	800385c <sendingToSimcomA76xx>
	HAL_Delay(500);
 80043f4:	23fa      	movs	r3, #250	; 0xfa
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	0018      	movs	r0, r3
 80043fa:	f000 fc8d 	bl	8004d18 <HAL_Delay>
	Filter_Baterry_Values();
 80043fe:	f7ff fdad 	bl	8003f5c <Filter_Baterry_Values>
	sprintf(BUFFER_DATA_PAYLOAD_MQTT, TOPPIC_PAYLOAD_MQTT, water_level,
 8004402:	4b29      	ldr	r3, [pc, #164]	; (80044a8 <connectMQTT+0x1ec>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	1c18      	adds	r0, r3, #0
 8004408:	f7fe ff84 	bl	8003314 <__aeabi_f2d>
 800440c:	0004      	movs	r4, r0
 800440e:	000d      	movs	r5, r1
 8004410:	4b35      	ldr	r3, [pc, #212]	; (80044e8 <connectMQTT+0x22c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fe ff7d 	bl	8003314 <__aeabi_f2d>
 800441a:	0002      	movs	r2, r0
 800441c:	000b      	movs	r3, r1
 800441e:	4933      	ldr	r1, [pc, #204]	; (80044ec <connectMQTT+0x230>)
 8004420:	6809      	ldr	r1, [r1, #0]
 8004422:	4e33      	ldr	r6, [pc, #204]	; (80044f0 <connectMQTT+0x234>)
 8004424:	4833      	ldr	r0, [pc, #204]	; (80044f4 <connectMQTT+0x238>)
 8004426:	9102      	str	r1, [sp, #8]
 8004428:	9200      	str	r2, [sp, #0]
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	0022      	movs	r2, r4
 800442e:	002b      	movs	r3, r5
 8004430:	0031      	movs	r1, r6
 8004432:	f005 ff5f 	bl	800a2f4 <siprintf>
			PercentageBattery, rssi);
//	sprintf(BUFFER_DATA_PAYLOAD_MQTT,TOPPIC_PAYLOAD_MQTT,Distance_water);
	HAL_Delay(500);
 8004436:	23fa      	movs	r3, #250	; 0xfa
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	0018      	movs	r0, r3
 800443c:	f000 fc6c 	bl	8004d18 <HAL_Delay>
	sprintf(AT_COMMAND, AT_SET_PUBLISH_PAYLOAD,
			(int) strlen(BUFFER_DATA_PAYLOAD_MQTT));
 8004440:	4b2c      	ldr	r3, [pc, #176]	; (80044f4 <connectMQTT+0x238>)
 8004442:	0018      	movs	r0, r3
 8004444:	f7fb fe60 	bl	8000108 <strlen>
 8004448:	0003      	movs	r3, r0
	sprintf(AT_COMMAND, AT_SET_PUBLISH_PAYLOAD,
 800444a:	001a      	movs	r2, r3
 800444c:	492a      	ldr	r1, [pc, #168]	; (80044f8 <connectMQTT+0x23c>)
 800444e:	4b1c      	ldr	r3, [pc, #112]	; (80044c0 <connectMQTT+0x204>)
 8004450:	0018      	movs	r0, r3
 8004452:	f005 ff4f 	bl	800a2f4 <siprintf>
	sendingToSimcomA76xx(AT_COMMAND);
 8004456:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <connectMQTT+0x204>)
 8004458:	0018      	movs	r0, r3
 800445a:	f7ff f9ff 	bl	800385c <sendingToSimcomA76xx>
	HAL_Delay(500);
 800445e:	23fa      	movs	r3, #250	; 0xfa
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	0018      	movs	r0, r3
 8004464:	f000 fc58 	bl	8004d18 <HAL_Delay>
	sendingToSimcomA76xx(BUFFER_DATA_PAYLOAD_MQTT);
 8004468:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <connectMQTT+0x238>)
 800446a:	0018      	movs	r0, r3
 800446c:	f7ff f9f6 	bl	800385c <sendingToSimcomA76xx>
	HAL_Delay(500);
 8004470:	23fa      	movs	r3, #250	; 0xfa
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	0018      	movs	r0, r3
 8004476:	f000 fc4f 	bl	8004d18 <HAL_Delay>
	sendingToSimcomA76xx(AT_PUBLISH);
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <connectMQTT+0x240>)
 800447c:	0018      	movs	r0, r3
 800447e:	f7ff f9ed 	bl	800385c <sendingToSimcomA76xx>
	HAL_Delay(500);
 8004482:	23fa      	movs	r3, #250	; 0xfa
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	0018      	movs	r0, r3
 8004488:	f000 fc46 	bl	8004d18 <HAL_Delay>
	isConnectMQTT = 1;
 800448c:	4b1c      	ldr	r3, [pc, #112]	; (8004500 <connectMQTT+0x244>)
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
	return 1;
 8004492:	2301      	movs	r3, #1
}
 8004494:	0018      	movs	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	b001      	add	sp, #4
 800449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800449c:	9999999a 	.word	0x9999999a
 80044a0:	3fb99999 	.word	0x3fb99999
 80044a4:	40484000 	.word	0x40484000
 80044a8:	2000089c 	.word	0x2000089c
 80044ac:	20000740 	.word	0x20000740
 80044b0:	20000000 	.word	0x20000000
 80044b4:	20000014 	.word	0x20000014
 80044b8:	0800dcdc 	.word	0x0800dcdc
 80044bc:	20000024 	.word	0x20000024
 80044c0:	200004e8 	.word	0x200004e8
 80044c4:	0000075b 	.word	0x0000075b
 80044c8:	0800dce8 	.word	0x0800dce8
 80044cc:	2000003c 	.word	0x2000003c
 80044d0:	0800dd04 	.word	0x0800dd04
 80044d4:	0800dd0c 	.word	0x0800dd0c
 80044d8:	0800dd14 	.word	0x0800dd14
 80044dc:	0800dd1c 	.word	0x0800dd1c
 80044e0:	200005b0 	.word	0x200005b0
 80044e4:	20000068 	.word	0x20000068
 80044e8:	20000750 	.word	0x20000750
 80044ec:	20000108 	.word	0x20000108
 80044f0:	200000b0 	.word	0x200000b0
 80044f4:	20000678 	.word	0x20000678
 80044f8:	20000080 	.word	0x20000080
 80044fc:	20000098 	.word	0x20000098
 8004500:	20000717 	.word	0x20000717

08004504 <Sleep_Stm32_A7672S>:
int Sleep_Stm32_A7672S() {
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
	//Sleep Simcom A7672S

	HAL_GPIO_WritePin(ENABLE_A7672C_GPIO_Port, ENABLE_A7672C_Pin,
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	4818      	ldr	r0, [pc, #96]	; (8004570 <Sleep_Stm32_A7672S+0x6c>)
 800450e:	2200      	movs	r2, #0
 8004510:	0019      	movs	r1, r3
 8004512:	f001 fdd1 	bl	80060b8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_Delay(4000);
 8004516:	23fa      	movs	r3, #250	; 0xfa
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	0018      	movs	r0, r3
 800451c:	f000 fbfc 	bl	8004d18 <HAL_Delay>
	//sendingToSimcomA76xx("AT+CPOF");
	HAL_GPIO_WritePin(ENABLE_A7672C_GPIO_Port, ENABLE_A7672C_Pin, GPIO_PIN_SET);
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	4812      	ldr	r0, [pc, #72]	; (8004570 <Sleep_Stm32_A7672S+0x6c>)
 8004526:	2201      	movs	r2, #1
 8004528:	0019      	movs	r1, r3
 800452a:	f001 fdc5 	bl	80060b8 <HAL_GPIO_WritePin>
	HAL_Delay(6000);
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <Sleep_Stm32_A7672S+0x70>)
 8004530:	0018      	movs	r0, r3
 8004532:	f000 fbf1 	bl	8004d18 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, GPIO_PIN_RESET);
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	01db      	lsls	r3, r3, #7
 800453a:	480d      	ldr	r0, [pc, #52]	; (8004570 <Sleep_Stm32_A7672S+0x6c>)
 800453c:	2200      	movs	r2, #0
 800453e:	0019      	movs	r1, r3
 8004540:	f001 fdba 	bl	80060b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OPEN_SENSOR_GPIO_Port, OPEN_SENSOR_Pin, GPIO_PIN_RESET);
 8004544:	23a0      	movs	r3, #160	; 0xa0
 8004546:	05db      	lsls	r3, r3, #23
 8004548:	2200      	movs	r2, #0
 800454a:	2110      	movs	r1, #16
 800454c:	0018      	movs	r0, r3
 800454e:	f001 fdb3 	bl	80060b8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim6);
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <Sleep_Stm32_A7672S+0x74>)
 8004554:	0018      	movs	r0, r3
 8004556:	f002 fd4f 	bl	8006ff8 <HAL_TIM_Base_Start_IT>
	//CLose sensor
	//HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin,GPIO_PIN_RESET);
	HAL_SuspendTick();
 800455a:	f000 fc01 	bl	8004d60 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 800455e:	2102      	movs	r1, #2
 8004560:	2000      	movs	r0, #0
 8004562:	f001 fdc7 	bl	80060f4 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 8004566:	f000 fc09 	bl	8004d7c <HAL_ResumeTick>
	NVIC_SystemReset();
 800456a:	f7fe ffcb 	bl	8003504 <__NVIC_SystemReset>
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	50000400 	.word	0x50000400
 8004574:	00001770 	.word	0x00001770
 8004578:	20000398 	.word	0x20000398

0800457c <Filter_Value>:
	isSleepMode = 1;

	return isSleepMode;
}
void Filter_Value(void) {
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0

	absChange = fabs(water_level - SaveDataWater);
 8004580:	4b64      	ldr	r3, [pc, #400]	; (8004714 <Filter_Value+0x198>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b64      	ldr	r3, [pc, #400]	; (8004718 <Filter_Value+0x19c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	1c19      	adds	r1, r3, #0
 800458a:	1c10      	adds	r0, r2, #0
 800458c:	f7fc fe20 	bl	80011d0 <__aeabi_fsub>
 8004590:	1c03      	adds	r3, r0, #0
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	085a      	lsrs	r2, r3, #1
 8004596:	4b61      	ldr	r3, [pc, #388]	; (800471c <Filter_Value+0x1a0>)
 8004598:	601a      	str	r2, [r3, #0]
	if (water_level > 0 && absChange > 0.5) {
 800459a:	4b5e      	ldr	r3, [pc, #376]	; (8004714 <Filter_Value+0x198>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2100      	movs	r1, #0
 80045a0:	1c18      	adds	r0, r3, #0
 80045a2:	f7fb ffa7 	bl	80004f4 <__aeabi_fcmpgt>
 80045a6:	1e03      	subs	r3, r0, #0
 80045a8:	d04b      	beq.n	8004642 <Filter_Value+0xc6>
 80045aa:	4b5c      	ldr	r3, [pc, #368]	; (800471c <Filter_Value+0x1a0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	21fc      	movs	r1, #252	; 0xfc
 80045b0:	0589      	lsls	r1, r1, #22
 80045b2:	1c18      	adds	r0, r3, #0
 80045b4:	f7fb ff9e 	bl	80004f4 <__aeabi_fcmpgt>
 80045b8:	1e03      	subs	r3, r0, #0
 80045ba:	d042      	beq.n	8004642 <Filter_Value+0xc6>
		Negative = 1;
 80045bc:	4b58      	ldr	r3, [pc, #352]	; (8004720 <Filter_Value+0x1a4>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
		isDistance = water_level;
 80045c2:	4b54      	ldr	r3, [pc, #336]	; (8004714 <Filter_Value+0x198>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b57      	ldr	r3, [pc, #348]	; (8004724 <Filter_Value+0x1a8>)
 80045c8:	601a      	str	r2, [r3, #0]
		Flash_Erase(DATA_NEGATIVE_WATER);
 80045ca:	4b57      	ldr	r3, [pc, #348]	; (8004728 <Filter_Value+0x1ac>)
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7fe ffab 	bl	8003528 <Flash_Erase>
		Flash_Write_Init(DATA_NEGATIVE_WATER, (uint32_t) Negative);
 80045d2:	4b53      	ldr	r3, [pc, #332]	; (8004720 <Filter_Value+0x1a4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a54      	ldr	r2, [pc, #336]	; (8004728 <Filter_Value+0x1ac>)
 80045d8:	0019      	movs	r1, r3
 80045da:	0010      	movs	r0, r2
 80045dc:	f7fe ffc4 	bl	8003568 <Flash_Write_Init>

		intDataWater = (int) isDistance;
 80045e0:	4b50      	ldr	r3, [pc, #320]	; (8004724 <Filter_Value+0x1a8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	1c18      	adds	r0, r3, #0
 80045e6:	f7fc ff93 	bl	8001510 <__aeabi_f2iz>
 80045ea:	0002      	movs	r2, r0
 80045ec:	4b4f      	ldr	r3, [pc, #316]	; (800472c <Filter_Value+0x1b0>)
 80045ee:	601a      	str	r2, [r3, #0]
		floatDataWater = ((int) (isDistance * 10) % 10);
 80045f0:	4b4c      	ldr	r3, [pc, #304]	; (8004724 <Filter_Value+0x1a8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	494e      	ldr	r1, [pc, #312]	; (8004730 <Filter_Value+0x1b4>)
 80045f6:	1c18      	adds	r0, r3, #0
 80045f8:	f7fc fc9c 	bl	8000f34 <__aeabi_fmul>
 80045fc:	1c03      	adds	r3, r0, #0
 80045fe:	1c18      	adds	r0, r3, #0
 8004600:	f7fc ff86 	bl	8001510 <__aeabi_f2iz>
 8004604:	0003      	movs	r3, r0
 8004606:	210a      	movs	r1, #10
 8004608:	0018      	movs	r0, r3
 800460a:	f7fb ff09 	bl	8000420 <__aeabi_idivmod>
 800460e:	000b      	movs	r3, r1
 8004610:	001a      	movs	r2, r3
 8004612:	4b48      	ldr	r3, [pc, #288]	; (8004734 <Filter_Value+0x1b8>)
 8004614:	601a      	str	r2, [r3, #0]

		Flash_Erase(DATA_INT_WATER);
 8004616:	4b48      	ldr	r3, [pc, #288]	; (8004738 <Filter_Value+0x1bc>)
 8004618:	0018      	movs	r0, r3
 800461a:	f7fe ff85 	bl	8003528 <Flash_Erase>
		Flash_Write_Init(DATA_INT_WATER, (uint32_t) intDataWater);
 800461e:	4b43      	ldr	r3, [pc, #268]	; (800472c <Filter_Value+0x1b0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a45      	ldr	r2, [pc, #276]	; (8004738 <Filter_Value+0x1bc>)
 8004624:	0019      	movs	r1, r3
 8004626:	0010      	movs	r0, r2
 8004628:	f7fe ff9e 	bl	8003568 <Flash_Write_Init>

		Flash_Erase(DATA_FLOAT_WATER);
 800462c:	4b43      	ldr	r3, [pc, #268]	; (800473c <Filter_Value+0x1c0>)
 800462e:	0018      	movs	r0, r3
 8004630:	f7fe ff7a 	bl	8003528 <Flash_Erase>
		Flash_Write_Init(DATA_FLOAT_WATER, (uint32_t) floatDataWater);
 8004634:	4b3f      	ldr	r3, [pc, #252]	; (8004734 <Filter_Value+0x1b8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a40      	ldr	r2, [pc, #256]	; (800473c <Filter_Value+0x1c0>)
 800463a:	0019      	movs	r1, r3
 800463c:	0010      	movs	r0, r2
 800463e:	f7fe ff93 	bl	8003568 <Flash_Write_Init>
	}
	if (water_level < 0 && absChange > 0.5) {
 8004642:	4b34      	ldr	r3, [pc, #208]	; (8004714 <Filter_Value+0x198>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2100      	movs	r1, #0
 8004648:	1c18      	adds	r0, r3, #0
 800464a:	f7fb ff3f 	bl	80004cc <__aeabi_fcmplt>
 800464e:	1e03      	subs	r3, r0, #0
 8004650:	d04e      	beq.n	80046f0 <Filter_Value+0x174>
 8004652:	4b32      	ldr	r3, [pc, #200]	; (800471c <Filter_Value+0x1a0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	21fc      	movs	r1, #252	; 0xfc
 8004658:	0589      	lsls	r1, r1, #22
 800465a:	1c18      	adds	r0, r3, #0
 800465c:	f7fb ff4a 	bl	80004f4 <__aeabi_fcmpgt>
 8004660:	1e03      	subs	r3, r0, #0
 8004662:	d045      	beq.n	80046f0 <Filter_Value+0x174>

		Negative = 2;
 8004664:	4b2e      	ldr	r3, [pc, #184]	; (8004720 <Filter_Value+0x1a4>)
 8004666:	2202      	movs	r2, #2
 8004668:	601a      	str	r2, [r3, #0]
		isDistance = water_level * -1;
 800466a:	4b2a      	ldr	r3, [pc, #168]	; (8004714 <Filter_Value+0x198>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2280      	movs	r2, #128	; 0x80
 8004670:	0612      	lsls	r2, r2, #24
 8004672:	405a      	eors	r2, r3
 8004674:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <Filter_Value+0x1a8>)
 8004676:	601a      	str	r2, [r3, #0]
		Flash_Erase(DATA_NEGATIVE_WATER);
 8004678:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <Filter_Value+0x1ac>)
 800467a:	0018      	movs	r0, r3
 800467c:	f7fe ff54 	bl	8003528 <Flash_Erase>
		Flash_Write_Init(DATA_NEGATIVE_WATER, (uint32_t) Negative);
 8004680:	4b27      	ldr	r3, [pc, #156]	; (8004720 <Filter_Value+0x1a4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a28      	ldr	r2, [pc, #160]	; (8004728 <Filter_Value+0x1ac>)
 8004686:	0019      	movs	r1, r3
 8004688:	0010      	movs	r0, r2
 800468a:	f7fe ff6d 	bl	8003568 <Flash_Write_Init>

		intDataWater = (int) isDistance;
 800468e:	4b25      	ldr	r3, [pc, #148]	; (8004724 <Filter_Value+0x1a8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	1c18      	adds	r0, r3, #0
 8004694:	f7fc ff3c 	bl	8001510 <__aeabi_f2iz>
 8004698:	0002      	movs	r2, r0
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <Filter_Value+0x1b0>)
 800469c:	601a      	str	r2, [r3, #0]
		floatDataWater = ((int) (isDistance * 10) % 10);
 800469e:	4b21      	ldr	r3, [pc, #132]	; (8004724 <Filter_Value+0x1a8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4923      	ldr	r1, [pc, #140]	; (8004730 <Filter_Value+0x1b4>)
 80046a4:	1c18      	adds	r0, r3, #0
 80046a6:	f7fc fc45 	bl	8000f34 <__aeabi_fmul>
 80046aa:	1c03      	adds	r3, r0, #0
 80046ac:	1c18      	adds	r0, r3, #0
 80046ae:	f7fc ff2f 	bl	8001510 <__aeabi_f2iz>
 80046b2:	0003      	movs	r3, r0
 80046b4:	210a      	movs	r1, #10
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7fb feb2 	bl	8000420 <__aeabi_idivmod>
 80046bc:	000b      	movs	r3, r1
 80046be:	001a      	movs	r2, r3
 80046c0:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <Filter_Value+0x1b8>)
 80046c2:	601a      	str	r2, [r3, #0]

		Flash_Erase(DATA_INT_WATER);
 80046c4:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <Filter_Value+0x1bc>)
 80046c6:	0018      	movs	r0, r3
 80046c8:	f7fe ff2e 	bl	8003528 <Flash_Erase>
		Flash_Write_Init(DATA_INT_WATER, (uint32_t) intDataWater);
 80046cc:	4b17      	ldr	r3, [pc, #92]	; (800472c <Filter_Value+0x1b0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <Filter_Value+0x1bc>)
 80046d2:	0019      	movs	r1, r3
 80046d4:	0010      	movs	r0, r2
 80046d6:	f7fe ff47 	bl	8003568 <Flash_Write_Init>

		Flash_Erase(DATA_FLOAT_WATER);
 80046da:	4b18      	ldr	r3, [pc, #96]	; (800473c <Filter_Value+0x1c0>)
 80046dc:	0018      	movs	r0, r3
 80046de:	f7fe ff23 	bl	8003528 <Flash_Erase>
		Flash_Write_Init(DATA_FLOAT_WATER, (uint32_t) floatDataWater);
 80046e2:	4b14      	ldr	r3, [pc, #80]	; (8004734 <Filter_Value+0x1b8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a15      	ldr	r2, [pc, #84]	; (800473c <Filter_Value+0x1c0>)
 80046e8:	0019      	movs	r1, r3
 80046ea:	0010      	movs	r0, r2
 80046ec:	f7fe ff3c 	bl	8003568 <Flash_Write_Init>
	}
	if (absChange < 0.5) {
 80046f0:	4b0a      	ldr	r3, [pc, #40]	; (800471c <Filter_Value+0x1a0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	21fc      	movs	r1, #252	; 0xfc
 80046f6:	0589      	lsls	r1, r1, #22
 80046f8:	1c18      	adds	r0, r3, #0
 80046fa:	f7fb fee7 	bl	80004cc <__aeabi_fcmplt>
 80046fe:	1e03      	subs	r3, r0, #0
 8004700:	d100      	bne.n	8004704 <Filter_Value+0x188>
		water_level = SaveDataWater;
	}

}
 8004702:	e003      	b.n	800470c <Filter_Value+0x190>
		water_level = SaveDataWater;
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <Filter_Value+0x19c>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b02      	ldr	r3, [pc, #8]	; (8004714 <Filter_Value+0x198>)
 800470a:	601a      	str	r2, [r3, #0]
}
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	2000089c 	.word	0x2000089c
 8004718:	20000728 	.word	0x20000728
 800471c:	2000073c 	.word	0x2000073c
 8004720:	20000738 	.word	0x20000738
 8004724:	2000072c 	.word	0x2000072c
 8004728:	0800f400 	.word	0x0800f400
 800472c:	20000730 	.word	0x20000730
 8004730:	41200000 	.word	0x41200000
 8004734:	20000734 	.word	0x20000734
 8004738:	0800fc00 	.word	0x0800fc00
 800473c:	0800f800 	.word	0x0800f800

08004740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004744:	b672      	cpsid	i
}
 8004746:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004748:	e7fe      	b.n	8004748 <Error_Handler+0x8>
	...

0800474c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_MspInit+0x24>)
 8004752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_MspInit+0x24>)
 8004756:	2101      	movs	r1, #1
 8004758:	430a      	orrs	r2, r1
 800475a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <HAL_MspInit+0x24>)
 800475e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <HAL_MspInit+0x24>)
 8004762:	2180      	movs	r1, #128	; 0x80
 8004764:	0549      	lsls	r1, r1, #21
 8004766:	430a      	orrs	r2, r1
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000

08004774 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b089      	sub	sp, #36	; 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800477c:	240c      	movs	r4, #12
 800477e:	193b      	adds	r3, r7, r4
 8004780:	0018      	movs	r0, r3
 8004782:	2314      	movs	r3, #20
 8004784:	001a      	movs	r2, r3
 8004786:	2100      	movs	r1, #0
 8004788:	f005 fe20 	bl	800a3cc <memset>
  if(hadc->Instance==ADC1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a14      	ldr	r2, [pc, #80]	; (80047e4 <HAL_ADC_MspInit+0x70>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d122      	bne.n	80047dc <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <HAL_ADC_MspInit+0x74>)
 8004798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800479a:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <HAL_ADC_MspInit+0x74>)
 800479c:	2180      	movs	r1, #128	; 0x80
 800479e:	0089      	lsls	r1, r1, #2
 80047a0:	430a      	orrs	r2, r1
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047a4:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <HAL_ADC_MspInit+0x74>)
 80047a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a8:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <HAL_ADC_MspInit+0x74>)
 80047aa:	2101      	movs	r1, #1
 80047ac:	430a      	orrs	r2, r1
 80047ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <HAL_ADC_MspInit+0x74>)
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	2201      	movs	r2, #1
 80047b6:	4013      	ands	r3, r2
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80047bc:	193b      	adds	r3, r7, r4
 80047be:	2220      	movs	r2, #32
 80047c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047c2:	193b      	adds	r3, r7, r4
 80047c4:	2203      	movs	r2, #3
 80047c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c8:	193b      	adds	r3, r7, r4
 80047ca:	2200      	movs	r2, #0
 80047cc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ce:	193a      	adds	r2, r7, r4
 80047d0:	23a0      	movs	r3, #160	; 0xa0
 80047d2:	05db      	lsls	r3, r3, #23
 80047d4:	0011      	movs	r1, r2
 80047d6:	0018      	movs	r0, r3
 80047d8:	f001 faf0 	bl	8005dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80047dc:	46c0      	nop			; (mov r8, r8)
 80047de:	46bd      	mov	sp, r7
 80047e0:	b009      	add	sp, #36	; 0x24
 80047e2:	bd90      	pop	{r4, r7, pc}
 80047e4:	40012400 	.word	0x40012400
 80047e8:	40021000 	.word	0x40021000

080047ec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f4:	240c      	movs	r4, #12
 80047f6:	193b      	adds	r3, r7, r4
 80047f8:	0018      	movs	r0, r3
 80047fa:	2314      	movs	r3, #20
 80047fc:	001a      	movs	r2, r3
 80047fe:	2100      	movs	r1, #0
 8004800:	f005 fde4 	bl	800a3cc <memset>
  if(htim_ic->Instance==TIM2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	05db      	lsls	r3, r3, #23
 800480c:	429a      	cmp	r2, r3
 800480e:	d130      	bne.n	8004872 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004810:	4b1a      	ldr	r3, [pc, #104]	; (800487c <HAL_TIM_IC_MspInit+0x90>)
 8004812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004814:	4b19      	ldr	r3, [pc, #100]	; (800487c <HAL_TIM_IC_MspInit+0x90>)
 8004816:	2101      	movs	r1, #1
 8004818:	430a      	orrs	r2, r1
 800481a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800481c:	4b17      	ldr	r3, [pc, #92]	; (800487c <HAL_TIM_IC_MspInit+0x90>)
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	4b16      	ldr	r3, [pc, #88]	; (800487c <HAL_TIM_IC_MspInit+0x90>)
 8004822:	2101      	movs	r1, #1
 8004824:	430a      	orrs	r2, r1
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c
 8004828:	4b14      	ldr	r3, [pc, #80]	; (800487c <HAL_TIM_IC_MspInit+0x90>)
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	2201      	movs	r2, #1
 800482e:	4013      	ands	r3, r2
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004834:	0021      	movs	r1, r4
 8004836:	187b      	adds	r3, r7, r1
 8004838:	2201      	movs	r2, #1
 800483a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483c:	187b      	adds	r3, r7, r1
 800483e:	2202      	movs	r2, #2
 8004840:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004842:	187b      	adds	r3, r7, r1
 8004844:	2200      	movs	r2, #0
 8004846:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004848:	187b      	adds	r3, r7, r1
 800484a:	2200      	movs	r2, #0
 800484c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800484e:	187b      	adds	r3, r7, r1
 8004850:	2202      	movs	r2, #2
 8004852:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004854:	187a      	adds	r2, r7, r1
 8004856:	23a0      	movs	r3, #160	; 0xa0
 8004858:	05db      	lsls	r3, r3, #23
 800485a:	0011      	movs	r1, r2
 800485c:	0018      	movs	r0, r3
 800485e:	f001 faad 	bl	8005dbc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8004862:	2200      	movs	r2, #0
 8004864:	2102      	movs	r1, #2
 8004866:	200f      	movs	r0, #15
 8004868:	f000 ffb4 	bl	80057d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800486c:	200f      	movs	r0, #15
 800486e:	f000 ffc6 	bl	80057fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	b009      	add	sp, #36	; 0x24
 8004878:	bd90      	pop	{r4, r7, pc}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	40021000 	.word	0x40021000

08004880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <HAL_TIM_Base_MspInit+0x38>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d10d      	bne.n	80048ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004892:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <HAL_TIM_Base_MspInit+0x3c>)
 8004894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <HAL_TIM_Base_MspInit+0x3c>)
 8004898:	2110      	movs	r1, #16
 800489a:	430a      	orrs	r2, r1
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 800489e:	2200      	movs	r2, #0
 80048a0:	2103      	movs	r1, #3
 80048a2:	2011      	movs	r0, #17
 80048a4:	f000 ff96 	bl	80057d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80048a8:	2011      	movs	r0, #17
 80048aa:	f000 ffa8 	bl	80057fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b002      	add	sp, #8
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	40001000 	.word	0x40001000
 80048bc:	40021000 	.word	0x40021000

080048c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048c0:	b590      	push	{r4, r7, lr}
 80048c2:	b08b      	sub	sp, #44	; 0x2c
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c8:	2414      	movs	r4, #20
 80048ca:	193b      	adds	r3, r7, r4
 80048cc:	0018      	movs	r0, r3
 80048ce:	2314      	movs	r3, #20
 80048d0:	001a      	movs	r2, r3
 80048d2:	2100      	movs	r1, #0
 80048d4:	f005 fd7a 	bl	800a3cc <memset>
  if(huart->Instance==USART1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a38      	ldr	r2, [pc, #224]	; (80049c0 <HAL_UART_MspInit+0x100>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d133      	bne.n	800494a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048e2:	4b38      	ldr	r3, [pc, #224]	; (80049c4 <HAL_UART_MspInit+0x104>)
 80048e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048e6:	4b37      	ldr	r3, [pc, #220]	; (80049c4 <HAL_UART_MspInit+0x104>)
 80048e8:	2180      	movs	r1, #128	; 0x80
 80048ea:	01c9      	lsls	r1, r1, #7
 80048ec:	430a      	orrs	r2, r1
 80048ee:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f0:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <HAL_UART_MspInit+0x104>)
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	4b33      	ldr	r3, [pc, #204]	; (80049c4 <HAL_UART_MspInit+0x104>)
 80048f6:	2101      	movs	r1, #1
 80048f8:	430a      	orrs	r2, r1
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80048fc:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <HAL_UART_MspInit+0x104>)
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	2201      	movs	r2, #1
 8004902:	4013      	ands	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004908:	193b      	adds	r3, r7, r4
 800490a:	22c0      	movs	r2, #192	; 0xc0
 800490c:	00d2      	lsls	r2, r2, #3
 800490e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004910:	0021      	movs	r1, r4
 8004912:	187b      	adds	r3, r7, r1
 8004914:	2202      	movs	r2, #2
 8004916:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004918:	187b      	adds	r3, r7, r1
 800491a:	2200      	movs	r2, #0
 800491c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800491e:	187b      	adds	r3, r7, r1
 8004920:	2203      	movs	r2, #3
 8004922:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004924:	187b      	adds	r3, r7, r1
 8004926:	2204      	movs	r2, #4
 8004928:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492a:	187a      	adds	r2, r7, r1
 800492c:	23a0      	movs	r3, #160	; 0xa0
 800492e:	05db      	lsls	r3, r3, #23
 8004930:	0011      	movs	r1, r2
 8004932:	0018      	movs	r0, r3
 8004934:	f001 fa42 	bl	8005dbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004938:	2200      	movs	r2, #0
 800493a:	2100      	movs	r1, #0
 800493c:	201b      	movs	r0, #27
 800493e:	f000 ff49 	bl	80057d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004942:	201b      	movs	r0, #27
 8004944:	f000 ff5b 	bl	80057fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004948:	e036      	b.n	80049b8 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <HAL_UART_MspInit+0x108>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d131      	bne.n	80049b8 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004954:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <HAL_UART_MspInit+0x104>)
 8004956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004958:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <HAL_UART_MspInit+0x104>)
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	0289      	lsls	r1, r1, #10
 800495e:	430a      	orrs	r2, r1
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004962:	4b18      	ldr	r3, [pc, #96]	; (80049c4 <HAL_UART_MspInit+0x104>)
 8004964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004966:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <HAL_UART_MspInit+0x104>)
 8004968:	2101      	movs	r1, #1
 800496a:	430a      	orrs	r2, r1
 800496c:	62da      	str	r2, [r3, #44]	; 0x2c
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <HAL_UART_MspInit+0x104>)
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	2201      	movs	r2, #1
 8004974:	4013      	ands	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800497a:	2114      	movs	r1, #20
 800497c:	187b      	adds	r3, r7, r1
 800497e:	220c      	movs	r2, #12
 8004980:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004982:	187b      	adds	r3, r7, r1
 8004984:	2202      	movs	r2, #2
 8004986:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004988:	187b      	adds	r3, r7, r1
 800498a:	2200      	movs	r2, #0
 800498c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800498e:	187b      	adds	r3, r7, r1
 8004990:	2203      	movs	r2, #3
 8004992:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004994:	187b      	adds	r3, r7, r1
 8004996:	2204      	movs	r2, #4
 8004998:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800499a:	187a      	adds	r2, r7, r1
 800499c:	23a0      	movs	r3, #160	; 0xa0
 800499e:	05db      	lsls	r3, r3, #23
 80049a0:	0011      	movs	r1, r2
 80049a2:	0018      	movs	r0, r3
 80049a4:	f001 fa0a 	bl	8005dbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80049a8:	2200      	movs	r2, #0
 80049aa:	2102      	movs	r1, #2
 80049ac:	201c      	movs	r0, #28
 80049ae:	f000 ff11 	bl	80057d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049b2:	201c      	movs	r0, #28
 80049b4:	f000 ff23 	bl	80057fe <HAL_NVIC_EnableIRQ>
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b00b      	add	sp, #44	; 0x2c
 80049be:	bd90      	pop	{r4, r7, pc}
 80049c0:	40013800 	.word	0x40013800
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40004400 	.word	0x40004400

080049cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049d0:	e7fe      	b.n	80049d0 <NMI_Handler+0x4>

080049d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049d6:	e7fe      	b.n	80049d6 <HardFault_Handler+0x4>

080049d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049f0:	f000 f976 	bl	8004ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049f4:	46c0      	nop			; (mov r8, r8)
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <TIM2_IRQHandler+0x14>)
 8004a02:	0018      	movs	r0, r3
 8004a04:	f002 fb8a 	bl	800711c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a08:	46c0      	nop			; (mov r8, r8)
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	20000358 	.word	0x20000358

08004a14 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <TIM6_IRQHandler+0x14>)
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f002 fb7e 	bl	800711c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004a20:	46c0      	nop			; (mov r8, r8)
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	20000398 	.word	0x20000398

08004a2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <USART1_IRQHandler+0x14>)
 8004a32:	0018      	movs	r0, r3
 8004a34:	f003 f976 	bl	8007d24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	200003d8 	.word	0x200003d8

08004a44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <USART2_IRQHandler+0x14>)
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f003 f96a 	bl	8007d24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a50:	46c0      	nop			; (mov r8, r8)
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	20000460 	.word	0x20000460

08004a5c <_getpid>:
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	2301      	movs	r3, #1
 8004a62:	0018      	movs	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <_kill>:
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
 8004a72:	f005 fd1b 	bl	800a4ac <__errno>
 8004a76:	0003      	movs	r3, r0
 8004a78:	2216      	movs	r2, #22
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	425b      	negs	r3, r3
 8004a80:	0018      	movs	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b002      	add	sp, #8
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <_exit>:
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	2301      	movs	r3, #1
 8004a92:	425a      	negs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	0011      	movs	r1, r2
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7ff ffe5 	bl	8004a68 <_kill>
 8004a9e:	e7fe      	b.n	8004a9e <_exit+0x16>

08004aa0 <_read>:
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e00a      	b.n	8004ac8 <_read+0x28>
 8004ab2:	e000      	b.n	8004ab6 <_read+0x16>
 8004ab4:	bf00      	nop
 8004ab6:	0001      	movs	r1, r0
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	60ba      	str	r2, [r7, #8]
 8004abe:	b2ca      	uxtb	r2, r1
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	dbf0      	blt.n	8004ab2 <_read+0x12>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b006      	add	sp, #24
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <_write>:
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e009      	b.n	8004b00 <_write+0x26>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	60ba      	str	r2, [r7, #8]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	0018      	movs	r0, r3
 8004af6:	e000      	b.n	8004afa <_write+0x20>
 8004af8:	bf00      	nop
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	3301      	adds	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	dbf1      	blt.n	8004aec <_write+0x12>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b006      	add	sp, #24
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <_close>:
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	425b      	negs	r3, r3
 8004b1e:	0018      	movs	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b002      	add	sp, #8
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_fstat>:
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	0192      	lsls	r2, r2, #6
 8004b36:	605a      	str	r2, [r3, #4]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b002      	add	sp, #8
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <_isatty>:
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <_lseek>:
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	2300      	movs	r3, #0
 8004b62:	0018      	movs	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b004      	add	sp, #16
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <_sbrk>:
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <_sbrk+0x5c>)
 8004b76:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <_sbrk+0x60>)
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	4b13      	ldr	r3, [pc, #76]	; (8004bd0 <_sbrk+0x64>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <_sbrk+0x22>
 8004b88:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <_sbrk+0x64>)
 8004b8a:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <_sbrk+0x68>)
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <_sbrk+0x64>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	18d3      	adds	r3, r2, r3
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d207      	bcs.n	8004bac <_sbrk+0x40>
 8004b9c:	f005 fc86 	bl	800a4ac <__errno>
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	220c      	movs	r2, #12
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	425b      	negs	r3, r3
 8004baa:	e009      	b.n	8004bc0 <_sbrk+0x54>
 8004bac:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <_sbrk+0x64>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <_sbrk+0x64>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	18d2      	adds	r2, r2, r3
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <_sbrk+0x64>)
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b006      	add	sp, #24
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20005000 	.word	0x20005000
 8004bcc:	00000400 	.word	0x00000400
 8004bd0:	200008f8 	.word	0x200008f8
 8004bd4:	20000a68 	.word	0x20000a68

08004bd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <Reset_Handler>:
 8004be4:	480d      	ldr	r0, [pc, #52]	; (8004c1c <LoopForever+0x2>)
 8004be6:	4685      	mov	sp, r0
 8004be8:	f7ff fff6 	bl	8004bd8 <SystemInit>
 8004bec:	480c      	ldr	r0, [pc, #48]	; (8004c20 <LoopForever+0x6>)
 8004bee:	490d      	ldr	r1, [pc, #52]	; (8004c24 <LoopForever+0xa>)
 8004bf0:	4a0d      	ldr	r2, [pc, #52]	; (8004c28 <LoopForever+0xe>)
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e002      	b.n	8004bfc <LoopCopyDataInit>

08004bf6 <CopyDataInit>:
 8004bf6:	58d4      	ldr	r4, [r2, r3]
 8004bf8:	50c4      	str	r4, [r0, r3]
 8004bfa:	3304      	adds	r3, #4

08004bfc <LoopCopyDataInit>:
 8004bfc:	18c4      	adds	r4, r0, r3
 8004bfe:	428c      	cmp	r4, r1
 8004c00:	d3f9      	bcc.n	8004bf6 <CopyDataInit>
 8004c02:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <LoopForever+0x12>)
 8004c04:	4c0a      	ldr	r4, [pc, #40]	; (8004c30 <LoopForever+0x16>)
 8004c06:	2300      	movs	r3, #0
 8004c08:	e001      	b.n	8004c0e <LoopFillZerobss>

08004c0a <FillZerobss>:
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	3204      	adds	r2, #4

08004c0e <LoopFillZerobss>:
 8004c0e:	42a2      	cmp	r2, r4
 8004c10:	d3fb      	bcc.n	8004c0a <FillZerobss>
 8004c12:	f005 fc51 	bl	800a4b8 <__libc_init_array>
 8004c16:	f7fe fe4b 	bl	80038b0 <main>

08004c1a <LoopForever>:
 8004c1a:	e7fe      	b.n	8004c1a <LoopForever>
 8004c1c:	20005000 	.word	0x20005000
 8004c20:	20000000 	.word	0x20000000
 8004c24:	200002e0 	.word	0x200002e0
 8004c28:	0800e290 	.word	0x0800e290
 8004c2c:	200002e0 	.word	0x200002e0
 8004c30:	20000a64 	.word	0x20000a64

08004c34 <ADC1_COMP_IRQHandler>:
 8004c34:	e7fe      	b.n	8004c34 <ADC1_COMP_IRQHandler>
	...

08004c38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c3e:	1dfb      	adds	r3, r7, #7
 8004c40:	2200      	movs	r2, #0
 8004c42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_Init+0x3c>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <HAL_Init+0x3c>)
 8004c4a:	2140      	movs	r1, #64	; 0x40
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c50:	2003      	movs	r0, #3
 8004c52:	f000 f811 	bl	8004c78 <HAL_InitTick>
 8004c56:	1e03      	subs	r3, r0, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004c5a:	1dfb      	adds	r3, r7, #7
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	e001      	b.n	8004c66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004c62:	f7ff fd73 	bl	800474c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c66:	1dfb      	adds	r3, r7, #7
 8004c68:	781b      	ldrb	r3, [r3, #0]
}
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	b002      	add	sp, #8
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	40022000 	.word	0x40022000

08004c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c78:	b590      	push	{r4, r7, lr}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c80:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <HAL_InitTick+0x5c>)
 8004c82:	681c      	ldr	r4, [r3, #0]
 8004c84:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <HAL_InitTick+0x60>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	0019      	movs	r1, r3
 8004c8a:	23fa      	movs	r3, #250	; 0xfa
 8004c8c:	0098      	lsls	r0, r3, #2
 8004c8e:	f7fb fa57 	bl	8000140 <__udivsi3>
 8004c92:	0003      	movs	r3, r0
 8004c94:	0019      	movs	r1, r3
 8004c96:	0020      	movs	r0, r4
 8004c98:	f7fb fa52 	bl	8000140 <__udivsi3>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f000 fdbd 	bl	800581e <HAL_SYSTICK_Config>
 8004ca4:	1e03      	subs	r3, r0, #0
 8004ca6:	d001      	beq.n	8004cac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e00f      	b.n	8004ccc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d80b      	bhi.n	8004cca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	425b      	negs	r3, r3
 8004cb8:	2200      	movs	r2, #0
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f000 fd8a 	bl	80057d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_InitTick+0x64>)
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b003      	add	sp, #12
 8004cd2:	bd90      	pop	{r4, r7, pc}
 8004cd4:	2000010c 	.word	0x2000010c
 8004cd8:	20000114 	.word	0x20000114
 8004cdc:	20000110 	.word	0x20000110

08004ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_IncTick+0x1c>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	001a      	movs	r2, r3
 8004cea:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <HAL_IncTick+0x20>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	18d2      	adds	r2, r2, r3
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <HAL_IncTick+0x20>)
 8004cf2:	601a      	str	r2, [r3, #0]
}
 8004cf4:	46c0      	nop			; (mov r8, r8)
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	20000114 	.word	0x20000114
 8004d00:	200008fc 	.word	0x200008fc

08004d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  return uwTick;
 8004d08:	4b02      	ldr	r3, [pc, #8]	; (8004d14 <HAL_GetTick+0x10>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
}
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	200008fc 	.word	0x200008fc

08004d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d20:	f7ff fff0 	bl	8004d04 <HAL_GetTick>
 8004d24:	0003      	movs	r3, r0
 8004d26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	d005      	beq.n	8004d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <HAL_Delay+0x44>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	001a      	movs	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	f7ff ffe0 	bl	8004d04 <HAL_GetTick>
 8004d44:	0002      	movs	r2, r0
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d8f7      	bhi.n	8004d40 <HAL_Delay+0x28>
  {
  }
}
 8004d50:	46c0      	nop			; (mov r8, r8)
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b004      	add	sp, #16
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	20000114 	.word	0x20000114

08004d60 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <HAL_SuspendTick+0x18>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <HAL_SuspendTick+0x18>)
 8004d6a:	2102      	movs	r1, #2
 8004d6c:	438a      	bics	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]
}
 8004d70:	46c0      	nop			; (mov r8, r8)
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	e000e010 	.word	0xe000e010

08004d7c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004d80:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <HAL_ResumeTick+0x18>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <HAL_ResumeTick+0x18>)
 8004d86:	2102      	movs	r1, #2
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]
}
 8004d8c:	46c0      	nop			; (mov r8, r8)
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	e000e010 	.word	0xe000e010

08004d98 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e159      	b.n	800505e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2250      	movs	r2, #80	; 0x50
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f7ff fcd6 	bl	8004774 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dcc:	2210      	movs	r2, #16
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	d005      	beq.n	8004de0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2204      	movs	r2, #4
 8004ddc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004dde:	d00b      	beq.n	8004df8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de4:	2210      	movs	r2, #16
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2250      	movs	r2, #80	; 0x50
 8004df0:	2100      	movs	r1, #0
 8004df2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e132      	b.n	800505e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	4a9a      	ldr	r2, [pc, #616]	; (8005068 <HAL_ADC_Init+0x2d0>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2202      	movs	r2, #2
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2203      	movs	r2, #3
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d108      	bne.n	8004e28 <HAL_ADC_Init+0x90>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_ADC_Init+0x90>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <HAL_ADC_Init+0x92>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d149      	bne.n	8004ec2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	23c0      	movs	r3, #192	; 0xc0
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d00b      	beq.n	8004e52 <HAL_ADC_Init+0xba>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	05db      	lsls	r3, r3, #23
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d005      	beq.n	8004e52 <HAL_ADC_Init+0xba>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	061b      	lsls	r3, r3, #24
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d111      	bne.n	8004e76 <HAL_ADC_Init+0xde>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	0092      	lsls	r2, r2, #2
 8004e5e:	0892      	lsrs	r2, r2, #2
 8004e60:	611a      	str	r2, [r3, #16]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6919      	ldr	r1, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	611a      	str	r2, [r3, #16]
 8004e74:	e014      	b.n	8004ea0 <HAL_ADC_Init+0x108>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	0092      	lsls	r2, r2, #2
 8004e82:	0892      	lsrs	r2, r2, #2
 8004e84:	611a      	str	r2, [r3, #16]
 8004e86:	4b79      	ldr	r3, [pc, #484]	; (800506c <HAL_ADC_Init+0x2d4>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b78      	ldr	r3, [pc, #480]	; (800506c <HAL_ADC_Init+0x2d4>)
 8004e8c:	4978      	ldr	r1, [pc, #480]	; (8005070 <HAL_ADC_Init+0x2d8>)
 8004e8e:	400a      	ands	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	4b76      	ldr	r3, [pc, #472]	; (800506c <HAL_ADC_Init+0x2d4>)
 8004e94:	6819      	ldr	r1, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	4b74      	ldr	r3, [pc, #464]	; (800506c <HAL_ADC_Init+0x2d4>)
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2118      	movs	r1, #24
 8004eac:	438a      	bics	r2, r1
 8004eae:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68d9      	ldr	r1, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004ec2:	4b6a      	ldr	r3, [pc, #424]	; (800506c <HAL_ADC_Init+0x2d4>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4b69      	ldr	r3, [pc, #420]	; (800506c <HAL_ADC_Init+0x2d4>)
 8004ec8:	496a      	ldr	r1, [pc, #424]	; (8005074 <HAL_ADC_Init+0x2dc>)
 8004eca:	400a      	ands	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8004ece:	4b67      	ldr	r3, [pc, #412]	; (800506c <HAL_ADC_Init+0x2d4>)
 8004ed0:	6819      	ldr	r1, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	065a      	lsls	r2, r3, #25
 8004ed8:	4b64      	ldr	r3, [pc, #400]	; (800506c <HAL_ADC_Init+0x2d4>)
 8004eda:	430a      	orrs	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	2380      	movs	r3, #128	; 0x80
 8004ee6:	055b      	lsls	r3, r3, #21
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d108      	bne.n	8004efe <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2180      	movs	r1, #128	; 0x80
 8004ef8:	0549      	lsls	r1, r1, #21
 8004efa:	430a      	orrs	r2, r1
 8004efc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	495b      	ldr	r1, [pc, #364]	; (8005078 <HAL_ADC_Init+0x2e0>)
 8004f0a:	400a      	ands	r2, r1
 8004f0c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68d9      	ldr	r1, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d101      	bne.n	8004f24 <HAL_ADC_Init+0x18c>
 8004f20:	2304      	movs	r3, #4
 8004f22:	e000      	b.n	8004f26 <HAL_ADC_Init+0x18e>
 8004f24:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004f26:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2020      	movs	r0, #32
 8004f2c:	5c1b      	ldrb	r3, [r3, r0]
 8004f2e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004f30:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	202c      	movs	r0, #44	; 0x2c
 8004f36:	5c1b      	ldrb	r3, [r3, r0]
 8004f38:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004f3a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004f40:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004f48:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004f50:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f5e:	23c2      	movs	r3, #194	; 0xc2
 8004f60:	33ff      	adds	r3, #255	; 0xff
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d00b      	beq.n	8004f7e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68d9      	ldr	r1, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2221      	movs	r2, #33	; 0x21
 8004f82:	5c9b      	ldrb	r3, [r3, r2]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d11a      	bne.n	8004fbe <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	5c9b      	ldrb	r3, [r3, r2]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2180      	movs	r1, #128	; 0x80
 8004f9e:	0249      	lsls	r1, r1, #9
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	e00b      	b.n	8004fbe <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004faa:	2220      	movs	r2, #32
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d11f      	bne.n	8005006 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	492a      	ldr	r1, [pc, #168]	; (800507c <HAL_ADC_Init+0x2e4>)
 8004fd2:	400a      	ands	r2, r1
 8004fd4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6919      	ldr	r1, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004fe4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8004fea:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2101      	movs	r1, #1
 8005000:	430a      	orrs	r2, r1
 8005002:	611a      	str	r2, [r3, #16]
 8005004:	e00e      	b.n	8005024 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2201      	movs	r2, #1
 800500e:	4013      	ands	r3, r2
 8005010:	2b01      	cmp	r3, #1
 8005012:	d107      	bne.n	8005024 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2101      	movs	r1, #1
 8005020:	438a      	bics	r2, r1
 8005022:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695a      	ldr	r2, [r3, #20]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2107      	movs	r1, #7
 8005030:	438a      	bics	r2, r1
 8005032:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6959      	ldr	r1, [r3, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005050:	2203      	movs	r2, #3
 8005052:	4393      	bics	r3, r2
 8005054:	2201      	movs	r2, #1
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	0018      	movs	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	b002      	add	sp, #8
 8005064:	bd80      	pop	{r7, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	fffffefd 	.word	0xfffffefd
 800506c:	40012708 	.word	0x40012708
 8005070:	ffc3ffff 	.word	0xffc3ffff
 8005074:	fdffffff 	.word	0xfdffffff
 8005078:	fffe0219 	.word	0xfffe0219
 800507c:	fffffc03 	.word	0xfffffc03

08005080 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005080:	b590      	push	{r4, r7, lr}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005088:	230f      	movs	r3, #15
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2204      	movs	r2, #4
 8005098:	4013      	ands	r3, r2
 800509a:	d138      	bne.n	800510e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2250      	movs	r2, #80	; 0x50
 80050a0:	5c9b      	ldrb	r3, [r3, r2]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_ADC_Start+0x2a>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e038      	b.n	800511c <HAL_ADC_Start+0x9c>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2250      	movs	r2, #80	; 0x50
 80050ae:	2101      	movs	r1, #1
 80050b0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d007      	beq.n	80050ca <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80050ba:	230f      	movs	r3, #15
 80050bc:	18fc      	adds	r4, r7, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	0018      	movs	r0, r3
 80050c2:	f000 f99f 	bl	8005404 <ADC_Enable>
 80050c6:	0003      	movs	r3, r0
 80050c8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80050ca:	230f      	movs	r3, #15
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d120      	bne.n	8005116 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d8:	4a12      	ldr	r2, [pc, #72]	; (8005124 <HAL_ADC_Start+0xa4>)
 80050da:	4013      	ands	r3, r2
 80050dc:	2280      	movs	r2, #128	; 0x80
 80050de:	0052      	lsls	r2, r2, #1
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2250      	movs	r2, #80	; 0x50
 80050f0:	2100      	movs	r1, #0
 80050f2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	221c      	movs	r2, #28
 80050fa:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2104      	movs	r1, #4
 8005108:	430a      	orrs	r2, r1
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	e003      	b.n	8005116 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800510e:	230f      	movs	r3, #15
 8005110:	18fb      	adds	r3, r7, r3
 8005112:	2202      	movs	r2, #2
 8005114:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8005116:	230f      	movs	r3, #15
 8005118:	18fb      	adds	r3, r7, r3
 800511a:	781b      	ldrb	r3, [r3, #0]
}
 800511c:	0018      	movs	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	b005      	add	sp, #20
 8005122:	bd90      	pop	{r4, r7, pc}
 8005124:	fffff0fe 	.word	0xfffff0fe

08005128 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005128:	b5b0      	push	{r4, r5, r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005130:	230f      	movs	r3, #15
 8005132:	18fb      	adds	r3, r7, r3
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2250      	movs	r2, #80	; 0x50
 800513c:	5c9b      	ldrb	r3, [r3, r2]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_ADC_Stop+0x1e>
 8005142:	2302      	movs	r3, #2
 8005144:	e029      	b.n	800519a <HAL_ADC_Stop+0x72>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2250      	movs	r2, #80	; 0x50
 800514a:	2101      	movs	r1, #1
 800514c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800514e:	250f      	movs	r5, #15
 8005150:	197c      	adds	r4, r7, r5
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0018      	movs	r0, r3
 8005156:	f000 fa24 	bl	80055a2 <ADC_ConversionStop>
 800515a:	0003      	movs	r3, r0
 800515c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800515e:	197b      	adds	r3, r7, r5
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d112      	bne.n	800518c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005166:	197c      	adds	r4, r7, r5
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	0018      	movs	r0, r3
 800516c:	f000 f9b2 	bl	80054d4 <ADC_Disable>
 8005170:	0003      	movs	r3, r0
 8005172:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005174:	197b      	adds	r3, r7, r5
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d107      	bne.n	800518c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	4a08      	ldr	r2, [pc, #32]	; (80051a4 <HAL_ADC_Stop+0x7c>)
 8005182:	4013      	ands	r3, r2
 8005184:	2201      	movs	r2, #1
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2250      	movs	r2, #80	; 0x50
 8005190:	2100      	movs	r1, #0
 8005192:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8005194:	230f      	movs	r3, #15
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	781b      	ldrb	r3, [r3, #0]
}
 800519a:	0018      	movs	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	b004      	add	sp, #16
 80051a0:	bdb0      	pop	{r4, r5, r7, pc}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	fffffefe 	.word	0xfffffefe

080051a8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d102      	bne.n	80051c8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80051c2:	2308      	movs	r3, #8
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e014      	b.n	80051f2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d10b      	bne.n	80051ee <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	2220      	movs	r2, #32
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2250      	movs	r2, #80	; 0x50
 80051e6:	2100      	movs	r1, #0
 80051e8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e072      	b.n	80052d4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80051ee:	230c      	movs	r3, #12
 80051f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80051f2:	f7ff fd87 	bl	8004d04 <HAL_GetTick>
 80051f6:	0003      	movs	r3, r0
 80051f8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80051fa:	e01f      	b.n	800523c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	d01c      	beq.n	800523c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <HAL_ADC_PollForConversion+0x70>
 8005208:	f7ff fd7c 	bl	8004d04 <HAL_GetTick>
 800520c:	0002      	movs	r2, r0
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d211      	bcs.n	800523c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4013      	ands	r3, r2
 8005222:	d10b      	bne.n	800523c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005228:	2204      	movs	r2, #4
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2250      	movs	r2, #80	; 0x50
 8005234:	2100      	movs	r1, #0
 8005236:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e04b      	b.n	80052d4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4013      	ands	r3, r2
 8005246:	d0d9      	beq.n	80051fc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524c:	2280      	movs	r2, #128	; 0x80
 800524e:	0092      	lsls	r2, r2, #2
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	23c0      	movs	r3, #192	; 0xc0
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	4013      	ands	r3, r2
 8005262:	d12e      	bne.n	80052c2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800526a:	2b00      	cmp	r3, #0
 800526c:	d129      	bne.n	80052c2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2208      	movs	r2, #8
 8005276:	4013      	ands	r3, r2
 8005278:	2b08      	cmp	r3, #8
 800527a:	d122      	bne.n	80052c2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2204      	movs	r2, #4
 8005284:	4013      	ands	r3, r2
 8005286:	d110      	bne.n	80052aa <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	210c      	movs	r1, #12
 8005294:	438a      	bics	r2, r1
 8005296:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529c:	4a0f      	ldr	r2, [pc, #60]	; (80052dc <HAL_ADC_PollForConversion+0x134>)
 800529e:	4013      	ands	r3, r2
 80052a0:	2201      	movs	r2, #1
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	655a      	str	r2, [r3, #84]	; 0x54
 80052a8:	e00b      	b.n	80052c2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	2220      	movs	r2, #32
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	2201      	movs	r2, #1
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	220c      	movs	r2, #12
 80052d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	0018      	movs	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b004      	add	sp, #16
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	fffffefe 	.word	0xfffffefe

080052e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80052ee:	0018      	movs	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b002      	add	sp, #8
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2250      	movs	r2, #80	; 0x50
 8005306:	5c9b      	ldrb	r3, [r3, r2]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_ADC_ConfigChannel+0x18>
 800530c:	2302      	movs	r3, #2
 800530e:	e06c      	b.n	80053ea <HAL_ADC_ConfigChannel+0xf2>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2250      	movs	r2, #80	; 0x50
 8005314:	2101      	movs	r1, #1
 8005316:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2204      	movs	r2, #4
 8005320:	4013      	ands	r3, r2
 8005322:	d00b      	beq.n	800533c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	2220      	movs	r2, #32
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2250      	movs	r2, #80	; 0x50
 8005334:	2100      	movs	r1, #0
 8005336:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e056      	b.n	80053ea <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	4a2c      	ldr	r2, [pc, #176]	; (80053f4 <HAL_ADC_ConfigChannel+0xfc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d028      	beq.n	8005398 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	035b      	lsls	r3, r3, #13
 8005352:	0b5a      	lsrs	r2, r3, #13
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	02db      	lsls	r3, r3, #11
 8005364:	4013      	ands	r3, r2
 8005366:	d009      	beq.n	800537c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8005368:	4b23      	ldr	r3, [pc, #140]	; (80053f8 <HAL_ADC_ConfigChannel+0x100>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	4b22      	ldr	r3, [pc, #136]	; (80053f8 <HAL_ADC_ConfigChannel+0x100>)
 800536e:	2180      	movs	r1, #128	; 0x80
 8005370:	0409      	lsls	r1, r1, #16
 8005372:	430a      	orrs	r2, r1
 8005374:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8005376:	200a      	movs	r0, #10
 8005378:	f000 f960 	bl	800563c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	029b      	lsls	r3, r3, #10
 8005384:	4013      	ands	r3, r2
 8005386:	d02b      	beq.n	80053e0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8005388:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <HAL_ADC_ConfigChannel+0x100>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <HAL_ADC_ConfigChannel+0x100>)
 800538e:	2180      	movs	r1, #128	; 0x80
 8005390:	03c9      	lsls	r1, r1, #15
 8005392:	430a      	orrs	r2, r1
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e023      	b.n	80053e0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	035b      	lsls	r3, r3, #13
 80053a4:	0b5b      	lsrs	r3, r3, #13
 80053a6:	43d9      	mvns	r1, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	400a      	ands	r2, r1
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	02db      	lsls	r3, r3, #11
 80053b8:	4013      	ands	r3, r2
 80053ba:	d005      	beq.n	80053c8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80053bc:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <HAL_ADC_ConfigChannel+0x100>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <HAL_ADC_ConfigChannel+0x100>)
 80053c2:	490e      	ldr	r1, [pc, #56]	; (80053fc <HAL_ADC_ConfigChannel+0x104>)
 80053c4:	400a      	ands	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	029b      	lsls	r3, r3, #10
 80053d0:	4013      	ands	r3, r2
 80053d2:	d005      	beq.n	80053e0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80053d4:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <HAL_ADC_ConfigChannel+0x100>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <HAL_ADC_ConfigChannel+0x100>)
 80053da:	4909      	ldr	r1, [pc, #36]	; (8005400 <HAL_ADC_ConfigChannel+0x108>)
 80053dc:	400a      	ands	r2, r1
 80053de:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2250      	movs	r2, #80	; 0x50
 80053e4:	2100      	movs	r1, #0
 80053e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b002      	add	sp, #8
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	00001001 	.word	0x00001001
 80053f8:	40012708 	.word	0x40012708
 80053fc:	ff7fffff 	.word	0xff7fffff
 8005400:	ffbfffff 	.word	0xffbfffff

08005404 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2203      	movs	r2, #3
 8005418:	4013      	ands	r3, r2
 800541a:	2b01      	cmp	r3, #1
 800541c:	d108      	bne.n	8005430 <ADC_Enable+0x2c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2201      	movs	r2, #1
 8005426:	4013      	ands	r3, r2
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <ADC_Enable+0x2c>
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <ADC_Enable+0x2e>
 8005430:	2300      	movs	r3, #0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d146      	bne.n	80054c4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	4a24      	ldr	r2, [pc, #144]	; (80054d0 <ADC_Enable+0xcc>)
 800543e:	4013      	ands	r3, r2
 8005440:	d00d      	beq.n	800545e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	2210      	movs	r2, #16
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	2201      	movs	r2, #1
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e033      	b.n	80054c6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2101      	movs	r1, #1
 800546a:	430a      	orrs	r2, r1
 800546c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800546e:	2001      	movs	r0, #1
 8005470:	f000 f8e4 	bl	800563c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8005474:	f7ff fc46 	bl	8004d04 <HAL_GetTick>
 8005478:	0003      	movs	r3, r0
 800547a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800547c:	e01b      	b.n	80054b6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800547e:	f7ff fc41 	bl	8004d04 <HAL_GetTick>
 8005482:	0002      	movs	r2, r0
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b0a      	cmp	r3, #10
 800548a:	d914      	bls.n	80054b6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2201      	movs	r2, #1
 8005494:	4013      	ands	r3, r2
 8005496:	2b01      	cmp	r3, #1
 8005498:	d00d      	beq.n	80054b6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549e:	2210      	movs	r2, #16
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054aa:	2201      	movs	r2, #1
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e007      	b.n	80054c6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2201      	movs	r2, #1
 80054be:	4013      	ands	r3, r2
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d1dc      	bne.n	800547e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	0018      	movs	r0, r3
 80054c8:	46bd      	mov	sp, r7
 80054ca:	b004      	add	sp, #16
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	80000017 	.word	0x80000017

080054d4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2203      	movs	r2, #3
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d108      	bne.n	8005500 <ADC_Disable+0x2c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2201      	movs	r2, #1
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <ADC_Disable+0x2c>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <ADC_Disable+0x2e>
 8005500:	2300      	movs	r3, #0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d048      	beq.n	8005598 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	2205      	movs	r2, #5
 800550e:	4013      	ands	r3, r2
 8005510:	2b01      	cmp	r3, #1
 8005512:	d110      	bne.n	8005536 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2102      	movs	r1, #2
 8005520:	430a      	orrs	r2, r1
 8005522:	609a      	str	r2, [r3, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2203      	movs	r2, #3
 800552a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800552c:	f7ff fbea 	bl	8004d04 <HAL_GetTick>
 8005530:	0003      	movs	r3, r0
 8005532:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005534:	e029      	b.n	800558a <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553a:	2210      	movs	r2, #16
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005546:	2201      	movs	r2, #1
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e023      	b.n	800559a <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005552:	f7ff fbd7 	bl	8004d04 <HAL_GetTick>
 8005556:	0002      	movs	r2, r0
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b0a      	cmp	r3, #10
 800555e:	d914      	bls.n	800558a <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2201      	movs	r2, #1
 8005568:	4013      	ands	r3, r2
 800556a:	2b01      	cmp	r3, #1
 800556c:	d10d      	bne.n	800558a <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005572:	2210      	movs	r2, #16
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557e:	2201      	movs	r2, #1
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e007      	b.n	800559a <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2201      	movs	r2, #1
 8005592:	4013      	ands	r3, r2
 8005594:	2b01      	cmp	r3, #1
 8005596:	d0dc      	beq.n	8005552 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	0018      	movs	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	b004      	add	sp, #16
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2204      	movs	r2, #4
 80055b6:	4013      	ands	r3, r2
 80055b8:	d03a      	beq.n	8005630 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	2204      	movs	r2, #4
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d10d      	bne.n	80055e4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2202      	movs	r2, #2
 80055d0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80055d2:	d107      	bne.n	80055e4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2110      	movs	r1, #16
 80055e0:	430a      	orrs	r2, r1
 80055e2:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80055e4:	f7ff fb8e 	bl	8004d04 <HAL_GetTick>
 80055e8:	0003      	movs	r3, r0
 80055ea:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80055ec:	e01a      	b.n	8005624 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80055ee:	f7ff fb89 	bl	8004d04 <HAL_GetTick>
 80055f2:	0002      	movs	r2, r0
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b0a      	cmp	r3, #10
 80055fa:	d913      	bls.n	8005624 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2204      	movs	r2, #4
 8005604:	4013      	ands	r3, r2
 8005606:	d00d      	beq.n	8005624 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560c:	2210      	movs	r2, #16
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005618:	2201      	movs	r2, #1
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e006      	b.n	8005632 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2204      	movs	r2, #4
 800562c:	4013      	ands	r3, r2
 800562e:	d1de      	bne.n	80055ee <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	0018      	movs	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	b004      	add	sp, #16
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <ADC_DelayMicroSecond+0x38>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	490b      	ldr	r1, [pc, #44]	; (8005678 <ADC_DelayMicroSecond+0x3c>)
 800564a:	0018      	movs	r0, r3
 800564c:	f7fa fd78 	bl	8000140 <__udivsi3>
 8005650:	0003      	movs	r3, r0
 8005652:	001a      	movs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4353      	muls	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800565a:	e002      	b.n	8005662 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3b01      	subs	r3, #1
 8005660:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f9      	bne.n	800565c <ADC_DelayMicroSecond+0x20>
  }
}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	46bd      	mov	sp, r7
 800566e:	b004      	add	sp, #16
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	2000010c 	.word	0x2000010c
 8005678:	000f4240 	.word	0x000f4240

0800567c <__NVIC_EnableIRQ>:
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	0002      	movs	r2, r0
 8005684:	1dfb      	adds	r3, r7, #7
 8005686:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005688:	1dfb      	adds	r3, r7, #7
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b7f      	cmp	r3, #127	; 0x7f
 800568e:	d809      	bhi.n	80056a4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005690:	1dfb      	adds	r3, r7, #7
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	001a      	movs	r2, r3
 8005696:	231f      	movs	r3, #31
 8005698:	401a      	ands	r2, r3
 800569a:	4b04      	ldr	r3, [pc, #16]	; (80056ac <__NVIC_EnableIRQ+0x30>)
 800569c:	2101      	movs	r1, #1
 800569e:	4091      	lsls	r1, r2
 80056a0:	000a      	movs	r2, r1
 80056a2:	601a      	str	r2, [r3, #0]
}
 80056a4:	46c0      	nop			; (mov r8, r8)
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b002      	add	sp, #8
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	e000e100 	.word	0xe000e100

080056b0 <__NVIC_SetPriority>:
{
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	0002      	movs	r2, r0
 80056b8:	6039      	str	r1, [r7, #0]
 80056ba:	1dfb      	adds	r3, r7, #7
 80056bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80056be:	1dfb      	adds	r3, r7, #7
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b7f      	cmp	r3, #127	; 0x7f
 80056c4:	d828      	bhi.n	8005718 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80056c6:	4a2f      	ldr	r2, [pc, #188]	; (8005784 <__NVIC_SetPriority+0xd4>)
 80056c8:	1dfb      	adds	r3, r7, #7
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	b25b      	sxtb	r3, r3
 80056ce:	089b      	lsrs	r3, r3, #2
 80056d0:	33c0      	adds	r3, #192	; 0xc0
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	589b      	ldr	r3, [r3, r2]
 80056d6:	1dfa      	adds	r2, r7, #7
 80056d8:	7812      	ldrb	r2, [r2, #0]
 80056da:	0011      	movs	r1, r2
 80056dc:	2203      	movs	r2, #3
 80056de:	400a      	ands	r2, r1
 80056e0:	00d2      	lsls	r2, r2, #3
 80056e2:	21ff      	movs	r1, #255	; 0xff
 80056e4:	4091      	lsls	r1, r2
 80056e6:	000a      	movs	r2, r1
 80056e8:	43d2      	mvns	r2, r2
 80056ea:	401a      	ands	r2, r3
 80056ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	019b      	lsls	r3, r3, #6
 80056f2:	22ff      	movs	r2, #255	; 0xff
 80056f4:	401a      	ands	r2, r3
 80056f6:	1dfb      	adds	r3, r7, #7
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	0018      	movs	r0, r3
 80056fc:	2303      	movs	r3, #3
 80056fe:	4003      	ands	r3, r0
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005704:	481f      	ldr	r0, [pc, #124]	; (8005784 <__NVIC_SetPriority+0xd4>)
 8005706:	1dfb      	adds	r3, r7, #7
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	b25b      	sxtb	r3, r3
 800570c:	089b      	lsrs	r3, r3, #2
 800570e:	430a      	orrs	r2, r1
 8005710:	33c0      	adds	r3, #192	; 0xc0
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	501a      	str	r2, [r3, r0]
}
 8005716:	e031      	b.n	800577c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005718:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <__NVIC_SetPriority+0xd8>)
 800571a:	1dfb      	adds	r3, r7, #7
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	0019      	movs	r1, r3
 8005720:	230f      	movs	r3, #15
 8005722:	400b      	ands	r3, r1
 8005724:	3b08      	subs	r3, #8
 8005726:	089b      	lsrs	r3, r3, #2
 8005728:	3306      	adds	r3, #6
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	18d3      	adds	r3, r2, r3
 800572e:	3304      	adds	r3, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	1dfa      	adds	r2, r7, #7
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	0011      	movs	r1, r2
 8005738:	2203      	movs	r2, #3
 800573a:	400a      	ands	r2, r1
 800573c:	00d2      	lsls	r2, r2, #3
 800573e:	21ff      	movs	r1, #255	; 0xff
 8005740:	4091      	lsls	r1, r2
 8005742:	000a      	movs	r2, r1
 8005744:	43d2      	mvns	r2, r2
 8005746:	401a      	ands	r2, r3
 8005748:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	019b      	lsls	r3, r3, #6
 800574e:	22ff      	movs	r2, #255	; 0xff
 8005750:	401a      	ands	r2, r3
 8005752:	1dfb      	adds	r3, r7, #7
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	0018      	movs	r0, r3
 8005758:	2303      	movs	r3, #3
 800575a:	4003      	ands	r3, r0
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005760:	4809      	ldr	r0, [pc, #36]	; (8005788 <__NVIC_SetPriority+0xd8>)
 8005762:	1dfb      	adds	r3, r7, #7
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	001c      	movs	r4, r3
 8005768:	230f      	movs	r3, #15
 800576a:	4023      	ands	r3, r4
 800576c:	3b08      	subs	r3, #8
 800576e:	089b      	lsrs	r3, r3, #2
 8005770:	430a      	orrs	r2, r1
 8005772:	3306      	adds	r3, #6
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	18c3      	adds	r3, r0, r3
 8005778:	3304      	adds	r3, #4
 800577a:	601a      	str	r2, [r3, #0]
}
 800577c:	46c0      	nop			; (mov r8, r8)
 800577e:	46bd      	mov	sp, r7
 8005780:	b003      	add	sp, #12
 8005782:	bd90      	pop	{r4, r7, pc}
 8005784:	e000e100 	.word	0xe000e100
 8005788:	e000ed00 	.word	0xe000ed00

0800578c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	1e5a      	subs	r2, r3, #1
 8005798:	2380      	movs	r3, #128	; 0x80
 800579a:	045b      	lsls	r3, r3, #17
 800579c:	429a      	cmp	r2, r3
 800579e:	d301      	bcc.n	80057a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057a0:	2301      	movs	r3, #1
 80057a2:	e010      	b.n	80057c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057a4:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <SysTick_Config+0x44>)
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	3a01      	subs	r2, #1
 80057aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057ac:	2301      	movs	r3, #1
 80057ae:	425b      	negs	r3, r3
 80057b0:	2103      	movs	r1, #3
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7ff ff7c 	bl	80056b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <SysTick_Config+0x44>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057be:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <SysTick_Config+0x44>)
 80057c0:	2207      	movs	r2, #7
 80057c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	0018      	movs	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b002      	add	sp, #8
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	e000e010 	.word	0xe000e010

080057d4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	210f      	movs	r1, #15
 80057e0:	187b      	adds	r3, r7, r1
 80057e2:	1c02      	adds	r2, r0, #0
 80057e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	187b      	adds	r3, r7, r1
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	b25b      	sxtb	r3, r3
 80057ee:	0011      	movs	r1, r2
 80057f0:	0018      	movs	r0, r3
 80057f2:	f7ff ff5d 	bl	80056b0 <__NVIC_SetPriority>
}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b004      	add	sp, #16
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	0002      	movs	r2, r0
 8005806:	1dfb      	adds	r3, r7, #7
 8005808:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800580a:	1dfb      	adds	r3, r7, #7
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	b25b      	sxtb	r3, r3
 8005810:	0018      	movs	r0, r3
 8005812:	f7ff ff33 	bl	800567c <__NVIC_EnableIRQ>
}
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	46bd      	mov	sp, r7
 800581a:	b002      	add	sp, #8
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	0018      	movs	r0, r3
 800582a:	f7ff ffaf 	bl	800578c <SysTick_Config>
 800582e:	0003      	movs	r3, r0
}
 8005830:	0018      	movs	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	b002      	add	sp, #8
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005840:	230f      	movs	r3, #15
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	2200      	movs	r2, #0
 8005846:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2225      	movs	r2, #37	; 0x25
 800584c:	5c9b      	ldrb	r3, [r3, r2]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d008      	beq.n	8005866 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2204      	movs	r2, #4
 8005858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2224      	movs	r2, #36	; 0x24
 800585e:	2100      	movs	r1, #0
 8005860:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e024      	b.n	80058b0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	210e      	movs	r1, #14
 8005872:	438a      	bics	r2, r1
 8005874:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2101      	movs	r1, #1
 8005882:	438a      	bics	r2, r1
 8005884:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588a:	221c      	movs	r2, #28
 800588c:	401a      	ands	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	2101      	movs	r1, #1
 8005894:	4091      	lsls	r1, r2
 8005896:	000a      	movs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2225      	movs	r2, #37	; 0x25
 800589e:	2101      	movs	r1, #1
 80058a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2224      	movs	r2, #36	; 0x24
 80058a6:	2100      	movs	r1, #0
 80058a8:	5499      	strb	r1, [r3, r2]

    return status;
 80058aa:	230f      	movs	r3, #15
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80058b0:	0018      	movs	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	b004      	add	sp, #16
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058c0:	210f      	movs	r1, #15
 80058c2:	187b      	adds	r3, r7, r1
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2225      	movs	r2, #37	; 0x25
 80058cc:	5c9b      	ldrb	r3, [r3, r2]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d006      	beq.n	80058e2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2204      	movs	r2, #4
 80058d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80058da:	187b      	adds	r3, r7, r1
 80058dc:	2201      	movs	r2, #1
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	e02a      	b.n	8005938 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	210e      	movs	r1, #14
 80058ee:	438a      	bics	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2101      	movs	r1, #1
 80058fe:	438a      	bics	r2, r1
 8005900:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	221c      	movs	r2, #28
 8005908:	401a      	ands	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	2101      	movs	r1, #1
 8005910:	4091      	lsls	r1, r2
 8005912:	000a      	movs	r2, r1
 8005914:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2225      	movs	r2, #37	; 0x25
 800591a:	2101      	movs	r1, #1
 800591c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2224      	movs	r2, #36	; 0x24
 8005922:	2100      	movs	r1, #0
 8005924:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	0010      	movs	r0, r2
 8005936:	4798      	blx	r3
    }
  }
  return status;
 8005938:	230f      	movs	r3, #15
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	781b      	ldrb	r3, [r3, #0]
}
 800593e:	0018      	movs	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	b004      	add	sp, #16
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8005948:	b5b0      	push	{r4, r5, r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005954:	2317      	movs	r3, #23
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	2201      	movs	r2, #1
 800595a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800595c:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <HAL_FLASH_Program+0x70>)
 800595e:	7c1b      	ldrb	r3, [r3, #16]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_FLASH_Program+0x20>
 8005964:	2302      	movs	r3, #2
 8005966:	e022      	b.n	80059ae <HAL_FLASH_Program+0x66>
 8005968:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <HAL_FLASH_Program+0x70>)
 800596a:	2201      	movs	r2, #1
 800596c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800596e:	2517      	movs	r5, #23
 8005970:	197c      	adds	r4, r7, r5
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <HAL_FLASH_Program+0x74>)
 8005974:	0018      	movs	r0, r3
 8005976:	f000 f88b 	bl	8005a90 <FLASH_WaitForLastOperation>
 800597a:	0003      	movs	r3, r0
 800597c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800597e:	0029      	movs	r1, r5
 8005980:	187b      	adds	r3, r7, r1
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10c      	bne.n	80059a2 <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005988:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <HAL_FLASH_Program+0x70>)
 800598a:	2200      	movs	r2, #0
 800598c:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005994:	187c      	adds	r4, r7, r1
 8005996:	4b09      	ldr	r3, [pc, #36]	; (80059bc <HAL_FLASH_Program+0x74>)
 8005998:	0018      	movs	r0, r3
 800599a:	f000 f879 	bl	8005a90 <FLASH_WaitForLastOperation>
 800599e:	0003      	movs	r3, r0
 80059a0:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80059a2:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <HAL_FLASH_Program+0x70>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	741a      	strb	r2, [r3, #16]

  return status;
 80059a8:	2317      	movs	r3, #23
 80059aa:	18fb      	adds	r3, r7, r3
 80059ac:	781b      	ldrb	r3, [r3, #0]
}
 80059ae:	0018      	movs	r0, r3
 80059b0:	46bd      	mov	sp, r7
 80059b2:	b006      	add	sp, #24
 80059b4:	bdb0      	pop	{r4, r5, r7, pc}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	20000900 	.word	0x20000900
 80059bc:	0000c350 	.word	0x0000c350

080059c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80059c6:	4b23      	ldr	r3, [pc, #140]	; (8005a54 <HAL_FLASH_Unlock+0x94>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	4013      	ands	r3, r2
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d11a      	bne.n	8005a08 <HAL_FLASH_Unlock+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059d2:	f3ef 8310 	mrs	r3, PRIMASK
 80059d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80059d8:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80059da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80059dc:	b672      	cpsid	i
}
 80059de:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 80059e0:	4b1c      	ldr	r3, [pc, #112]	; (8005a54 <HAL_FLASH_Unlock+0x94>)
 80059e2:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <HAL_FLASH_Unlock+0x98>)
 80059e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 80059e6:	4b1b      	ldr	r3, [pc, #108]	; (8005a54 <HAL_FLASH_Unlock+0x94>)
 80059e8:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <HAL_FLASH_Unlock+0x9c>)
 80059ea:	60da      	str	r2, [r3, #12]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f383 8810 	msr	PRIMASK, r3
}
 80059f6:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80059f8:	4b16      	ldr	r3, [pc, #88]	; (8005a54 <HAL_FLASH_Unlock+0x94>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e021      	b.n	8005a4c <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8005a08:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <HAL_FLASH_Unlock+0x94>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d11a      	bne.n	8005a4a <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a14:	f3ef 8310 	mrs	r3, PRIMASK
 8005a18:	607b      	str	r3, [r7, #4]
  return(result);
 8005a1a:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8005a1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a1e:	b672      	cpsid	i
}
 8005a20:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8005a22:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <HAL_FLASH_Unlock+0x94>)
 8005a24:	4a0e      	ldr	r2, [pc, #56]	; (8005a60 <HAL_FLASH_Unlock+0xa0>)
 8005a26:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8005a28:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <HAL_FLASH_Unlock+0x94>)
 8005a2a:	4a0e      	ldr	r2, [pc, #56]	; (8005a64 <HAL_FLASH_Unlock+0xa4>)
 8005a2c:	611a      	str	r2, [r3, #16]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f383 8810 	msr	PRIMASK, r3
}
 8005a38:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <HAL_FLASH_Unlock+0x94>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	4013      	ands	r3, r2
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d101      	bne.n	8005a4a <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b006      	add	sp, #24
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40022000 	.word	0x40022000
 8005a58:	89abcdef 	.word	0x89abcdef
 8005a5c:	02030405 	.word	0x02030405
 8005a60:	8c9daebf 	.word	0x8c9daebf
 8005a64:	13141516 	.word	0x13141516

08005a68 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8005a6c:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <HAL_FLASH_Lock+0x24>)
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <HAL_FLASH_Lock+0x24>)
 8005a72:	2102      	movs	r1, #2
 8005a74:	430a      	orrs	r2, r1
 8005a76:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8005a78:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <HAL_FLASH_Lock+0x24>)
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <HAL_FLASH_Lock+0x24>)
 8005a7e:	2101      	movs	r1, #1
 8005a80:	430a      	orrs	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	0018      	movs	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40022000 	.word	0x40022000

08005a90 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005a98:	f7ff f934 	bl	8004d04 <HAL_GetTick>
 8005a9c:	0003      	movs	r3, r0
 8005a9e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005aa0:	e00f      	b.n	8005ac2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	d00c      	beq.n	8005ac2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <FLASH_WaitForLastOperation+0x2e>
 8005aae:	f7ff f929 	bl	8004d04 <HAL_GetTick>
 8005ab2:	0002      	movs	r2, r0
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d201      	bcs.n	8005ac2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e052      	b.n	8005b68 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005ac2:	4b2b      	ldr	r3, [pc, #172]	; (8005b70 <FLASH_WaitForLastOperation+0xe0>)
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d0e9      	beq.n	8005aa2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005ace:	4b28      	ldr	r3, [pc, #160]	; (8005b70 <FLASH_WaitForLastOperation+0xe0>)
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d102      	bne.n	8005ae0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ada:	4b25      	ldr	r3, [pc, #148]	; (8005b70 <FLASH_WaitForLastOperation+0xe0>)
 8005adc:	2202      	movs	r2, #2
 8005ade:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8005ae0:	4b23      	ldr	r3, [pc, #140]	; (8005b70 <FLASH_WaitForLastOperation+0xe0>)
 8005ae2:	699a      	ldr	r2, [r3, #24]
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	401a      	ands	r2, r3
 8005aea:	2380      	movs	r3, #128	; 0x80
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d035      	beq.n	8005b5e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8005af2:	4b1f      	ldr	r3, [pc, #124]	; (8005b70 <FLASH_WaitForLastOperation+0xe0>)
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8005afc:	2380      	movs	r3, #128	; 0x80
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d02c      	beq.n	8005b5e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8005b04:	4b1a      	ldr	r3, [pc, #104]	; (8005b70 <FLASH_WaitForLastOperation+0xe0>)
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8005b0e:	2380      	movs	r3, #128	; 0x80
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d023      	beq.n	8005b5e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8005b16:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <FLASH_WaitForLastOperation+0xe0>)
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	2380      	movs	r3, #128	; 0x80
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d01a      	beq.n	8005b5e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8005b28:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <FLASH_WaitForLastOperation+0xe0>)
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	019b      	lsls	r3, r3, #6
 8005b30:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8005b32:	2380      	movs	r3, #128	; 0x80
 8005b34:	019b      	lsls	r3, r3, #6
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d011      	beq.n	8005b5e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8005b3a:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <FLASH_WaitForLastOperation+0xe0>)
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	2380      	movs	r3, #128	; 0x80
 8005b40:	029b      	lsls	r3, r3, #10
 8005b42:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	029b      	lsls	r3, r3, #10
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d008      	beq.n	8005b5e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8005b4c:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <FLASH_WaitForLastOperation+0xe0>)
 8005b4e:	699a      	ldr	r2, [r3, #24]
 8005b50:	2380      	movs	r3, #128	; 0x80
 8005b52:	025b      	lsls	r3, r3, #9
 8005b54:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8005b56:	2380      	movs	r3, #128	; 0x80
 8005b58:	025b      	lsls	r3, r3, #9
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d103      	bne.n	8005b66 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8005b5e:	f000 f809 	bl	8005b74 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	0018      	movs	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b004      	add	sp, #16
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	40022000 	.word	0x40022000

08005b74 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005b7e:	4b49      	ldr	r3, [pc, #292]	; (8005ca4 <FLASH_SetErrorCode+0x130>)
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	2380      	movs	r3, #128	; 0x80
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	401a      	ands	r2, r3
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d10a      	bne.n	8005ba6 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005b90:	4b45      	ldr	r3, [pc, #276]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	2202      	movs	r2, #2
 8005b96:	431a      	orrs	r2, r3
 8005b98:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005b9a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2280      	movs	r2, #128	; 0x80
 8005ba0:	0052      	lsls	r2, r2, #1
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8005ba6:	4b3f      	ldr	r3, [pc, #252]	; (8005ca4 <FLASH_SetErrorCode+0x130>)
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	2380      	movs	r3, #128	; 0x80
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	401a      	ands	r2, r3
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d10a      	bne.n	8005bce <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005bb8:	4b3b      	ldr	r3, [pc, #236]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	4b39      	ldr	r3, [pc, #228]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005bc2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2280      	movs	r2, #128	; 0x80
 8005bc8:	0092      	lsls	r2, r2, #2
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8005bce:	4b35      	ldr	r3, [pc, #212]	; (8005ca4 <FLASH_SetErrorCode+0x130>)
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d10a      	bne.n	8005bf6 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8005be0:	4b31      	ldr	r3, [pc, #196]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	2208      	movs	r2, #8
 8005be6:	431a      	orrs	r2, r3
 8005be8:	4b2f      	ldr	r3, [pc, #188]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005bea:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2280      	movs	r2, #128	; 0x80
 8005bf0:	00d2      	lsls	r2, r2, #3
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005bf6:	4b2b      	ldr	r3, [pc, #172]	; (8005ca4 <FLASH_SetErrorCode+0x130>)
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	2380      	movs	r3, #128	; 0x80
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	401a      	ands	r2, r3
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d10a      	bne.n	8005c1e <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005c08:	4b27      	ldr	r3, [pc, #156]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005c12:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	0112      	lsls	r2, r2, #4
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8005c1e:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <FLASH_SetErrorCode+0x130>)
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	2380      	movs	r3, #128	; 0x80
 8005c24:	019b      	lsls	r3, r3, #6
 8005c26:	401a      	ands	r2, r3
 8005c28:	2380      	movs	r3, #128	; 0x80
 8005c2a:	019b      	lsls	r3, r3, #6
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d10a      	bne.n	8005c46 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005c30:	4b1d      	ldr	r3, [pc, #116]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	2210      	movs	r2, #16
 8005c36:	431a      	orrs	r2, r3
 8005c38:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005c3a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2280      	movs	r2, #128	; 0x80
 8005c40:	0192      	lsls	r2, r2, #6
 8005c42:	4313      	orrs	r3, r2
 8005c44:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8005c46:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <FLASH_SetErrorCode+0x130>)
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	029b      	lsls	r3, r3, #10
 8005c4e:	401a      	ands	r2, r3
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	029b      	lsls	r3, r3, #10
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d109      	bne.n	8005c6c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8005c58:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005c62:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <FLASH_SetErrorCode+0x130>)
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	025b      	lsls	r3, r3, #9
 8005c74:	401a      	ands	r2, r3
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	025b      	lsls	r3, r3, #9
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d10a      	bne.n	8005c94 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	2240      	movs	r2, #64	; 0x40
 8005c84:	431a      	orrs	r2, r3
 8005c86:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <FLASH_SetErrorCode+0x134>)
 8005c88:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2280      	movs	r2, #128	; 0x80
 8005c8e:	0252      	lsls	r2, r2, #9
 8005c90:	4313      	orrs	r3, r2
 8005c92:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005c94:	4b03      	ldr	r3, [pc, #12]	; (8005ca4 <FLASH_SetErrorCode+0x130>)
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	619a      	str	r2, [r3, #24]
}  
 8005c9a:	46c0      	nop			; (mov r8, r8)
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	b002      	add	sp, #8
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	40022000 	.word	0x40022000
 8005ca8:	20000900 	.word	0x20000900

08005cac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005cac:	b5b0      	push	{r4, r5, r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cb6:	230f      	movs	r3, #15
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	2201      	movs	r2, #1
 8005cbc:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005cc2:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <HAL_FLASHEx_Erase+0xbc>)
 8005cc4:	7c1b      	ldrb	r3, [r3, #16]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_FLASHEx_Erase+0x22>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e048      	b.n	8005d60 <HAL_FLASHEx_Erase+0xb4>
 8005cce:	4b26      	ldr	r3, [pc, #152]	; (8005d68 <HAL_FLASHEx_Erase+0xbc>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005cd4:	250f      	movs	r5, #15
 8005cd6:	197c      	adds	r4, r7, r5
 8005cd8:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <HAL_FLASHEx_Erase+0xc0>)
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f7ff fed8 	bl	8005a90 <FLASH_WaitForLastOperation>
 8005ce0:	0003      	movs	r3, r0
 8005ce2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005ce4:	197b      	adds	r3, r7, r5
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d133      	bne.n	8005d54 <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4252      	negs	r2, r2
 8005cf2:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	e022      	b.n	8005d42 <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f000 f83a 	bl	8005d78 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d04:	250f      	movs	r5, #15
 8005d06:	197c      	adds	r4, r7, r5
 8005d08:	4b18      	ldr	r3, [pc, #96]	; (8005d6c <HAL_FLASHEx_Erase+0xc0>)
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f7ff fec0 	bl	8005a90 <FLASH_WaitForLastOperation>
 8005d10:	0003      	movs	r3, r0
 8005d12:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <HAL_FLASHEx_Erase+0xc4>)
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <HAL_FLASHEx_Erase+0xc4>)
 8005d1a:	2108      	movs	r1, #8
 8005d1c:	438a      	bics	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8005d20:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <HAL_FLASHEx_Erase+0xc4>)
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <HAL_FLASHEx_Erase+0xc4>)
 8005d26:	4913      	ldr	r1, [pc, #76]	; (8005d74 <HAL_FLASHEx_Erase+0xc8>)
 8005d28:	400a      	ands	r2, r1
 8005d2a:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 8005d2c:	197b      	adds	r3, r7, r5
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	601a      	str	r2, [r3, #0]
        break;
 8005d3a:	e00b      	b.n	8005d54 <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	3380      	adds	r3, #128	; 0x80
 8005d40:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	01da      	lsls	r2, r3, #7
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	18d3      	adds	r3, r2, r3
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d3d3      	bcc.n	8005cfc <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d54:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <HAL_FLASHEx_Erase+0xbc>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	741a      	strb	r2, [r3, #16]

  return status;
 8005d5a:	230f      	movs	r3, #15
 8005d5c:	18fb      	adds	r3, r7, r3
 8005d5e:	781b      	ldrb	r3, [r3, #0]
}
 8005d60:	0018      	movs	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b004      	add	sp, #16
 8005d66:	bdb0      	pop	{r4, r5, r7, pc}
 8005d68:	20000900 	.word	0x20000900
 8005d6c:	0000c350 	.word	0x0000c350
 8005d70:	40022000 	.word	0x40022000
 8005d74:	fffffdff 	.word	0xfffffdff

08005d78 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d80:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <FLASH_PageErase+0x3c>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <FLASH_PageErase+0x40>)
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <FLASH_PageErase+0x40>)
 8005d8c:	2180      	movs	r1, #128	; 0x80
 8005d8e:	0089      	lsls	r1, r1, #2
 8005d90:	430a      	orrs	r2, r1
 8005d92:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8005d94:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <FLASH_PageErase+0x40>)
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <FLASH_PageErase+0x40>)
 8005d9a:	2108      	movs	r1, #8
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	227f      	movs	r2, #127	; 0x7f
 8005da4:	4393      	bics	r3, r2
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	46bd      	mov	sp, r7
 8005dae:	b002      	add	sp, #8
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	20000900 	.word	0x20000900
 8005db8:	40022000 	.word	0x40022000

08005dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005dd2:	e155      	b.n	8006080 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2101      	movs	r1, #1
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4091      	lsls	r1, r2
 8005dde:	000a      	movs	r2, r1
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d100      	bne.n	8005dec <HAL_GPIO_Init+0x30>
 8005dea:	e146      	b.n	800607a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2203      	movs	r2, #3
 8005df2:	4013      	ands	r3, r2
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d005      	beq.n	8005e04 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d130      	bne.n	8005e66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	2203      	movs	r2, #3
 8005e10:	409a      	lsls	r2, r3
 8005e12:	0013      	movs	r3, r2
 8005e14:	43da      	mvns	r2, r3
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	409a      	lsls	r2, r3
 8005e26:	0013      	movs	r3, r2
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	0013      	movs	r3, r2
 8005e42:	43da      	mvns	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	4013      	ands	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	091b      	lsrs	r3, r3, #4
 8005e50:	2201      	movs	r2, #1
 8005e52:	401a      	ands	r2, r3
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	409a      	lsls	r2, r3
 8005e58:	0013      	movs	r3, r2
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d017      	beq.n	8005ea2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	2203      	movs	r2, #3
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	0013      	movs	r3, r2
 8005e82:	43da      	mvns	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4013      	ands	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	409a      	lsls	r2, r3
 8005e94:	0013      	movs	r3, r2
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d123      	bne.n	8005ef6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	08da      	lsrs	r2, r3, #3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3208      	adds	r2, #8
 8005eb6:	0092      	lsls	r2, r2, #2
 8005eb8:	58d3      	ldr	r3, [r2, r3]
 8005eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2207      	movs	r2, #7
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	220f      	movs	r2, #15
 8005ec6:	409a      	lsls	r2, r3
 8005ec8:	0013      	movs	r3, r2
 8005eca:	43da      	mvns	r2, r3
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2107      	movs	r1, #7
 8005eda:	400b      	ands	r3, r1
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	0013      	movs	r3, r2
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	08da      	lsrs	r2, r3, #3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3208      	adds	r2, #8
 8005ef0:	0092      	lsls	r2, r2, #2
 8005ef2:	6939      	ldr	r1, [r7, #16]
 8005ef4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	2203      	movs	r2, #3
 8005f02:	409a      	lsls	r2, r3
 8005f04:	0013      	movs	r3, r2
 8005f06:	43da      	mvns	r2, r3
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2203      	movs	r2, #3
 8005f14:	401a      	ands	r2, r3
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	0013      	movs	r3, r2
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	23c0      	movs	r3, #192	; 0xc0
 8005f30:	029b      	lsls	r3, r3, #10
 8005f32:	4013      	ands	r3, r2
 8005f34:	d100      	bne.n	8005f38 <HAL_GPIO_Init+0x17c>
 8005f36:	e0a0      	b.n	800607a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f38:	4b57      	ldr	r3, [pc, #348]	; (8006098 <HAL_GPIO_Init+0x2dc>)
 8005f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3c:	4b56      	ldr	r3, [pc, #344]	; (8006098 <HAL_GPIO_Init+0x2dc>)
 8005f3e:	2101      	movs	r1, #1
 8005f40:	430a      	orrs	r2, r1
 8005f42:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f44:	4a55      	ldr	r2, [pc, #340]	; (800609c <HAL_GPIO_Init+0x2e0>)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	089b      	lsrs	r3, r3, #2
 8005f4a:	3302      	adds	r3, #2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	589b      	ldr	r3, [r3, r2]
 8005f50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2203      	movs	r2, #3
 8005f56:	4013      	ands	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	220f      	movs	r2, #15
 8005f5c:	409a      	lsls	r2, r3
 8005f5e:	0013      	movs	r3, r2
 8005f60:	43da      	mvns	r2, r3
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4013      	ands	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	23a0      	movs	r3, #160	; 0xa0
 8005f6c:	05db      	lsls	r3, r3, #23
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d01f      	beq.n	8005fb2 <HAL_GPIO_Init+0x1f6>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a4a      	ldr	r2, [pc, #296]	; (80060a0 <HAL_GPIO_Init+0x2e4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d019      	beq.n	8005fae <HAL_GPIO_Init+0x1f2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a49      	ldr	r2, [pc, #292]	; (80060a4 <HAL_GPIO_Init+0x2e8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <HAL_GPIO_Init+0x1ee>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a48      	ldr	r2, [pc, #288]	; (80060a8 <HAL_GPIO_Init+0x2ec>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00d      	beq.n	8005fa6 <HAL_GPIO_Init+0x1ea>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a47      	ldr	r2, [pc, #284]	; (80060ac <HAL_GPIO_Init+0x2f0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <HAL_GPIO_Init+0x1e6>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a46      	ldr	r2, [pc, #280]	; (80060b0 <HAL_GPIO_Init+0x2f4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d101      	bne.n	8005f9e <HAL_GPIO_Init+0x1e2>
 8005f9a:	2305      	movs	r3, #5
 8005f9c:	e00a      	b.n	8005fb4 <HAL_GPIO_Init+0x1f8>
 8005f9e:	2306      	movs	r3, #6
 8005fa0:	e008      	b.n	8005fb4 <HAL_GPIO_Init+0x1f8>
 8005fa2:	2304      	movs	r3, #4
 8005fa4:	e006      	b.n	8005fb4 <HAL_GPIO_Init+0x1f8>
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e004      	b.n	8005fb4 <HAL_GPIO_Init+0x1f8>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e002      	b.n	8005fb4 <HAL_GPIO_Init+0x1f8>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e000      	b.n	8005fb4 <HAL_GPIO_Init+0x1f8>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	2103      	movs	r1, #3
 8005fb8:	400a      	ands	r2, r1
 8005fba:	0092      	lsls	r2, r2, #2
 8005fbc:	4093      	lsls	r3, r2
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fc4:	4935      	ldr	r1, [pc, #212]	; (800609c <HAL_GPIO_Init+0x2e0>)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	089b      	lsrs	r3, r3, #2
 8005fca:	3302      	adds	r3, #2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fd2:	4b38      	ldr	r3, [pc, #224]	; (80060b4 <HAL_GPIO_Init+0x2f8>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	43da      	mvns	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	035b      	lsls	r3, r3, #13
 8005fea:	4013      	ands	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005ff6:	4b2f      	ldr	r3, [pc, #188]	; (80060b4 <HAL_GPIO_Init+0x2f8>)
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005ffc:	4b2d      	ldr	r3, [pc, #180]	; (80060b4 <HAL_GPIO_Init+0x2f8>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	43da      	mvns	r2, r3
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	4013      	ands	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	2380      	movs	r3, #128	; 0x80
 8006012:	039b      	lsls	r3, r3, #14
 8006014:	4013      	ands	r3, r2
 8006016:	d003      	beq.n	8006020 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006020:	4b24      	ldr	r3, [pc, #144]	; (80060b4 <HAL_GPIO_Init+0x2f8>)
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8006026:	4b23      	ldr	r3, [pc, #140]	; (80060b4 <HAL_GPIO_Init+0x2f8>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	43da      	mvns	r2, r3
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4013      	ands	r3, r2
 8006034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	029b      	lsls	r3, r3, #10
 800603e:	4013      	ands	r3, r2
 8006040:	d003      	beq.n	800604a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800604a:	4b1a      	ldr	r3, [pc, #104]	; (80060b4 <HAL_GPIO_Init+0x2f8>)
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006050:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <HAL_GPIO_Init+0x2f8>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	43da      	mvns	r2, r3
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4013      	ands	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	025b      	lsls	r3, r3, #9
 8006068:	4013      	ands	r3, r2
 800606a:	d003      	beq.n	8006074 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006074:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <HAL_GPIO_Init+0x2f8>)
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	3301      	adds	r3, #1
 800607e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	40da      	lsrs	r2, r3
 8006088:	1e13      	subs	r3, r2, #0
 800608a:	d000      	beq.n	800608e <HAL_GPIO_Init+0x2d2>
 800608c:	e6a2      	b.n	8005dd4 <HAL_GPIO_Init+0x18>
  }
}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	46c0      	nop			; (mov r8, r8)
 8006092:	46bd      	mov	sp, r7
 8006094:	b006      	add	sp, #24
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40021000 	.word	0x40021000
 800609c:	40010000 	.word	0x40010000
 80060a0:	50000400 	.word	0x50000400
 80060a4:	50000800 	.word	0x50000800
 80060a8:	50000c00 	.word	0x50000c00
 80060ac:	50001000 	.word	0x50001000
 80060b0:	50001c00 	.word	0x50001c00
 80060b4:	40010400 	.word	0x40010400

080060b8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	0008      	movs	r0, r1
 80060c2:	0011      	movs	r1, r2
 80060c4:	1cbb      	adds	r3, r7, #2
 80060c6:	1c02      	adds	r2, r0, #0
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	1c7b      	adds	r3, r7, #1
 80060cc:	1c0a      	adds	r2, r1, #0
 80060ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060d0:	1c7b      	adds	r3, r7, #1
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060d8:	1cbb      	adds	r3, r7, #2
 80060da:	881a      	ldrh	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80060e0:	e003      	b.n	80060ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80060e2:	1cbb      	adds	r3, r7, #2
 80060e4:	881a      	ldrh	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b002      	add	sp, #8
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	000a      	movs	r2, r1
 80060fe:	1cfb      	adds	r3, r7, #3
 8006100:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8006106:	4b23      	ldr	r3, [pc, #140]	; (8006194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4013      	ands	r3, r2
 8006110:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8006112:	4b21      	ldr	r3, [pc, #132]	; (8006198 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	2201      	movs	r2, #1
 8006118:	4013      	ands	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d008      	beq.n	8006134 <HAL_PWR_EnterSLEEPMode+0x40>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8006128:	4b1a      	ldr	r3, [pc, #104]	; (8006194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	4b19      	ldr	r3, [pc, #100]	; (8006194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800612e:	491b      	ldr	r1, [pc, #108]	; (800619c <HAL_PWR_EnterSLEEPMode+0xa8>)
 8006130:	400a      	ands	r2, r1
 8006132:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8006134:	4b17      	ldr	r3, [pc, #92]	; (8006194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2203      	movs	r2, #3
 800613e:	4393      	bics	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800614a:	4b12      	ldr	r3, [pc, #72]	; (8006194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8006150:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8006156:	2104      	movs	r1, #4
 8006158:	438a      	bics	r2, r1
 800615a:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800615c:	1cfb      	adds	r3, r7, #3
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006164:	bf30      	wfi
 8006166:	e002      	b.n	800616e <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006168:	bf40      	sev
    __WFE();
 800616a:	bf20      	wfe
    __WFE();
 800616c:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <HAL_PWR_EnterSLEEPMode+0x94>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d006      	beq.n	8006188 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800617a:	4b06      	ldr	r3, [pc, #24]	; (8006194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8006180:	2180      	movs	r1, #128	; 0x80
 8006182:	0089      	lsls	r1, r1, #2
 8006184:	430a      	orrs	r2, r1
 8006186:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8006188:	46c0      	nop			; (mov r8, r8)

}
 800618a:	46c0      	nop			; (mov r8, r8)
 800618c:	46bd      	mov	sp, r7
 800618e:	b006      	add	sp, #24
 8006190:	bd80      	pop	{r7, pc}
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	40007000 	.word	0x40007000
 8006198:	40010000 	.word	0x40010000
 800619c:	fffffdff 	.word	0xfffffdff
 80061a0:	e000ed00 	.word	0xe000ed00

080061a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061a4:	b5b0      	push	{r4, r5, r7, lr}
 80061a6:	b08a      	sub	sp, #40	; 0x28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f000 fb6c 	bl	8006890 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061b8:	4bc8      	ldr	r3, [pc, #800]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	220c      	movs	r2, #12
 80061be:	4013      	ands	r3, r2
 80061c0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061c2:	4bc6      	ldr	r3, [pc, #792]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	2380      	movs	r3, #128	; 0x80
 80061c8:	025b      	lsls	r3, r3, #9
 80061ca:	4013      	ands	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2201      	movs	r2, #1
 80061d4:	4013      	ands	r3, r2
 80061d6:	d100      	bne.n	80061da <HAL_RCC_OscConfig+0x36>
 80061d8:	e07d      	b.n	80062d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d007      	beq.n	80061f0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	d112      	bne.n	800620c <HAL_RCC_OscConfig+0x68>
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	2380      	movs	r3, #128	; 0x80
 80061ea:	025b      	lsls	r3, r3, #9
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d10d      	bne.n	800620c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061f0:	4bba      	ldr	r3, [pc, #744]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	029b      	lsls	r3, r3, #10
 80061f8:	4013      	ands	r3, r2
 80061fa:	d100      	bne.n	80061fe <HAL_RCC_OscConfig+0x5a>
 80061fc:	e06a      	b.n	80062d4 <HAL_RCC_OscConfig+0x130>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d166      	bne.n	80062d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f000 fb42 	bl	8006890 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	025b      	lsls	r3, r3, #9
 8006214:	429a      	cmp	r2, r3
 8006216:	d107      	bne.n	8006228 <HAL_RCC_OscConfig+0x84>
 8006218:	4bb0      	ldr	r3, [pc, #704]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	4baf      	ldr	r3, [pc, #700]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 800621e:	2180      	movs	r1, #128	; 0x80
 8006220:	0249      	lsls	r1, r1, #9
 8006222:	430a      	orrs	r2, r1
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e027      	b.n	8006278 <HAL_RCC_OscConfig+0xd4>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	23a0      	movs	r3, #160	; 0xa0
 800622e:	02db      	lsls	r3, r3, #11
 8006230:	429a      	cmp	r2, r3
 8006232:	d10e      	bne.n	8006252 <HAL_RCC_OscConfig+0xae>
 8006234:	4ba9      	ldr	r3, [pc, #676]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	4ba8      	ldr	r3, [pc, #672]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 800623a:	2180      	movs	r1, #128	; 0x80
 800623c:	02c9      	lsls	r1, r1, #11
 800623e:	430a      	orrs	r2, r1
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	4ba6      	ldr	r3, [pc, #664]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4ba5      	ldr	r3, [pc, #660]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006248:	2180      	movs	r1, #128	; 0x80
 800624a:	0249      	lsls	r1, r1, #9
 800624c:	430a      	orrs	r2, r1
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	e012      	b.n	8006278 <HAL_RCC_OscConfig+0xd4>
 8006252:	4ba2      	ldr	r3, [pc, #648]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	4ba1      	ldr	r3, [pc, #644]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006258:	49a1      	ldr	r1, [pc, #644]	; (80064e0 <HAL_RCC_OscConfig+0x33c>)
 800625a:	400a      	ands	r2, r1
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	4b9f      	ldr	r3, [pc, #636]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	2380      	movs	r3, #128	; 0x80
 8006264:	025b      	lsls	r3, r3, #9
 8006266:	4013      	ands	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4b9b      	ldr	r3, [pc, #620]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	4b9a      	ldr	r3, [pc, #616]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006272:	499c      	ldr	r1, [pc, #624]	; (80064e4 <HAL_RCC_OscConfig+0x340>)
 8006274:	400a      	ands	r2, r1
 8006276:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d014      	beq.n	80062aa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006280:	f7fe fd40 	bl	8004d04 <HAL_GetTick>
 8006284:	0003      	movs	r3, r0
 8006286:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800628a:	f7fe fd3b 	bl	8004d04 <HAL_GetTick>
 800628e:	0002      	movs	r2, r0
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b64      	cmp	r3, #100	; 0x64
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e2f9      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800629c:	4b8f      	ldr	r3, [pc, #572]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	029b      	lsls	r3, r3, #10
 80062a4:	4013      	ands	r3, r2
 80062a6:	d0f0      	beq.n	800628a <HAL_RCC_OscConfig+0xe6>
 80062a8:	e015      	b.n	80062d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062aa:	f7fe fd2b 	bl	8004d04 <HAL_GetTick>
 80062ae:	0003      	movs	r3, r0
 80062b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b4:	f7fe fd26 	bl	8004d04 <HAL_GetTick>
 80062b8:	0002      	movs	r2, r0
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	; 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e2e4      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062c6:	4b85      	ldr	r3, [pc, #532]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	2380      	movs	r3, #128	; 0x80
 80062cc:	029b      	lsls	r3, r3, #10
 80062ce:	4013      	ands	r3, r2
 80062d0:	d1f0      	bne.n	80062b4 <HAL_RCC_OscConfig+0x110>
 80062d2:	e000      	b.n	80062d6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2202      	movs	r2, #2
 80062dc:	4013      	ands	r3, r2
 80062de:	d100      	bne.n	80062e2 <HAL_RCC_OscConfig+0x13e>
 80062e0:	e099      	b.n	8006416 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	2220      	movs	r2, #32
 80062ec:	4013      	ands	r3, r2
 80062ee:	d009      	beq.n	8006304 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80062f0:	4b7a      	ldr	r3, [pc, #488]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4b79      	ldr	r3, [pc, #484]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80062f6:	2120      	movs	r1, #32
 80062f8:	430a      	orrs	r2, r1
 80062fa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	2220      	movs	r2, #32
 8006300:	4393      	bics	r3, r2
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	2b04      	cmp	r3, #4
 8006308:	d005      	beq.n	8006316 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	2b0c      	cmp	r3, #12
 800630e:	d13e      	bne.n	800638e <HAL_RCC_OscConfig+0x1ea>
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d13b      	bne.n	800638e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006316:	4b71      	ldr	r3, [pc, #452]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2204      	movs	r2, #4
 800631c:	4013      	ands	r3, r2
 800631e:	d004      	beq.n	800632a <HAL_RCC_OscConfig+0x186>
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e2b2      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632a:	4b6c      	ldr	r3, [pc, #432]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	4a6e      	ldr	r2, [pc, #440]	; (80064e8 <HAL_RCC_OscConfig+0x344>)
 8006330:	4013      	ands	r3, r2
 8006332:	0019      	movs	r1, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	021a      	lsls	r2, r3, #8
 800633a:	4b68      	ldr	r3, [pc, #416]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 800633c:	430a      	orrs	r2, r1
 800633e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006340:	4b66      	ldr	r3, [pc, #408]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2209      	movs	r2, #9
 8006346:	4393      	bics	r3, r2
 8006348:	0019      	movs	r1, r3
 800634a:	4b64      	ldr	r3, [pc, #400]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 800634c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634e:	430a      	orrs	r2, r1
 8006350:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006352:	f000 fbeb 	bl	8006b2c <HAL_RCC_GetSysClockFreq>
 8006356:	0001      	movs	r1, r0
 8006358:	4b60      	ldr	r3, [pc, #384]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	091b      	lsrs	r3, r3, #4
 800635e:	220f      	movs	r2, #15
 8006360:	4013      	ands	r3, r2
 8006362:	4a62      	ldr	r2, [pc, #392]	; (80064ec <HAL_RCC_OscConfig+0x348>)
 8006364:	5cd3      	ldrb	r3, [r2, r3]
 8006366:	000a      	movs	r2, r1
 8006368:	40da      	lsrs	r2, r3
 800636a:	4b61      	ldr	r3, [pc, #388]	; (80064f0 <HAL_RCC_OscConfig+0x34c>)
 800636c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800636e:	4b61      	ldr	r3, [pc, #388]	; (80064f4 <HAL_RCC_OscConfig+0x350>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2513      	movs	r5, #19
 8006374:	197c      	adds	r4, r7, r5
 8006376:	0018      	movs	r0, r3
 8006378:	f7fe fc7e 	bl	8004c78 <HAL_InitTick>
 800637c:	0003      	movs	r3, r0
 800637e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006380:	197b      	adds	r3, r7, r5
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d046      	beq.n	8006416 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8006388:	197b      	adds	r3, r7, r5
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	e280      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	d027      	beq.n	80063e4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006394:	4b51      	ldr	r3, [pc, #324]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2209      	movs	r2, #9
 800639a:	4393      	bics	r3, r2
 800639c:	0019      	movs	r1, r3
 800639e:	4b4f      	ldr	r3, [pc, #316]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80063a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a2:	430a      	orrs	r2, r1
 80063a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a6:	f7fe fcad 	bl	8004d04 <HAL_GetTick>
 80063aa:	0003      	movs	r3, r0
 80063ac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063b0:	f7fe fca8 	bl	8004d04 <HAL_GetTick>
 80063b4:	0002      	movs	r2, r0
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e266      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063c2:	4b46      	ldr	r3, [pc, #280]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2204      	movs	r2, #4
 80063c8:	4013      	ands	r3, r2
 80063ca:	d0f1      	beq.n	80063b0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063cc:	4b43      	ldr	r3, [pc, #268]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	4a45      	ldr	r2, [pc, #276]	; (80064e8 <HAL_RCC_OscConfig+0x344>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	0019      	movs	r1, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	021a      	lsls	r2, r3, #8
 80063dc:	4b3f      	ldr	r3, [pc, #252]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	e018      	b.n	8006416 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063e4:	4b3d      	ldr	r3, [pc, #244]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	4b3c      	ldr	r3, [pc, #240]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80063ea:	2101      	movs	r1, #1
 80063ec:	438a      	bics	r2, r1
 80063ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f0:	f7fe fc88 	bl	8004d04 <HAL_GetTick>
 80063f4:	0003      	movs	r3, r0
 80063f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063fa:	f7fe fc83 	bl	8004d04 <HAL_GetTick>
 80063fe:	0002      	movs	r2, r0
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e241      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800640c:	4b33      	ldr	r3, [pc, #204]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2204      	movs	r2, #4
 8006412:	4013      	ands	r3, r2
 8006414:	d1f1      	bne.n	80063fa <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2210      	movs	r2, #16
 800641c:	4013      	ands	r3, r2
 800641e:	d100      	bne.n	8006422 <HAL_RCC_OscConfig+0x27e>
 8006420:	e0a1      	b.n	8006566 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d140      	bne.n	80064aa <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006428:	4b2c      	ldr	r3, [pc, #176]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	2380      	movs	r3, #128	; 0x80
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4013      	ands	r3, r2
 8006432:	d005      	beq.n	8006440 <HAL_RCC_OscConfig+0x29c>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e227      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006440:	4b26      	ldr	r3, [pc, #152]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4a2c      	ldr	r2, [pc, #176]	; (80064f8 <HAL_RCC_OscConfig+0x354>)
 8006446:	4013      	ands	r3, r2
 8006448:	0019      	movs	r1, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	4b23      	ldr	r3, [pc, #140]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006450:	430a      	orrs	r2, r1
 8006452:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006454:	4b21      	ldr	r3, [pc, #132]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	0a19      	lsrs	r1, r3, #8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	061a      	lsls	r2, r3, #24
 8006462:	4b1e      	ldr	r3, [pc, #120]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006464:	430a      	orrs	r2, r1
 8006466:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	0b5b      	lsrs	r3, r3, #13
 800646e:	3301      	adds	r3, #1
 8006470:	2280      	movs	r2, #128	; 0x80
 8006472:	0212      	lsls	r2, r2, #8
 8006474:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006476:	4b19      	ldr	r3, [pc, #100]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	210f      	movs	r1, #15
 800647e:	400b      	ands	r3, r1
 8006480:	491a      	ldr	r1, [pc, #104]	; (80064ec <HAL_RCC_OscConfig+0x348>)
 8006482:	5ccb      	ldrb	r3, [r1, r3]
 8006484:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006486:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <HAL_RCC_OscConfig+0x34c>)
 8006488:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800648a:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <HAL_RCC_OscConfig+0x350>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2513      	movs	r5, #19
 8006490:	197c      	adds	r4, r7, r5
 8006492:	0018      	movs	r0, r3
 8006494:	f7fe fbf0 	bl	8004c78 <HAL_InitTick>
 8006498:	0003      	movs	r3, r0
 800649a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800649c:	197b      	adds	r3, r7, r5
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d060      	beq.n	8006566 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80064a4:	197b      	adds	r3, r7, r5
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	e1f2      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d03f      	beq.n	8006532 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	4b09      	ldr	r3, [pc, #36]	; (80064dc <HAL_RCC_OscConfig+0x338>)
 80064b8:	2180      	movs	r1, #128	; 0x80
 80064ba:	0049      	lsls	r1, r1, #1
 80064bc:	430a      	orrs	r2, r1
 80064be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c0:	f7fe fc20 	bl	8004d04 <HAL_GetTick>
 80064c4:	0003      	movs	r3, r0
 80064c6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80064c8:	e018      	b.n	80064fc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064ca:	f7fe fc1b 	bl	8004d04 <HAL_GetTick>
 80064ce:	0002      	movs	r2, r0
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d911      	bls.n	80064fc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e1d9      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
 80064dc:	40021000 	.word	0x40021000
 80064e0:	fffeffff 	.word	0xfffeffff
 80064e4:	fffbffff 	.word	0xfffbffff
 80064e8:	ffffe0ff 	.word	0xffffe0ff
 80064ec:	0800dde8 	.word	0x0800dde8
 80064f0:	2000010c 	.word	0x2000010c
 80064f4:	20000110 	.word	0x20000110
 80064f8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80064fc:	4bc9      	ldr	r3, [pc, #804]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	2380      	movs	r3, #128	; 0x80
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4013      	ands	r3, r2
 8006506:	d0e0      	beq.n	80064ca <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006508:	4bc6      	ldr	r3, [pc, #792]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	4ac6      	ldr	r2, [pc, #792]	; (8006828 <HAL_RCC_OscConfig+0x684>)
 800650e:	4013      	ands	r3, r2
 8006510:	0019      	movs	r1, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	4bc3      	ldr	r3, [pc, #780]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006518:	430a      	orrs	r2, r1
 800651a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800651c:	4bc1      	ldr	r3, [pc, #772]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	0a19      	lsrs	r1, r3, #8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	061a      	lsls	r2, r3, #24
 800652a:	4bbe      	ldr	r3, [pc, #760]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
 8006530:	e019      	b.n	8006566 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006532:	4bbc      	ldr	r3, [pc, #752]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	4bbb      	ldr	r3, [pc, #748]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006538:	49bc      	ldr	r1, [pc, #752]	; (800682c <HAL_RCC_OscConfig+0x688>)
 800653a:	400a      	ands	r2, r1
 800653c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800653e:	f7fe fbe1 	bl	8004d04 <HAL_GetTick>
 8006542:	0003      	movs	r3, r0
 8006544:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006548:	f7fe fbdc 	bl	8004d04 <HAL_GetTick>
 800654c:	0002      	movs	r2, r0
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e19a      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800655a:	4bb2      	ldr	r3, [pc, #712]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	2380      	movs	r3, #128	; 0x80
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4013      	ands	r3, r2
 8006564:	d1f0      	bne.n	8006548 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2208      	movs	r2, #8
 800656c:	4013      	ands	r3, r2
 800656e:	d036      	beq.n	80065de <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d019      	beq.n	80065ac <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006578:	4baa      	ldr	r3, [pc, #680]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 800657a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800657c:	4ba9      	ldr	r3, [pc, #676]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 800657e:	2101      	movs	r1, #1
 8006580:	430a      	orrs	r2, r1
 8006582:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006584:	f7fe fbbe 	bl	8004d04 <HAL_GetTick>
 8006588:	0003      	movs	r3, r0
 800658a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800658c:	e008      	b.n	80065a0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800658e:	f7fe fbb9 	bl	8004d04 <HAL_GetTick>
 8006592:	0002      	movs	r2, r0
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e177      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065a0:	4ba0      	ldr	r3, [pc, #640]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80065a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a4:	2202      	movs	r2, #2
 80065a6:	4013      	ands	r3, r2
 80065a8:	d0f1      	beq.n	800658e <HAL_RCC_OscConfig+0x3ea>
 80065aa:	e018      	b.n	80065de <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065ac:	4b9d      	ldr	r3, [pc, #628]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80065ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065b0:	4b9c      	ldr	r3, [pc, #624]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80065b2:	2101      	movs	r1, #1
 80065b4:	438a      	bics	r2, r1
 80065b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065b8:	f7fe fba4 	bl	8004d04 <HAL_GetTick>
 80065bc:	0003      	movs	r3, r0
 80065be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065c0:	e008      	b.n	80065d4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065c2:	f7fe fb9f 	bl	8004d04 <HAL_GetTick>
 80065c6:	0002      	movs	r2, r0
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e15d      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065d4:	4b93      	ldr	r3, [pc, #588]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80065d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d8:	2202      	movs	r2, #2
 80065da:	4013      	ands	r3, r2
 80065dc:	d1f1      	bne.n	80065c2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2204      	movs	r2, #4
 80065e4:	4013      	ands	r3, r2
 80065e6:	d100      	bne.n	80065ea <HAL_RCC_OscConfig+0x446>
 80065e8:	e0ae      	b.n	8006748 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ea:	2023      	movs	r0, #35	; 0x23
 80065ec:	183b      	adds	r3, r7, r0
 80065ee:	2200      	movs	r2, #0
 80065f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065f2:	4b8c      	ldr	r3, [pc, #560]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80065f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f6:	2380      	movs	r3, #128	; 0x80
 80065f8:	055b      	lsls	r3, r3, #21
 80065fa:	4013      	ands	r3, r2
 80065fc:	d109      	bne.n	8006612 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065fe:	4b89      	ldr	r3, [pc, #548]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006602:	4b88      	ldr	r3, [pc, #544]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006604:	2180      	movs	r1, #128	; 0x80
 8006606:	0549      	lsls	r1, r1, #21
 8006608:	430a      	orrs	r2, r1
 800660a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800660c:	183b      	adds	r3, r7, r0
 800660e:	2201      	movs	r2, #1
 8006610:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006612:	4b87      	ldr	r3, [pc, #540]	; (8006830 <HAL_RCC_OscConfig+0x68c>)
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	2380      	movs	r3, #128	; 0x80
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	4013      	ands	r3, r2
 800661c:	d11a      	bne.n	8006654 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800661e:	4b84      	ldr	r3, [pc, #528]	; (8006830 <HAL_RCC_OscConfig+0x68c>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4b83      	ldr	r3, [pc, #524]	; (8006830 <HAL_RCC_OscConfig+0x68c>)
 8006624:	2180      	movs	r1, #128	; 0x80
 8006626:	0049      	lsls	r1, r1, #1
 8006628:	430a      	orrs	r2, r1
 800662a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800662c:	f7fe fb6a 	bl	8004d04 <HAL_GetTick>
 8006630:	0003      	movs	r3, r0
 8006632:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006634:	e008      	b.n	8006648 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006636:	f7fe fb65 	bl	8004d04 <HAL_GetTick>
 800663a:	0002      	movs	r2, r0
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b64      	cmp	r3, #100	; 0x64
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e123      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006648:	4b79      	ldr	r3, [pc, #484]	; (8006830 <HAL_RCC_OscConfig+0x68c>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	2380      	movs	r3, #128	; 0x80
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	4013      	ands	r3, r2
 8006652:	d0f0      	beq.n	8006636 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	2380      	movs	r3, #128	; 0x80
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	429a      	cmp	r2, r3
 800665e:	d107      	bne.n	8006670 <HAL_RCC_OscConfig+0x4cc>
 8006660:	4b70      	ldr	r3, [pc, #448]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006664:	4b6f      	ldr	r3, [pc, #444]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006666:	2180      	movs	r1, #128	; 0x80
 8006668:	0049      	lsls	r1, r1, #1
 800666a:	430a      	orrs	r2, r1
 800666c:	651a      	str	r2, [r3, #80]	; 0x50
 800666e:	e031      	b.n	80066d4 <HAL_RCC_OscConfig+0x530>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10c      	bne.n	8006692 <HAL_RCC_OscConfig+0x4ee>
 8006678:	4b6a      	ldr	r3, [pc, #424]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 800667a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800667c:	4b69      	ldr	r3, [pc, #420]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 800667e:	496b      	ldr	r1, [pc, #428]	; (800682c <HAL_RCC_OscConfig+0x688>)
 8006680:	400a      	ands	r2, r1
 8006682:	651a      	str	r2, [r3, #80]	; 0x50
 8006684:	4b67      	ldr	r3, [pc, #412]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006688:	4b66      	ldr	r3, [pc, #408]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 800668a:	496a      	ldr	r1, [pc, #424]	; (8006834 <HAL_RCC_OscConfig+0x690>)
 800668c:	400a      	ands	r2, r1
 800668e:	651a      	str	r2, [r3, #80]	; 0x50
 8006690:	e020      	b.n	80066d4 <HAL_RCC_OscConfig+0x530>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	23a0      	movs	r3, #160	; 0xa0
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	429a      	cmp	r2, r3
 800669c:	d10e      	bne.n	80066bc <HAL_RCC_OscConfig+0x518>
 800669e:	4b61      	ldr	r3, [pc, #388]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80066a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066a2:	4b60      	ldr	r3, [pc, #384]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80066a4:	2180      	movs	r1, #128	; 0x80
 80066a6:	00c9      	lsls	r1, r1, #3
 80066a8:	430a      	orrs	r2, r1
 80066aa:	651a      	str	r2, [r3, #80]	; 0x50
 80066ac:	4b5d      	ldr	r3, [pc, #372]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80066ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066b0:	4b5c      	ldr	r3, [pc, #368]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80066b2:	2180      	movs	r1, #128	; 0x80
 80066b4:	0049      	lsls	r1, r1, #1
 80066b6:	430a      	orrs	r2, r1
 80066b8:	651a      	str	r2, [r3, #80]	; 0x50
 80066ba:	e00b      	b.n	80066d4 <HAL_RCC_OscConfig+0x530>
 80066bc:	4b59      	ldr	r3, [pc, #356]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80066be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066c0:	4b58      	ldr	r3, [pc, #352]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80066c2:	495a      	ldr	r1, [pc, #360]	; (800682c <HAL_RCC_OscConfig+0x688>)
 80066c4:	400a      	ands	r2, r1
 80066c6:	651a      	str	r2, [r3, #80]	; 0x50
 80066c8:	4b56      	ldr	r3, [pc, #344]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80066ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066cc:	4b55      	ldr	r3, [pc, #340]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80066ce:	4959      	ldr	r1, [pc, #356]	; (8006834 <HAL_RCC_OscConfig+0x690>)
 80066d0:	400a      	ands	r2, r1
 80066d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d015      	beq.n	8006708 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066dc:	f7fe fb12 	bl	8004d04 <HAL_GetTick>
 80066e0:	0003      	movs	r3, r0
 80066e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066e4:	e009      	b.n	80066fa <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e6:	f7fe fb0d 	bl	8004d04 <HAL_GetTick>
 80066ea:	0002      	movs	r2, r0
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	4a51      	ldr	r2, [pc, #324]	; (8006838 <HAL_RCC_OscConfig+0x694>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e0ca      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066fa:	4b4a      	ldr	r3, [pc, #296]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80066fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066fe:	2380      	movs	r3, #128	; 0x80
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4013      	ands	r3, r2
 8006704:	d0ef      	beq.n	80066e6 <HAL_RCC_OscConfig+0x542>
 8006706:	e014      	b.n	8006732 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006708:	f7fe fafc 	bl	8004d04 <HAL_GetTick>
 800670c:	0003      	movs	r3, r0
 800670e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006710:	e009      	b.n	8006726 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006712:	f7fe faf7 	bl	8004d04 <HAL_GetTick>
 8006716:	0002      	movs	r2, r0
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	4a46      	ldr	r2, [pc, #280]	; (8006838 <HAL_RCC_OscConfig+0x694>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e0b4      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006726:	4b3f      	ldr	r3, [pc, #252]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800672a:	2380      	movs	r3, #128	; 0x80
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4013      	ands	r3, r2
 8006730:	d1ef      	bne.n	8006712 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006732:	2323      	movs	r3, #35	; 0x23
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d105      	bne.n	8006748 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800673c:	4b39      	ldr	r3, [pc, #228]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 800673e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006740:	4b38      	ldr	r3, [pc, #224]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006742:	493e      	ldr	r1, [pc, #248]	; (800683c <HAL_RCC_OscConfig+0x698>)
 8006744:	400a      	ands	r2, r1
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d100      	bne.n	8006752 <HAL_RCC_OscConfig+0x5ae>
 8006750:	e09d      	b.n	800688e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	2b0c      	cmp	r3, #12
 8006756:	d100      	bne.n	800675a <HAL_RCC_OscConfig+0x5b6>
 8006758:	e076      	b.n	8006848 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	2b02      	cmp	r3, #2
 8006760:	d145      	bne.n	80067ee <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006762:	4b30      	ldr	r3, [pc, #192]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	4b2f      	ldr	r3, [pc, #188]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006768:	4935      	ldr	r1, [pc, #212]	; (8006840 <HAL_RCC_OscConfig+0x69c>)
 800676a:	400a      	ands	r2, r1
 800676c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800676e:	f7fe fac9 	bl	8004d04 <HAL_GetTick>
 8006772:	0003      	movs	r3, r0
 8006774:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006778:	f7fe fac4 	bl	8004d04 <HAL_GetTick>
 800677c:	0002      	movs	r2, r0
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e082      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800678a:	4b26      	ldr	r3, [pc, #152]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	2380      	movs	r3, #128	; 0x80
 8006790:	049b      	lsls	r3, r3, #18
 8006792:	4013      	ands	r3, r2
 8006794:	d1f0      	bne.n	8006778 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006796:	4b23      	ldr	r3, [pc, #140]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	4a2a      	ldr	r2, [pc, #168]	; (8006844 <HAL_RCC_OscConfig+0x6a0>)
 800679c:	4013      	ands	r3, r2
 800679e:	0019      	movs	r1, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	431a      	orrs	r2, r3
 80067b0:	4b1c      	ldr	r3, [pc, #112]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80067b2:	430a      	orrs	r2, r1
 80067b4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067b6:	4b1b      	ldr	r3, [pc, #108]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80067bc:	2180      	movs	r1, #128	; 0x80
 80067be:	0449      	lsls	r1, r1, #17
 80067c0:	430a      	orrs	r2, r1
 80067c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c4:	f7fe fa9e 	bl	8004d04 <HAL_GetTick>
 80067c8:	0003      	movs	r3, r0
 80067ca:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ce:	f7fe fa99 	bl	8004d04 <HAL_GetTick>
 80067d2:	0002      	movs	r2, r0
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e057      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80067e0:	4b10      	ldr	r3, [pc, #64]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	2380      	movs	r3, #128	; 0x80
 80067e6:	049b      	lsls	r3, r3, #18
 80067e8:	4013      	ands	r3, r2
 80067ea:	d0f0      	beq.n	80067ce <HAL_RCC_OscConfig+0x62a>
 80067ec:	e04f      	b.n	800688e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ee:	4b0d      	ldr	r3, [pc, #52]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b0c      	ldr	r3, [pc, #48]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 80067f4:	4912      	ldr	r1, [pc, #72]	; (8006840 <HAL_RCC_OscConfig+0x69c>)
 80067f6:	400a      	ands	r2, r1
 80067f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067fa:	f7fe fa83 	bl	8004d04 <HAL_GetTick>
 80067fe:	0003      	movs	r3, r0
 8006800:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006804:	f7fe fa7e 	bl	8004d04 <HAL_GetTick>
 8006808:	0002      	movs	r2, r0
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e03c      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006816:	4b03      	ldr	r3, [pc, #12]	; (8006824 <HAL_RCC_OscConfig+0x680>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	2380      	movs	r3, #128	; 0x80
 800681c:	049b      	lsls	r3, r3, #18
 800681e:	4013      	ands	r3, r2
 8006820:	d1f0      	bne.n	8006804 <HAL_RCC_OscConfig+0x660>
 8006822:	e034      	b.n	800688e <HAL_RCC_OscConfig+0x6ea>
 8006824:	40021000 	.word	0x40021000
 8006828:	ffff1fff 	.word	0xffff1fff
 800682c:	fffffeff 	.word	0xfffffeff
 8006830:	40007000 	.word	0x40007000
 8006834:	fffffbff 	.word	0xfffffbff
 8006838:	00001388 	.word	0x00001388
 800683c:	efffffff 	.word	0xefffffff
 8006840:	feffffff 	.word	0xfeffffff
 8006844:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e01d      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006854:	4b10      	ldr	r3, [pc, #64]	; (8006898 <HAL_RCC_OscConfig+0x6f4>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	2380      	movs	r3, #128	; 0x80
 800685e:	025b      	lsls	r3, r3, #9
 8006860:	401a      	ands	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006866:	429a      	cmp	r2, r3
 8006868:	d10f      	bne.n	800688a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	23f0      	movs	r3, #240	; 0xf0
 800686e:	039b      	lsls	r3, r3, #14
 8006870:	401a      	ands	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006876:	429a      	cmp	r2, r3
 8006878:	d107      	bne.n	800688a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	23c0      	movs	r3, #192	; 0xc0
 800687e:	041b      	lsls	r3, r3, #16
 8006880:	401a      	ands	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006886:	429a      	cmp	r2, r3
 8006888:	d001      	beq.n	800688e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	0018      	movs	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	b00a      	add	sp, #40	; 0x28
 8006896:	bdb0      	pop	{r4, r5, r7, pc}
 8006898:	40021000 	.word	0x40021000

0800689c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800689c:	b5b0      	push	{r4, r5, r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e128      	b.n	8006b02 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068b0:	4b96      	ldr	r3, [pc, #600]	; (8006b0c <HAL_RCC_ClockConfig+0x270>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2201      	movs	r2, #1
 80068b6:	4013      	ands	r3, r2
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d91e      	bls.n	80068fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068be:	4b93      	ldr	r3, [pc, #588]	; (8006b0c <HAL_RCC_ClockConfig+0x270>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2201      	movs	r2, #1
 80068c4:	4393      	bics	r3, r2
 80068c6:	0019      	movs	r1, r3
 80068c8:	4b90      	ldr	r3, [pc, #576]	; (8006b0c <HAL_RCC_ClockConfig+0x270>)
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80068d0:	f7fe fa18 	bl	8004d04 <HAL_GetTick>
 80068d4:	0003      	movs	r3, r0
 80068d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068d8:	e009      	b.n	80068ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068da:	f7fe fa13 	bl	8004d04 <HAL_GetTick>
 80068de:	0002      	movs	r2, r0
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	4a8a      	ldr	r2, [pc, #552]	; (8006b10 <HAL_RCC_ClockConfig+0x274>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e109      	b.n	8006b02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ee:	4b87      	ldr	r3, [pc, #540]	; (8006b0c <HAL_RCC_ClockConfig+0x270>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2201      	movs	r2, #1
 80068f4:	4013      	ands	r3, r2
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d1ee      	bne.n	80068da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2202      	movs	r2, #2
 8006902:	4013      	ands	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006906:	4b83      	ldr	r3, [pc, #524]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	22f0      	movs	r2, #240	; 0xf0
 800690c:	4393      	bics	r3, r2
 800690e:	0019      	movs	r1, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	4b7f      	ldr	r3, [pc, #508]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 8006916:	430a      	orrs	r2, r1
 8006918:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2201      	movs	r2, #1
 8006920:	4013      	ands	r3, r2
 8006922:	d100      	bne.n	8006926 <HAL_RCC_ClockConfig+0x8a>
 8006924:	e089      	b.n	8006a3a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d107      	bne.n	800693e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800692e:	4b79      	ldr	r3, [pc, #484]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	2380      	movs	r3, #128	; 0x80
 8006934:	029b      	lsls	r3, r3, #10
 8006936:	4013      	ands	r3, r2
 8006938:	d120      	bne.n	800697c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e0e1      	b.n	8006b02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b03      	cmp	r3, #3
 8006944:	d107      	bne.n	8006956 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006946:	4b73      	ldr	r3, [pc, #460]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	2380      	movs	r3, #128	; 0x80
 800694c:	049b      	lsls	r3, r3, #18
 800694e:	4013      	ands	r3, r2
 8006950:	d114      	bne.n	800697c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e0d5      	b.n	8006b02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d106      	bne.n	800696c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800695e:	4b6d      	ldr	r3, [pc, #436]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2204      	movs	r2, #4
 8006964:	4013      	ands	r3, r2
 8006966:	d109      	bne.n	800697c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0ca      	b.n	8006b02 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800696c:	4b69      	ldr	r3, [pc, #420]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	2380      	movs	r3, #128	; 0x80
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4013      	ands	r3, r2
 8006976:	d101      	bne.n	800697c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0c2      	b.n	8006b02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800697c:	4b65      	ldr	r3, [pc, #404]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	2203      	movs	r2, #3
 8006982:	4393      	bics	r3, r2
 8006984:	0019      	movs	r1, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	4b62      	ldr	r3, [pc, #392]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 800698c:	430a      	orrs	r2, r1
 800698e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006990:	f7fe f9b8 	bl	8004d04 <HAL_GetTick>
 8006994:	0003      	movs	r3, r0
 8006996:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d111      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80069a0:	e009      	b.n	80069b6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069a2:	f7fe f9af 	bl	8004d04 <HAL_GetTick>
 80069a6:	0002      	movs	r2, r0
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	4a58      	ldr	r2, [pc, #352]	; (8006b10 <HAL_RCC_ClockConfig+0x274>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e0a5      	b.n	8006b02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80069b6:	4b57      	ldr	r3, [pc, #348]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	220c      	movs	r2, #12
 80069bc:	4013      	ands	r3, r2
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d1ef      	bne.n	80069a2 <HAL_RCC_ClockConfig+0x106>
 80069c2:	e03a      	b.n	8006a3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d111      	bne.n	80069f0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069cc:	e009      	b.n	80069e2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069ce:	f7fe f999 	bl	8004d04 <HAL_GetTick>
 80069d2:	0002      	movs	r2, r0
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	4a4d      	ldr	r2, [pc, #308]	; (8006b10 <HAL_RCC_ClockConfig+0x274>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e08f      	b.n	8006b02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069e2:	4b4c      	ldr	r3, [pc, #304]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	220c      	movs	r2, #12
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b0c      	cmp	r3, #12
 80069ec:	d1ef      	bne.n	80069ce <HAL_RCC_ClockConfig+0x132>
 80069ee:	e024      	b.n	8006a3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d11b      	bne.n	8006a30 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80069f8:	e009      	b.n	8006a0e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069fa:	f7fe f983 	bl	8004d04 <HAL_GetTick>
 80069fe:	0002      	movs	r2, r0
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	4a42      	ldr	r2, [pc, #264]	; (8006b10 <HAL_RCC_ClockConfig+0x274>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e079      	b.n	8006b02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a0e:	4b41      	ldr	r3, [pc, #260]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	220c      	movs	r2, #12
 8006a14:	4013      	ands	r3, r2
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d1ef      	bne.n	80069fa <HAL_RCC_ClockConfig+0x15e>
 8006a1a:	e00e      	b.n	8006a3a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a1c:	f7fe f972 	bl	8004d04 <HAL_GetTick>
 8006a20:	0002      	movs	r2, r0
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	4a3a      	ldr	r2, [pc, #232]	; (8006b10 <HAL_RCC_ClockConfig+0x274>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e068      	b.n	8006b02 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a30:	4b38      	ldr	r3, [pc, #224]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	220c      	movs	r2, #12
 8006a36:	4013      	ands	r3, r2
 8006a38:	d1f0      	bne.n	8006a1c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a3a:	4b34      	ldr	r3, [pc, #208]	; (8006b0c <HAL_RCC_ClockConfig+0x270>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	4013      	ands	r3, r2
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d21e      	bcs.n	8006a86 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a48:	4b30      	ldr	r3, [pc, #192]	; (8006b0c <HAL_RCC_ClockConfig+0x270>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	4393      	bics	r3, r2
 8006a50:	0019      	movs	r1, r3
 8006a52:	4b2e      	ldr	r3, [pc, #184]	; (8006b0c <HAL_RCC_ClockConfig+0x270>)
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a5a:	f7fe f953 	bl	8004d04 <HAL_GetTick>
 8006a5e:	0003      	movs	r3, r0
 8006a60:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a62:	e009      	b.n	8006a78 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a64:	f7fe f94e 	bl	8004d04 <HAL_GetTick>
 8006a68:	0002      	movs	r2, r0
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	4a28      	ldr	r2, [pc, #160]	; (8006b10 <HAL_RCC_ClockConfig+0x274>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e044      	b.n	8006b02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a78:	4b24      	ldr	r3, [pc, #144]	; (8006b0c <HAL_RCC_ClockConfig+0x270>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	4013      	ands	r3, r2
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d1ee      	bne.n	8006a64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	d009      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a90:	4b20      	ldr	r3, [pc, #128]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	4a20      	ldr	r2, [pc, #128]	; (8006b18 <HAL_RCC_ClockConfig+0x27c>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	0019      	movs	r1, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	4b1d      	ldr	r3, [pc, #116]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	4013      	ands	r3, r2
 8006aac:	d00a      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006aae:	4b19      	ldr	r3, [pc, #100]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	4a1a      	ldr	r2, [pc, #104]	; (8006b1c <HAL_RCC_ClockConfig+0x280>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	0019      	movs	r1, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	00da      	lsls	r2, r3, #3
 8006abe:	4b15      	ldr	r3, [pc, #84]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ac4:	f000 f832 	bl	8006b2c <HAL_RCC_GetSysClockFreq>
 8006ac8:	0001      	movs	r1, r0
 8006aca:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <HAL_RCC_ClockConfig+0x278>)
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	091b      	lsrs	r3, r3, #4
 8006ad0:	220f      	movs	r2, #15
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	4a12      	ldr	r2, [pc, #72]	; (8006b20 <HAL_RCC_ClockConfig+0x284>)
 8006ad6:	5cd3      	ldrb	r3, [r2, r3]
 8006ad8:	000a      	movs	r2, r1
 8006ada:	40da      	lsrs	r2, r3
 8006adc:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <HAL_RCC_ClockConfig+0x288>)
 8006ade:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ae0:	4b11      	ldr	r3, [pc, #68]	; (8006b28 <HAL_RCC_ClockConfig+0x28c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	250b      	movs	r5, #11
 8006ae6:	197c      	adds	r4, r7, r5
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f7fe f8c5 	bl	8004c78 <HAL_InitTick>
 8006aee:	0003      	movs	r3, r0
 8006af0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006af2:	197b      	adds	r3, r7, r5
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006afa:	197b      	adds	r3, r7, r5
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	e000      	b.n	8006b02 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	0018      	movs	r0, r3
 8006b04:	46bd      	mov	sp, r7
 8006b06:	b004      	add	sp, #16
 8006b08:	bdb0      	pop	{r4, r5, r7, pc}
 8006b0a:	46c0      	nop			; (mov r8, r8)
 8006b0c:	40022000 	.word	0x40022000
 8006b10:	00001388 	.word	0x00001388
 8006b14:	40021000 	.word	0x40021000
 8006b18:	fffff8ff 	.word	0xfffff8ff
 8006b1c:	ffffc7ff 	.word	0xffffc7ff
 8006b20:	0800dde8 	.word	0x0800dde8
 8006b24:	2000010c 	.word	0x2000010c
 8006b28:	20000110 	.word	0x20000110

08006b2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b2c:	b5b0      	push	{r4, r5, r7, lr}
 8006b2e:	b08e      	sub	sp, #56	; 0x38
 8006b30:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006b32:	4b4c      	ldr	r3, [pc, #304]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b3a:	230c      	movs	r3, #12
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b0c      	cmp	r3, #12
 8006b40:	d014      	beq.n	8006b6c <HAL_RCC_GetSysClockFreq+0x40>
 8006b42:	d900      	bls.n	8006b46 <HAL_RCC_GetSysClockFreq+0x1a>
 8006b44:	e07b      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0x112>
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d002      	beq.n	8006b50 <HAL_RCC_GetSysClockFreq+0x24>
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d00b      	beq.n	8006b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b4e:	e076      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006b50:	4b44      	ldr	r3, [pc, #272]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2210      	movs	r2, #16
 8006b56:	4013      	ands	r3, r2
 8006b58:	d002      	beq.n	8006b60 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006b5a:	4b43      	ldr	r3, [pc, #268]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006b5c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006b5e:	e07c      	b.n	8006c5a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006b60:	4b42      	ldr	r3, [pc, #264]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x140>)
 8006b62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b64:	e079      	b.n	8006c5a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b66:	4b42      	ldr	r3, [pc, #264]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x144>)
 8006b68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b6a:	e076      	b.n	8006c5a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	0c9a      	lsrs	r2, r3, #18
 8006b70:	230f      	movs	r3, #15
 8006b72:	401a      	ands	r2, r3
 8006b74:	4b3f      	ldr	r3, [pc, #252]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x148>)
 8006b76:	5c9b      	ldrb	r3, [r3, r2]
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	0d9a      	lsrs	r2, r3, #22
 8006b7e:	2303      	movs	r3, #3
 8006b80:	4013      	ands	r3, r2
 8006b82:	3301      	adds	r3, #1
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b86:	4b37      	ldr	r3, [pc, #220]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	2380      	movs	r3, #128	; 0x80
 8006b8c:	025b      	lsls	r3, r3, #9
 8006b8e:	4013      	ands	r3, r2
 8006b90:	d01a      	beq.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
 8006b9a:	4a35      	ldr	r2, [pc, #212]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x144>)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	69b8      	ldr	r0, [r7, #24]
 8006ba0:	69f9      	ldr	r1, [r7, #28]
 8006ba2:	f7f9 fcdb 	bl	800055c <__aeabi_lmul>
 8006ba6:	0002      	movs	r2, r0
 8006ba8:	000b      	movs	r3, r1
 8006baa:	0010      	movs	r0, r2
 8006bac:	0019      	movs	r1, r3
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f7f9 fcaf 	bl	800051c <__aeabi_uldivmod>
 8006bbe:	0002      	movs	r2, r0
 8006bc0:	000b      	movs	r3, r1
 8006bc2:	0013      	movs	r3, r2
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc6:	e037      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006bc8:	4b26      	ldr	r3, [pc, #152]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x138>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2210      	movs	r2, #16
 8006bce:	4013      	ands	r3, r2
 8006bd0:	d01a      	beq.n	8006c08 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	4a23      	ldr	r2, [pc, #140]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	68b8      	ldr	r0, [r7, #8]
 8006be0:	68f9      	ldr	r1, [r7, #12]
 8006be2:	f7f9 fcbb 	bl	800055c <__aeabi_lmul>
 8006be6:	0002      	movs	r2, r0
 8006be8:	000b      	movs	r3, r1
 8006bea:	0010      	movs	r0, r2
 8006bec:	0019      	movs	r1, r3
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	607b      	str	r3, [r7, #4]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f7f9 fc8f 	bl	800051c <__aeabi_uldivmod>
 8006bfe:	0002      	movs	r2, r0
 8006c00:	000b      	movs	r3, r1
 8006c02:	0013      	movs	r3, r2
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
 8006c06:	e017      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	0019      	movs	r1, r3
 8006c10:	4a16      	ldr	r2, [pc, #88]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x140>)
 8006c12:	2300      	movs	r3, #0
 8006c14:	f7f9 fca2 	bl	800055c <__aeabi_lmul>
 8006c18:	0002      	movs	r2, r0
 8006c1a:	000b      	movs	r3, r1
 8006c1c:	0010      	movs	r0, r2
 8006c1e:	0019      	movs	r1, r3
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	001c      	movs	r4, r3
 8006c24:	2300      	movs	r3, #0
 8006c26:	001d      	movs	r5, r3
 8006c28:	0022      	movs	r2, r4
 8006c2a:	002b      	movs	r3, r5
 8006c2c:	f7f9 fc76 	bl	800051c <__aeabi_uldivmod>
 8006c30:	0002      	movs	r2, r0
 8006c32:	000b      	movs	r3, r1
 8006c34:	0013      	movs	r3, r2
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006c3c:	e00d      	b.n	8006c5a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006c3e:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x138>)
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	0b5b      	lsrs	r3, r3, #13
 8006c44:	2207      	movs	r2, #7
 8006c46:	4013      	ands	r3, r2
 8006c48:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	2280      	movs	r2, #128	; 0x80
 8006c50:	0212      	lsls	r2, r2, #8
 8006c52:	409a      	lsls	r2, r3
 8006c54:	0013      	movs	r3, r2
 8006c56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006c58:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	b00e      	add	sp, #56	; 0x38
 8006c62:	bdb0      	pop	{r4, r5, r7, pc}
 8006c64:	40021000 	.word	0x40021000
 8006c68:	003d0900 	.word	0x003d0900
 8006c6c:	00f42400 	.word	0x00f42400
 8006c70:	007a1200 	.word	0x007a1200
 8006c74:	0800de00 	.word	0x0800de00

08006c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c7c:	4b02      	ldr	r3, [pc, #8]	; (8006c88 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
}
 8006c80:	0018      	movs	r0, r3
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	2000010c 	.word	0x2000010c

08006c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c90:	f7ff fff2 	bl	8006c78 <HAL_RCC_GetHCLKFreq>
 8006c94:	0001      	movs	r1, r0
 8006c96:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	0a1b      	lsrs	r3, r3, #8
 8006c9c:	2207      	movs	r2, #7
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ca2:	5cd3      	ldrb	r3, [r2, r3]
 8006ca4:	40d9      	lsrs	r1, r3
 8006ca6:	000b      	movs	r3, r1
}
 8006ca8:	0018      	movs	r0, r3
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	0800ddf8 	.word	0x0800ddf8

08006cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006cbc:	f7ff ffdc 	bl	8006c78 <HAL_RCC_GetHCLKFreq>
 8006cc0:	0001      	movs	r1, r0
 8006cc2:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	0adb      	lsrs	r3, r3, #11
 8006cc8:	2207      	movs	r2, #7
 8006cca:	4013      	ands	r3, r2
 8006ccc:	4a04      	ldr	r2, [pc, #16]	; (8006ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cce:	5cd3      	ldrb	r3, [r2, r3]
 8006cd0:	40d9      	lsrs	r1, r3
 8006cd2:	000b      	movs	r3, r1
}
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	46c0      	nop			; (mov r8, r8)
 8006cdc:	40021000 	.word	0x40021000
 8006ce0:	0800ddf8 	.word	0x0800ddf8

08006ce4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006cec:	2017      	movs	r0, #23
 8006cee:	183b      	adds	r3, r7, r0
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	d100      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8006cfe:	e0c7      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d00:	4b93      	ldr	r3, [pc, #588]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d04:	2380      	movs	r3, #128	; 0x80
 8006d06:	055b      	lsls	r3, r3, #21
 8006d08:	4013      	ands	r3, r2
 8006d0a:	d109      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d0c:	4b90      	ldr	r3, [pc, #576]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d10:	4b8f      	ldr	r3, [pc, #572]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006d12:	2180      	movs	r1, #128	; 0x80
 8006d14:	0549      	lsls	r1, r1, #21
 8006d16:	430a      	orrs	r2, r1
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006d1a:	183b      	adds	r3, r7, r0
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d20:	4b8c      	ldr	r3, [pc, #560]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	2380      	movs	r3, #128	; 0x80
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d11a      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d2c:	4b89      	ldr	r3, [pc, #548]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	4b88      	ldr	r3, [pc, #544]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8006d32:	2180      	movs	r1, #128	; 0x80
 8006d34:	0049      	lsls	r1, r1, #1
 8006d36:	430a      	orrs	r2, r1
 8006d38:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d3a:	f7fd ffe3 	bl	8004d04 <HAL_GetTick>
 8006d3e:	0003      	movs	r3, r0
 8006d40:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d42:	e008      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d44:	f7fd ffde 	bl	8004d04 <HAL_GetTick>
 8006d48:	0002      	movs	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b64      	cmp	r3, #100	; 0x64
 8006d50:	d901      	bls.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e0f8      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d56:	4b7f      	ldr	r3, [pc, #508]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	2380      	movs	r3, #128	; 0x80
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d0f0      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006d62:	4b7b      	ldr	r3, [pc, #492]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	23c0      	movs	r3, #192	; 0xc0
 8006d68:	039b      	lsls	r3, r3, #14
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	23c0      	movs	r3, #192	; 0xc0
 8006d74:	039b      	lsls	r3, r3, #14
 8006d76:	4013      	ands	r3, r2
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d013      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	23c0      	movs	r3, #192	; 0xc0
 8006d84:	029b      	lsls	r3, r3, #10
 8006d86:	401a      	ands	r2, r3
 8006d88:	23c0      	movs	r3, #192	; 0xc0
 8006d8a:	029b      	lsls	r3, r3, #10
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d10a      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d90:	4b6f      	ldr	r3, [pc, #444]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	2380      	movs	r3, #128	; 0x80
 8006d96:	029b      	lsls	r3, r3, #10
 8006d98:	401a      	ands	r2, r3
 8006d9a:	2380      	movs	r3, #128	; 0x80
 8006d9c:	029b      	lsls	r3, r3, #10
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d101      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e0d0      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006da6:	4b6a      	ldr	r3, [pc, #424]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006daa:	23c0      	movs	r3, #192	; 0xc0
 8006dac:	029b      	lsls	r3, r3, #10
 8006dae:	4013      	ands	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d03b      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	23c0      	movs	r3, #192	; 0xc0
 8006dbe:	029b      	lsls	r3, r3, #10
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d033      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	4013      	ands	r3, r2
 8006dd0:	d02e      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006dd2:	4b5f      	ldr	r3, [pc, #380]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd6:	4a60      	ldr	r2, [pc, #384]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ddc:	4b5c      	ldr	r3, [pc, #368]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006de0:	4b5b      	ldr	r3, [pc, #364]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006de2:	2180      	movs	r1, #128	; 0x80
 8006de4:	0309      	lsls	r1, r1, #12
 8006de6:	430a      	orrs	r2, r1
 8006de8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dea:	4b59      	ldr	r3, [pc, #356]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006dec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dee:	4b58      	ldr	r3, [pc, #352]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006df0:	495a      	ldr	r1, [pc, #360]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006df2:	400a      	ands	r2, r1
 8006df4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006df6:	4b56      	ldr	r3, [pc, #344]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	2380      	movs	r3, #128	; 0x80
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	4013      	ands	r3, r2
 8006e04:	d014      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e06:	f7fd ff7d 	bl	8004d04 <HAL_GetTick>
 8006e0a:	0003      	movs	r3, r0
 8006e0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e0e:	e009      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e10:	f7fd ff78 	bl	8004d04 <HAL_GetTick>
 8006e14:	0002      	movs	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	4a51      	ldr	r2, [pc, #324]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e091      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e24:	4b4a      	ldr	r3, [pc, #296]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e28:	2380      	movs	r3, #128	; 0x80
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	d0ef      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2220      	movs	r2, #32
 8006e36:	4013      	ands	r3, r2
 8006e38:	d01f      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	23c0      	movs	r3, #192	; 0xc0
 8006e40:	029b      	lsls	r3, r3, #10
 8006e42:	401a      	ands	r2, r3
 8006e44:	23c0      	movs	r3, #192	; 0xc0
 8006e46:	029b      	lsls	r3, r3, #10
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d10c      	bne.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006e4c:	4b40      	ldr	r3, [pc, #256]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a44      	ldr	r2, [pc, #272]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	0019      	movs	r1, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	23c0      	movs	r3, #192	; 0xc0
 8006e5c:	039b      	lsls	r3, r3, #14
 8006e5e:	401a      	ands	r2, r3
 8006e60:	4b3b      	ldr	r3, [pc, #236]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e62:	430a      	orrs	r2, r1
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	4b3a      	ldr	r3, [pc, #232]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	23c0      	movs	r3, #192	; 0xc0
 8006e70:	029b      	lsls	r3, r3, #10
 8006e72:	401a      	ands	r2, r3
 8006e74:	4b36      	ldr	r3, [pc, #216]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e76:	430a      	orrs	r2, r1
 8006e78:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006e7a:	2317      	movs	r3, #23
 8006e7c:	18fb      	adds	r3, r7, r3
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d105      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e84:	4b32      	ldr	r3, [pc, #200]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e88:	4b31      	ldr	r3, [pc, #196]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e8a:	4937      	ldr	r1, [pc, #220]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006e8c:	400a      	ands	r2, r1
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2201      	movs	r2, #1
 8006e96:	4013      	ands	r3, r2
 8006e98:	d009      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e9a:	4b2d      	ldr	r3, [pc, #180]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	4393      	bics	r3, r2
 8006ea2:	0019      	movs	r1, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	4b29      	ldr	r3, [pc, #164]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	d009      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006eb8:	4b25      	ldr	r3, [pc, #148]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ebc:	220c      	movs	r2, #12
 8006ebe:	4393      	bics	r3, r2
 8006ec0:	0019      	movs	r1, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	4b22      	ldr	r3, [pc, #136]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2204      	movs	r2, #4
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	d009      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ed6:	4b1e      	ldr	r3, [pc, #120]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eda:	4a24      	ldr	r2, [pc, #144]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	0019      	movs	r1, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691a      	ldr	r2, [r3, #16]
 8006ee4:	4b1a      	ldr	r3, [pc, #104]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2208      	movs	r2, #8
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	d009      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ef4:	4b16      	ldr	r3, [pc, #88]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef8:	4a1d      	ldr	r2, [pc, #116]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006efa:	4013      	ands	r3, r2
 8006efc:	0019      	movs	r1, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695a      	ldr	r2, [r3, #20]
 8006f02:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f04:	430a      	orrs	r2, r1
 8006f06:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	2380      	movs	r3, #128	; 0x80
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	4013      	ands	r3, r2
 8006f12:	d009      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f14:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f18:	4a0f      	ldr	r2, [pc, #60]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	0019      	movs	r1, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	699a      	ldr	r2, [r3, #24]
 8006f22:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f24:	430a      	orrs	r2, r1
 8006f26:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2280      	movs	r2, #128	; 0x80
 8006f2e:	4013      	ands	r3, r2
 8006f30:	d009      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006f32:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f36:	4a0f      	ldr	r2, [pc, #60]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	0019      	movs	r1, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	4b03      	ldr	r3, [pc, #12]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f42:	430a      	orrs	r2, r1
 8006f44:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	0018      	movs	r0, r3
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	b006      	add	sp, #24
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40021000 	.word	0x40021000
 8006f54:	40007000 	.word	0x40007000
 8006f58:	fffcffff 	.word	0xfffcffff
 8006f5c:	fff7ffff 	.word	0xfff7ffff
 8006f60:	00001388 	.word	0x00001388
 8006f64:	ffcfffff 	.word	0xffcfffff
 8006f68:	efffffff 	.word	0xefffffff
 8006f6c:	fffff3ff 	.word	0xfffff3ff
 8006f70:	ffffcfff 	.word	0xffffcfff
 8006f74:	fff3ffff 	.word	0xfff3ffff

08006f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e032      	b.n	8006ff0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2239      	movs	r2, #57	; 0x39
 8006f8e:	5c9b      	ldrb	r3, [r3, r2]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d107      	bne.n	8006fa6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2238      	movs	r2, #56	; 0x38
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7fd fc6d 	bl	8004880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2239      	movs	r2, #57	; 0x39
 8006faa:	2102      	movs	r1, #2
 8006fac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	0019      	movs	r1, r3
 8006fb8:	0010      	movs	r0, r2
 8006fba:	f000 facd 	bl	8007558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	223e      	movs	r2, #62	; 0x3e
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	223a      	movs	r2, #58	; 0x3a
 8006fca:	2101      	movs	r1, #1
 8006fcc:	5499      	strb	r1, [r3, r2]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	223b      	movs	r2, #59	; 0x3b
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	5499      	strb	r1, [r3, r2]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	223c      	movs	r2, #60	; 0x3c
 8006fda:	2101      	movs	r1, #1
 8006fdc:	5499      	strb	r1, [r3, r2]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	223d      	movs	r2, #61	; 0x3d
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2239      	movs	r2, #57	; 0x39
 8006fea:	2101      	movs	r1, #1
 8006fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	b002      	add	sp, #8
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2239      	movs	r2, #57	; 0x39
 8007004:	5c9b      	ldrb	r3, [r3, r2]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b01      	cmp	r3, #1
 800700a:	d001      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e03b      	b.n	8007088 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2239      	movs	r2, #57	; 0x39
 8007014:	2102      	movs	r1, #2
 8007016:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2101      	movs	r1, #1
 8007024:	430a      	orrs	r2, r1
 8007026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	2380      	movs	r3, #128	; 0x80
 800702e:	05db      	lsls	r3, r3, #23
 8007030:	429a      	cmp	r2, r3
 8007032:	d00e      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x5a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a15      	ldr	r2, [pc, #84]	; (8007090 <HAL_TIM_Base_Start_IT+0x98>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d009      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x5a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a14      	ldr	r2, [pc, #80]	; (8007094 <HAL_TIM_Base_Start_IT+0x9c>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x5a>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a12      	ldr	r2, [pc, #72]	; (8007098 <HAL_TIM_Base_Start_IT+0xa0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d111      	bne.n	8007076 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	2207      	movs	r2, #7
 800705a:	4013      	ands	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b06      	cmp	r3, #6
 8007062:	d010      	beq.n	8007086 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2101      	movs	r1, #1
 8007070:	430a      	orrs	r2, r1
 8007072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007074:	e007      	b.n	8007086 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2101      	movs	r1, #1
 8007082:	430a      	orrs	r2, r1
 8007084:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	0018      	movs	r0, r3
 800708a:	46bd      	mov	sp, r7
 800708c:	b004      	add	sp, #16
 800708e:	bd80      	pop	{r7, pc}
 8007090:	40000400 	.word	0x40000400
 8007094:	40010800 	.word	0x40010800
 8007098:	40011400 	.word	0x40011400

0800709c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e032      	b.n	8007114 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2239      	movs	r2, #57	; 0x39
 80070b2:	5c9b      	ldrb	r3, [r3, r2]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d107      	bne.n	80070ca <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2238      	movs	r2, #56	; 0x38
 80070be:	2100      	movs	r1, #0
 80070c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7fd fb91 	bl	80047ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2239      	movs	r2, #57	; 0x39
 80070ce:	2102      	movs	r1, #2
 80070d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3304      	adds	r3, #4
 80070da:	0019      	movs	r1, r3
 80070dc:	0010      	movs	r0, r2
 80070de:	f000 fa3b 	bl	8007558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	223e      	movs	r2, #62	; 0x3e
 80070e6:	2101      	movs	r1, #1
 80070e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	223a      	movs	r2, #58	; 0x3a
 80070ee:	2101      	movs	r1, #1
 80070f0:	5499      	strb	r1, [r3, r2]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	223b      	movs	r2, #59	; 0x3b
 80070f6:	2101      	movs	r1, #1
 80070f8:	5499      	strb	r1, [r3, r2]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	223c      	movs	r2, #60	; 0x3c
 80070fe:	2101      	movs	r1, #1
 8007100:	5499      	strb	r1, [r3, r2]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	223d      	movs	r2, #61	; 0x3d
 8007106:	2101      	movs	r1, #1
 8007108:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2239      	movs	r2, #57	; 0x39
 800710e:	2101      	movs	r1, #1
 8007110:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	0018      	movs	r0, r3
 8007116:	46bd      	mov	sp, r7
 8007118:	b002      	add	sp, #8
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	2202      	movs	r2, #2
 800712c:	4013      	ands	r3, r2
 800712e:	2b02      	cmp	r3, #2
 8007130:	d124      	bne.n	800717c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	2202      	movs	r2, #2
 800713a:	4013      	ands	r3, r2
 800713c:	2b02      	cmp	r3, #2
 800713e:	d11d      	bne.n	800717c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2203      	movs	r2, #3
 8007146:	4252      	negs	r2, r2
 8007148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2203      	movs	r2, #3
 8007158:	4013      	ands	r3, r2
 800715a:	d004      	beq.n	8007166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	0018      	movs	r0, r3
 8007160:	f7fc fa28 	bl	80035b4 <HAL_TIM_IC_CaptureCallback>
 8007164:	e007      	b.n	8007176 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	0018      	movs	r0, r3
 800716a:	f000 f9dd 	bl	8007528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	0018      	movs	r0, r3
 8007172:	f000 f9e1 	bl	8007538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2204      	movs	r2, #4
 8007184:	4013      	ands	r3, r2
 8007186:	2b04      	cmp	r3, #4
 8007188:	d125      	bne.n	80071d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	2204      	movs	r2, #4
 8007192:	4013      	ands	r3, r2
 8007194:	2b04      	cmp	r3, #4
 8007196:	d11e      	bne.n	80071d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2205      	movs	r2, #5
 800719e:	4252      	negs	r2, r2
 80071a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	23c0      	movs	r3, #192	; 0xc0
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4013      	ands	r3, r2
 80071b4:	d004      	beq.n	80071c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	0018      	movs	r0, r3
 80071ba:	f7fc f9fb 	bl	80035b4 <HAL_TIM_IC_CaptureCallback>
 80071be:	e007      	b.n	80071d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	0018      	movs	r0, r3
 80071c4:	f000 f9b0 	bl	8007528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	0018      	movs	r0, r3
 80071cc:	f000 f9b4 	bl	8007538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	2208      	movs	r2, #8
 80071de:	4013      	ands	r3, r2
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d124      	bne.n	800722e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	2208      	movs	r2, #8
 80071ec:	4013      	ands	r3, r2
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d11d      	bne.n	800722e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2209      	movs	r2, #9
 80071f8:	4252      	negs	r2, r2
 80071fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2204      	movs	r2, #4
 8007200:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	2203      	movs	r2, #3
 800720a:	4013      	ands	r3, r2
 800720c:	d004      	beq.n	8007218 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	0018      	movs	r0, r3
 8007212:	f7fc f9cf 	bl	80035b4 <HAL_TIM_IC_CaptureCallback>
 8007216:	e007      	b.n	8007228 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	0018      	movs	r0, r3
 800721c:	f000 f984 	bl	8007528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	0018      	movs	r0, r3
 8007224:	f000 f988 	bl	8007538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	2210      	movs	r2, #16
 8007236:	4013      	ands	r3, r2
 8007238:	2b10      	cmp	r3, #16
 800723a:	d125      	bne.n	8007288 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	2210      	movs	r2, #16
 8007244:	4013      	ands	r3, r2
 8007246:	2b10      	cmp	r3, #16
 8007248:	d11e      	bne.n	8007288 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2211      	movs	r2, #17
 8007250:	4252      	negs	r2, r2
 8007252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2208      	movs	r2, #8
 8007258:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	23c0      	movs	r3, #192	; 0xc0
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4013      	ands	r3, r2
 8007266:	d004      	beq.n	8007272 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	0018      	movs	r0, r3
 800726c:	f7fc f9a2 	bl	80035b4 <HAL_TIM_IC_CaptureCallback>
 8007270:	e007      	b.n	8007282 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	0018      	movs	r0, r3
 8007276:	f000 f957 	bl	8007528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	0018      	movs	r0, r3
 800727e:	f000 f95b 	bl	8007538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2201      	movs	r2, #1
 8007290:	4013      	ands	r3, r2
 8007292:	2b01      	cmp	r3, #1
 8007294:	d10f      	bne.n	80072b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	4013      	ands	r3, r2
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d108      	bne.n	80072b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2202      	movs	r2, #2
 80072aa:	4252      	negs	r2, r2
 80072ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	0018      	movs	r0, r3
 80072b2:	f7fc f977 	bl	80035a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	2240      	movs	r2, #64	; 0x40
 80072be:	4013      	ands	r3, r2
 80072c0:	2b40      	cmp	r3, #64	; 0x40
 80072c2:	d10f      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	2240      	movs	r2, #64	; 0x40
 80072cc:	4013      	ands	r3, r2
 80072ce:	2b40      	cmp	r3, #64	; 0x40
 80072d0:	d108      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2241      	movs	r2, #65	; 0x41
 80072d8:	4252      	negs	r2, r2
 80072da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	0018      	movs	r0, r3
 80072e0:	f000 f932 	bl	8007548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072e4:	46c0      	nop			; (mov r8, r8)
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b002      	add	sp, #8
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072f8:	2317      	movs	r3, #23
 80072fa:	18fb      	adds	r3, r7, r3
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2238      	movs	r2, #56	; 0x38
 8007304:	5c9b      	ldrb	r3, [r3, r2]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d101      	bne.n	800730e <HAL_TIM_IC_ConfigChannel+0x22>
 800730a:	2302      	movs	r3, #2
 800730c:	e08c      	b.n	8007428 <HAL_TIM_IC_ConfigChannel+0x13c>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2238      	movs	r2, #56	; 0x38
 8007312:	2101      	movs	r1, #1
 8007314:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11b      	bne.n	8007354 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800732c:	f000 fa04 	bl	8007738 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	210c      	movs	r1, #12
 800733c:	438a      	bics	r2, r1
 800733e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6999      	ldr	r1, [r3, #24]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	619a      	str	r2, [r3, #24]
 8007352:	e062      	b.n	800741a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b04      	cmp	r3, #4
 8007358:	d11c      	bne.n	8007394 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800736a:	f000 fa6f 	bl	800784c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	699a      	ldr	r2, [r3, #24]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	492d      	ldr	r1, [pc, #180]	; (8007430 <HAL_TIM_IC_ConfigChannel+0x144>)
 800737a:	400a      	ands	r2, r1
 800737c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6999      	ldr	r1, [r3, #24]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	021a      	lsls	r2, r3, #8
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	619a      	str	r2, [r3, #24]
 8007392:	e042      	b.n	800741a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b08      	cmp	r3, #8
 8007398:	d11b      	bne.n	80073d2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80073aa:	f000 fac3 	bl	8007934 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69da      	ldr	r2, [r3, #28]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	210c      	movs	r1, #12
 80073ba:	438a      	bics	r2, r1
 80073bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69d9      	ldr	r1, [r3, #28]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	61da      	str	r2, [r3, #28]
 80073d0:	e023      	b.n	800741a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b0c      	cmp	r3, #12
 80073d6:	d11c      	bne.n	8007412 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80073e8:	f000 fae4 	bl	80079b4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	69da      	ldr	r2, [r3, #28]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	490e      	ldr	r1, [pc, #56]	; (8007430 <HAL_TIM_IC_ConfigChannel+0x144>)
 80073f8:	400a      	ands	r2, r1
 80073fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69d9      	ldr	r1, [r3, #28]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	021a      	lsls	r2, r3, #8
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	61da      	str	r2, [r3, #28]
 8007410:	e003      	b.n	800741a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8007412:	2317      	movs	r3, #23
 8007414:	18fb      	adds	r3, r7, r3
 8007416:	2201      	movs	r2, #1
 8007418:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2238      	movs	r2, #56	; 0x38
 800741e:	2100      	movs	r1, #0
 8007420:	5499      	strb	r1, [r3, r2]

  return status;
 8007422:	2317      	movs	r3, #23
 8007424:	18fb      	adds	r3, r7, r3
 8007426:	781b      	ldrb	r3, [r3, #0]
}
 8007428:	0018      	movs	r0, r3
 800742a:	46bd      	mov	sp, r7
 800742c:	b006      	add	sp, #24
 800742e:	bd80      	pop	{r7, pc}
 8007430:	fffff3ff 	.word	0xfffff3ff

08007434 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2238      	movs	r2, #56	; 0x38
 8007442:	5c9b      	ldrb	r3, [r3, r2]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_TIM_SlaveConfigSynchro+0x18>
 8007448:	2302      	movs	r3, #2
 800744a:	e032      	b.n	80074b2 <HAL_TIM_SlaveConfigSynchro+0x7e>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2238      	movs	r2, #56	; 0x38
 8007450:	2101      	movs	r1, #1
 8007452:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2239      	movs	r2, #57	; 0x39
 8007458:	2102      	movs	r1, #2
 800745a:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	0011      	movs	r1, r2
 8007462:	0018      	movs	r0, r3
 8007464:	f000 f8d6 	bl	8007614 <TIM_SlaveTimer_SetConfig>
 8007468:	1e03      	subs	r3, r0, #0
 800746a:	d009      	beq.n	8007480 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2239      	movs	r2, #57	; 0x39
 8007470:	2101      	movs	r1, #1
 8007472:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2238      	movs	r2, #56	; 0x38
 8007478:	2100      	movs	r1, #0
 800747a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e018      	b.n	80074b2 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2140      	movs	r1, #64	; 0x40
 800748c:	438a      	bics	r2, r1
 800748e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4908      	ldr	r1, [pc, #32]	; (80074bc <HAL_TIM_SlaveConfigSynchro+0x88>)
 800749c:	400a      	ands	r2, r1
 800749e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2239      	movs	r2, #57	; 0x39
 80074a4:	2101      	movs	r1, #1
 80074a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2238      	movs	r2, #56	; 0x38
 80074ac:	2100      	movs	r1, #0
 80074ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	0018      	movs	r0, r3
 80074b4:	46bd      	mov	sp, r7
 80074b6:	b002      	add	sp, #8
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	ffffbfff 	.word	0xffffbfff

080074c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b0c      	cmp	r3, #12
 80074d2:	d01e      	beq.n	8007512 <HAL_TIM_ReadCapturedValue+0x52>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b0c      	cmp	r3, #12
 80074d8:	d820      	bhi.n	800751c <HAL_TIM_ReadCapturedValue+0x5c>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d013      	beq.n	8007508 <HAL_TIM_ReadCapturedValue+0x48>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b08      	cmp	r3, #8
 80074e4:	d81a      	bhi.n	800751c <HAL_TIM_ReadCapturedValue+0x5c>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <HAL_TIM_ReadCapturedValue+0x34>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d005      	beq.n	80074fe <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80074f2:	e013      	b.n	800751c <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fa:	60fb      	str	r3, [r7, #12]
      break;
 80074fc:	e00f      	b.n	800751e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007504:	60fb      	str	r3, [r7, #12]
      break;
 8007506:	e00a      	b.n	800751e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750e:	60fb      	str	r3, [r7, #12]
      break;
 8007510:	e005      	b.n	800751e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007518:	60fb      	str	r3, [r7, #12]
      break;
 800751a:	e000      	b.n	800751e <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800751c:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 800751e:	68fb      	ldr	r3, [r7, #12]
}
 8007520:	0018      	movs	r0, r3
 8007522:	46bd      	mov	sp, r7
 8007524:	b004      	add	sp, #16
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007530:	46c0      	nop			; (mov r8, r8)
 8007532:	46bd      	mov	sp, r7
 8007534:	b002      	add	sp, #8
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007540:	46c0      	nop			; (mov r8, r8)
 8007542:	46bd      	mov	sp, r7
 8007544:	b002      	add	sp, #8
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007550:	46c0      	nop			; (mov r8, r8)
 8007552:	46bd      	mov	sp, r7
 8007554:	b002      	add	sp, #8
 8007556:	bd80      	pop	{r7, pc}

08007558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	2380      	movs	r3, #128	; 0x80
 800756c:	05db      	lsls	r3, r3, #23
 800756e:	429a      	cmp	r2, r3
 8007570:	d00b      	beq.n	800758a <TIM_Base_SetConfig+0x32>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a23      	ldr	r2, [pc, #140]	; (8007604 <TIM_Base_SetConfig+0xac>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d007      	beq.n	800758a <TIM_Base_SetConfig+0x32>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a22      	ldr	r2, [pc, #136]	; (8007608 <TIM_Base_SetConfig+0xb0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_Base_SetConfig+0x32>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a21      	ldr	r2, [pc, #132]	; (800760c <TIM_Base_SetConfig+0xb4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d108      	bne.n	800759c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2270      	movs	r2, #112	; 0x70
 800758e:	4393      	bics	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	2380      	movs	r3, #128	; 0x80
 80075a0:	05db      	lsls	r3, r3, #23
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d00b      	beq.n	80075be <TIM_Base_SetConfig+0x66>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a16      	ldr	r2, [pc, #88]	; (8007604 <TIM_Base_SetConfig+0xac>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d007      	beq.n	80075be <TIM_Base_SetConfig+0x66>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a15      	ldr	r2, [pc, #84]	; (8007608 <TIM_Base_SetConfig+0xb0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d003      	beq.n	80075be <TIM_Base_SetConfig+0x66>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a14      	ldr	r2, [pc, #80]	; (800760c <TIM_Base_SetConfig+0xb4>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d108      	bne.n	80075d0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4a13      	ldr	r2, [pc, #76]	; (8007610 <TIM_Base_SetConfig+0xb8>)
 80075c2:	4013      	ands	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2280      	movs	r2, #128	; 0x80
 80075d4:	4393      	bics	r3, r2
 80075d6:	001a      	movs	r2, r3
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	615a      	str	r2, [r3, #20]
}
 80075fc:	46c0      	nop			; (mov r8, r8)
 80075fe:	46bd      	mov	sp, r7
 8007600:	b004      	add	sp, #16
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40000400 	.word	0x40000400
 8007608:	40010800 	.word	0x40010800
 800760c:	40011400 	.word	0x40011400
 8007610:	fffffcff 	.word	0xfffffcff

08007614 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800761e:	2317      	movs	r3, #23
 8007620:	18fb      	adds	r3, r7, r3
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2270      	movs	r2, #112	; 0x70
 8007632:	4393      	bics	r3, r2
 8007634:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	4313      	orrs	r3, r2
 800763e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	2207      	movs	r2, #7
 8007644:	4393      	bics	r3, r2
 8007646:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b70      	cmp	r3, #112	; 0x70
 8007660:	d015      	beq.n	800768e <TIM_SlaveTimer_SetConfig+0x7a>
 8007662:	d900      	bls.n	8007666 <TIM_SlaveTimer_SetConfig+0x52>
 8007664:	e05b      	b.n	800771e <TIM_SlaveTimer_SetConfig+0x10a>
 8007666:	2b60      	cmp	r3, #96	; 0x60
 8007668:	d04f      	beq.n	800770a <TIM_SlaveTimer_SetConfig+0xf6>
 800766a:	d858      	bhi.n	800771e <TIM_SlaveTimer_SetConfig+0x10a>
 800766c:	2b50      	cmp	r3, #80	; 0x50
 800766e:	d042      	beq.n	80076f6 <TIM_SlaveTimer_SetConfig+0xe2>
 8007670:	d855      	bhi.n	800771e <TIM_SlaveTimer_SetConfig+0x10a>
 8007672:	2b40      	cmp	r3, #64	; 0x40
 8007674:	d016      	beq.n	80076a4 <TIM_SlaveTimer_SetConfig+0x90>
 8007676:	d852      	bhi.n	800771e <TIM_SlaveTimer_SetConfig+0x10a>
 8007678:	2b30      	cmp	r3, #48	; 0x30
 800767a:	d055      	beq.n	8007728 <TIM_SlaveTimer_SetConfig+0x114>
 800767c:	d84f      	bhi.n	800771e <TIM_SlaveTimer_SetConfig+0x10a>
 800767e:	2b20      	cmp	r3, #32
 8007680:	d052      	beq.n	8007728 <TIM_SlaveTimer_SetConfig+0x114>
 8007682:	d84c      	bhi.n	800771e <TIM_SlaveTimer_SetConfig+0x10a>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d04f      	beq.n	8007728 <TIM_SlaveTimer_SetConfig+0x114>
 8007688:	2b10      	cmp	r3, #16
 800768a:	d04d      	beq.n	8007728 <TIM_SlaveTimer_SetConfig+0x114>
 800768c:	e047      	b.n	800771e <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800769e:	f000 f9cf 	bl	8007a40 <TIM_ETR_SetConfig>
      break;
 80076a2:	e042      	b.n	800772a <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b05      	cmp	r3, #5
 80076aa:	d101      	bne.n	80076b0 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e03f      	b.n	8007730 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6a1a      	ldr	r2, [r3, #32]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2101      	movs	r1, #1
 80076c4:	438a      	bics	r2, r1
 80076c6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	22f0      	movs	r2, #240	; 0xf0
 80076d4:	4393      	bics	r3, r2
 80076d6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	621a      	str	r2, [r3, #32]
      break;
 80076f4:	e019      	b.n	800772a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007702:	001a      	movs	r2, r3
 8007704:	f000 f874 	bl	80077f0 <TIM_TI1_ConfigInputStage>
      break;
 8007708:	e00f      	b.n	800772a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007716:	001a      	movs	r2, r3
 8007718:	f000 f8da 	bl	80078d0 <TIM_TI2_ConfigInputStage>
      break;
 800771c:	e005      	b.n	800772a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800771e:	2317      	movs	r3, #23
 8007720:	18fb      	adds	r3, r7, r3
 8007722:	2201      	movs	r2, #1
 8007724:	701a      	strb	r2, [r3, #0]
      break;
 8007726:	e000      	b.n	800772a <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8007728:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800772a:	2317      	movs	r3, #23
 800772c:	18fb      	adds	r3, r7, r3
 800772e:	781b      	ldrb	r3, [r3, #0]
}
 8007730:	0018      	movs	r0, r3
 8007732:	46bd      	mov	sp, r7
 8007734:	b006      	add	sp, #24
 8007736:	bd80      	pop	{r7, pc}

08007738 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	2201      	movs	r2, #1
 800774c:	4393      	bics	r3, r2
 800774e:	001a      	movs	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	2380      	movs	r3, #128	; 0x80
 8007764:	05db      	lsls	r3, r3, #23
 8007766:	429a      	cmp	r2, r3
 8007768:	d00b      	beq.n	8007782 <TIM_TI1_SetConfig+0x4a>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <TIM_TI1_SetConfig+0xac>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d007      	beq.n	8007782 <TIM_TI1_SetConfig+0x4a>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4a1c      	ldr	r2, [pc, #112]	; (80077e8 <TIM_TI1_SetConfig+0xb0>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d003      	beq.n	8007782 <TIM_TI1_SetConfig+0x4a>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4a1b      	ldr	r2, [pc, #108]	; (80077ec <TIM_TI1_SetConfig+0xb4>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d101      	bne.n	8007786 <TIM_TI1_SetConfig+0x4e>
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <TIM_TI1_SetConfig+0x50>
 8007786:	2300      	movs	r3, #0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d008      	beq.n	800779e <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	2203      	movs	r2, #3
 8007790:	4393      	bics	r3, r2
 8007792:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4313      	orrs	r3, r2
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	e003      	b.n	80077a6 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2201      	movs	r2, #1
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	22f0      	movs	r2, #240	; 0xf0
 80077aa:	4393      	bics	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	22ff      	movs	r2, #255	; 0xff
 80077b4:	4013      	ands	r3, r2
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	220a      	movs	r2, #10
 80077c0:	4393      	bics	r3, r2
 80077c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	220a      	movs	r2, #10
 80077c8:	4013      	ands	r3, r2
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	621a      	str	r2, [r3, #32]
}
 80077dc:	46c0      	nop			; (mov r8, r8)
 80077de:	46bd      	mov	sp, r7
 80077e0:	b006      	add	sp, #24
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40000400 	.word	0x40000400
 80077e8:	40010800 	.word	0x40010800
 80077ec:	40011400 	.word	0x40011400

080077f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	2201      	movs	r2, #1
 8007808:	4393      	bics	r3, r2
 800780a:	001a      	movs	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	22f0      	movs	r2, #240	; 0xf0
 800781a:	4393      	bics	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	220a      	movs	r2, #10
 800782c:	4393      	bics	r3, r2
 800782e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	621a      	str	r2, [r3, #32]
}
 8007844:	46c0      	nop			; (mov r8, r8)
 8007846:	46bd      	mov	sp, r7
 8007848:	b006      	add	sp, #24
 800784a:	bd80      	pop	{r7, pc}

0800784c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	2210      	movs	r2, #16
 8007860:	4393      	bics	r3, r2
 8007862:	001a      	movs	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	4a14      	ldr	r2, [pc, #80]	; (80078c8 <TIM_TI2_SetConfig+0x7c>)
 8007878:	4013      	ands	r3, r2
 800787a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	021b      	lsls	r3, r3, #8
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	4a10      	ldr	r2, [pc, #64]	; (80078cc <TIM_TI2_SetConfig+0x80>)
 800788a:	4013      	ands	r3, r2
 800788c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	031b      	lsls	r3, r3, #12
 8007892:	041b      	lsls	r3, r3, #16
 8007894:	0c1b      	lsrs	r3, r3, #16
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4313      	orrs	r3, r2
 800789a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	22a0      	movs	r2, #160	; 0xa0
 80078a0:	4393      	bics	r3, r2
 80078a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	22a0      	movs	r2, #160	; 0xa0
 80078aa:	4013      	ands	r3, r2
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	46c0      	nop			; (mov r8, r8)
 80078c0:	46bd      	mov	sp, r7
 80078c2:	b006      	add	sp, #24
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	46c0      	nop			; (mov r8, r8)
 80078c8:	fffffcff 	.word	0xfffffcff
 80078cc:	ffff0fff 	.word	0xffff0fff

080078d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	2210      	movs	r2, #16
 80078e2:	4393      	bics	r3, r2
 80078e4:	001a      	movs	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	4a0d      	ldr	r2, [pc, #52]	; (8007930 <TIM_TI2_ConfigInputStage+0x60>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	031b      	lsls	r3, r3, #12
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	4313      	orrs	r3, r2
 8007906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	22a0      	movs	r2, #160	; 0xa0
 800790c:	4393      	bics	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	46bd      	mov	sp, r7
 800792a:	b006      	add	sp, #24
 800792c:	bd80      	pop	{r7, pc}
 800792e:	46c0      	nop			; (mov r8, r8)
 8007930:	ffff0fff 	.word	0xffff0fff

08007934 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	4a19      	ldr	r2, [pc, #100]	; (80079ac <TIM_TI3_SetConfig+0x78>)
 8007948:	401a      	ands	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2203      	movs	r2, #3
 800795e:	4393      	bics	r3, r2
 8007960:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4313      	orrs	r3, r2
 8007968:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	22f0      	movs	r2, #240	; 0xf0
 800796e:	4393      	bics	r3, r2
 8007970:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	22ff      	movs	r2, #255	; 0xff
 8007978:	4013      	ands	r3, r2
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	4313      	orrs	r3, r2
 800797e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	4a0b      	ldr	r2, [pc, #44]	; (80079b0 <TIM_TI3_SetConfig+0x7c>)
 8007984:	4013      	ands	r3, r2
 8007986:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	021a      	lsls	r2, r3, #8
 800798c:	23a0      	movs	r3, #160	; 0xa0
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	4013      	ands	r3, r2
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	621a      	str	r2, [r3, #32]
}
 80079a4:	46c0      	nop			; (mov r8, r8)
 80079a6:	46bd      	mov	sp, r7
 80079a8:	b006      	add	sp, #24
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	fffffeff 	.word	0xfffffeff
 80079b0:	fffff5ff 	.word	0xfffff5ff

080079b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <TIM_TI4_SetConfig+0x7c>)
 80079c8:	401a      	ands	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a1b      	ldr	r3, [r3, #32]
 80079d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	4a15      	ldr	r2, [pc, #84]	; (8007a34 <TIM_TI4_SetConfig+0x80>)
 80079de:	4013      	ands	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	021b      	lsls	r3, r3, #8
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	4a12      	ldr	r2, [pc, #72]	; (8007a38 <TIM_TI4_SetConfig+0x84>)
 80079f0:	4013      	ands	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	031b      	lsls	r3, r3, #12
 80079f8:	041b      	lsls	r3, r3, #16
 80079fa:	0c1b      	lsrs	r3, r3, #16
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4a0d      	ldr	r2, [pc, #52]	; (8007a3c <TIM_TI4_SetConfig+0x88>)
 8007a06:	4013      	ands	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	031a      	lsls	r2, r3, #12
 8007a0e:	23a0      	movs	r3, #160	; 0xa0
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	4013      	ands	r3, r2
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	621a      	str	r2, [r3, #32]
}
 8007a26:	46c0      	nop			; (mov r8, r8)
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	b006      	add	sp, #24
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	ffffefff 	.word	0xffffefff
 8007a34:	fffffcff 	.word	0xfffffcff
 8007a38:	ffff0fff 	.word	0xffff0fff
 8007a3c:	ffff5fff 	.word	0xffff5fff

08007a40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	4a09      	ldr	r2, [pc, #36]	; (8007a7c <TIM_ETR_SetConfig+0x3c>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	021a      	lsls	r2, r3, #8
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	609a      	str	r2, [r3, #8]
}
 8007a74:	46c0      	nop			; (mov r8, r8)
 8007a76:	46bd      	mov	sp, r7
 8007a78:	b006      	add	sp, #24
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	ffff00ff 	.word	0xffff00ff

08007a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2238      	movs	r2, #56	; 0x38
 8007a8e:	5c9b      	ldrb	r3, [r3, r2]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d101      	bne.n	8007a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e047      	b.n	8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2238      	movs	r2, #56	; 0x38
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2239      	movs	r2, #57	; 0x39
 8007aa4:	2102      	movs	r1, #2
 8007aa6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2270      	movs	r2, #112	; 0x70
 8007abc:	4393      	bics	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	2380      	movs	r3, #128	; 0x80
 8007ad8:	05db      	lsls	r3, r3, #23
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d00e      	beq.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a13      	ldr	r2, [pc, #76]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d009      	beq.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a11      	ldr	r2, [pc, #68]	; (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d004      	beq.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a10      	ldr	r2, [pc, #64]	; (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d10c      	bne.n	8007b16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2280      	movs	r2, #128	; 0x80
 8007b00:	4393      	bics	r3, r2
 8007b02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2239      	movs	r2, #57	; 0x39
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2238      	movs	r2, #56	; 0x38
 8007b22:	2100      	movs	r1, #0
 8007b24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	0018      	movs	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	b004      	add	sp, #16
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40000400 	.word	0x40000400
 8007b34:	40010800 	.word	0x40010800
 8007b38:	40011400 	.word	0x40011400

08007b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e044      	b.n	8007bd8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d107      	bne.n	8007b66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2278      	movs	r2, #120	; 0x78
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	0018      	movs	r0, r3
 8007b62:	f7fc fead 	bl	80048c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2224      	movs	r2, #36	; 0x24
 8007b6a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2101      	movs	r1, #1
 8007b78:	438a      	bics	r2, r1
 8007b7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	0018      	movs	r0, r3
 8007b80:	f000 fbca 	bl	8008318 <UART_SetConfig>
 8007b84:	0003      	movs	r3, r0
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e024      	b.n	8007bd8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f000 fe5b 	bl	8008854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	490d      	ldr	r1, [pc, #52]	; (8007be0 <HAL_UART_Init+0xa4>)
 8007baa:	400a      	ands	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	212a      	movs	r1, #42	; 0x2a
 8007bba:	438a      	bics	r2, r1
 8007bbc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2101      	movs	r1, #1
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f000 fef3 	bl	80089bc <UART_CheckIdleState>
 8007bd6:	0003      	movs	r3, r0
}
 8007bd8:	0018      	movs	r0, r3
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	b002      	add	sp, #8
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	ffffb7ff 	.word	0xffffb7ff

08007be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08a      	sub	sp, #40	; 0x28
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	603b      	str	r3, [r7, #0]
 8007bf0:	1dbb      	adds	r3, r7, #6
 8007bf2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	d000      	beq.n	8007bfe <HAL_UART_Transmit+0x1a>
 8007bfc:	e08c      	b.n	8007d18 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_UART_Transmit+0x28>
 8007c04:	1dbb      	adds	r3, r7, #6
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e084      	b.n	8007d1a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	2380      	movs	r3, #128	; 0x80
 8007c16:	015b      	lsls	r3, r3, #5
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d109      	bne.n	8007c30 <HAL_UART_Transmit+0x4c>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d105      	bne.n	8007c30 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2201      	movs	r2, #1
 8007c28:	4013      	ands	r3, r2
 8007c2a:	d001      	beq.n	8007c30 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e074      	b.n	8007d1a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2284      	movs	r2, #132	; 0x84
 8007c34:	2100      	movs	r1, #0
 8007c36:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2221      	movs	r2, #33	; 0x21
 8007c3c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c3e:	f7fd f861 	bl	8004d04 <HAL_GetTick>
 8007c42:	0003      	movs	r3, r0
 8007c44:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	1dba      	adds	r2, r7, #6
 8007c4a:	2150      	movs	r1, #80	; 0x50
 8007c4c:	8812      	ldrh	r2, [r2, #0]
 8007c4e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	1dba      	adds	r2, r7, #6
 8007c54:	2152      	movs	r1, #82	; 0x52
 8007c56:	8812      	ldrh	r2, [r2, #0]
 8007c58:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689a      	ldr	r2, [r3, #8]
 8007c5e:	2380      	movs	r3, #128	; 0x80
 8007c60:	015b      	lsls	r3, r3, #5
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d108      	bne.n	8007c78 <HAL_UART_Transmit+0x94>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d104      	bne.n	8007c78 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	e003      	b.n	8007c80 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c80:	e02f      	b.n	8007ce2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	0013      	movs	r3, r2
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2180      	movs	r1, #128	; 0x80
 8007c90:	f000 ff3c 	bl	8008b0c <UART_WaitOnFlagUntilTimeout>
 8007c94:	1e03      	subs	r3, r0, #0
 8007c96:	d004      	beq.n	8007ca2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e03b      	b.n	8007d1a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10b      	bne.n	8007cc0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	001a      	movs	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	05d2      	lsls	r2, r2, #23
 8007cb4:	0dd2      	lsrs	r2, r2, #23
 8007cb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	3302      	adds	r3, #2
 8007cbc:	61bb      	str	r3, [r7, #24]
 8007cbe:	e007      	b.n	8007cd0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	781a      	ldrb	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2252      	movs	r2, #82	; 0x52
 8007cd4:	5a9b      	ldrh	r3, [r3, r2]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b299      	uxth	r1, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2252      	movs	r2, #82	; 0x52
 8007ce0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2252      	movs	r2, #82	; 0x52
 8007ce6:	5a9b      	ldrh	r3, [r3, r2]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1c9      	bne.n	8007c82 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	0013      	movs	r3, r2
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2140      	movs	r1, #64	; 0x40
 8007cfc:	f000 ff06 	bl	8008b0c <UART_WaitOnFlagUntilTimeout>
 8007d00:	1e03      	subs	r3, r0, #0
 8007d02:	d004      	beq.n	8007d0e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2220      	movs	r2, #32
 8007d08:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e005      	b.n	8007d1a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2220      	movs	r2, #32
 8007d12:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	e000      	b.n	8007d1a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007d18:	2302      	movs	r3, #2
  }
}
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	b008      	add	sp, #32
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d24:	b590      	push	{r4, r7, lr}
 8007d26:	b0ab      	sub	sp, #172	; 0xac
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	22a4      	movs	r2, #164	; 0xa4
 8007d34:	18b9      	adds	r1, r7, r2
 8007d36:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	20a0      	movs	r0, #160	; 0xa0
 8007d40:	1839      	adds	r1, r7, r0
 8007d42:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	219c      	movs	r1, #156	; 0x9c
 8007d4c:	1879      	adds	r1, r7, r1
 8007d4e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d50:	0011      	movs	r1, r2
 8007d52:	18bb      	adds	r3, r7, r2
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a99      	ldr	r2, [pc, #612]	; (8007fbc <HAL_UART_IRQHandler+0x298>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2298      	movs	r2, #152	; 0x98
 8007d5c:	18bc      	adds	r4, r7, r2
 8007d5e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007d60:	18bb      	adds	r3, r7, r2
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d114      	bne.n	8007d92 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d68:	187b      	adds	r3, r7, r1
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	4013      	ands	r3, r2
 8007d70:	d00f      	beq.n	8007d92 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d72:	183b      	adds	r3, r7, r0
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2220      	movs	r2, #32
 8007d78:	4013      	ands	r3, r2
 8007d7a:	d00a      	beq.n	8007d92 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d100      	bne.n	8007d86 <HAL_UART_IRQHandler+0x62>
 8007d84:	e2a0      	b.n	80082c8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	0010      	movs	r0, r2
 8007d8e:	4798      	blx	r3
      }
      return;
 8007d90:	e29a      	b.n	80082c8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d92:	2398      	movs	r3, #152	; 0x98
 8007d94:	18fb      	adds	r3, r7, r3
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d100      	bne.n	8007d9e <HAL_UART_IRQHandler+0x7a>
 8007d9c:	e114      	b.n	8007fc8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007d9e:	239c      	movs	r3, #156	; 0x9c
 8007da0:	18fb      	adds	r3, r7, r3
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2201      	movs	r2, #1
 8007da6:	4013      	ands	r3, r2
 8007da8:	d106      	bne.n	8007db8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007daa:	23a0      	movs	r3, #160	; 0xa0
 8007dac:	18fb      	adds	r3, r7, r3
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a83      	ldr	r2, [pc, #524]	; (8007fc0 <HAL_UART_IRQHandler+0x29c>)
 8007db2:	4013      	ands	r3, r2
 8007db4:	d100      	bne.n	8007db8 <HAL_UART_IRQHandler+0x94>
 8007db6:	e107      	b.n	8007fc8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007db8:	23a4      	movs	r3, #164	; 0xa4
 8007dba:	18fb      	adds	r3, r7, r3
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	d012      	beq.n	8007dea <HAL_UART_IRQHandler+0xc6>
 8007dc4:	23a0      	movs	r3, #160	; 0xa0
 8007dc6:	18fb      	adds	r3, r7, r3
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	2380      	movs	r3, #128	; 0x80
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	4013      	ands	r3, r2
 8007dd0:	d00b      	beq.n	8007dea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2284      	movs	r2, #132	; 0x84
 8007dde:	589b      	ldr	r3, [r3, r2]
 8007de0:	2201      	movs	r2, #1
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2184      	movs	r1, #132	; 0x84
 8007de8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dea:	23a4      	movs	r3, #164	; 0xa4
 8007dec:	18fb      	adds	r3, r7, r3
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2202      	movs	r2, #2
 8007df2:	4013      	ands	r3, r2
 8007df4:	d011      	beq.n	8007e1a <HAL_UART_IRQHandler+0xf6>
 8007df6:	239c      	movs	r3, #156	; 0x9c
 8007df8:	18fb      	adds	r3, r7, r3
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	4013      	ands	r3, r2
 8007e00:	d00b      	beq.n	8007e1a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2202      	movs	r2, #2
 8007e08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2284      	movs	r2, #132	; 0x84
 8007e0e:	589b      	ldr	r3, [r3, r2]
 8007e10:	2204      	movs	r2, #4
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2184      	movs	r1, #132	; 0x84
 8007e18:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e1a:	23a4      	movs	r3, #164	; 0xa4
 8007e1c:	18fb      	adds	r3, r7, r3
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2204      	movs	r2, #4
 8007e22:	4013      	ands	r3, r2
 8007e24:	d011      	beq.n	8007e4a <HAL_UART_IRQHandler+0x126>
 8007e26:	239c      	movs	r3, #156	; 0x9c
 8007e28:	18fb      	adds	r3, r7, r3
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	4013      	ands	r3, r2
 8007e30:	d00b      	beq.n	8007e4a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2204      	movs	r2, #4
 8007e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2284      	movs	r2, #132	; 0x84
 8007e3e:	589b      	ldr	r3, [r3, r2]
 8007e40:	2202      	movs	r2, #2
 8007e42:	431a      	orrs	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2184      	movs	r1, #132	; 0x84
 8007e48:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e4a:	23a4      	movs	r3, #164	; 0xa4
 8007e4c:	18fb      	adds	r3, r7, r3
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2208      	movs	r2, #8
 8007e52:	4013      	ands	r3, r2
 8007e54:	d017      	beq.n	8007e86 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e56:	23a0      	movs	r3, #160	; 0xa0
 8007e58:	18fb      	adds	r3, r7, r3
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	4013      	ands	r3, r2
 8007e60:	d105      	bne.n	8007e6e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007e62:	239c      	movs	r3, #156	; 0x9c
 8007e64:	18fb      	adds	r3, r7, r3
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e6c:	d00b      	beq.n	8007e86 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2208      	movs	r2, #8
 8007e74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2284      	movs	r2, #132	; 0x84
 8007e7a:	589b      	ldr	r3, [r3, r2]
 8007e7c:	2208      	movs	r2, #8
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2184      	movs	r1, #132	; 0x84
 8007e84:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e86:	23a4      	movs	r3, #164	; 0xa4
 8007e88:	18fb      	adds	r3, r7, r3
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	2380      	movs	r3, #128	; 0x80
 8007e8e:	011b      	lsls	r3, r3, #4
 8007e90:	4013      	ands	r3, r2
 8007e92:	d013      	beq.n	8007ebc <HAL_UART_IRQHandler+0x198>
 8007e94:	23a0      	movs	r3, #160	; 0xa0
 8007e96:	18fb      	adds	r3, r7, r3
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	2380      	movs	r3, #128	; 0x80
 8007e9c:	04db      	lsls	r3, r3, #19
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	d00c      	beq.n	8007ebc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2280      	movs	r2, #128	; 0x80
 8007ea8:	0112      	lsls	r2, r2, #4
 8007eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2284      	movs	r2, #132	; 0x84
 8007eb0:	589b      	ldr	r3, [r3, r2]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2184      	movs	r1, #132	; 0x84
 8007eba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2284      	movs	r2, #132	; 0x84
 8007ec0:	589b      	ldr	r3, [r3, r2]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d100      	bne.n	8007ec8 <HAL_UART_IRQHandler+0x1a4>
 8007ec6:	e201      	b.n	80082cc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ec8:	23a4      	movs	r3, #164	; 0xa4
 8007eca:	18fb      	adds	r3, r7, r3
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	d00e      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ed4:	23a0      	movs	r3, #160	; 0xa0
 8007ed6:	18fb      	adds	r3, r7, r3
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2220      	movs	r2, #32
 8007edc:	4013      	ands	r3, r2
 8007ede:	d008      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d004      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	0010      	movs	r0, r2
 8007ef0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2284      	movs	r2, #132	; 0x84
 8007ef6:	589b      	ldr	r3, [r3, r2]
 8007ef8:	2194      	movs	r1, #148	; 0x94
 8007efa:	187a      	adds	r2, r7, r1
 8007efc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	2240      	movs	r2, #64	; 0x40
 8007f06:	4013      	ands	r3, r2
 8007f08:	2b40      	cmp	r3, #64	; 0x40
 8007f0a:	d004      	beq.n	8007f16 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f0c:	187b      	adds	r3, r7, r1
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2228      	movs	r2, #40	; 0x28
 8007f12:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f14:	d047      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f000 ff2b 	bl	8008d74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	2240      	movs	r2, #64	; 0x40
 8007f26:	4013      	ands	r3, r2
 8007f28:	2b40      	cmp	r3, #64	; 0x40
 8007f2a:	d137      	bne.n	8007f9c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8007f30:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f34:	2090      	movs	r0, #144	; 0x90
 8007f36:	183a      	adds	r2, r7, r0
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f40:	f383 8810 	msr	PRIMASK, r3
}
 8007f44:	46c0      	nop			; (mov r8, r8)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689a      	ldr	r2, [r3, #8]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2140      	movs	r1, #64	; 0x40
 8007f52:	438a      	bics	r2, r1
 8007f54:	609a      	str	r2, [r3, #8]
 8007f56:	183b      	adds	r3, r7, r0
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f5e:	f383 8810 	msr	PRIMASK, r3
}
 8007f62:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d012      	beq.n	8007f92 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f70:	4a14      	ldr	r2, [pc, #80]	; (8007fc4 <HAL_UART_IRQHandler+0x2a0>)
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f78:	0018      	movs	r0, r3
 8007f7a:	f7fd fc9d 	bl	80058b8 <HAL_DMA_Abort_IT>
 8007f7e:	1e03      	subs	r3, r0, #0
 8007f80:	d01a      	beq.n	8007fb8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f90:	e012      	b.n	8007fb8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	0018      	movs	r0, r3
 8007f96:	f000 f9b7 	bl	8008308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9a:	e00d      	b.n	8007fb8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f000 f9b2 	bl	8008308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa4:	e008      	b.n	8007fb8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	0018      	movs	r0, r3
 8007faa:	f000 f9ad 	bl	8008308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2284      	movs	r2, #132	; 0x84
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007fb6:	e189      	b.n	80082cc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb8:	46c0      	nop			; (mov r8, r8)
    return;
 8007fba:	e187      	b.n	80082cc <HAL_UART_IRQHandler+0x5a8>
 8007fbc:	0000080f 	.word	0x0000080f
 8007fc0:	04000120 	.word	0x04000120
 8007fc4:	08008e3d 	.word	0x08008e3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d000      	beq.n	8007fd2 <HAL_UART_IRQHandler+0x2ae>
 8007fd0:	e13b      	b.n	800824a <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007fd2:	23a4      	movs	r3, #164	; 0xa4
 8007fd4:	18fb      	adds	r3, r7, r3
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2210      	movs	r2, #16
 8007fda:	4013      	ands	r3, r2
 8007fdc:	d100      	bne.n	8007fe0 <HAL_UART_IRQHandler+0x2bc>
 8007fde:	e134      	b.n	800824a <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007fe0:	23a0      	movs	r3, #160	; 0xa0
 8007fe2:	18fb      	adds	r3, r7, r3
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	4013      	ands	r3, r2
 8007fea:	d100      	bne.n	8007fee <HAL_UART_IRQHandler+0x2ca>
 8007fec:	e12d      	b.n	800824a <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2210      	movs	r2, #16
 8007ff4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	2240      	movs	r2, #64	; 0x40
 8007ffe:	4013      	ands	r3, r2
 8008000:	2b40      	cmp	r3, #64	; 0x40
 8008002:	d000      	beq.n	8008006 <HAL_UART_IRQHandler+0x2e2>
 8008004:	e0a1      	b.n	800814a <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	217e      	movs	r1, #126	; 0x7e
 8008010:	187b      	adds	r3, r7, r1
 8008012:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008014:	187b      	adds	r3, r7, r1
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d100      	bne.n	800801e <HAL_UART_IRQHandler+0x2fa>
 800801c:	e158      	b.n	80082d0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2258      	movs	r2, #88	; 0x58
 8008022:	5a9b      	ldrh	r3, [r3, r2]
 8008024:	187a      	adds	r2, r7, r1
 8008026:	8812      	ldrh	r2, [r2, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d300      	bcc.n	800802e <HAL_UART_IRQHandler+0x30a>
 800802c:	e150      	b.n	80082d0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	187a      	adds	r2, r7, r1
 8008032:	215a      	movs	r1, #90	; 0x5a
 8008034:	8812      	ldrh	r2, [r2, #0]
 8008036:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2220      	movs	r2, #32
 8008042:	4013      	ands	r3, r2
 8008044:	d16f      	bne.n	8008126 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008046:	f3ef 8310 	mrs	r3, PRIMASK
 800804a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800804e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008050:	2301      	movs	r3, #1
 8008052:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008056:	f383 8810 	msr	PRIMASK, r3
}
 800805a:	46c0      	nop			; (mov r8, r8)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	499e      	ldr	r1, [pc, #632]	; (80082e0 <HAL_UART_IRQHandler+0x5bc>)
 8008068:	400a      	ands	r2, r1
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800806e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	f383 8810 	msr	PRIMASK, r3
}
 8008076:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008078:	f3ef 8310 	mrs	r3, PRIMASK
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800807e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008080:	677b      	str	r3, [r7, #116]	; 0x74
 8008082:	2301      	movs	r3, #1
 8008084:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008088:	f383 8810 	msr	PRIMASK, r3
}
 800808c:	46c0      	nop			; (mov r8, r8)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689a      	ldr	r2, [r3, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2101      	movs	r1, #1
 800809a:	438a      	bics	r2, r1
 800809c:	609a      	str	r2, [r3, #8]
 800809e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080a0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a4:	f383 8810 	msr	PRIMASK, r3
}
 80080a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080aa:	f3ef 8310 	mrs	r3, PRIMASK
 80080ae:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80080b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080b2:	673b      	str	r3, [r7, #112]	; 0x70
 80080b4:	2301      	movs	r3, #1
 80080b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ba:	f383 8810 	msr	PRIMASK, r3
}
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2140      	movs	r1, #64	; 0x40
 80080cc:	438a      	bics	r2, r1
 80080ce:	609a      	str	r2, [r3, #8]
 80080d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080d2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080d6:	f383 8810 	msr	PRIMASK, r3
}
 80080da:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2280      	movs	r2, #128	; 0x80
 80080e0:	2120      	movs	r1, #32
 80080e2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ea:	f3ef 8310 	mrs	r3, PRIMASK
 80080ee:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80080f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080f4:	2301      	movs	r3, #1
 80080f6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080fa:	f383 8810 	msr	PRIMASK, r3
}
 80080fe:	46c0      	nop			; (mov r8, r8)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2110      	movs	r1, #16
 800810c:	438a      	bics	r2, r1
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008112:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008116:	f383 8810 	msr	PRIMASK, r3
}
 800811a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008120:	0018      	movs	r0, r3
 8008122:	f7fd fb89 	bl	8005838 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2202      	movs	r2, #2
 800812a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2258      	movs	r2, #88	; 0x58
 8008130:	5a9a      	ldrh	r2, [r3, r2]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	215a      	movs	r1, #90	; 0x5a
 8008136:	5a5b      	ldrh	r3, [r3, r1]
 8008138:	b29b      	uxth	r3, r3
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	b29a      	uxth	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	0011      	movs	r1, r2
 8008142:	0018      	movs	r0, r3
 8008144:	f7fb fb1e 	bl	8003784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008148:	e0c2      	b.n	80082d0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2258      	movs	r2, #88	; 0x58
 800814e:	5a99      	ldrh	r1, [r3, r2]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	225a      	movs	r2, #90	; 0x5a
 8008154:	5a9b      	ldrh	r3, [r3, r2]
 8008156:	b29a      	uxth	r2, r3
 8008158:	208e      	movs	r0, #142	; 0x8e
 800815a:	183b      	adds	r3, r7, r0
 800815c:	1a8a      	subs	r2, r1, r2
 800815e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	225a      	movs	r2, #90	; 0x5a
 8008164:	5a9b      	ldrh	r3, [r3, r2]
 8008166:	b29b      	uxth	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	d100      	bne.n	800816e <HAL_UART_IRQHandler+0x44a>
 800816c:	e0b2      	b.n	80082d4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800816e:	183b      	adds	r3, r7, r0
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d100      	bne.n	8008178 <HAL_UART_IRQHandler+0x454>
 8008176:	e0ad      	b.n	80082d4 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008178:	f3ef 8310 	mrs	r3, PRIMASK
 800817c:	60fb      	str	r3, [r7, #12]
  return(result);
 800817e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008180:	2488      	movs	r4, #136	; 0x88
 8008182:	193a      	adds	r2, r7, r4
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	2301      	movs	r3, #1
 8008188:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f383 8810 	msr	PRIMASK, r3
}
 8008190:	46c0      	nop			; (mov r8, r8)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4951      	ldr	r1, [pc, #324]	; (80082e4 <HAL_UART_IRQHandler+0x5c0>)
 800819e:	400a      	ands	r2, r1
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	193b      	adds	r3, r7, r4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f383 8810 	msr	PRIMASK, r3
}
 80081ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081b0:	f3ef 8310 	mrs	r3, PRIMASK
 80081b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80081b6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b8:	2484      	movs	r4, #132	; 0x84
 80081ba:	193a      	adds	r2, r7, r4
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	2301      	movs	r3, #1
 80081c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	f383 8810 	msr	PRIMASK, r3
}
 80081c8:	46c0      	nop			; (mov r8, r8)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2101      	movs	r1, #1
 80081d6:	438a      	bics	r2, r1
 80081d8:	609a      	str	r2, [r3, #8]
 80081da:	193b      	adds	r3, r7, r4
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	f383 8810 	msr	PRIMASK, r3
}
 80081e6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2280      	movs	r2, #128	; 0x80
 80081ec:	2120      	movs	r1, #32
 80081ee:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008204:	2480      	movs	r4, #128	; 0x80
 8008206:	193a      	adds	r2, r7, r4
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	2301      	movs	r3, #1
 800820c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008210:	f383 8810 	msr	PRIMASK, r3
}
 8008214:	46c0      	nop			; (mov r8, r8)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2110      	movs	r1, #16
 8008222:	438a      	bics	r2, r1
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	193b      	adds	r3, r7, r4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800822c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822e:	f383 8810 	msr	PRIMASK, r3
}
 8008232:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800823a:	183b      	adds	r3, r7, r0
 800823c:	881a      	ldrh	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	0011      	movs	r1, r2
 8008242:	0018      	movs	r0, r3
 8008244:	f7fb fa9e 	bl	8003784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008248:	e044      	b.n	80082d4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800824a:	23a4      	movs	r3, #164	; 0xa4
 800824c:	18fb      	adds	r3, r7, r3
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	2380      	movs	r3, #128	; 0x80
 8008252:	035b      	lsls	r3, r3, #13
 8008254:	4013      	ands	r3, r2
 8008256:	d010      	beq.n	800827a <HAL_UART_IRQHandler+0x556>
 8008258:	239c      	movs	r3, #156	; 0x9c
 800825a:	18fb      	adds	r3, r7, r3
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	2380      	movs	r3, #128	; 0x80
 8008260:	03db      	lsls	r3, r3, #15
 8008262:	4013      	ands	r3, r2
 8008264:	d009      	beq.n	800827a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2280      	movs	r2, #128	; 0x80
 800826c:	0352      	lsls	r2, r2, #13
 800826e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	0018      	movs	r0, r3
 8008274:	f000 ffe8 	bl	8009248 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008278:	e02f      	b.n	80082da <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800827a:	23a4      	movs	r3, #164	; 0xa4
 800827c:	18fb      	adds	r3, r7, r3
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2280      	movs	r2, #128	; 0x80
 8008282:	4013      	ands	r3, r2
 8008284:	d00f      	beq.n	80082a6 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008286:	23a0      	movs	r3, #160	; 0xa0
 8008288:	18fb      	adds	r3, r7, r3
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2280      	movs	r2, #128	; 0x80
 800828e:	4013      	ands	r3, r2
 8008290:	d009      	beq.n	80082a6 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008296:	2b00      	cmp	r3, #0
 8008298:	d01e      	beq.n	80082d8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	0010      	movs	r0, r2
 80082a2:	4798      	blx	r3
    }
    return;
 80082a4:	e018      	b.n	80082d8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082a6:	23a4      	movs	r3, #164	; 0xa4
 80082a8:	18fb      	adds	r3, r7, r3
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2240      	movs	r2, #64	; 0x40
 80082ae:	4013      	ands	r3, r2
 80082b0:	d013      	beq.n	80082da <HAL_UART_IRQHandler+0x5b6>
 80082b2:	23a0      	movs	r3, #160	; 0xa0
 80082b4:	18fb      	adds	r3, r7, r3
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2240      	movs	r2, #64	; 0x40
 80082ba:	4013      	ands	r3, r2
 80082bc:	d00d      	beq.n	80082da <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	0018      	movs	r0, r3
 80082c2:	f000 fdd2 	bl	8008e6a <UART_EndTransmit_IT>
    return;
 80082c6:	e008      	b.n	80082da <HAL_UART_IRQHandler+0x5b6>
      return;
 80082c8:	46c0      	nop			; (mov r8, r8)
 80082ca:	e006      	b.n	80082da <HAL_UART_IRQHandler+0x5b6>
    return;
 80082cc:	46c0      	nop			; (mov r8, r8)
 80082ce:	e004      	b.n	80082da <HAL_UART_IRQHandler+0x5b6>
      return;
 80082d0:	46c0      	nop			; (mov r8, r8)
 80082d2:	e002      	b.n	80082da <HAL_UART_IRQHandler+0x5b6>
      return;
 80082d4:	46c0      	nop			; (mov r8, r8)
 80082d6:	e000      	b.n	80082da <HAL_UART_IRQHandler+0x5b6>
    return;
 80082d8:	46c0      	nop			; (mov r8, r8)
  }

}
 80082da:	46bd      	mov	sp, r7
 80082dc:	b02b      	add	sp, #172	; 0xac
 80082de:	bd90      	pop	{r4, r7, pc}
 80082e0:	fffffeff 	.word	0xfffffeff
 80082e4:	fffffedf 	.word	0xfffffedf

080082e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80082f0:	46c0      	nop			; (mov r8, r8)
 80082f2:	46bd      	mov	sp, r7
 80082f4:	b002      	add	sp, #8
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008300:	46c0      	nop			; (mov r8, r8)
 8008302:	46bd      	mov	sp, r7
 8008304:	b002      	add	sp, #8
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008310:	46c0      	nop			; (mov r8, r8)
 8008312:	46bd      	mov	sp, r7
 8008314:	b002      	add	sp, #8
 8008316:	bd80      	pop	{r7, pc}

08008318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008318:	b5b0      	push	{r4, r5, r7, lr}
 800831a:	b08e      	sub	sp, #56	; 0x38
 800831c:	af00      	add	r7, sp, #0
 800831e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008320:	231a      	movs	r3, #26
 8008322:	2218      	movs	r2, #24
 8008324:	189b      	adds	r3, r3, r2
 8008326:	19db      	adds	r3, r3, r7
 8008328:	2200      	movs	r2, #0
 800832a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	431a      	orrs	r2, r3
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	431a      	orrs	r2, r3
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	4313      	orrs	r3, r2
 8008342:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4ac3      	ldr	r2, [pc, #780]	; (8008658 <UART_SetConfig+0x340>)
 800834c:	4013      	ands	r3, r2
 800834e:	0019      	movs	r1, r3
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008356:	430a      	orrs	r2, r1
 8008358:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	4abe      	ldr	r2, [pc, #760]	; (800865c <UART_SetConfig+0x344>)
 8008362:	4013      	ands	r3, r2
 8008364:	0019      	movs	r1, r3
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4ab8      	ldr	r2, [pc, #736]	; (8008660 <UART_SetConfig+0x348>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d004      	beq.n	800838c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008388:	4313      	orrs	r3, r2
 800838a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	4ab4      	ldr	r2, [pc, #720]	; (8008664 <UART_SetConfig+0x34c>)
 8008394:	4013      	ands	r3, r2
 8008396:	0019      	movs	r1, r3
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800839e:	430a      	orrs	r2, r1
 80083a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4ab0      	ldr	r2, [pc, #704]	; (8008668 <UART_SetConfig+0x350>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d131      	bne.n	8008410 <UART_SetConfig+0xf8>
 80083ac:	4baf      	ldr	r3, [pc, #700]	; (800866c <UART_SetConfig+0x354>)
 80083ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b0:	2203      	movs	r2, #3
 80083b2:	4013      	ands	r3, r2
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d01d      	beq.n	80083f4 <UART_SetConfig+0xdc>
 80083b8:	d823      	bhi.n	8008402 <UART_SetConfig+0xea>
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d00c      	beq.n	80083d8 <UART_SetConfig+0xc0>
 80083be:	d820      	bhi.n	8008402 <UART_SetConfig+0xea>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <UART_SetConfig+0xb2>
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d00e      	beq.n	80083e6 <UART_SetConfig+0xce>
 80083c8:	e01b      	b.n	8008402 <UART_SetConfig+0xea>
 80083ca:	231b      	movs	r3, #27
 80083cc:	2218      	movs	r2, #24
 80083ce:	189b      	adds	r3, r3, r2
 80083d0:	19db      	adds	r3, r3, r7
 80083d2:	2201      	movs	r2, #1
 80083d4:	701a      	strb	r2, [r3, #0]
 80083d6:	e0b4      	b.n	8008542 <UART_SetConfig+0x22a>
 80083d8:	231b      	movs	r3, #27
 80083da:	2218      	movs	r2, #24
 80083dc:	189b      	adds	r3, r3, r2
 80083de:	19db      	adds	r3, r3, r7
 80083e0:	2202      	movs	r2, #2
 80083e2:	701a      	strb	r2, [r3, #0]
 80083e4:	e0ad      	b.n	8008542 <UART_SetConfig+0x22a>
 80083e6:	231b      	movs	r3, #27
 80083e8:	2218      	movs	r2, #24
 80083ea:	189b      	adds	r3, r3, r2
 80083ec:	19db      	adds	r3, r3, r7
 80083ee:	2204      	movs	r2, #4
 80083f0:	701a      	strb	r2, [r3, #0]
 80083f2:	e0a6      	b.n	8008542 <UART_SetConfig+0x22a>
 80083f4:	231b      	movs	r3, #27
 80083f6:	2218      	movs	r2, #24
 80083f8:	189b      	adds	r3, r3, r2
 80083fa:	19db      	adds	r3, r3, r7
 80083fc:	2208      	movs	r2, #8
 80083fe:	701a      	strb	r2, [r3, #0]
 8008400:	e09f      	b.n	8008542 <UART_SetConfig+0x22a>
 8008402:	231b      	movs	r3, #27
 8008404:	2218      	movs	r2, #24
 8008406:	189b      	adds	r3, r3, r2
 8008408:	19db      	adds	r3, r3, r7
 800840a:	2210      	movs	r2, #16
 800840c:	701a      	strb	r2, [r3, #0]
 800840e:	e098      	b.n	8008542 <UART_SetConfig+0x22a>
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a96      	ldr	r2, [pc, #600]	; (8008670 <UART_SetConfig+0x358>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d131      	bne.n	800847e <UART_SetConfig+0x166>
 800841a:	4b94      	ldr	r3, [pc, #592]	; (800866c <UART_SetConfig+0x354>)
 800841c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800841e:	220c      	movs	r2, #12
 8008420:	4013      	ands	r3, r2
 8008422:	2b0c      	cmp	r3, #12
 8008424:	d01d      	beq.n	8008462 <UART_SetConfig+0x14a>
 8008426:	d823      	bhi.n	8008470 <UART_SetConfig+0x158>
 8008428:	2b08      	cmp	r3, #8
 800842a:	d00c      	beq.n	8008446 <UART_SetConfig+0x12e>
 800842c:	d820      	bhi.n	8008470 <UART_SetConfig+0x158>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <UART_SetConfig+0x120>
 8008432:	2b04      	cmp	r3, #4
 8008434:	d00e      	beq.n	8008454 <UART_SetConfig+0x13c>
 8008436:	e01b      	b.n	8008470 <UART_SetConfig+0x158>
 8008438:	231b      	movs	r3, #27
 800843a:	2218      	movs	r2, #24
 800843c:	189b      	adds	r3, r3, r2
 800843e:	19db      	adds	r3, r3, r7
 8008440:	2200      	movs	r2, #0
 8008442:	701a      	strb	r2, [r3, #0]
 8008444:	e07d      	b.n	8008542 <UART_SetConfig+0x22a>
 8008446:	231b      	movs	r3, #27
 8008448:	2218      	movs	r2, #24
 800844a:	189b      	adds	r3, r3, r2
 800844c:	19db      	adds	r3, r3, r7
 800844e:	2202      	movs	r2, #2
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	e076      	b.n	8008542 <UART_SetConfig+0x22a>
 8008454:	231b      	movs	r3, #27
 8008456:	2218      	movs	r2, #24
 8008458:	189b      	adds	r3, r3, r2
 800845a:	19db      	adds	r3, r3, r7
 800845c:	2204      	movs	r2, #4
 800845e:	701a      	strb	r2, [r3, #0]
 8008460:	e06f      	b.n	8008542 <UART_SetConfig+0x22a>
 8008462:	231b      	movs	r3, #27
 8008464:	2218      	movs	r2, #24
 8008466:	189b      	adds	r3, r3, r2
 8008468:	19db      	adds	r3, r3, r7
 800846a:	2208      	movs	r2, #8
 800846c:	701a      	strb	r2, [r3, #0]
 800846e:	e068      	b.n	8008542 <UART_SetConfig+0x22a>
 8008470:	231b      	movs	r3, #27
 8008472:	2218      	movs	r2, #24
 8008474:	189b      	adds	r3, r3, r2
 8008476:	19db      	adds	r3, r3, r7
 8008478:	2210      	movs	r2, #16
 800847a:	701a      	strb	r2, [r3, #0]
 800847c:	e061      	b.n	8008542 <UART_SetConfig+0x22a>
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a7c      	ldr	r2, [pc, #496]	; (8008674 <UART_SetConfig+0x35c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d106      	bne.n	8008496 <UART_SetConfig+0x17e>
 8008488:	231b      	movs	r3, #27
 800848a:	2218      	movs	r2, #24
 800848c:	189b      	adds	r3, r3, r2
 800848e:	19db      	adds	r3, r3, r7
 8008490:	2200      	movs	r2, #0
 8008492:	701a      	strb	r2, [r3, #0]
 8008494:	e055      	b.n	8008542 <UART_SetConfig+0x22a>
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a77      	ldr	r2, [pc, #476]	; (8008678 <UART_SetConfig+0x360>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d106      	bne.n	80084ae <UART_SetConfig+0x196>
 80084a0:	231b      	movs	r3, #27
 80084a2:	2218      	movs	r2, #24
 80084a4:	189b      	adds	r3, r3, r2
 80084a6:	19db      	adds	r3, r3, r7
 80084a8:	2200      	movs	r2, #0
 80084aa:	701a      	strb	r2, [r3, #0]
 80084ac:	e049      	b.n	8008542 <UART_SetConfig+0x22a>
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a6b      	ldr	r2, [pc, #428]	; (8008660 <UART_SetConfig+0x348>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d13e      	bne.n	8008536 <UART_SetConfig+0x21e>
 80084b8:	4b6c      	ldr	r3, [pc, #432]	; (800866c <UART_SetConfig+0x354>)
 80084ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084bc:	23c0      	movs	r3, #192	; 0xc0
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	4013      	ands	r3, r2
 80084c2:	22c0      	movs	r2, #192	; 0xc0
 80084c4:	0112      	lsls	r2, r2, #4
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d027      	beq.n	800851a <UART_SetConfig+0x202>
 80084ca:	22c0      	movs	r2, #192	; 0xc0
 80084cc:	0112      	lsls	r2, r2, #4
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d82a      	bhi.n	8008528 <UART_SetConfig+0x210>
 80084d2:	2280      	movs	r2, #128	; 0x80
 80084d4:	0112      	lsls	r2, r2, #4
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d011      	beq.n	80084fe <UART_SetConfig+0x1e6>
 80084da:	2280      	movs	r2, #128	; 0x80
 80084dc:	0112      	lsls	r2, r2, #4
 80084de:	4293      	cmp	r3, r2
 80084e0:	d822      	bhi.n	8008528 <UART_SetConfig+0x210>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d004      	beq.n	80084f0 <UART_SetConfig+0x1d8>
 80084e6:	2280      	movs	r2, #128	; 0x80
 80084e8:	00d2      	lsls	r2, r2, #3
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d00e      	beq.n	800850c <UART_SetConfig+0x1f4>
 80084ee:	e01b      	b.n	8008528 <UART_SetConfig+0x210>
 80084f0:	231b      	movs	r3, #27
 80084f2:	2218      	movs	r2, #24
 80084f4:	189b      	adds	r3, r3, r2
 80084f6:	19db      	adds	r3, r3, r7
 80084f8:	2200      	movs	r2, #0
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e021      	b.n	8008542 <UART_SetConfig+0x22a>
 80084fe:	231b      	movs	r3, #27
 8008500:	2218      	movs	r2, #24
 8008502:	189b      	adds	r3, r3, r2
 8008504:	19db      	adds	r3, r3, r7
 8008506:	2202      	movs	r2, #2
 8008508:	701a      	strb	r2, [r3, #0]
 800850a:	e01a      	b.n	8008542 <UART_SetConfig+0x22a>
 800850c:	231b      	movs	r3, #27
 800850e:	2218      	movs	r2, #24
 8008510:	189b      	adds	r3, r3, r2
 8008512:	19db      	adds	r3, r3, r7
 8008514:	2204      	movs	r2, #4
 8008516:	701a      	strb	r2, [r3, #0]
 8008518:	e013      	b.n	8008542 <UART_SetConfig+0x22a>
 800851a:	231b      	movs	r3, #27
 800851c:	2218      	movs	r2, #24
 800851e:	189b      	adds	r3, r3, r2
 8008520:	19db      	adds	r3, r3, r7
 8008522:	2208      	movs	r2, #8
 8008524:	701a      	strb	r2, [r3, #0]
 8008526:	e00c      	b.n	8008542 <UART_SetConfig+0x22a>
 8008528:	231b      	movs	r3, #27
 800852a:	2218      	movs	r2, #24
 800852c:	189b      	adds	r3, r3, r2
 800852e:	19db      	adds	r3, r3, r7
 8008530:	2210      	movs	r2, #16
 8008532:	701a      	strb	r2, [r3, #0]
 8008534:	e005      	b.n	8008542 <UART_SetConfig+0x22a>
 8008536:	231b      	movs	r3, #27
 8008538:	2218      	movs	r2, #24
 800853a:	189b      	adds	r3, r3, r2
 800853c:	19db      	adds	r3, r3, r7
 800853e:	2210      	movs	r2, #16
 8008540:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a46      	ldr	r2, [pc, #280]	; (8008660 <UART_SetConfig+0x348>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d000      	beq.n	800854e <UART_SetConfig+0x236>
 800854c:	e09a      	b.n	8008684 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800854e:	231b      	movs	r3, #27
 8008550:	2218      	movs	r2, #24
 8008552:	189b      	adds	r3, r3, r2
 8008554:	19db      	adds	r3, r3, r7
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b08      	cmp	r3, #8
 800855a:	d01d      	beq.n	8008598 <UART_SetConfig+0x280>
 800855c:	dc20      	bgt.n	80085a0 <UART_SetConfig+0x288>
 800855e:	2b04      	cmp	r3, #4
 8008560:	d015      	beq.n	800858e <UART_SetConfig+0x276>
 8008562:	dc1d      	bgt.n	80085a0 <UART_SetConfig+0x288>
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <UART_SetConfig+0x256>
 8008568:	2b02      	cmp	r3, #2
 800856a:	d005      	beq.n	8008578 <UART_SetConfig+0x260>
 800856c:	e018      	b.n	80085a0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800856e:	f7fe fb8d 	bl	8006c8c <HAL_RCC_GetPCLK1Freq>
 8008572:	0003      	movs	r3, r0
 8008574:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008576:	e01c      	b.n	80085b2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008578:	4b3c      	ldr	r3, [pc, #240]	; (800866c <UART_SetConfig+0x354>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2210      	movs	r2, #16
 800857e:	4013      	ands	r3, r2
 8008580:	d002      	beq.n	8008588 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008582:	4b3e      	ldr	r3, [pc, #248]	; (800867c <UART_SetConfig+0x364>)
 8008584:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008586:	e014      	b.n	80085b2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8008588:	4b3d      	ldr	r3, [pc, #244]	; (8008680 <UART_SetConfig+0x368>)
 800858a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800858c:	e011      	b.n	80085b2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800858e:	f7fe facd 	bl	8006b2c <HAL_RCC_GetSysClockFreq>
 8008592:	0003      	movs	r3, r0
 8008594:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008596:	e00c      	b.n	80085b2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008598:	2380      	movs	r3, #128	; 0x80
 800859a:	021b      	lsls	r3, r3, #8
 800859c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800859e:	e008      	b.n	80085b2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80085a0:	2300      	movs	r3, #0
 80085a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80085a4:	231a      	movs	r3, #26
 80085a6:	2218      	movs	r2, #24
 80085a8:	189b      	adds	r3, r3, r2
 80085aa:	19db      	adds	r3, r3, r7
 80085ac:	2201      	movs	r2, #1
 80085ae:	701a      	strb	r2, [r3, #0]
        break;
 80085b0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d100      	bne.n	80085ba <UART_SetConfig+0x2a2>
 80085b8:	e133      	b.n	8008822 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	0013      	movs	r3, r2
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	189b      	adds	r3, r3, r2
 80085c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d305      	bcc.n	80085d6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80085d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d906      	bls.n	80085e4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80085d6:	231a      	movs	r3, #26
 80085d8:	2218      	movs	r2, #24
 80085da:	189b      	adds	r3, r3, r2
 80085dc:	19db      	adds	r3, r3, r7
 80085de:	2201      	movs	r2, #1
 80085e0:	701a      	strb	r2, [r3, #0]
 80085e2:	e11e      	b.n	8008822 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e6:	613b      	str	r3, [r7, #16]
 80085e8:	2300      	movs	r3, #0
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	6939      	ldr	r1, [r7, #16]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	000b      	movs	r3, r1
 80085f2:	0e1b      	lsrs	r3, r3, #24
 80085f4:	0010      	movs	r0, r2
 80085f6:	0205      	lsls	r5, r0, #8
 80085f8:	431d      	orrs	r5, r3
 80085fa:	000b      	movs	r3, r1
 80085fc:	021c      	lsls	r4, r3, #8
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	085b      	lsrs	r3, r3, #1
 8008604:	60bb      	str	r3, [r7, #8]
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	68b8      	ldr	r0, [r7, #8]
 800860c:	68f9      	ldr	r1, [r7, #12]
 800860e:	1900      	adds	r0, r0, r4
 8008610:	4169      	adcs	r1, r5
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	2300      	movs	r3, #0
 800861a:	607b      	str	r3, [r7, #4]
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f7f7 ff7c 	bl	800051c <__aeabi_uldivmod>
 8008624:	0002      	movs	r2, r0
 8008626:	000b      	movs	r3, r1
 8008628:	0013      	movs	r3, r2
 800862a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800862c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800862e:	23c0      	movs	r3, #192	; 0xc0
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	429a      	cmp	r2, r3
 8008634:	d309      	bcc.n	800864a <UART_SetConfig+0x332>
 8008636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008638:	2380      	movs	r3, #128	; 0x80
 800863a:	035b      	lsls	r3, r3, #13
 800863c:	429a      	cmp	r2, r3
 800863e:	d204      	bcs.n	800864a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008646:	60da      	str	r2, [r3, #12]
 8008648:	e0eb      	b.n	8008822 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800864a:	231a      	movs	r3, #26
 800864c:	2218      	movs	r2, #24
 800864e:	189b      	adds	r3, r3, r2
 8008650:	19db      	adds	r3, r3, r7
 8008652:	2201      	movs	r2, #1
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	e0e4      	b.n	8008822 <UART_SetConfig+0x50a>
 8008658:	efff69f3 	.word	0xefff69f3
 800865c:	ffffcfff 	.word	0xffffcfff
 8008660:	40004800 	.word	0x40004800
 8008664:	fffff4ff 	.word	0xfffff4ff
 8008668:	40013800 	.word	0x40013800
 800866c:	40021000 	.word	0x40021000
 8008670:	40004400 	.word	0x40004400
 8008674:	40004c00 	.word	0x40004c00
 8008678:	40005000 	.word	0x40005000
 800867c:	003d0900 	.word	0x003d0900
 8008680:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	69da      	ldr	r2, [r3, #28]
 8008688:	2380      	movs	r3, #128	; 0x80
 800868a:	021b      	lsls	r3, r3, #8
 800868c:	429a      	cmp	r2, r3
 800868e:	d000      	beq.n	8008692 <UART_SetConfig+0x37a>
 8008690:	e070      	b.n	8008774 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8008692:	231b      	movs	r3, #27
 8008694:	2218      	movs	r2, #24
 8008696:	189b      	adds	r3, r3, r2
 8008698:	19db      	adds	r3, r3, r7
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b08      	cmp	r3, #8
 800869e:	d822      	bhi.n	80086e6 <UART_SetConfig+0x3ce>
 80086a0:	009a      	lsls	r2, r3, #2
 80086a2:	4b67      	ldr	r3, [pc, #412]	; (8008840 <UART_SetConfig+0x528>)
 80086a4:	18d3      	adds	r3, r2, r3
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086aa:	f7fe faef 	bl	8006c8c <HAL_RCC_GetPCLK1Freq>
 80086ae:	0003      	movs	r3, r0
 80086b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086b2:	e021      	b.n	80086f8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086b4:	f7fe fb00 	bl	8006cb8 <HAL_RCC_GetPCLK2Freq>
 80086b8:	0003      	movs	r3, r0
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086bc:	e01c      	b.n	80086f8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086be:	4b61      	ldr	r3, [pc, #388]	; (8008844 <UART_SetConfig+0x52c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2210      	movs	r2, #16
 80086c4:	4013      	ands	r3, r2
 80086c6:	d002      	beq.n	80086ce <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80086c8:	4b5f      	ldr	r3, [pc, #380]	; (8008848 <UART_SetConfig+0x530>)
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086cc:	e014      	b.n	80086f8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80086ce:	4b5f      	ldr	r3, [pc, #380]	; (800884c <UART_SetConfig+0x534>)
 80086d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086d2:	e011      	b.n	80086f8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086d4:	f7fe fa2a 	bl	8006b2c <HAL_RCC_GetSysClockFreq>
 80086d8:	0003      	movs	r3, r0
 80086da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086dc:	e00c      	b.n	80086f8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086de:	2380      	movs	r3, #128	; 0x80
 80086e0:	021b      	lsls	r3, r3, #8
 80086e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086e4:	e008      	b.n	80086f8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80086ea:	231a      	movs	r3, #26
 80086ec:	2218      	movs	r2, #24
 80086ee:	189b      	adds	r3, r3, r2
 80086f0:	19db      	adds	r3, r3, r7
 80086f2:	2201      	movs	r2, #1
 80086f4:	701a      	strb	r2, [r3, #0]
        break;
 80086f6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d100      	bne.n	8008700 <UART_SetConfig+0x3e8>
 80086fe:	e090      	b.n	8008822 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008702:	005a      	lsls	r2, r3, #1
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	085b      	lsrs	r3, r3, #1
 800870a:	18d2      	adds	r2, r2, r3
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	0019      	movs	r1, r3
 8008712:	0010      	movs	r0, r2
 8008714:	f7f7 fd14 	bl	8000140 <__udivsi3>
 8008718:	0003      	movs	r3, r0
 800871a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	2b0f      	cmp	r3, #15
 8008720:	d921      	bls.n	8008766 <UART_SetConfig+0x44e>
 8008722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008724:	2380      	movs	r3, #128	; 0x80
 8008726:	025b      	lsls	r3, r3, #9
 8008728:	429a      	cmp	r2, r3
 800872a:	d21c      	bcs.n	8008766 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	b29a      	uxth	r2, r3
 8008730:	200e      	movs	r0, #14
 8008732:	2418      	movs	r4, #24
 8008734:	1903      	adds	r3, r0, r4
 8008736:	19db      	adds	r3, r3, r7
 8008738:	210f      	movs	r1, #15
 800873a:	438a      	bics	r2, r1
 800873c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	b29b      	uxth	r3, r3
 8008744:	2207      	movs	r2, #7
 8008746:	4013      	ands	r3, r2
 8008748:	b299      	uxth	r1, r3
 800874a:	1903      	adds	r3, r0, r4
 800874c:	19db      	adds	r3, r3, r7
 800874e:	1902      	adds	r2, r0, r4
 8008750:	19d2      	adds	r2, r2, r7
 8008752:	8812      	ldrh	r2, [r2, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	1902      	adds	r2, r0, r4
 800875e:	19d2      	adds	r2, r2, r7
 8008760:	8812      	ldrh	r2, [r2, #0]
 8008762:	60da      	str	r2, [r3, #12]
 8008764:	e05d      	b.n	8008822 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8008766:	231a      	movs	r3, #26
 8008768:	2218      	movs	r2, #24
 800876a:	189b      	adds	r3, r3, r2
 800876c:	19db      	adds	r3, r3, r7
 800876e:	2201      	movs	r2, #1
 8008770:	701a      	strb	r2, [r3, #0]
 8008772:	e056      	b.n	8008822 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008774:	231b      	movs	r3, #27
 8008776:	2218      	movs	r2, #24
 8008778:	189b      	adds	r3, r3, r2
 800877a:	19db      	adds	r3, r3, r7
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b08      	cmp	r3, #8
 8008780:	d822      	bhi.n	80087c8 <UART_SetConfig+0x4b0>
 8008782:	009a      	lsls	r2, r3, #2
 8008784:	4b32      	ldr	r3, [pc, #200]	; (8008850 <UART_SetConfig+0x538>)
 8008786:	18d3      	adds	r3, r2, r3
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800878c:	f7fe fa7e 	bl	8006c8c <HAL_RCC_GetPCLK1Freq>
 8008790:	0003      	movs	r3, r0
 8008792:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008794:	e021      	b.n	80087da <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008796:	f7fe fa8f 	bl	8006cb8 <HAL_RCC_GetPCLK2Freq>
 800879a:	0003      	movs	r3, r0
 800879c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800879e:	e01c      	b.n	80087da <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087a0:	4b28      	ldr	r3, [pc, #160]	; (8008844 <UART_SetConfig+0x52c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2210      	movs	r2, #16
 80087a6:	4013      	ands	r3, r2
 80087a8:	d002      	beq.n	80087b0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80087aa:	4b27      	ldr	r3, [pc, #156]	; (8008848 <UART_SetConfig+0x530>)
 80087ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087ae:	e014      	b.n	80087da <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80087b0:	4b26      	ldr	r3, [pc, #152]	; (800884c <UART_SetConfig+0x534>)
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087b4:	e011      	b.n	80087da <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087b6:	f7fe f9b9 	bl	8006b2c <HAL_RCC_GetSysClockFreq>
 80087ba:	0003      	movs	r3, r0
 80087bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087be:	e00c      	b.n	80087da <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087c0:	2380      	movs	r3, #128	; 0x80
 80087c2:	021b      	lsls	r3, r3, #8
 80087c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087c6:	e008      	b.n	80087da <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80087cc:	231a      	movs	r3, #26
 80087ce:	2218      	movs	r2, #24
 80087d0:	189b      	adds	r3, r3, r2
 80087d2:	19db      	adds	r3, r3, r7
 80087d4:	2201      	movs	r2, #1
 80087d6:	701a      	strb	r2, [r3, #0]
        break;
 80087d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80087da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d020      	beq.n	8008822 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	085a      	lsrs	r2, r3, #1
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	18d2      	adds	r2, r2, r3
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	0019      	movs	r1, r3
 80087f0:	0010      	movs	r0, r2
 80087f2:	f7f7 fca5 	bl	8000140 <__udivsi3>
 80087f6:	0003      	movs	r3, r0
 80087f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	2b0f      	cmp	r3, #15
 80087fe:	d90a      	bls.n	8008816 <UART_SetConfig+0x4fe>
 8008800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008802:	2380      	movs	r3, #128	; 0x80
 8008804:	025b      	lsls	r3, r3, #9
 8008806:	429a      	cmp	r2, r3
 8008808:	d205      	bcs.n	8008816 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880c:	b29a      	uxth	r2, r3
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	60da      	str	r2, [r3, #12]
 8008814:	e005      	b.n	8008822 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8008816:	231a      	movs	r3, #26
 8008818:	2218      	movs	r2, #24
 800881a:	189b      	adds	r3, r3, r2
 800881c:	19db      	adds	r3, r3, r7
 800881e:	2201      	movs	r2, #1
 8008820:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	2200      	movs	r2, #0
 8008826:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	2200      	movs	r2, #0
 800882c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800882e:	231a      	movs	r3, #26
 8008830:	2218      	movs	r2, #24
 8008832:	189b      	adds	r3, r3, r2
 8008834:	19db      	adds	r3, r3, r7
 8008836:	781b      	ldrb	r3, [r3, #0]
}
 8008838:	0018      	movs	r0, r3
 800883a:	46bd      	mov	sp, r7
 800883c:	b00e      	add	sp, #56	; 0x38
 800883e:	bdb0      	pop	{r4, r5, r7, pc}
 8008840:	0800de0c 	.word	0x0800de0c
 8008844:	40021000 	.word	0x40021000
 8008848:	003d0900 	.word	0x003d0900
 800884c:	00f42400 	.word	0x00f42400
 8008850:	0800de30 	.word	0x0800de30

08008854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	2201      	movs	r2, #1
 8008862:	4013      	ands	r3, r2
 8008864:	d00b      	beq.n	800887e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	4a4a      	ldr	r2, [pc, #296]	; (8008998 <UART_AdvFeatureConfig+0x144>)
 800886e:	4013      	ands	r3, r2
 8008870:	0019      	movs	r1, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	2202      	movs	r2, #2
 8008884:	4013      	ands	r3, r2
 8008886:	d00b      	beq.n	80088a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	4a43      	ldr	r2, [pc, #268]	; (800899c <UART_AdvFeatureConfig+0x148>)
 8008890:	4013      	ands	r3, r2
 8008892:	0019      	movs	r1, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	2204      	movs	r2, #4
 80088a6:	4013      	ands	r3, r2
 80088a8:	d00b      	beq.n	80088c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	4a3b      	ldr	r2, [pc, #236]	; (80089a0 <UART_AdvFeatureConfig+0x14c>)
 80088b2:	4013      	ands	r3, r2
 80088b4:	0019      	movs	r1, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	2208      	movs	r2, #8
 80088c8:	4013      	ands	r3, r2
 80088ca:	d00b      	beq.n	80088e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	4a34      	ldr	r2, [pc, #208]	; (80089a4 <UART_AdvFeatureConfig+0x150>)
 80088d4:	4013      	ands	r3, r2
 80088d6:	0019      	movs	r1, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	2210      	movs	r2, #16
 80088ea:	4013      	ands	r3, r2
 80088ec:	d00b      	beq.n	8008906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	4a2c      	ldr	r2, [pc, #176]	; (80089a8 <UART_AdvFeatureConfig+0x154>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	0019      	movs	r1, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	2220      	movs	r2, #32
 800890c:	4013      	ands	r3, r2
 800890e:	d00b      	beq.n	8008928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	4a25      	ldr	r2, [pc, #148]	; (80089ac <UART_AdvFeatureConfig+0x158>)
 8008918:	4013      	ands	r3, r2
 800891a:	0019      	movs	r1, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2240      	movs	r2, #64	; 0x40
 800892e:	4013      	ands	r3, r2
 8008930:	d01d      	beq.n	800896e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	4a1d      	ldr	r2, [pc, #116]	; (80089b0 <UART_AdvFeatureConfig+0x15c>)
 800893a:	4013      	ands	r3, r2
 800893c:	0019      	movs	r1, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800894e:	2380      	movs	r3, #128	; 0x80
 8008950:	035b      	lsls	r3, r3, #13
 8008952:	429a      	cmp	r2, r3
 8008954:	d10b      	bne.n	800896e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	4a15      	ldr	r2, [pc, #84]	; (80089b4 <UART_AdvFeatureConfig+0x160>)
 800895e:	4013      	ands	r3, r2
 8008960:	0019      	movs	r1, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	2280      	movs	r2, #128	; 0x80
 8008974:	4013      	ands	r3, r2
 8008976:	d00b      	beq.n	8008990 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	4a0e      	ldr	r2, [pc, #56]	; (80089b8 <UART_AdvFeatureConfig+0x164>)
 8008980:	4013      	ands	r3, r2
 8008982:	0019      	movs	r1, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	605a      	str	r2, [r3, #4]
  }
}
 8008990:	46c0      	nop			; (mov r8, r8)
 8008992:	46bd      	mov	sp, r7
 8008994:	b002      	add	sp, #8
 8008996:	bd80      	pop	{r7, pc}
 8008998:	fffdffff 	.word	0xfffdffff
 800899c:	fffeffff 	.word	0xfffeffff
 80089a0:	fffbffff 	.word	0xfffbffff
 80089a4:	ffff7fff 	.word	0xffff7fff
 80089a8:	ffffefff 	.word	0xffffefff
 80089ac:	ffffdfff 	.word	0xffffdfff
 80089b0:	ffefffff 	.word	0xffefffff
 80089b4:	ff9fffff 	.word	0xff9fffff
 80089b8:	fff7ffff 	.word	0xfff7ffff

080089bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b092      	sub	sp, #72	; 0x48
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2284      	movs	r2, #132	; 0x84
 80089c8:	2100      	movs	r1, #0
 80089ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089cc:	f7fc f99a 	bl	8004d04 <HAL_GetTick>
 80089d0:	0003      	movs	r3, r0
 80089d2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2208      	movs	r2, #8
 80089dc:	4013      	ands	r3, r2
 80089de:	2b08      	cmp	r3, #8
 80089e0:	d12c      	bne.n	8008a3c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e4:	2280      	movs	r2, #128	; 0x80
 80089e6:	0391      	lsls	r1, r2, #14
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	4a46      	ldr	r2, [pc, #280]	; (8008b04 <UART_CheckIdleState+0x148>)
 80089ec:	9200      	str	r2, [sp, #0]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f000 f88c 	bl	8008b0c <UART_WaitOnFlagUntilTimeout>
 80089f4:	1e03      	subs	r3, r0, #0
 80089f6:	d021      	beq.n	8008a3c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089f8:	f3ef 8310 	mrs	r3, PRIMASK
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80089fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008a00:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a02:	2301      	movs	r3, #1
 8008a04:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	f383 8810 	msr	PRIMASK, r3
}
 8008a0c:	46c0      	nop			; (mov r8, r8)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2180      	movs	r1, #128	; 0x80
 8008a1a:	438a      	bics	r2, r1
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	f383 8810 	msr	PRIMASK, r3
}
 8008a28:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2278      	movs	r2, #120	; 0x78
 8008a34:	2100      	movs	r1, #0
 8008a36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e05f      	b.n	8008afc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2204      	movs	r2, #4
 8008a44:	4013      	ands	r3, r2
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	d146      	bne.n	8008ad8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4c:	2280      	movs	r2, #128	; 0x80
 8008a4e:	03d1      	lsls	r1, r2, #15
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	4a2c      	ldr	r2, [pc, #176]	; (8008b04 <UART_CheckIdleState+0x148>)
 8008a54:	9200      	str	r2, [sp, #0]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f000 f858 	bl	8008b0c <UART_WaitOnFlagUntilTimeout>
 8008a5c:	1e03      	subs	r3, r0, #0
 8008a5e:	d03b      	beq.n	8008ad8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a60:	f3ef 8310 	mrs	r3, PRIMASK
 8008a64:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a66:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a68:	637b      	str	r3, [r7, #52]	; 0x34
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f383 8810 	msr	PRIMASK, r3
}
 8008a74:	46c0      	nop			; (mov r8, r8)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4921      	ldr	r1, [pc, #132]	; (8008b08 <UART_CheckIdleState+0x14c>)
 8008a82:	400a      	ands	r2, r1
 8008a84:	601a      	str	r2, [r3, #0]
 8008a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f383 8810 	msr	PRIMASK, r3
}
 8008a90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a92:	f3ef 8310 	mrs	r3, PRIMASK
 8008a96:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a98:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	f383 8810 	msr	PRIMASK, r3
}
 8008aa6:	46c0      	nop			; (mov r8, r8)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689a      	ldr	r2, [r3, #8]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	438a      	bics	r2, r1
 8008ab6:	609a      	str	r2, [r3, #8]
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	f383 8810 	msr	PRIMASK, r3
}
 8008ac2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2280      	movs	r2, #128	; 0x80
 8008ac8:	2120      	movs	r1, #32
 8008aca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2278      	movs	r2, #120	; 0x78
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e011      	b.n	8008afc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2220      	movs	r2, #32
 8008adc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2280      	movs	r2, #128	; 0x80
 8008ae2:	2120      	movs	r1, #32
 8008ae4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2278      	movs	r2, #120	; 0x78
 8008af6:	2100      	movs	r1, #0
 8008af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	0018      	movs	r0, r3
 8008afe:	46bd      	mov	sp, r7
 8008b00:	b010      	add	sp, #64	; 0x40
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	01ffffff 	.word	0x01ffffff
 8008b08:	fffffedf 	.word	0xfffffedf

08008b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	1dfb      	adds	r3, r7, #7
 8008b1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b1c:	e04b      	b.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	3301      	adds	r3, #1
 8008b22:	d048      	beq.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b24:	f7fc f8ee 	bl	8004d04 <HAL_GetTick>
 8008b28:	0002      	movs	r2, r0
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d302      	bcc.n	8008b3a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e04b      	b.n	8008bd6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2204      	movs	r2, #4
 8008b46:	4013      	ands	r3, r2
 8008b48:	d035      	beq.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	2208      	movs	r2, #8
 8008b52:	4013      	ands	r3, r2
 8008b54:	2b08      	cmp	r3, #8
 8008b56:	d111      	bne.n	8008b7c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2208      	movs	r2, #8
 8008b5e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	0018      	movs	r0, r3
 8008b64:	f000 f906 	bl	8008d74 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2284      	movs	r2, #132	; 0x84
 8008b6c:	2108      	movs	r1, #8
 8008b6e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2278      	movs	r2, #120	; 0x78
 8008b74:	2100      	movs	r1, #0
 8008b76:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e02c      	b.n	8008bd6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	69da      	ldr	r2, [r3, #28]
 8008b82:	2380      	movs	r3, #128	; 0x80
 8008b84:	011b      	lsls	r3, r3, #4
 8008b86:	401a      	ands	r2, r3
 8008b88:	2380      	movs	r3, #128	; 0x80
 8008b8a:	011b      	lsls	r3, r3, #4
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d112      	bne.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2280      	movs	r2, #128	; 0x80
 8008b96:	0112      	lsls	r2, r2, #4
 8008b98:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f000 f8e9 	bl	8008d74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2284      	movs	r2, #132	; 0x84
 8008ba6:	2120      	movs	r1, #32
 8008ba8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2278      	movs	r2, #120	; 0x78
 8008bae:	2100      	movs	r1, #0
 8008bb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e00f      	b.n	8008bd6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	425a      	negs	r2, r3
 8008bc6:	4153      	adcs	r3, r2
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	001a      	movs	r2, r3
 8008bcc:	1dfb      	adds	r3, r7, #7
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d0a4      	beq.n	8008b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	0018      	movs	r0, r3
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	b004      	add	sp, #16
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b090      	sub	sp, #64	; 0x40
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	1dbb      	adds	r3, r7, #6
 8008bec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	1dba      	adds	r2, r7, #6
 8008bf8:	2158      	movs	r1, #88	; 0x58
 8008bfa:	8812      	ldrh	r2, [r2, #0]
 8008bfc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1dba      	adds	r2, r7, #6
 8008c02:	215a      	movs	r1, #90	; 0x5a
 8008c04:	8812      	ldrh	r2, [r2, #0]
 8008c06:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689a      	ldr	r2, [r3, #8]
 8008c12:	2380      	movs	r3, #128	; 0x80
 8008c14:	015b      	lsls	r3, r3, #5
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d10d      	bne.n	8008c36 <UART_Start_Receive_IT+0x56>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d104      	bne.n	8008c2c <UART_Start_Receive_IT+0x4c>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	225c      	movs	r2, #92	; 0x5c
 8008c26:	4950      	ldr	r1, [pc, #320]	; (8008d68 <UART_Start_Receive_IT+0x188>)
 8008c28:	5299      	strh	r1, [r3, r2]
 8008c2a:	e02e      	b.n	8008c8a <UART_Start_Receive_IT+0xaa>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	225c      	movs	r2, #92	; 0x5c
 8008c30:	21ff      	movs	r1, #255	; 0xff
 8008c32:	5299      	strh	r1, [r3, r2]
 8008c34:	e029      	b.n	8008c8a <UART_Start_Receive_IT+0xaa>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10d      	bne.n	8008c5a <UART_Start_Receive_IT+0x7a>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d104      	bne.n	8008c50 <UART_Start_Receive_IT+0x70>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	225c      	movs	r2, #92	; 0x5c
 8008c4a:	21ff      	movs	r1, #255	; 0xff
 8008c4c:	5299      	strh	r1, [r3, r2]
 8008c4e:	e01c      	b.n	8008c8a <UART_Start_Receive_IT+0xaa>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	225c      	movs	r2, #92	; 0x5c
 8008c54:	217f      	movs	r1, #127	; 0x7f
 8008c56:	5299      	strh	r1, [r3, r2]
 8008c58:	e017      	b.n	8008c8a <UART_Start_Receive_IT+0xaa>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	689a      	ldr	r2, [r3, #8]
 8008c5e:	2380      	movs	r3, #128	; 0x80
 8008c60:	055b      	lsls	r3, r3, #21
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d10d      	bne.n	8008c82 <UART_Start_Receive_IT+0xa2>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d104      	bne.n	8008c78 <UART_Start_Receive_IT+0x98>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	225c      	movs	r2, #92	; 0x5c
 8008c72:	217f      	movs	r1, #127	; 0x7f
 8008c74:	5299      	strh	r1, [r3, r2]
 8008c76:	e008      	b.n	8008c8a <UART_Start_Receive_IT+0xaa>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	225c      	movs	r2, #92	; 0x5c
 8008c7c:	213f      	movs	r1, #63	; 0x3f
 8008c7e:	5299      	strh	r1, [r3, r2]
 8008c80:	e003      	b.n	8008c8a <UART_Start_Receive_IT+0xaa>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	225c      	movs	r2, #92	; 0x5c
 8008c86:	2100      	movs	r1, #0
 8008c88:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2284      	movs	r2, #132	; 0x84
 8008c8e:	2100      	movs	r1, #0
 8008c90:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2280      	movs	r2, #128	; 0x80
 8008c96:	2122      	movs	r1, #34	; 0x22
 8008c98:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	f383 8810 	msr	PRIMASK, r3
}
 8008cae:	46c0      	nop			; (mov r8, r8)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2101      	movs	r1, #1
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	609a      	str	r2, [r3, #8]
 8008cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	f383 8810 	msr	PRIMASK, r3
}
 8008cca:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	2380      	movs	r3, #128	; 0x80
 8008cd2:	015b      	lsls	r3, r3, #5
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d107      	bne.n	8008ce8 <UART_Start_Receive_IT+0x108>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d103      	bne.n	8008ce8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4a22      	ldr	r2, [pc, #136]	; (8008d6c <UART_Start_Receive_IT+0x18c>)
 8008ce4:	669a      	str	r2, [r3, #104]	; 0x68
 8008ce6:	e002      	b.n	8008cee <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4a21      	ldr	r2, [pc, #132]	; (8008d70 <UART_Start_Receive_IT+0x190>)
 8008cec:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d019      	beq.n	8008d2a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8008cfa:	61fb      	str	r3, [r7, #28]
  return(result);
 8008cfc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8008d00:	2301      	movs	r3, #1
 8008d02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	f383 8810 	msr	PRIMASK, r3
}
 8008d0a:	46c0      	nop			; (mov r8, r8)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2190      	movs	r1, #144	; 0x90
 8008d18:	0049      	lsls	r1, r1, #1
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	f383 8810 	msr	PRIMASK, r3
}
 8008d28:	e018      	b.n	8008d5c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d2e:	613b      	str	r3, [r7, #16]
  return(result);
 8008d30:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d34:	2301      	movs	r3, #1
 8008d36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f383 8810 	msr	PRIMASK, r3
}
 8008d3e:	46c0      	nop			; (mov r8, r8)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2120      	movs	r1, #32
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	f383 8810 	msr	PRIMASK, r3
}
 8008d5a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	0018      	movs	r0, r3
 8008d60:	46bd      	mov	sp, r7
 8008d62:	b010      	add	sp, #64	; 0x40
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	000001ff 	.word	0x000001ff
 8008d6c:	08009085 	.word	0x08009085
 8008d70:	08008ec1 	.word	0x08008ec1

08008d74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08e      	sub	sp, #56	; 0x38
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d80:	617b      	str	r3, [r7, #20]
  return(result);
 8008d82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d84:	637b      	str	r3, [r7, #52]	; 0x34
 8008d86:	2301      	movs	r3, #1
 8008d88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	f383 8810 	msr	PRIMASK, r3
}
 8008d90:	46c0      	nop			; (mov r8, r8)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4926      	ldr	r1, [pc, #152]	; (8008e38 <UART_EndRxTransfer+0xc4>)
 8008d9e:	400a      	ands	r2, r1
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	f383 8810 	msr	PRIMASK, r3
}
 8008dac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dae:	f3ef 8310 	mrs	r3, PRIMASK
 8008db2:	623b      	str	r3, [r7, #32]
  return(result);
 8008db4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db6:	633b      	str	r3, [r7, #48]	; 0x30
 8008db8:	2301      	movs	r3, #1
 8008dba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	f383 8810 	msr	PRIMASK, r3
}
 8008dc2:	46c0      	nop			; (mov r8, r8)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689a      	ldr	r2, [r3, #8]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2101      	movs	r1, #1
 8008dd0:	438a      	bics	r2, r1
 8008dd2:	609a      	str	r2, [r3, #8]
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	f383 8810 	msr	PRIMASK, r3
}
 8008dde:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d118      	bne.n	8008e1a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de8:	f3ef 8310 	mrs	r3, PRIMASK
 8008dec:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008df2:	2301      	movs	r3, #1
 8008df4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f383 8810 	msr	PRIMASK, r3
}
 8008dfc:	46c0      	nop			; (mov r8, r8)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2110      	movs	r1, #16
 8008e0a:	438a      	bics	r2, r1
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f383 8810 	msr	PRIMASK, r3
}
 8008e18:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2280      	movs	r2, #128	; 0x80
 8008e1e:	2120      	movs	r1, #32
 8008e20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e2e:	46c0      	nop			; (mov r8, r8)
 8008e30:	46bd      	mov	sp, r7
 8008e32:	b00e      	add	sp, #56	; 0x38
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	46c0      	nop			; (mov r8, r8)
 8008e38:	fffffedf 	.word	0xfffffedf

08008e3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	225a      	movs	r2, #90	; 0x5a
 8008e4e:	2100      	movs	r1, #0
 8008e50:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2252      	movs	r2, #82	; 0x52
 8008e56:	2100      	movs	r1, #0
 8008e58:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	f7ff fa53 	bl	8008308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e62:	46c0      	nop			; (mov r8, r8)
 8008e64:	46bd      	mov	sp, r7
 8008e66:	b004      	add	sp, #16
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b086      	sub	sp, #24
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e72:	f3ef 8310 	mrs	r3, PRIMASK
 8008e76:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e78:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e7a:	617b      	str	r3, [r7, #20]
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f383 8810 	msr	PRIMASK, r3
}
 8008e86:	46c0      	nop			; (mov r8, r8)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2140      	movs	r1, #64	; 0x40
 8008e94:	438a      	bics	r2, r1
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	f383 8810 	msr	PRIMASK, r3
}
 8008ea2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f7ff fa18 	bl	80082e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eb8:	46c0      	nop			; (mov r8, r8)
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	b006      	add	sp, #24
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b094      	sub	sp, #80	; 0x50
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ec8:	204e      	movs	r0, #78	; 0x4e
 8008eca:	183b      	adds	r3, r7, r0
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	215c      	movs	r1, #92	; 0x5c
 8008ed0:	5a52      	ldrh	r2, [r2, r1]
 8008ed2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2280      	movs	r2, #128	; 0x80
 8008ed8:	589b      	ldr	r3, [r3, r2]
 8008eda:	2b22      	cmp	r3, #34	; 0x22
 8008edc:	d000      	beq.n	8008ee0 <UART_RxISR_8BIT+0x20>
 8008ede:	e0bf      	b.n	8009060 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ee6:	214c      	movs	r1, #76	; 0x4c
 8008ee8:	187b      	adds	r3, r7, r1
 8008eea:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008eec:	187b      	adds	r3, r7, r1
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	183b      	adds	r3, r7, r0
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	b2d9      	uxtb	r1, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efc:	400a      	ands	r2, r1
 8008efe:	b2d2      	uxtb	r2, r2
 8008f00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f06:	1c5a      	adds	r2, r3, #1
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	225a      	movs	r2, #90	; 0x5a
 8008f10:	5a9b      	ldrh	r3, [r3, r2]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	3b01      	subs	r3, #1
 8008f16:	b299      	uxth	r1, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	225a      	movs	r2, #90	; 0x5a
 8008f1c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	225a      	movs	r2, #90	; 0x5a
 8008f22:	5a9b      	ldrh	r3, [r3, r2]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d000      	beq.n	8008f2c <UART_RxISR_8BIT+0x6c>
 8008f2a:	e0a1      	b.n	8009070 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f34:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f36:	2301      	movs	r3, #1
 8008f38:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3c:	f383 8810 	msr	PRIMASK, r3
}
 8008f40:	46c0      	nop			; (mov r8, r8)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	494a      	ldr	r1, [pc, #296]	; (8009078 <UART_RxISR_8BIT+0x1b8>)
 8008f4e:	400a      	ands	r2, r1
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f58:	f383 8810 	msr	PRIMASK, r3
}
 8008f5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f62:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f66:	647b      	str	r3, [r7, #68]	; 0x44
 8008f68:	2301      	movs	r3, #1
 8008f6a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6e:	f383 8810 	msr	PRIMASK, r3
}
 8008f72:	46c0      	nop			; (mov r8, r8)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689a      	ldr	r2, [r3, #8]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2101      	movs	r1, #1
 8008f80:	438a      	bics	r2, r1
 8008f82:	609a      	str	r2, [r3, #8]
 8008f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	f383 8810 	msr	PRIMASK, r3
}
 8008f8e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2280      	movs	r2, #128	; 0x80
 8008f94:	2120      	movs	r1, #32
 8008f96:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a34      	ldr	r2, [pc, #208]	; (800907c <UART_RxISR_8BIT+0x1bc>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d01f      	beq.n	8008fee <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	2380      	movs	r3, #128	; 0x80
 8008fb6:	041b      	lsls	r3, r3, #16
 8008fb8:	4013      	ands	r3, r2
 8008fba:	d018      	beq.n	8008fee <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8008fc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8008fc2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	f383 8810 	msr	PRIMASK, r3
}
 8008fd0:	46c0      	nop			; (mov r8, r8)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4928      	ldr	r1, [pc, #160]	; (8009080 <UART_RxISR_8BIT+0x1c0>)
 8008fde:	400a      	ands	r2, r1
 8008fe0:	601a      	str	r2, [r3, #0]
 8008fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fe4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	f383 8810 	msr	PRIMASK, r3
}
 8008fec:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d12f      	bne.n	8009056 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8009000:	60fb      	str	r3, [r7, #12]
  return(result);
 8009002:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009006:	2301      	movs	r3, #1
 8009008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f383 8810 	msr	PRIMASK, r3
}
 8009010:	46c0      	nop			; (mov r8, r8)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2110      	movs	r1, #16
 800901e:	438a      	bics	r2, r1
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009024:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f383 8810 	msr	PRIMASK, r3
}
 800902c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	69db      	ldr	r3, [r3, #28]
 8009034:	2210      	movs	r2, #16
 8009036:	4013      	ands	r3, r2
 8009038:	2b10      	cmp	r3, #16
 800903a:	d103      	bne.n	8009044 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2210      	movs	r2, #16
 8009042:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2258      	movs	r2, #88	; 0x58
 8009048:	5a9a      	ldrh	r2, [r3, r2]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	0011      	movs	r1, r2
 800904e:	0018      	movs	r0, r3
 8009050:	f7fa fb98 	bl	8003784 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009054:	e00c      	b.n	8009070 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	0018      	movs	r0, r3
 800905a:	f7ff f94d 	bl	80082f8 <HAL_UART_RxCpltCallback>
}
 800905e:	e007      	b.n	8009070 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2108      	movs	r1, #8
 800906c:	430a      	orrs	r2, r1
 800906e:	619a      	str	r2, [r3, #24]
}
 8009070:	46c0      	nop			; (mov r8, r8)
 8009072:	46bd      	mov	sp, r7
 8009074:	b014      	add	sp, #80	; 0x50
 8009076:	bd80      	pop	{r7, pc}
 8009078:	fffffedf 	.word	0xfffffedf
 800907c:	40004800 	.word	0x40004800
 8009080:	fbffffff 	.word	0xfbffffff

08009084 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b094      	sub	sp, #80	; 0x50
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800908c:	204e      	movs	r0, #78	; 0x4e
 800908e:	183b      	adds	r3, r7, r0
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	215c      	movs	r1, #92	; 0x5c
 8009094:	5a52      	ldrh	r2, [r2, r1]
 8009096:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2280      	movs	r2, #128	; 0x80
 800909c:	589b      	ldr	r3, [r3, r2]
 800909e:	2b22      	cmp	r3, #34	; 0x22
 80090a0:	d000      	beq.n	80090a4 <UART_RxISR_16BIT+0x20>
 80090a2:	e0bf      	b.n	8009224 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090aa:	214c      	movs	r1, #76	; 0x4c
 80090ac:	187b      	adds	r3, r7, r1
 80090ae:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b4:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80090b6:	187b      	adds	r3, r7, r1
 80090b8:	183a      	adds	r2, r7, r0
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	8812      	ldrh	r2, [r2, #0]
 80090be:	4013      	ands	r3, r2
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ca:	1c9a      	adds	r2, r3, #2
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	225a      	movs	r2, #90	; 0x5a
 80090d4:	5a9b      	ldrh	r3, [r3, r2]
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	b299      	uxth	r1, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	225a      	movs	r2, #90	; 0x5a
 80090e0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	225a      	movs	r2, #90	; 0x5a
 80090e6:	5a9b      	ldrh	r3, [r3, r2]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d000      	beq.n	80090f0 <UART_RxISR_16BIT+0x6c>
 80090ee:	e0a1      	b.n	8009234 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090f0:	f3ef 8310 	mrs	r3, PRIMASK
 80090f4:	623b      	str	r3, [r7, #32]
  return(result);
 80090f6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090f8:	647b      	str	r3, [r7, #68]	; 0x44
 80090fa:	2301      	movs	r3, #1
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	f383 8810 	msr	PRIMASK, r3
}
 8009104:	46c0      	nop			; (mov r8, r8)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	494a      	ldr	r1, [pc, #296]	; (800923c <UART_RxISR_16BIT+0x1b8>)
 8009112:	400a      	ands	r2, r1
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009118:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	f383 8810 	msr	PRIMASK, r3
}
 8009120:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009122:	f3ef 8310 	mrs	r3, PRIMASK
 8009126:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800912a:	643b      	str	r3, [r7, #64]	; 0x40
 800912c:	2301      	movs	r3, #1
 800912e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	f383 8810 	msr	PRIMASK, r3
}
 8009136:	46c0      	nop			; (mov r8, r8)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689a      	ldr	r2, [r3, #8]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2101      	movs	r1, #1
 8009144:	438a      	bics	r2, r1
 8009146:	609a      	str	r2, [r3, #8]
 8009148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800914a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914e:	f383 8810 	msr	PRIMASK, r3
}
 8009152:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2280      	movs	r2, #128	; 0x80
 8009158:	2120      	movs	r1, #32
 800915a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a34      	ldr	r2, [pc, #208]	; (8009240 <UART_RxISR_16BIT+0x1bc>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d01f      	beq.n	80091b2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	2380      	movs	r3, #128	; 0x80
 800917a:	041b      	lsls	r3, r3, #16
 800917c:	4013      	ands	r3, r2
 800917e:	d018      	beq.n	80091b2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009180:	f3ef 8310 	mrs	r3, PRIMASK
 8009184:	617b      	str	r3, [r7, #20]
  return(result);
 8009186:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800918a:	2301      	movs	r3, #1
 800918c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	f383 8810 	msr	PRIMASK, r3
}
 8009194:	46c0      	nop			; (mov r8, r8)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4928      	ldr	r1, [pc, #160]	; (8009244 <UART_RxISR_16BIT+0x1c0>)
 80091a2:	400a      	ands	r2, r1
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	f383 8810 	msr	PRIMASK, r3
}
 80091b0:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d12f      	bne.n	800921a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c0:	f3ef 8310 	mrs	r3, PRIMASK
 80091c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80091c6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80091ca:	2301      	movs	r3, #1
 80091cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f383 8810 	msr	PRIMASK, r3
}
 80091d4:	46c0      	nop			; (mov r8, r8)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2110      	movs	r1, #16
 80091e2:	438a      	bics	r2, r1
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f383 8810 	msr	PRIMASK, r3
}
 80091f0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	2210      	movs	r2, #16
 80091fa:	4013      	ands	r3, r2
 80091fc:	2b10      	cmp	r3, #16
 80091fe:	d103      	bne.n	8009208 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2210      	movs	r2, #16
 8009206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2258      	movs	r2, #88	; 0x58
 800920c:	5a9a      	ldrh	r2, [r3, r2]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	0011      	movs	r1, r2
 8009212:	0018      	movs	r0, r3
 8009214:	f7fa fab6 	bl	8003784 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009218:	e00c      	b.n	8009234 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	0018      	movs	r0, r3
 800921e:	f7ff f86b 	bl	80082f8 <HAL_UART_RxCpltCallback>
}
 8009222:	e007      	b.n	8009234 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699a      	ldr	r2, [r3, #24]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2108      	movs	r1, #8
 8009230:	430a      	orrs	r2, r1
 8009232:	619a      	str	r2, [r3, #24]
}
 8009234:	46c0      	nop			; (mov r8, r8)
 8009236:	46bd      	mov	sp, r7
 8009238:	b014      	add	sp, #80	; 0x50
 800923a:	bd80      	pop	{r7, pc}
 800923c:	fffffedf 	.word	0xfffffedf
 8009240:	40004800 	.word	0x40004800
 8009244:	fbffffff 	.word	0xfbffffff

08009248 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009250:	46c0      	nop			; (mov r8, r8)
 8009252:	46bd      	mov	sp, r7
 8009254:	b002      	add	sp, #8
 8009256:	bd80      	pop	{r7, pc}

08009258 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009258:	b5b0      	push	{r4, r5, r7, lr}
 800925a:	b08a      	sub	sp, #40	; 0x28
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	1dbb      	adds	r3, r7, #6
 8009264:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2280      	movs	r2, #128	; 0x80
 800926a:	589b      	ldr	r3, [r3, r2]
 800926c:	2b20      	cmp	r3, #32
 800926e:	d156      	bne.n	800931e <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8009276:	1dbb      	adds	r3, r7, #6
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e04e      	b.n	8009320 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	689a      	ldr	r2, [r3, #8]
 8009286:	2380      	movs	r3, #128	; 0x80
 8009288:	015b      	lsls	r3, r3, #5
 800928a:	429a      	cmp	r2, r3
 800928c:	d109      	bne.n	80092a2 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d105      	bne.n	80092a2 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2201      	movs	r2, #1
 800929a:	4013      	ands	r3, r2
 800929c:	d001      	beq.n	80092a2 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e03e      	b.n	8009320 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2201      	movs	r2, #1
 80092a6:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80092ae:	2527      	movs	r5, #39	; 0x27
 80092b0:	197c      	adds	r4, r7, r5
 80092b2:	1dbb      	adds	r3, r7, #6
 80092b4:	881a      	ldrh	r2, [r3, #0]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	0018      	movs	r0, r3
 80092bc:	f7ff fc90 	bl	8008be0 <UART_Start_Receive_IT>
 80092c0:	0003      	movs	r3, r0
 80092c2:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80092c4:	197b      	adds	r3, r7, r5
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d124      	bne.n	8009316 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d11c      	bne.n	800930e <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2210      	movs	r2, #16
 80092da:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092dc:	f3ef 8310 	mrs	r3, PRIMASK
 80092e0:	617b      	str	r3, [r7, #20]
  return(result);
 80092e2:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e4:	623b      	str	r3, [r7, #32]
 80092e6:	2301      	movs	r3, #1
 80092e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	f383 8810 	msr	PRIMASK, r3
}
 80092f0:	46c0      	nop			; (mov r8, r8)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2110      	movs	r1, #16
 80092fe:	430a      	orrs	r2, r1
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	f383 8810 	msr	PRIMASK, r3
}
 800930c:	e003      	b.n	8009316 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800930e:	2327      	movs	r3, #39	; 0x27
 8009310:	18fb      	adds	r3, r7, r3
 8009312:	2201      	movs	r2, #1
 8009314:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8009316:	2327      	movs	r3, #39	; 0x27
 8009318:	18fb      	adds	r3, r7, r3
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	e000      	b.n	8009320 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800931e:	2302      	movs	r3, #2
  }
}
 8009320:	0018      	movs	r0, r3
 8009322:	46bd      	mov	sp, r7
 8009324:	b00a      	add	sp, #40	; 0x28
 8009326:	bdb0      	pop	{r4, r5, r7, pc}

08009328 <atoi>:
 8009328:	b510      	push	{r4, lr}
 800932a:	220a      	movs	r2, #10
 800932c:	2100      	movs	r1, #0
 800932e:	f000 f88b 	bl	8009448 <strtol>
 8009332:	bd10      	pop	{r4, pc}

08009334 <_strtol_l.constprop.0>:
 8009334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009336:	b087      	sub	sp, #28
 8009338:	001e      	movs	r6, r3
 800933a:	9005      	str	r0, [sp, #20]
 800933c:	9101      	str	r1, [sp, #4]
 800933e:	9202      	str	r2, [sp, #8]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d048      	beq.n	80093d6 <_strtol_l.constprop.0+0xa2>
 8009344:	000b      	movs	r3, r1
 8009346:	2e24      	cmp	r6, #36	; 0x24
 8009348:	d845      	bhi.n	80093d6 <_strtol_l.constprop.0+0xa2>
 800934a:	4a3b      	ldr	r2, [pc, #236]	; (8009438 <_strtol_l.constprop.0+0x104>)
 800934c:	2108      	movs	r1, #8
 800934e:	4694      	mov	ip, r2
 8009350:	001a      	movs	r2, r3
 8009352:	4660      	mov	r0, ip
 8009354:	7814      	ldrb	r4, [r2, #0]
 8009356:	3301      	adds	r3, #1
 8009358:	5d00      	ldrb	r0, [r0, r4]
 800935a:	001d      	movs	r5, r3
 800935c:	0007      	movs	r7, r0
 800935e:	400f      	ands	r7, r1
 8009360:	4208      	tst	r0, r1
 8009362:	d1f5      	bne.n	8009350 <_strtol_l.constprop.0+0x1c>
 8009364:	2c2d      	cmp	r4, #45	; 0x2d
 8009366:	d13d      	bne.n	80093e4 <_strtol_l.constprop.0+0xb0>
 8009368:	2701      	movs	r7, #1
 800936a:	781c      	ldrb	r4, [r3, #0]
 800936c:	1c95      	adds	r5, r2, #2
 800936e:	2e00      	cmp	r6, #0
 8009370:	d05e      	beq.n	8009430 <_strtol_l.constprop.0+0xfc>
 8009372:	2e10      	cmp	r6, #16
 8009374:	d109      	bne.n	800938a <_strtol_l.constprop.0+0x56>
 8009376:	2c30      	cmp	r4, #48	; 0x30
 8009378:	d107      	bne.n	800938a <_strtol_l.constprop.0+0x56>
 800937a:	2220      	movs	r2, #32
 800937c:	782b      	ldrb	r3, [r5, #0]
 800937e:	4393      	bics	r3, r2
 8009380:	2b58      	cmp	r3, #88	; 0x58
 8009382:	d150      	bne.n	8009426 <_strtol_l.constprop.0+0xf2>
 8009384:	2610      	movs	r6, #16
 8009386:	786c      	ldrb	r4, [r5, #1]
 8009388:	3502      	adds	r5, #2
 800938a:	4b2c      	ldr	r3, [pc, #176]	; (800943c <_strtol_l.constprop.0+0x108>)
 800938c:	0031      	movs	r1, r6
 800938e:	18fb      	adds	r3, r7, r3
 8009390:	0018      	movs	r0, r3
 8009392:	9303      	str	r3, [sp, #12]
 8009394:	f7f6 ff5a 	bl	800024c <__aeabi_uidivmod>
 8009398:	2200      	movs	r2, #0
 800939a:	9104      	str	r1, [sp, #16]
 800939c:	2101      	movs	r1, #1
 800939e:	4684      	mov	ip, r0
 80093a0:	0010      	movs	r0, r2
 80093a2:	4249      	negs	r1, r1
 80093a4:	0023      	movs	r3, r4
 80093a6:	3b30      	subs	r3, #48	; 0x30
 80093a8:	2b09      	cmp	r3, #9
 80093aa:	d903      	bls.n	80093b4 <_strtol_l.constprop.0+0x80>
 80093ac:	3b11      	subs	r3, #17
 80093ae:	2b19      	cmp	r3, #25
 80093b0:	d81d      	bhi.n	80093ee <_strtol_l.constprop.0+0xba>
 80093b2:	330a      	adds	r3, #10
 80093b4:	429e      	cmp	r6, r3
 80093b6:	dd1e      	ble.n	80093f6 <_strtol_l.constprop.0+0xc2>
 80093b8:	1c54      	adds	r4, r2, #1
 80093ba:	d009      	beq.n	80093d0 <_strtol_l.constprop.0+0x9c>
 80093bc:	000a      	movs	r2, r1
 80093be:	4584      	cmp	ip, r0
 80093c0:	d306      	bcc.n	80093d0 <_strtol_l.constprop.0+0x9c>
 80093c2:	d102      	bne.n	80093ca <_strtol_l.constprop.0+0x96>
 80093c4:	9c04      	ldr	r4, [sp, #16]
 80093c6:	429c      	cmp	r4, r3
 80093c8:	db02      	blt.n	80093d0 <_strtol_l.constprop.0+0x9c>
 80093ca:	2201      	movs	r2, #1
 80093cc:	4370      	muls	r0, r6
 80093ce:	1818      	adds	r0, r3, r0
 80093d0:	782c      	ldrb	r4, [r5, #0]
 80093d2:	3501      	adds	r5, #1
 80093d4:	e7e6      	b.n	80093a4 <_strtol_l.constprop.0+0x70>
 80093d6:	f001 f869 	bl	800a4ac <__errno>
 80093da:	2316      	movs	r3, #22
 80093dc:	6003      	str	r3, [r0, #0]
 80093de:	2000      	movs	r0, #0
 80093e0:	b007      	add	sp, #28
 80093e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e4:	2c2b      	cmp	r4, #43	; 0x2b
 80093e6:	d1c2      	bne.n	800936e <_strtol_l.constprop.0+0x3a>
 80093e8:	781c      	ldrb	r4, [r3, #0]
 80093ea:	1c95      	adds	r5, r2, #2
 80093ec:	e7bf      	b.n	800936e <_strtol_l.constprop.0+0x3a>
 80093ee:	0023      	movs	r3, r4
 80093f0:	3b61      	subs	r3, #97	; 0x61
 80093f2:	2b19      	cmp	r3, #25
 80093f4:	d9dd      	bls.n	80093b2 <_strtol_l.constprop.0+0x7e>
 80093f6:	1c53      	adds	r3, r2, #1
 80093f8:	d109      	bne.n	800940e <_strtol_l.constprop.0+0xda>
 80093fa:	2322      	movs	r3, #34	; 0x22
 80093fc:	9a05      	ldr	r2, [sp, #20]
 80093fe:	9803      	ldr	r0, [sp, #12]
 8009400:	6013      	str	r3, [r2, #0]
 8009402:	9b02      	ldr	r3, [sp, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d0eb      	beq.n	80093e0 <_strtol_l.constprop.0+0xac>
 8009408:	1e6b      	subs	r3, r5, #1
 800940a:	9301      	str	r3, [sp, #4]
 800940c:	e007      	b.n	800941e <_strtol_l.constprop.0+0xea>
 800940e:	2f00      	cmp	r7, #0
 8009410:	d000      	beq.n	8009414 <_strtol_l.constprop.0+0xe0>
 8009412:	4240      	negs	r0, r0
 8009414:	9b02      	ldr	r3, [sp, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0e2      	beq.n	80093e0 <_strtol_l.constprop.0+0xac>
 800941a:	2a00      	cmp	r2, #0
 800941c:	d1f4      	bne.n	8009408 <_strtol_l.constprop.0+0xd4>
 800941e:	9b02      	ldr	r3, [sp, #8]
 8009420:	9a01      	ldr	r2, [sp, #4]
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	e7dc      	b.n	80093e0 <_strtol_l.constprop.0+0xac>
 8009426:	2430      	movs	r4, #48	; 0x30
 8009428:	2e00      	cmp	r6, #0
 800942a:	d1ae      	bne.n	800938a <_strtol_l.constprop.0+0x56>
 800942c:	3608      	adds	r6, #8
 800942e:	e7ac      	b.n	800938a <_strtol_l.constprop.0+0x56>
 8009430:	2c30      	cmp	r4, #48	; 0x30
 8009432:	d0a2      	beq.n	800937a <_strtol_l.constprop.0+0x46>
 8009434:	260a      	movs	r6, #10
 8009436:	e7a8      	b.n	800938a <_strtol_l.constprop.0+0x56>
 8009438:	0800de55 	.word	0x0800de55
 800943c:	7fffffff 	.word	0x7fffffff

08009440 <_strtol_r>:
 8009440:	b510      	push	{r4, lr}
 8009442:	f7ff ff77 	bl	8009334 <_strtol_l.constprop.0>
 8009446:	bd10      	pop	{r4, pc}

08009448 <strtol>:
 8009448:	b510      	push	{r4, lr}
 800944a:	4c04      	ldr	r4, [pc, #16]	; (800945c <strtol+0x14>)
 800944c:	0013      	movs	r3, r2
 800944e:	000a      	movs	r2, r1
 8009450:	0001      	movs	r1, r0
 8009452:	6820      	ldr	r0, [r4, #0]
 8009454:	f7ff ff6e 	bl	8009334 <_strtol_l.constprop.0>
 8009458:	bd10      	pop	{r4, pc}
 800945a:	46c0      	nop			; (mov r8, r8)
 800945c:	20000170 	.word	0x20000170

08009460 <__cvt>:
 8009460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009462:	001e      	movs	r6, r3
 8009464:	2300      	movs	r3, #0
 8009466:	0014      	movs	r4, r2
 8009468:	b08b      	sub	sp, #44	; 0x2c
 800946a:	429e      	cmp	r6, r3
 800946c:	da04      	bge.n	8009478 <__cvt+0x18>
 800946e:	2180      	movs	r1, #128	; 0x80
 8009470:	0609      	lsls	r1, r1, #24
 8009472:	1873      	adds	r3, r6, r1
 8009474:	001e      	movs	r6, r3
 8009476:	232d      	movs	r3, #45	; 0x2d
 8009478:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800947a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800947c:	7013      	strb	r3, [r2, #0]
 800947e:	2320      	movs	r3, #32
 8009480:	2203      	movs	r2, #3
 8009482:	439f      	bics	r7, r3
 8009484:	2f46      	cmp	r7, #70	; 0x46
 8009486:	d007      	beq.n	8009498 <__cvt+0x38>
 8009488:	003b      	movs	r3, r7
 800948a:	3b45      	subs	r3, #69	; 0x45
 800948c:	4259      	negs	r1, r3
 800948e:	414b      	adcs	r3, r1
 8009490:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009492:	3a01      	subs	r2, #1
 8009494:	18cb      	adds	r3, r1, r3
 8009496:	9310      	str	r3, [sp, #64]	; 0x40
 8009498:	ab09      	add	r3, sp, #36	; 0x24
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	ab08      	add	r3, sp, #32
 800949e:	9303      	str	r3, [sp, #12]
 80094a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094a2:	9200      	str	r2, [sp, #0]
 80094a4:	9302      	str	r3, [sp, #8]
 80094a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094a8:	0022      	movs	r2, r4
 80094aa:	9301      	str	r3, [sp, #4]
 80094ac:	0033      	movs	r3, r6
 80094ae:	f001 f8c9 	bl	800a644 <_dtoa_r>
 80094b2:	0005      	movs	r5, r0
 80094b4:	2f47      	cmp	r7, #71	; 0x47
 80094b6:	d102      	bne.n	80094be <__cvt+0x5e>
 80094b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094ba:	07db      	lsls	r3, r3, #31
 80094bc:	d528      	bpl.n	8009510 <__cvt+0xb0>
 80094be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094c0:	18eb      	adds	r3, r5, r3
 80094c2:	9307      	str	r3, [sp, #28]
 80094c4:	2f46      	cmp	r7, #70	; 0x46
 80094c6:	d114      	bne.n	80094f2 <__cvt+0x92>
 80094c8:	782b      	ldrb	r3, [r5, #0]
 80094ca:	2b30      	cmp	r3, #48	; 0x30
 80094cc:	d10c      	bne.n	80094e8 <__cvt+0x88>
 80094ce:	2200      	movs	r2, #0
 80094d0:	2300      	movs	r3, #0
 80094d2:	0020      	movs	r0, r4
 80094d4:	0031      	movs	r1, r6
 80094d6:	f7f6 ffb9 	bl	800044c <__aeabi_dcmpeq>
 80094da:	2800      	cmp	r0, #0
 80094dc:	d104      	bne.n	80094e8 <__cvt+0x88>
 80094de:	2301      	movs	r3, #1
 80094e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094ea:	9a07      	ldr	r2, [sp, #28]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	18d3      	adds	r3, r2, r3
 80094f0:	9307      	str	r3, [sp, #28]
 80094f2:	2200      	movs	r2, #0
 80094f4:	2300      	movs	r3, #0
 80094f6:	0020      	movs	r0, r4
 80094f8:	0031      	movs	r1, r6
 80094fa:	f7f6 ffa7 	bl	800044c <__aeabi_dcmpeq>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d001      	beq.n	8009506 <__cvt+0xa6>
 8009502:	9b07      	ldr	r3, [sp, #28]
 8009504:	9309      	str	r3, [sp, #36]	; 0x24
 8009506:	2230      	movs	r2, #48	; 0x30
 8009508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800950a:	9907      	ldr	r1, [sp, #28]
 800950c:	428b      	cmp	r3, r1
 800950e:	d306      	bcc.n	800951e <__cvt+0xbe>
 8009510:	0028      	movs	r0, r5
 8009512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009514:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009516:	1b5b      	subs	r3, r3, r5
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	b00b      	add	sp, #44	; 0x2c
 800951c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800951e:	1c59      	adds	r1, r3, #1
 8009520:	9109      	str	r1, [sp, #36]	; 0x24
 8009522:	701a      	strb	r2, [r3, #0]
 8009524:	e7f0      	b.n	8009508 <__cvt+0xa8>

08009526 <__exponent>:
 8009526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009528:	1c83      	adds	r3, r0, #2
 800952a:	b087      	sub	sp, #28
 800952c:	9303      	str	r3, [sp, #12]
 800952e:	0005      	movs	r5, r0
 8009530:	000c      	movs	r4, r1
 8009532:	232b      	movs	r3, #43	; 0x2b
 8009534:	7002      	strb	r2, [r0, #0]
 8009536:	2900      	cmp	r1, #0
 8009538:	da01      	bge.n	800953e <__exponent+0x18>
 800953a:	424c      	negs	r4, r1
 800953c:	3302      	adds	r3, #2
 800953e:	706b      	strb	r3, [r5, #1]
 8009540:	2c09      	cmp	r4, #9
 8009542:	dd2f      	ble.n	80095a4 <__exponent+0x7e>
 8009544:	270a      	movs	r7, #10
 8009546:	ab04      	add	r3, sp, #16
 8009548:	1dde      	adds	r6, r3, #7
 800954a:	0020      	movs	r0, r4
 800954c:	0039      	movs	r1, r7
 800954e:	9601      	str	r6, [sp, #4]
 8009550:	f7f6 ff66 	bl	8000420 <__aeabi_idivmod>
 8009554:	3e01      	subs	r6, #1
 8009556:	3130      	adds	r1, #48	; 0x30
 8009558:	0020      	movs	r0, r4
 800955a:	7031      	strb	r1, [r6, #0]
 800955c:	0039      	movs	r1, r7
 800955e:	9402      	str	r4, [sp, #8]
 8009560:	f7f6 fe78 	bl	8000254 <__divsi3>
 8009564:	9b02      	ldr	r3, [sp, #8]
 8009566:	0004      	movs	r4, r0
 8009568:	2b63      	cmp	r3, #99	; 0x63
 800956a:	dcee      	bgt.n	800954a <__exponent+0x24>
 800956c:	9b01      	ldr	r3, [sp, #4]
 800956e:	3430      	adds	r4, #48	; 0x30
 8009570:	1e9a      	subs	r2, r3, #2
 8009572:	0013      	movs	r3, r2
 8009574:	9903      	ldr	r1, [sp, #12]
 8009576:	7014      	strb	r4, [r2, #0]
 8009578:	a804      	add	r0, sp, #16
 800957a:	3007      	adds	r0, #7
 800957c:	4298      	cmp	r0, r3
 800957e:	d80c      	bhi.n	800959a <__exponent+0x74>
 8009580:	2300      	movs	r3, #0
 8009582:	4282      	cmp	r2, r0
 8009584:	d804      	bhi.n	8009590 <__exponent+0x6a>
 8009586:	aa04      	add	r2, sp, #16
 8009588:	3309      	adds	r3, #9
 800958a:	189b      	adds	r3, r3, r2
 800958c:	9a01      	ldr	r2, [sp, #4]
 800958e:	1a9b      	subs	r3, r3, r2
 8009590:	9a03      	ldr	r2, [sp, #12]
 8009592:	18d3      	adds	r3, r2, r3
 8009594:	1b58      	subs	r0, r3, r5
 8009596:	b007      	add	sp, #28
 8009598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959a:	7818      	ldrb	r0, [r3, #0]
 800959c:	3301      	adds	r3, #1
 800959e:	7008      	strb	r0, [r1, #0]
 80095a0:	3101      	adds	r1, #1
 80095a2:	e7e9      	b.n	8009578 <__exponent+0x52>
 80095a4:	2330      	movs	r3, #48	; 0x30
 80095a6:	3430      	adds	r4, #48	; 0x30
 80095a8:	70ab      	strb	r3, [r5, #2]
 80095aa:	70ec      	strb	r4, [r5, #3]
 80095ac:	1d2b      	adds	r3, r5, #4
 80095ae:	e7f1      	b.n	8009594 <__exponent+0x6e>

080095b0 <_printf_float>:
 80095b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095b2:	b095      	sub	sp, #84	; 0x54
 80095b4:	000c      	movs	r4, r1
 80095b6:	9208      	str	r2, [sp, #32]
 80095b8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80095ba:	9309      	str	r3, [sp, #36]	; 0x24
 80095bc:	0007      	movs	r7, r0
 80095be:	f000 ff23 	bl	800a408 <_localeconv_r>
 80095c2:	6803      	ldr	r3, [r0, #0]
 80095c4:	0018      	movs	r0, r3
 80095c6:	930c      	str	r3, [sp, #48]	; 0x30
 80095c8:	f7f6 fd9e 	bl	8000108 <strlen>
 80095cc:	2300      	movs	r3, #0
 80095ce:	9312      	str	r3, [sp, #72]	; 0x48
 80095d0:	7e23      	ldrb	r3, [r4, #24]
 80095d2:	2207      	movs	r2, #7
 80095d4:	930a      	str	r3, [sp, #40]	; 0x28
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	900d      	str	r0, [sp, #52]	; 0x34
 80095da:	930b      	str	r3, [sp, #44]	; 0x2c
 80095dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095de:	682b      	ldr	r3, [r5, #0]
 80095e0:	05c9      	lsls	r1, r1, #23
 80095e2:	d547      	bpl.n	8009674 <_printf_float+0xc4>
 80095e4:	189b      	adds	r3, r3, r2
 80095e6:	4393      	bics	r3, r2
 80095e8:	001a      	movs	r2, r3
 80095ea:	3208      	adds	r2, #8
 80095ec:	602a      	str	r2, [r5, #0]
 80095ee:	681e      	ldr	r6, [r3, #0]
 80095f0:	685d      	ldr	r5, [r3, #4]
 80095f2:	0032      	movs	r2, r6
 80095f4:	002b      	movs	r3, r5
 80095f6:	64a2      	str	r2, [r4, #72]	; 0x48
 80095f8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80095fa:	2201      	movs	r2, #1
 80095fc:	006b      	lsls	r3, r5, #1
 80095fe:	085b      	lsrs	r3, r3, #1
 8009600:	930e      	str	r3, [sp, #56]	; 0x38
 8009602:	0030      	movs	r0, r6
 8009604:	4bab      	ldr	r3, [pc, #684]	; (80098b4 <_printf_float+0x304>)
 8009606:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009608:	4252      	negs	r2, r2
 800960a:	f7f9 fdd9 	bl	80031c0 <__aeabi_dcmpun>
 800960e:	2800      	cmp	r0, #0
 8009610:	d132      	bne.n	8009678 <_printf_float+0xc8>
 8009612:	2201      	movs	r2, #1
 8009614:	0030      	movs	r0, r6
 8009616:	4ba7      	ldr	r3, [pc, #668]	; (80098b4 <_printf_float+0x304>)
 8009618:	990e      	ldr	r1, [sp, #56]	; 0x38
 800961a:	4252      	negs	r2, r2
 800961c:	f7f6 ff26 	bl	800046c <__aeabi_dcmple>
 8009620:	2800      	cmp	r0, #0
 8009622:	d129      	bne.n	8009678 <_printf_float+0xc8>
 8009624:	2200      	movs	r2, #0
 8009626:	2300      	movs	r3, #0
 8009628:	0030      	movs	r0, r6
 800962a:	0029      	movs	r1, r5
 800962c:	f7f6 ff14 	bl	8000458 <__aeabi_dcmplt>
 8009630:	2800      	cmp	r0, #0
 8009632:	d003      	beq.n	800963c <_printf_float+0x8c>
 8009634:	0023      	movs	r3, r4
 8009636:	222d      	movs	r2, #45	; 0x2d
 8009638:	3343      	adds	r3, #67	; 0x43
 800963a:	701a      	strb	r2, [r3, #0]
 800963c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800963e:	4d9e      	ldr	r5, [pc, #632]	; (80098b8 <_printf_float+0x308>)
 8009640:	2b47      	cmp	r3, #71	; 0x47
 8009642:	d900      	bls.n	8009646 <_printf_float+0x96>
 8009644:	4d9d      	ldr	r5, [pc, #628]	; (80098bc <_printf_float+0x30c>)
 8009646:	2303      	movs	r3, #3
 8009648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800964a:	6123      	str	r3, [r4, #16]
 800964c:	3301      	adds	r3, #1
 800964e:	439a      	bics	r2, r3
 8009650:	2300      	movs	r3, #0
 8009652:	6022      	str	r2, [r4, #0]
 8009654:	930b      	str	r3, [sp, #44]	; 0x2c
 8009656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009658:	0021      	movs	r1, r4
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	0038      	movs	r0, r7
 800965e:	9b08      	ldr	r3, [sp, #32]
 8009660:	aa13      	add	r2, sp, #76	; 0x4c
 8009662:	f000 f9fb 	bl	8009a5c <_printf_common>
 8009666:	3001      	adds	r0, #1
 8009668:	d000      	beq.n	800966c <_printf_float+0xbc>
 800966a:	e0a3      	b.n	80097b4 <_printf_float+0x204>
 800966c:	2001      	movs	r0, #1
 800966e:	4240      	negs	r0, r0
 8009670:	b015      	add	sp, #84	; 0x54
 8009672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009674:	3307      	adds	r3, #7
 8009676:	e7b6      	b.n	80095e6 <_printf_float+0x36>
 8009678:	0032      	movs	r2, r6
 800967a:	002b      	movs	r3, r5
 800967c:	0030      	movs	r0, r6
 800967e:	0029      	movs	r1, r5
 8009680:	f7f9 fd9e 	bl	80031c0 <__aeabi_dcmpun>
 8009684:	2800      	cmp	r0, #0
 8009686:	d00b      	beq.n	80096a0 <_printf_float+0xf0>
 8009688:	2d00      	cmp	r5, #0
 800968a:	da03      	bge.n	8009694 <_printf_float+0xe4>
 800968c:	0023      	movs	r3, r4
 800968e:	222d      	movs	r2, #45	; 0x2d
 8009690:	3343      	adds	r3, #67	; 0x43
 8009692:	701a      	strb	r2, [r3, #0]
 8009694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009696:	4d8a      	ldr	r5, [pc, #552]	; (80098c0 <_printf_float+0x310>)
 8009698:	2b47      	cmp	r3, #71	; 0x47
 800969a:	d9d4      	bls.n	8009646 <_printf_float+0x96>
 800969c:	4d89      	ldr	r5, [pc, #548]	; (80098c4 <_printf_float+0x314>)
 800969e:	e7d2      	b.n	8009646 <_printf_float+0x96>
 80096a0:	2220      	movs	r2, #32
 80096a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096a4:	6863      	ldr	r3, [r4, #4]
 80096a6:	4391      	bics	r1, r2
 80096a8:	910e      	str	r1, [sp, #56]	; 0x38
 80096aa:	1c5a      	adds	r2, r3, #1
 80096ac:	d14a      	bne.n	8009744 <_printf_float+0x194>
 80096ae:	3307      	adds	r3, #7
 80096b0:	6063      	str	r3, [r4, #4]
 80096b2:	2380      	movs	r3, #128	; 0x80
 80096b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	4313      	orrs	r3, r2
 80096ba:	2200      	movs	r2, #0
 80096bc:	9206      	str	r2, [sp, #24]
 80096be:	aa12      	add	r2, sp, #72	; 0x48
 80096c0:	9205      	str	r2, [sp, #20]
 80096c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	9204      	str	r2, [sp, #16]
 80096c8:	aa11      	add	r2, sp, #68	; 0x44
 80096ca:	9203      	str	r2, [sp, #12]
 80096cc:	2223      	movs	r2, #35	; 0x23
 80096ce:	a908      	add	r1, sp, #32
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	6863      	ldr	r3, [r4, #4]
 80096d4:	1852      	adds	r2, r2, r1
 80096d6:	9202      	str	r2, [sp, #8]
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	0032      	movs	r2, r6
 80096dc:	002b      	movs	r3, r5
 80096de:	0038      	movs	r0, r7
 80096e0:	f7ff febe 	bl	8009460 <__cvt>
 80096e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e6:	0005      	movs	r5, r0
 80096e8:	2b47      	cmp	r3, #71	; 0x47
 80096ea:	d109      	bne.n	8009700 <_printf_float+0x150>
 80096ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096ee:	1cda      	adds	r2, r3, #3
 80096f0:	db02      	blt.n	80096f8 <_printf_float+0x148>
 80096f2:	6862      	ldr	r2, [r4, #4]
 80096f4:	4293      	cmp	r3, r2
 80096f6:	dd49      	ble.n	800978c <_printf_float+0x1dc>
 80096f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096fa:	3b02      	subs	r3, #2
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009702:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009704:	2b65      	cmp	r3, #101	; 0x65
 8009706:	d824      	bhi.n	8009752 <_printf_float+0x1a2>
 8009708:	0020      	movs	r0, r4
 800970a:	001a      	movs	r2, r3
 800970c:	3901      	subs	r1, #1
 800970e:	3050      	adds	r0, #80	; 0x50
 8009710:	9111      	str	r1, [sp, #68]	; 0x44
 8009712:	f7ff ff08 	bl	8009526 <__exponent>
 8009716:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009718:	900b      	str	r0, [sp, #44]	; 0x2c
 800971a:	1813      	adds	r3, r2, r0
 800971c:	6123      	str	r3, [r4, #16]
 800971e:	2a01      	cmp	r2, #1
 8009720:	dc02      	bgt.n	8009728 <_printf_float+0x178>
 8009722:	6822      	ldr	r2, [r4, #0]
 8009724:	07d2      	lsls	r2, r2, #31
 8009726:	d501      	bpl.n	800972c <_printf_float+0x17c>
 8009728:	3301      	adds	r3, #1
 800972a:	6123      	str	r3, [r4, #16]
 800972c:	2323      	movs	r3, #35	; 0x23
 800972e:	aa08      	add	r2, sp, #32
 8009730:	189b      	adds	r3, r3, r2
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d100      	bne.n	800973a <_printf_float+0x18a>
 8009738:	e78d      	b.n	8009656 <_printf_float+0xa6>
 800973a:	0023      	movs	r3, r4
 800973c:	222d      	movs	r2, #45	; 0x2d
 800973e:	3343      	adds	r3, #67	; 0x43
 8009740:	701a      	strb	r2, [r3, #0]
 8009742:	e788      	b.n	8009656 <_printf_float+0xa6>
 8009744:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009746:	2a47      	cmp	r2, #71	; 0x47
 8009748:	d1b3      	bne.n	80096b2 <_printf_float+0x102>
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1b1      	bne.n	80096b2 <_printf_float+0x102>
 800974e:	3301      	adds	r3, #1
 8009750:	e7ae      	b.n	80096b0 <_printf_float+0x100>
 8009752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009754:	2b66      	cmp	r3, #102	; 0x66
 8009756:	d11b      	bne.n	8009790 <_printf_float+0x1e0>
 8009758:	6863      	ldr	r3, [r4, #4]
 800975a:	2900      	cmp	r1, #0
 800975c:	dd09      	ble.n	8009772 <_printf_float+0x1c2>
 800975e:	6121      	str	r1, [r4, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d102      	bne.n	800976a <_printf_float+0x1ba>
 8009764:	6822      	ldr	r2, [r4, #0]
 8009766:	07d2      	lsls	r2, r2, #31
 8009768:	d50b      	bpl.n	8009782 <_printf_float+0x1d2>
 800976a:	3301      	adds	r3, #1
 800976c:	185b      	adds	r3, r3, r1
 800976e:	6123      	str	r3, [r4, #16]
 8009770:	e007      	b.n	8009782 <_printf_float+0x1d2>
 8009772:	2b00      	cmp	r3, #0
 8009774:	d103      	bne.n	800977e <_printf_float+0x1ce>
 8009776:	2201      	movs	r2, #1
 8009778:	6821      	ldr	r1, [r4, #0]
 800977a:	4211      	tst	r1, r2
 800977c:	d000      	beq.n	8009780 <_printf_float+0x1d0>
 800977e:	1c9a      	adds	r2, r3, #2
 8009780:	6122      	str	r2, [r4, #16]
 8009782:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009784:	65a3      	str	r3, [r4, #88]	; 0x58
 8009786:	2300      	movs	r3, #0
 8009788:	930b      	str	r3, [sp, #44]	; 0x2c
 800978a:	e7cf      	b.n	800972c <_printf_float+0x17c>
 800978c:	2367      	movs	r3, #103	; 0x67
 800978e:	930a      	str	r3, [sp, #40]	; 0x28
 8009790:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009792:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009794:	4299      	cmp	r1, r3
 8009796:	db06      	blt.n	80097a6 <_printf_float+0x1f6>
 8009798:	6823      	ldr	r3, [r4, #0]
 800979a:	6121      	str	r1, [r4, #16]
 800979c:	07db      	lsls	r3, r3, #31
 800979e:	d5f0      	bpl.n	8009782 <_printf_float+0x1d2>
 80097a0:	3101      	adds	r1, #1
 80097a2:	6121      	str	r1, [r4, #16]
 80097a4:	e7ed      	b.n	8009782 <_printf_float+0x1d2>
 80097a6:	2201      	movs	r2, #1
 80097a8:	2900      	cmp	r1, #0
 80097aa:	dc01      	bgt.n	80097b0 <_printf_float+0x200>
 80097ac:	1892      	adds	r2, r2, r2
 80097ae:	1a52      	subs	r2, r2, r1
 80097b0:	189b      	adds	r3, r3, r2
 80097b2:	e7dc      	b.n	800976e <_printf_float+0x1be>
 80097b4:	6822      	ldr	r2, [r4, #0]
 80097b6:	0553      	lsls	r3, r2, #21
 80097b8:	d408      	bmi.n	80097cc <_printf_float+0x21c>
 80097ba:	6923      	ldr	r3, [r4, #16]
 80097bc:	002a      	movs	r2, r5
 80097be:	0038      	movs	r0, r7
 80097c0:	9908      	ldr	r1, [sp, #32]
 80097c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80097c4:	47a8      	blx	r5
 80097c6:	3001      	adds	r0, #1
 80097c8:	d12a      	bne.n	8009820 <_printf_float+0x270>
 80097ca:	e74f      	b.n	800966c <_printf_float+0xbc>
 80097cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ce:	2b65      	cmp	r3, #101	; 0x65
 80097d0:	d800      	bhi.n	80097d4 <_printf_float+0x224>
 80097d2:	e0ec      	b.n	80099ae <_printf_float+0x3fe>
 80097d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80097d6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80097d8:	2200      	movs	r2, #0
 80097da:	2300      	movs	r3, #0
 80097dc:	f7f6 fe36 	bl	800044c <__aeabi_dcmpeq>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d034      	beq.n	800984e <_printf_float+0x29e>
 80097e4:	2301      	movs	r3, #1
 80097e6:	0038      	movs	r0, r7
 80097e8:	4a37      	ldr	r2, [pc, #220]	; (80098c8 <_printf_float+0x318>)
 80097ea:	9908      	ldr	r1, [sp, #32]
 80097ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80097ee:	47a8      	blx	r5
 80097f0:	3001      	adds	r0, #1
 80097f2:	d100      	bne.n	80097f6 <_printf_float+0x246>
 80097f4:	e73a      	b.n	800966c <_printf_float+0xbc>
 80097f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097fa:	429a      	cmp	r2, r3
 80097fc:	db02      	blt.n	8009804 <_printf_float+0x254>
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	07db      	lsls	r3, r3, #31
 8009802:	d50d      	bpl.n	8009820 <_printf_float+0x270>
 8009804:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009806:	0038      	movs	r0, r7
 8009808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800980a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800980c:	9908      	ldr	r1, [sp, #32]
 800980e:	47a8      	blx	r5
 8009810:	2500      	movs	r5, #0
 8009812:	3001      	adds	r0, #1
 8009814:	d100      	bne.n	8009818 <_printf_float+0x268>
 8009816:	e729      	b.n	800966c <_printf_float+0xbc>
 8009818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800981a:	3b01      	subs	r3, #1
 800981c:	42ab      	cmp	r3, r5
 800981e:	dc0a      	bgt.n	8009836 <_printf_float+0x286>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	079b      	lsls	r3, r3, #30
 8009824:	d500      	bpl.n	8009828 <_printf_float+0x278>
 8009826:	e116      	b.n	8009a56 <_printf_float+0x4a6>
 8009828:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800982a:	68e0      	ldr	r0, [r4, #12]
 800982c:	4298      	cmp	r0, r3
 800982e:	db00      	blt.n	8009832 <_printf_float+0x282>
 8009830:	e71e      	b.n	8009670 <_printf_float+0xc0>
 8009832:	0018      	movs	r0, r3
 8009834:	e71c      	b.n	8009670 <_printf_float+0xc0>
 8009836:	0022      	movs	r2, r4
 8009838:	2301      	movs	r3, #1
 800983a:	0038      	movs	r0, r7
 800983c:	9908      	ldr	r1, [sp, #32]
 800983e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009840:	321a      	adds	r2, #26
 8009842:	47b0      	blx	r6
 8009844:	3001      	adds	r0, #1
 8009846:	d100      	bne.n	800984a <_printf_float+0x29a>
 8009848:	e710      	b.n	800966c <_printf_float+0xbc>
 800984a:	3501      	adds	r5, #1
 800984c:	e7e4      	b.n	8009818 <_printf_float+0x268>
 800984e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009850:	2b00      	cmp	r3, #0
 8009852:	dc3b      	bgt.n	80098cc <_printf_float+0x31c>
 8009854:	2301      	movs	r3, #1
 8009856:	0038      	movs	r0, r7
 8009858:	4a1b      	ldr	r2, [pc, #108]	; (80098c8 <_printf_float+0x318>)
 800985a:	9908      	ldr	r1, [sp, #32]
 800985c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800985e:	47b0      	blx	r6
 8009860:	3001      	adds	r0, #1
 8009862:	d100      	bne.n	8009866 <_printf_float+0x2b6>
 8009864:	e702      	b.n	800966c <_printf_float+0xbc>
 8009866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009868:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800986a:	4313      	orrs	r3, r2
 800986c:	d102      	bne.n	8009874 <_printf_float+0x2c4>
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	07db      	lsls	r3, r3, #31
 8009872:	d5d5      	bpl.n	8009820 <_printf_float+0x270>
 8009874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009876:	0038      	movs	r0, r7
 8009878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800987a:	9908      	ldr	r1, [sp, #32]
 800987c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800987e:	47b0      	blx	r6
 8009880:	2300      	movs	r3, #0
 8009882:	3001      	adds	r0, #1
 8009884:	d100      	bne.n	8009888 <_printf_float+0x2d8>
 8009886:	e6f1      	b.n	800966c <_printf_float+0xbc>
 8009888:	930a      	str	r3, [sp, #40]	; 0x28
 800988a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800988c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800988e:	425b      	negs	r3, r3
 8009890:	4293      	cmp	r3, r2
 8009892:	dc01      	bgt.n	8009898 <_printf_float+0x2e8>
 8009894:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009896:	e791      	b.n	80097bc <_printf_float+0x20c>
 8009898:	0022      	movs	r2, r4
 800989a:	2301      	movs	r3, #1
 800989c:	0038      	movs	r0, r7
 800989e:	9908      	ldr	r1, [sp, #32]
 80098a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80098a2:	321a      	adds	r2, #26
 80098a4:	47b0      	blx	r6
 80098a6:	3001      	adds	r0, #1
 80098a8:	d100      	bne.n	80098ac <_printf_float+0x2fc>
 80098aa:	e6df      	b.n	800966c <_printf_float+0xbc>
 80098ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ae:	3301      	adds	r3, #1
 80098b0:	e7ea      	b.n	8009888 <_printf_float+0x2d8>
 80098b2:	46c0      	nop			; (mov r8, r8)
 80098b4:	7fefffff 	.word	0x7fefffff
 80098b8:	0800df55 	.word	0x0800df55
 80098bc:	0800df59 	.word	0x0800df59
 80098c0:	0800df5d 	.word	0x0800df5d
 80098c4:	0800df61 	.word	0x0800df61
 80098c8:	0800df65 	.word	0x0800df65
 80098cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098d0:	920a      	str	r2, [sp, #40]	; 0x28
 80098d2:	429a      	cmp	r2, r3
 80098d4:	dd00      	ble.n	80098d8 <_printf_float+0x328>
 80098d6:	930a      	str	r3, [sp, #40]	; 0x28
 80098d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098da:	2b00      	cmp	r3, #0
 80098dc:	dc3d      	bgt.n	800995a <_printf_float+0x3aa>
 80098de:	2300      	movs	r3, #0
 80098e0:	930e      	str	r3, [sp, #56]	; 0x38
 80098e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e4:	43db      	mvns	r3, r3
 80098e6:	17db      	asrs	r3, r3, #31
 80098e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80098ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80098f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098f2:	4013      	ands	r3, r2
 80098f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098fa:	4293      	cmp	r3, r2
 80098fc:	dc36      	bgt.n	800996c <_printf_float+0x3bc>
 80098fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009900:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009902:	429a      	cmp	r2, r3
 8009904:	db40      	blt.n	8009988 <_printf_float+0x3d8>
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	07db      	lsls	r3, r3, #31
 800990a:	d43d      	bmi.n	8009988 <_printf_float+0x3d8>
 800990c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800990e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009912:	1af3      	subs	r3, r6, r3
 8009914:	1ab6      	subs	r6, r6, r2
 8009916:	429e      	cmp	r6, r3
 8009918:	dd00      	ble.n	800991c <_printf_float+0x36c>
 800991a:	001e      	movs	r6, r3
 800991c:	2e00      	cmp	r6, #0
 800991e:	dc3c      	bgt.n	800999a <_printf_float+0x3ea>
 8009920:	2300      	movs	r3, #0
 8009922:	930a      	str	r3, [sp, #40]	; 0x28
 8009924:	43f3      	mvns	r3, r6
 8009926:	17db      	asrs	r3, r3, #31
 8009928:	930b      	str	r3, [sp, #44]	; 0x2c
 800992a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800992c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009932:	4032      	ands	r2, r6
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009938:	4293      	cmp	r3, r2
 800993a:	dc00      	bgt.n	800993e <_printf_float+0x38e>
 800993c:	e770      	b.n	8009820 <_printf_float+0x270>
 800993e:	0022      	movs	r2, r4
 8009940:	2301      	movs	r3, #1
 8009942:	0038      	movs	r0, r7
 8009944:	9908      	ldr	r1, [sp, #32]
 8009946:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009948:	321a      	adds	r2, #26
 800994a:	47a8      	blx	r5
 800994c:	3001      	adds	r0, #1
 800994e:	d100      	bne.n	8009952 <_printf_float+0x3a2>
 8009950:	e68c      	b.n	800966c <_printf_float+0xbc>
 8009952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009954:	3301      	adds	r3, #1
 8009956:	930a      	str	r3, [sp, #40]	; 0x28
 8009958:	e7e7      	b.n	800992a <_printf_float+0x37a>
 800995a:	002a      	movs	r2, r5
 800995c:	0038      	movs	r0, r7
 800995e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009960:	9908      	ldr	r1, [sp, #32]
 8009962:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009964:	47b0      	blx	r6
 8009966:	3001      	adds	r0, #1
 8009968:	d1b9      	bne.n	80098de <_printf_float+0x32e>
 800996a:	e67f      	b.n	800966c <_printf_float+0xbc>
 800996c:	0022      	movs	r2, r4
 800996e:	2301      	movs	r3, #1
 8009970:	0038      	movs	r0, r7
 8009972:	9908      	ldr	r1, [sp, #32]
 8009974:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009976:	321a      	adds	r2, #26
 8009978:	47b0      	blx	r6
 800997a:	3001      	adds	r0, #1
 800997c:	d100      	bne.n	8009980 <_printf_float+0x3d0>
 800997e:	e675      	b.n	800966c <_printf_float+0xbc>
 8009980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009982:	3301      	adds	r3, #1
 8009984:	930e      	str	r3, [sp, #56]	; 0x38
 8009986:	e7b0      	b.n	80098ea <_printf_float+0x33a>
 8009988:	0038      	movs	r0, r7
 800998a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800998c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800998e:	9908      	ldr	r1, [sp, #32]
 8009990:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009992:	47b0      	blx	r6
 8009994:	3001      	adds	r0, #1
 8009996:	d1b9      	bne.n	800990c <_printf_float+0x35c>
 8009998:	e668      	b.n	800966c <_printf_float+0xbc>
 800999a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800999c:	0038      	movs	r0, r7
 800999e:	18ea      	adds	r2, r5, r3
 80099a0:	9908      	ldr	r1, [sp, #32]
 80099a2:	0033      	movs	r3, r6
 80099a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80099a6:	47a8      	blx	r5
 80099a8:	3001      	adds	r0, #1
 80099aa:	d1b9      	bne.n	8009920 <_printf_float+0x370>
 80099ac:	e65e      	b.n	800966c <_printf_float+0xbc>
 80099ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	dc02      	bgt.n	80099ba <_printf_float+0x40a>
 80099b4:	2301      	movs	r3, #1
 80099b6:	421a      	tst	r2, r3
 80099b8:	d03a      	beq.n	8009a30 <_printf_float+0x480>
 80099ba:	2301      	movs	r3, #1
 80099bc:	002a      	movs	r2, r5
 80099be:	0038      	movs	r0, r7
 80099c0:	9908      	ldr	r1, [sp, #32]
 80099c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80099c4:	47b0      	blx	r6
 80099c6:	3001      	adds	r0, #1
 80099c8:	d100      	bne.n	80099cc <_printf_float+0x41c>
 80099ca:	e64f      	b.n	800966c <_printf_float+0xbc>
 80099cc:	0038      	movs	r0, r7
 80099ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099d2:	9908      	ldr	r1, [sp, #32]
 80099d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80099d6:	47b0      	blx	r6
 80099d8:	3001      	adds	r0, #1
 80099da:	d100      	bne.n	80099de <_printf_float+0x42e>
 80099dc:	e646      	b.n	800966c <_printf_float+0xbc>
 80099de:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80099e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80099e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099e4:	2200      	movs	r2, #0
 80099e6:	001e      	movs	r6, r3
 80099e8:	2300      	movs	r3, #0
 80099ea:	f7f6 fd2f 	bl	800044c <__aeabi_dcmpeq>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d11c      	bne.n	8009a2c <_printf_float+0x47c>
 80099f2:	0033      	movs	r3, r6
 80099f4:	1c6a      	adds	r2, r5, #1
 80099f6:	3b01      	subs	r3, #1
 80099f8:	0038      	movs	r0, r7
 80099fa:	9908      	ldr	r1, [sp, #32]
 80099fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80099fe:	47a8      	blx	r5
 8009a00:	3001      	adds	r0, #1
 8009a02:	d10f      	bne.n	8009a24 <_printf_float+0x474>
 8009a04:	e632      	b.n	800966c <_printf_float+0xbc>
 8009a06:	0022      	movs	r2, r4
 8009a08:	2301      	movs	r3, #1
 8009a0a:	0038      	movs	r0, r7
 8009a0c:	9908      	ldr	r1, [sp, #32]
 8009a0e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009a10:	321a      	adds	r2, #26
 8009a12:	47b0      	blx	r6
 8009a14:	3001      	adds	r0, #1
 8009a16:	d100      	bne.n	8009a1a <_printf_float+0x46a>
 8009a18:	e628      	b.n	800966c <_printf_float+0xbc>
 8009a1a:	3501      	adds	r5, #1
 8009a1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	42ab      	cmp	r3, r5
 8009a22:	dcf0      	bgt.n	8009a06 <_printf_float+0x456>
 8009a24:	0022      	movs	r2, r4
 8009a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a28:	3250      	adds	r2, #80	; 0x50
 8009a2a:	e6c8      	b.n	80097be <_printf_float+0x20e>
 8009a2c:	2500      	movs	r5, #0
 8009a2e:	e7f5      	b.n	8009a1c <_printf_float+0x46c>
 8009a30:	002a      	movs	r2, r5
 8009a32:	e7e1      	b.n	80099f8 <_printf_float+0x448>
 8009a34:	0022      	movs	r2, r4
 8009a36:	2301      	movs	r3, #1
 8009a38:	0038      	movs	r0, r7
 8009a3a:	9908      	ldr	r1, [sp, #32]
 8009a3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009a3e:	3219      	adds	r2, #25
 8009a40:	47b0      	blx	r6
 8009a42:	3001      	adds	r0, #1
 8009a44:	d100      	bne.n	8009a48 <_printf_float+0x498>
 8009a46:	e611      	b.n	800966c <_printf_float+0xbc>
 8009a48:	3501      	adds	r5, #1
 8009a4a:	68e3      	ldr	r3, [r4, #12]
 8009a4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a4e:	1a9b      	subs	r3, r3, r2
 8009a50:	42ab      	cmp	r3, r5
 8009a52:	dcef      	bgt.n	8009a34 <_printf_float+0x484>
 8009a54:	e6e8      	b.n	8009828 <_printf_float+0x278>
 8009a56:	2500      	movs	r5, #0
 8009a58:	e7f7      	b.n	8009a4a <_printf_float+0x49a>
 8009a5a:	46c0      	nop			; (mov r8, r8)

08009a5c <_printf_common>:
 8009a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a5e:	0016      	movs	r6, r2
 8009a60:	9301      	str	r3, [sp, #4]
 8009a62:	688a      	ldr	r2, [r1, #8]
 8009a64:	690b      	ldr	r3, [r1, #16]
 8009a66:	000c      	movs	r4, r1
 8009a68:	9000      	str	r0, [sp, #0]
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	da00      	bge.n	8009a70 <_printf_common+0x14>
 8009a6e:	0013      	movs	r3, r2
 8009a70:	0022      	movs	r2, r4
 8009a72:	6033      	str	r3, [r6, #0]
 8009a74:	3243      	adds	r2, #67	; 0x43
 8009a76:	7812      	ldrb	r2, [r2, #0]
 8009a78:	2a00      	cmp	r2, #0
 8009a7a:	d001      	beq.n	8009a80 <_printf_common+0x24>
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	6033      	str	r3, [r6, #0]
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	069b      	lsls	r3, r3, #26
 8009a84:	d502      	bpl.n	8009a8c <_printf_common+0x30>
 8009a86:	6833      	ldr	r3, [r6, #0]
 8009a88:	3302      	adds	r3, #2
 8009a8a:	6033      	str	r3, [r6, #0]
 8009a8c:	6822      	ldr	r2, [r4, #0]
 8009a8e:	2306      	movs	r3, #6
 8009a90:	0015      	movs	r5, r2
 8009a92:	401d      	ands	r5, r3
 8009a94:	421a      	tst	r2, r3
 8009a96:	d027      	beq.n	8009ae8 <_printf_common+0x8c>
 8009a98:	0023      	movs	r3, r4
 8009a9a:	3343      	adds	r3, #67	; 0x43
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	1e5a      	subs	r2, r3, #1
 8009aa0:	4193      	sbcs	r3, r2
 8009aa2:	6822      	ldr	r2, [r4, #0]
 8009aa4:	0692      	lsls	r2, r2, #26
 8009aa6:	d430      	bmi.n	8009b0a <_printf_common+0xae>
 8009aa8:	0022      	movs	r2, r4
 8009aaa:	9901      	ldr	r1, [sp, #4]
 8009aac:	9800      	ldr	r0, [sp, #0]
 8009aae:	9d08      	ldr	r5, [sp, #32]
 8009ab0:	3243      	adds	r2, #67	; 0x43
 8009ab2:	47a8      	blx	r5
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d025      	beq.n	8009b04 <_printf_common+0xa8>
 8009ab8:	2206      	movs	r2, #6
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	2500      	movs	r5, #0
 8009abe:	4013      	ands	r3, r2
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d105      	bne.n	8009ad0 <_printf_common+0x74>
 8009ac4:	6833      	ldr	r3, [r6, #0]
 8009ac6:	68e5      	ldr	r5, [r4, #12]
 8009ac8:	1aed      	subs	r5, r5, r3
 8009aca:	43eb      	mvns	r3, r5
 8009acc:	17db      	asrs	r3, r3, #31
 8009ace:	401d      	ands	r5, r3
 8009ad0:	68a3      	ldr	r3, [r4, #8]
 8009ad2:	6922      	ldr	r2, [r4, #16]
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	dd01      	ble.n	8009adc <_printf_common+0x80>
 8009ad8:	1a9b      	subs	r3, r3, r2
 8009ada:	18ed      	adds	r5, r5, r3
 8009adc:	2600      	movs	r6, #0
 8009ade:	42b5      	cmp	r5, r6
 8009ae0:	d120      	bne.n	8009b24 <_printf_common+0xc8>
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	e010      	b.n	8009b08 <_printf_common+0xac>
 8009ae6:	3501      	adds	r5, #1
 8009ae8:	68e3      	ldr	r3, [r4, #12]
 8009aea:	6832      	ldr	r2, [r6, #0]
 8009aec:	1a9b      	subs	r3, r3, r2
 8009aee:	42ab      	cmp	r3, r5
 8009af0:	ddd2      	ble.n	8009a98 <_printf_common+0x3c>
 8009af2:	0022      	movs	r2, r4
 8009af4:	2301      	movs	r3, #1
 8009af6:	9901      	ldr	r1, [sp, #4]
 8009af8:	9800      	ldr	r0, [sp, #0]
 8009afa:	9f08      	ldr	r7, [sp, #32]
 8009afc:	3219      	adds	r2, #25
 8009afe:	47b8      	blx	r7
 8009b00:	3001      	adds	r0, #1
 8009b02:	d1f0      	bne.n	8009ae6 <_printf_common+0x8a>
 8009b04:	2001      	movs	r0, #1
 8009b06:	4240      	negs	r0, r0
 8009b08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b0a:	2030      	movs	r0, #48	; 0x30
 8009b0c:	18e1      	adds	r1, r4, r3
 8009b0e:	3143      	adds	r1, #67	; 0x43
 8009b10:	7008      	strb	r0, [r1, #0]
 8009b12:	0021      	movs	r1, r4
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	3145      	adds	r1, #69	; 0x45
 8009b18:	7809      	ldrb	r1, [r1, #0]
 8009b1a:	18a2      	adds	r2, r4, r2
 8009b1c:	3243      	adds	r2, #67	; 0x43
 8009b1e:	3302      	adds	r3, #2
 8009b20:	7011      	strb	r1, [r2, #0]
 8009b22:	e7c1      	b.n	8009aa8 <_printf_common+0x4c>
 8009b24:	0022      	movs	r2, r4
 8009b26:	2301      	movs	r3, #1
 8009b28:	9901      	ldr	r1, [sp, #4]
 8009b2a:	9800      	ldr	r0, [sp, #0]
 8009b2c:	9f08      	ldr	r7, [sp, #32]
 8009b2e:	321a      	adds	r2, #26
 8009b30:	47b8      	blx	r7
 8009b32:	3001      	adds	r0, #1
 8009b34:	d0e6      	beq.n	8009b04 <_printf_common+0xa8>
 8009b36:	3601      	adds	r6, #1
 8009b38:	e7d1      	b.n	8009ade <_printf_common+0x82>
	...

08009b3c <_printf_i>:
 8009b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b3e:	b08b      	sub	sp, #44	; 0x2c
 8009b40:	9206      	str	r2, [sp, #24]
 8009b42:	000a      	movs	r2, r1
 8009b44:	3243      	adds	r2, #67	; 0x43
 8009b46:	9307      	str	r3, [sp, #28]
 8009b48:	9005      	str	r0, [sp, #20]
 8009b4a:	9204      	str	r2, [sp, #16]
 8009b4c:	7e0a      	ldrb	r2, [r1, #24]
 8009b4e:	000c      	movs	r4, r1
 8009b50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b52:	2a78      	cmp	r2, #120	; 0x78
 8009b54:	d809      	bhi.n	8009b6a <_printf_i+0x2e>
 8009b56:	2a62      	cmp	r2, #98	; 0x62
 8009b58:	d80b      	bhi.n	8009b72 <_printf_i+0x36>
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	d100      	bne.n	8009b60 <_printf_i+0x24>
 8009b5e:	e0be      	b.n	8009cde <_printf_i+0x1a2>
 8009b60:	497c      	ldr	r1, [pc, #496]	; (8009d54 <_printf_i+0x218>)
 8009b62:	9103      	str	r1, [sp, #12]
 8009b64:	2a58      	cmp	r2, #88	; 0x58
 8009b66:	d100      	bne.n	8009b6a <_printf_i+0x2e>
 8009b68:	e093      	b.n	8009c92 <_printf_i+0x156>
 8009b6a:	0026      	movs	r6, r4
 8009b6c:	3642      	adds	r6, #66	; 0x42
 8009b6e:	7032      	strb	r2, [r6, #0]
 8009b70:	e022      	b.n	8009bb8 <_printf_i+0x7c>
 8009b72:	0010      	movs	r0, r2
 8009b74:	3863      	subs	r0, #99	; 0x63
 8009b76:	2815      	cmp	r0, #21
 8009b78:	d8f7      	bhi.n	8009b6a <_printf_i+0x2e>
 8009b7a:	f7f6 fad7 	bl	800012c <__gnu_thumb1_case_shi>
 8009b7e:	0016      	.short	0x0016
 8009b80:	fff6001f 	.word	0xfff6001f
 8009b84:	fff6fff6 	.word	0xfff6fff6
 8009b88:	001ffff6 	.word	0x001ffff6
 8009b8c:	fff6fff6 	.word	0xfff6fff6
 8009b90:	fff6fff6 	.word	0xfff6fff6
 8009b94:	003600a3 	.word	0x003600a3
 8009b98:	fff60083 	.word	0xfff60083
 8009b9c:	00b4fff6 	.word	0x00b4fff6
 8009ba0:	0036fff6 	.word	0x0036fff6
 8009ba4:	fff6fff6 	.word	0xfff6fff6
 8009ba8:	0087      	.short	0x0087
 8009baa:	0026      	movs	r6, r4
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	3642      	adds	r6, #66	; 0x42
 8009bb0:	1d11      	adds	r1, r2, #4
 8009bb2:	6019      	str	r1, [r3, #0]
 8009bb4:	6813      	ldr	r3, [r2, #0]
 8009bb6:	7033      	strb	r3, [r6, #0]
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e0a2      	b.n	8009d02 <_printf_i+0x1c6>
 8009bbc:	6818      	ldr	r0, [r3, #0]
 8009bbe:	6809      	ldr	r1, [r1, #0]
 8009bc0:	1d02      	adds	r2, r0, #4
 8009bc2:	060d      	lsls	r5, r1, #24
 8009bc4:	d50b      	bpl.n	8009bde <_printf_i+0xa2>
 8009bc6:	6805      	ldr	r5, [r0, #0]
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	2d00      	cmp	r5, #0
 8009bcc:	da03      	bge.n	8009bd6 <_printf_i+0x9a>
 8009bce:	232d      	movs	r3, #45	; 0x2d
 8009bd0:	9a04      	ldr	r2, [sp, #16]
 8009bd2:	426d      	negs	r5, r5
 8009bd4:	7013      	strb	r3, [r2, #0]
 8009bd6:	4b5f      	ldr	r3, [pc, #380]	; (8009d54 <_printf_i+0x218>)
 8009bd8:	270a      	movs	r7, #10
 8009bda:	9303      	str	r3, [sp, #12]
 8009bdc:	e01b      	b.n	8009c16 <_printf_i+0xda>
 8009bde:	6805      	ldr	r5, [r0, #0]
 8009be0:	601a      	str	r2, [r3, #0]
 8009be2:	0649      	lsls	r1, r1, #25
 8009be4:	d5f1      	bpl.n	8009bca <_printf_i+0x8e>
 8009be6:	b22d      	sxth	r5, r5
 8009be8:	e7ef      	b.n	8009bca <_printf_i+0x8e>
 8009bea:	680d      	ldr	r5, [r1, #0]
 8009bec:	6819      	ldr	r1, [r3, #0]
 8009bee:	1d08      	adds	r0, r1, #4
 8009bf0:	6018      	str	r0, [r3, #0]
 8009bf2:	062e      	lsls	r6, r5, #24
 8009bf4:	d501      	bpl.n	8009bfa <_printf_i+0xbe>
 8009bf6:	680d      	ldr	r5, [r1, #0]
 8009bf8:	e003      	b.n	8009c02 <_printf_i+0xc6>
 8009bfa:	066d      	lsls	r5, r5, #25
 8009bfc:	d5fb      	bpl.n	8009bf6 <_printf_i+0xba>
 8009bfe:	680d      	ldr	r5, [r1, #0]
 8009c00:	b2ad      	uxth	r5, r5
 8009c02:	4b54      	ldr	r3, [pc, #336]	; (8009d54 <_printf_i+0x218>)
 8009c04:	2708      	movs	r7, #8
 8009c06:	9303      	str	r3, [sp, #12]
 8009c08:	2a6f      	cmp	r2, #111	; 0x6f
 8009c0a:	d000      	beq.n	8009c0e <_printf_i+0xd2>
 8009c0c:	3702      	adds	r7, #2
 8009c0e:	0023      	movs	r3, r4
 8009c10:	2200      	movs	r2, #0
 8009c12:	3343      	adds	r3, #67	; 0x43
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	6863      	ldr	r3, [r4, #4]
 8009c18:	60a3      	str	r3, [r4, #8]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	db03      	blt.n	8009c26 <_printf_i+0xea>
 8009c1e:	2104      	movs	r1, #4
 8009c20:	6822      	ldr	r2, [r4, #0]
 8009c22:	438a      	bics	r2, r1
 8009c24:	6022      	str	r2, [r4, #0]
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	d102      	bne.n	8009c30 <_printf_i+0xf4>
 8009c2a:	9e04      	ldr	r6, [sp, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00c      	beq.n	8009c4a <_printf_i+0x10e>
 8009c30:	9e04      	ldr	r6, [sp, #16]
 8009c32:	0028      	movs	r0, r5
 8009c34:	0039      	movs	r1, r7
 8009c36:	f7f6 fb09 	bl	800024c <__aeabi_uidivmod>
 8009c3a:	9b03      	ldr	r3, [sp, #12]
 8009c3c:	3e01      	subs	r6, #1
 8009c3e:	5c5b      	ldrb	r3, [r3, r1]
 8009c40:	7033      	strb	r3, [r6, #0]
 8009c42:	002b      	movs	r3, r5
 8009c44:	0005      	movs	r5, r0
 8009c46:	429f      	cmp	r7, r3
 8009c48:	d9f3      	bls.n	8009c32 <_printf_i+0xf6>
 8009c4a:	2f08      	cmp	r7, #8
 8009c4c:	d109      	bne.n	8009c62 <_printf_i+0x126>
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	07db      	lsls	r3, r3, #31
 8009c52:	d506      	bpl.n	8009c62 <_printf_i+0x126>
 8009c54:	6862      	ldr	r2, [r4, #4]
 8009c56:	6923      	ldr	r3, [r4, #16]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	dc02      	bgt.n	8009c62 <_printf_i+0x126>
 8009c5c:	2330      	movs	r3, #48	; 0x30
 8009c5e:	3e01      	subs	r6, #1
 8009c60:	7033      	strb	r3, [r6, #0]
 8009c62:	9b04      	ldr	r3, [sp, #16]
 8009c64:	1b9b      	subs	r3, r3, r6
 8009c66:	6123      	str	r3, [r4, #16]
 8009c68:	9b07      	ldr	r3, [sp, #28]
 8009c6a:	0021      	movs	r1, r4
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	9805      	ldr	r0, [sp, #20]
 8009c70:	9b06      	ldr	r3, [sp, #24]
 8009c72:	aa09      	add	r2, sp, #36	; 0x24
 8009c74:	f7ff fef2 	bl	8009a5c <_printf_common>
 8009c78:	3001      	adds	r0, #1
 8009c7a:	d147      	bne.n	8009d0c <_printf_i+0x1d0>
 8009c7c:	2001      	movs	r0, #1
 8009c7e:	4240      	negs	r0, r0
 8009c80:	b00b      	add	sp, #44	; 0x2c
 8009c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c84:	2220      	movs	r2, #32
 8009c86:	6809      	ldr	r1, [r1, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	6022      	str	r2, [r4, #0]
 8009c8c:	2278      	movs	r2, #120	; 0x78
 8009c8e:	4932      	ldr	r1, [pc, #200]	; (8009d58 <_printf_i+0x21c>)
 8009c90:	9103      	str	r1, [sp, #12]
 8009c92:	0021      	movs	r1, r4
 8009c94:	3145      	adds	r1, #69	; 0x45
 8009c96:	700a      	strb	r2, [r1, #0]
 8009c98:	6819      	ldr	r1, [r3, #0]
 8009c9a:	6822      	ldr	r2, [r4, #0]
 8009c9c:	c920      	ldmia	r1!, {r5}
 8009c9e:	0610      	lsls	r0, r2, #24
 8009ca0:	d402      	bmi.n	8009ca8 <_printf_i+0x16c>
 8009ca2:	0650      	lsls	r0, r2, #25
 8009ca4:	d500      	bpl.n	8009ca8 <_printf_i+0x16c>
 8009ca6:	b2ad      	uxth	r5, r5
 8009ca8:	6019      	str	r1, [r3, #0]
 8009caa:	07d3      	lsls	r3, r2, #31
 8009cac:	d502      	bpl.n	8009cb4 <_printf_i+0x178>
 8009cae:	2320      	movs	r3, #32
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	2710      	movs	r7, #16
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	d1a9      	bne.n	8009c0e <_printf_i+0xd2>
 8009cba:	2220      	movs	r2, #32
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	4393      	bics	r3, r2
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	e7a4      	b.n	8009c0e <_printf_i+0xd2>
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	680d      	ldr	r5, [r1, #0]
 8009cc8:	1d10      	adds	r0, r2, #4
 8009cca:	6949      	ldr	r1, [r1, #20]
 8009ccc:	6018      	str	r0, [r3, #0]
 8009cce:	6813      	ldr	r3, [r2, #0]
 8009cd0:	062e      	lsls	r6, r5, #24
 8009cd2:	d501      	bpl.n	8009cd8 <_printf_i+0x19c>
 8009cd4:	6019      	str	r1, [r3, #0]
 8009cd6:	e002      	b.n	8009cde <_printf_i+0x1a2>
 8009cd8:	066d      	lsls	r5, r5, #25
 8009cda:	d5fb      	bpl.n	8009cd4 <_printf_i+0x198>
 8009cdc:	8019      	strh	r1, [r3, #0]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	9e04      	ldr	r6, [sp, #16]
 8009ce2:	6123      	str	r3, [r4, #16]
 8009ce4:	e7c0      	b.n	8009c68 <_printf_i+0x12c>
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	1d11      	adds	r1, r2, #4
 8009cea:	6019      	str	r1, [r3, #0]
 8009cec:	6816      	ldr	r6, [r2, #0]
 8009cee:	2100      	movs	r1, #0
 8009cf0:	0030      	movs	r0, r6
 8009cf2:	6862      	ldr	r2, [r4, #4]
 8009cf4:	f000 fc07 	bl	800a506 <memchr>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d001      	beq.n	8009d00 <_printf_i+0x1c4>
 8009cfc:	1b80      	subs	r0, r0, r6
 8009cfe:	6060      	str	r0, [r4, #4]
 8009d00:	6863      	ldr	r3, [r4, #4]
 8009d02:	6123      	str	r3, [r4, #16]
 8009d04:	2300      	movs	r3, #0
 8009d06:	9a04      	ldr	r2, [sp, #16]
 8009d08:	7013      	strb	r3, [r2, #0]
 8009d0a:	e7ad      	b.n	8009c68 <_printf_i+0x12c>
 8009d0c:	0032      	movs	r2, r6
 8009d0e:	6923      	ldr	r3, [r4, #16]
 8009d10:	9906      	ldr	r1, [sp, #24]
 8009d12:	9805      	ldr	r0, [sp, #20]
 8009d14:	9d07      	ldr	r5, [sp, #28]
 8009d16:	47a8      	blx	r5
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d0af      	beq.n	8009c7c <_printf_i+0x140>
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	079b      	lsls	r3, r3, #30
 8009d20:	d415      	bmi.n	8009d4e <_printf_i+0x212>
 8009d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d24:	68e0      	ldr	r0, [r4, #12]
 8009d26:	4298      	cmp	r0, r3
 8009d28:	daaa      	bge.n	8009c80 <_printf_i+0x144>
 8009d2a:	0018      	movs	r0, r3
 8009d2c:	e7a8      	b.n	8009c80 <_printf_i+0x144>
 8009d2e:	0022      	movs	r2, r4
 8009d30:	2301      	movs	r3, #1
 8009d32:	9906      	ldr	r1, [sp, #24]
 8009d34:	9805      	ldr	r0, [sp, #20]
 8009d36:	9e07      	ldr	r6, [sp, #28]
 8009d38:	3219      	adds	r2, #25
 8009d3a:	47b0      	blx	r6
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d09d      	beq.n	8009c7c <_printf_i+0x140>
 8009d40:	3501      	adds	r5, #1
 8009d42:	68e3      	ldr	r3, [r4, #12]
 8009d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d46:	1a9b      	subs	r3, r3, r2
 8009d48:	42ab      	cmp	r3, r5
 8009d4a:	dcf0      	bgt.n	8009d2e <_printf_i+0x1f2>
 8009d4c:	e7e9      	b.n	8009d22 <_printf_i+0x1e6>
 8009d4e:	2500      	movs	r5, #0
 8009d50:	e7f7      	b.n	8009d42 <_printf_i+0x206>
 8009d52:	46c0      	nop			; (mov r8, r8)
 8009d54:	0800df67 	.word	0x0800df67
 8009d58:	0800df78 	.word	0x0800df78

08009d5c <_scanf_float>:
 8009d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d5e:	b08b      	sub	sp, #44	; 0x2c
 8009d60:	0016      	movs	r6, r2
 8009d62:	9002      	str	r0, [sp, #8]
 8009d64:	22ae      	movs	r2, #174	; 0xae
 8009d66:	2000      	movs	r0, #0
 8009d68:	9307      	str	r3, [sp, #28]
 8009d6a:	688b      	ldr	r3, [r1, #8]
 8009d6c:	000f      	movs	r7, r1
 8009d6e:	1e59      	subs	r1, r3, #1
 8009d70:	0052      	lsls	r2, r2, #1
 8009d72:	9006      	str	r0, [sp, #24]
 8009d74:	4291      	cmp	r1, r2
 8009d76:	d905      	bls.n	8009d84 <_scanf_float+0x28>
 8009d78:	3b5e      	subs	r3, #94	; 0x5e
 8009d7a:	3bff      	subs	r3, #255	; 0xff
 8009d7c:	9306      	str	r3, [sp, #24]
 8009d7e:	235e      	movs	r3, #94	; 0x5e
 8009d80:	33ff      	adds	r3, #255	; 0xff
 8009d82:	60bb      	str	r3, [r7, #8]
 8009d84:	23f0      	movs	r3, #240	; 0xf0
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	00db      	lsls	r3, r3, #3
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	603b      	str	r3, [r7, #0]
 8009d8e:	003b      	movs	r3, r7
 8009d90:	2400      	movs	r4, #0
 8009d92:	331c      	adds	r3, #28
 8009d94:	001d      	movs	r5, r3
 8009d96:	9304      	str	r3, [sp, #16]
 8009d98:	9403      	str	r4, [sp, #12]
 8009d9a:	9409      	str	r4, [sp, #36]	; 0x24
 8009d9c:	9408      	str	r4, [sp, #32]
 8009d9e:	9401      	str	r4, [sp, #4]
 8009da0:	9405      	str	r4, [sp, #20]
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	2a00      	cmp	r2, #0
 8009da6:	d00a      	beq.n	8009dbe <_scanf_float+0x62>
 8009da8:	6833      	ldr	r3, [r6, #0]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	2b4e      	cmp	r3, #78	; 0x4e
 8009dae:	d844      	bhi.n	8009e3a <_scanf_float+0xde>
 8009db0:	0018      	movs	r0, r3
 8009db2:	2b40      	cmp	r3, #64	; 0x40
 8009db4:	d82c      	bhi.n	8009e10 <_scanf_float+0xb4>
 8009db6:	382b      	subs	r0, #43	; 0x2b
 8009db8:	b2c1      	uxtb	r1, r0
 8009dba:	290e      	cmp	r1, #14
 8009dbc:	d92a      	bls.n	8009e14 <_scanf_float+0xb8>
 8009dbe:	9b01      	ldr	r3, [sp, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <_scanf_float+0x70>
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	4aa3      	ldr	r2, [pc, #652]	; (800a054 <_scanf_float+0x2f8>)
 8009dc8:	4013      	ands	r3, r2
 8009dca:	603b      	str	r3, [r7, #0]
 8009dcc:	9b03      	ldr	r3, [sp, #12]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d900      	bls.n	8009dd6 <_scanf_float+0x7a>
 8009dd4:	e0f9      	b.n	8009fca <_scanf_float+0x26e>
 8009dd6:	24be      	movs	r4, #190	; 0xbe
 8009dd8:	0064      	lsls	r4, r4, #1
 8009dda:	9b04      	ldr	r3, [sp, #16]
 8009ddc:	429d      	cmp	r5, r3
 8009dde:	d900      	bls.n	8009de2 <_scanf_float+0x86>
 8009de0:	e0e9      	b.n	8009fb6 <_scanf_float+0x25a>
 8009de2:	2301      	movs	r3, #1
 8009de4:	9303      	str	r3, [sp, #12]
 8009de6:	e183      	b.n	800a0f0 <_scanf_float+0x394>
 8009de8:	0018      	movs	r0, r3
 8009dea:	3861      	subs	r0, #97	; 0x61
 8009dec:	280d      	cmp	r0, #13
 8009dee:	d8e6      	bhi.n	8009dbe <_scanf_float+0x62>
 8009df0:	f7f6 f99c 	bl	800012c <__gnu_thumb1_case_shi>
 8009df4:	ffe50083 	.word	0xffe50083
 8009df8:	ffe5ffe5 	.word	0xffe5ffe5
 8009dfc:	00a200b6 	.word	0x00a200b6
 8009e00:	ffe5ffe5 	.word	0xffe5ffe5
 8009e04:	ffe50089 	.word	0xffe50089
 8009e08:	ffe5ffe5 	.word	0xffe5ffe5
 8009e0c:	0065ffe5 	.word	0x0065ffe5
 8009e10:	3841      	subs	r0, #65	; 0x41
 8009e12:	e7eb      	b.n	8009dec <_scanf_float+0x90>
 8009e14:	280e      	cmp	r0, #14
 8009e16:	d8d2      	bhi.n	8009dbe <_scanf_float+0x62>
 8009e18:	f7f6 f988 	bl	800012c <__gnu_thumb1_case_shi>
 8009e1c:	ffd1004b 	.word	0xffd1004b
 8009e20:	0098004b 	.word	0x0098004b
 8009e24:	0020ffd1 	.word	0x0020ffd1
 8009e28:	00400040 	.word	0x00400040
 8009e2c:	00400040 	.word	0x00400040
 8009e30:	00400040 	.word	0x00400040
 8009e34:	00400040 	.word	0x00400040
 8009e38:	0040      	.short	0x0040
 8009e3a:	2b6e      	cmp	r3, #110	; 0x6e
 8009e3c:	d809      	bhi.n	8009e52 <_scanf_float+0xf6>
 8009e3e:	2b60      	cmp	r3, #96	; 0x60
 8009e40:	d8d2      	bhi.n	8009de8 <_scanf_float+0x8c>
 8009e42:	2b54      	cmp	r3, #84	; 0x54
 8009e44:	d07d      	beq.n	8009f42 <_scanf_float+0x1e6>
 8009e46:	2b59      	cmp	r3, #89	; 0x59
 8009e48:	d1b9      	bne.n	8009dbe <_scanf_float+0x62>
 8009e4a:	2c07      	cmp	r4, #7
 8009e4c:	d1b7      	bne.n	8009dbe <_scanf_float+0x62>
 8009e4e:	2408      	movs	r4, #8
 8009e50:	e02c      	b.n	8009eac <_scanf_float+0x150>
 8009e52:	2b74      	cmp	r3, #116	; 0x74
 8009e54:	d075      	beq.n	8009f42 <_scanf_float+0x1e6>
 8009e56:	2b79      	cmp	r3, #121	; 0x79
 8009e58:	d0f7      	beq.n	8009e4a <_scanf_float+0xee>
 8009e5a:	e7b0      	b.n	8009dbe <_scanf_float+0x62>
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	05c8      	lsls	r0, r1, #23
 8009e60:	d51c      	bpl.n	8009e9c <_scanf_float+0x140>
 8009e62:	2380      	movs	r3, #128	; 0x80
 8009e64:	4399      	bics	r1, r3
 8009e66:	9b01      	ldr	r3, [sp, #4]
 8009e68:	6039      	str	r1, [r7, #0]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	9b06      	ldr	r3, [sp, #24]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d003      	beq.n	8009e7c <_scanf_float+0x120>
 8009e74:	3b01      	subs	r3, #1
 8009e76:	3201      	adds	r2, #1
 8009e78:	9306      	str	r3, [sp, #24]
 8009e7a:	60ba      	str	r2, [r7, #8]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	60bb      	str	r3, [r7, #8]
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	3301      	adds	r3, #1
 8009e86:	613b      	str	r3, [r7, #16]
 8009e88:	6873      	ldr	r3, [r6, #4]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	6073      	str	r3, [r6, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	dc00      	bgt.n	8009e94 <_scanf_float+0x138>
 8009e92:	e086      	b.n	8009fa2 <_scanf_float+0x246>
 8009e94:	6833      	ldr	r3, [r6, #0]
 8009e96:	3301      	adds	r3, #1
 8009e98:	6033      	str	r3, [r6, #0]
 8009e9a:	e782      	b.n	8009da2 <_scanf_float+0x46>
 8009e9c:	9a03      	ldr	r2, [sp, #12]
 8009e9e:	1912      	adds	r2, r2, r4
 8009ea0:	2a00      	cmp	r2, #0
 8009ea2:	d18c      	bne.n	8009dbe <_scanf_float+0x62>
 8009ea4:	683a      	ldr	r2, [r7, #0]
 8009ea6:	496c      	ldr	r1, [pc, #432]	; (800a058 <_scanf_float+0x2fc>)
 8009ea8:	400a      	ands	r2, r1
 8009eaa:	603a      	str	r2, [r7, #0]
 8009eac:	702b      	strb	r3, [r5, #0]
 8009eae:	3501      	adds	r5, #1
 8009eb0:	e7e4      	b.n	8009e7c <_scanf_float+0x120>
 8009eb2:	2180      	movs	r1, #128	; 0x80
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	420a      	tst	r2, r1
 8009eb8:	d081      	beq.n	8009dbe <_scanf_float+0x62>
 8009eba:	438a      	bics	r2, r1
 8009ebc:	e7f5      	b.n	8009eaa <_scanf_float+0x14e>
 8009ebe:	9a03      	ldr	r2, [sp, #12]
 8009ec0:	2a00      	cmp	r2, #0
 8009ec2:	d10f      	bne.n	8009ee4 <_scanf_float+0x188>
 8009ec4:	9a01      	ldr	r2, [sp, #4]
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	d10f      	bne.n	8009eea <_scanf_float+0x18e>
 8009eca:	683a      	ldr	r2, [r7, #0]
 8009ecc:	21e0      	movs	r1, #224	; 0xe0
 8009ece:	0010      	movs	r0, r2
 8009ed0:	00c9      	lsls	r1, r1, #3
 8009ed2:	4008      	ands	r0, r1
 8009ed4:	4288      	cmp	r0, r1
 8009ed6:	d108      	bne.n	8009eea <_scanf_float+0x18e>
 8009ed8:	4960      	ldr	r1, [pc, #384]	; (800a05c <_scanf_float+0x300>)
 8009eda:	400a      	ands	r2, r1
 8009edc:	603a      	str	r2, [r7, #0]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	9203      	str	r2, [sp, #12]
 8009ee2:	e7e3      	b.n	8009eac <_scanf_float+0x150>
 8009ee4:	9a03      	ldr	r2, [sp, #12]
 8009ee6:	2a02      	cmp	r2, #2
 8009ee8:	d059      	beq.n	8009f9e <_scanf_float+0x242>
 8009eea:	2c01      	cmp	r4, #1
 8009eec:	d002      	beq.n	8009ef4 <_scanf_float+0x198>
 8009eee:	2c04      	cmp	r4, #4
 8009ef0:	d000      	beq.n	8009ef4 <_scanf_float+0x198>
 8009ef2:	e764      	b.n	8009dbe <_scanf_float+0x62>
 8009ef4:	3401      	adds	r4, #1
 8009ef6:	b2e4      	uxtb	r4, r4
 8009ef8:	e7d8      	b.n	8009eac <_scanf_float+0x150>
 8009efa:	9a03      	ldr	r2, [sp, #12]
 8009efc:	2a01      	cmp	r2, #1
 8009efe:	d000      	beq.n	8009f02 <_scanf_float+0x1a6>
 8009f00:	e75d      	b.n	8009dbe <_scanf_float+0x62>
 8009f02:	2202      	movs	r2, #2
 8009f04:	e7ec      	b.n	8009ee0 <_scanf_float+0x184>
 8009f06:	2c00      	cmp	r4, #0
 8009f08:	d110      	bne.n	8009f2c <_scanf_float+0x1d0>
 8009f0a:	9a01      	ldr	r2, [sp, #4]
 8009f0c:	2a00      	cmp	r2, #0
 8009f0e:	d000      	beq.n	8009f12 <_scanf_float+0x1b6>
 8009f10:	e758      	b.n	8009dc4 <_scanf_float+0x68>
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	21e0      	movs	r1, #224	; 0xe0
 8009f16:	0010      	movs	r0, r2
 8009f18:	00c9      	lsls	r1, r1, #3
 8009f1a:	4008      	ands	r0, r1
 8009f1c:	4288      	cmp	r0, r1
 8009f1e:	d000      	beq.n	8009f22 <_scanf_float+0x1c6>
 8009f20:	e754      	b.n	8009dcc <_scanf_float+0x70>
 8009f22:	494e      	ldr	r1, [pc, #312]	; (800a05c <_scanf_float+0x300>)
 8009f24:	3401      	adds	r4, #1
 8009f26:	400a      	ands	r2, r1
 8009f28:	603a      	str	r2, [r7, #0]
 8009f2a:	e7bf      	b.n	8009eac <_scanf_float+0x150>
 8009f2c:	21fd      	movs	r1, #253	; 0xfd
 8009f2e:	1ee2      	subs	r2, r4, #3
 8009f30:	420a      	tst	r2, r1
 8009f32:	d000      	beq.n	8009f36 <_scanf_float+0x1da>
 8009f34:	e743      	b.n	8009dbe <_scanf_float+0x62>
 8009f36:	e7dd      	b.n	8009ef4 <_scanf_float+0x198>
 8009f38:	2c02      	cmp	r4, #2
 8009f3a:	d000      	beq.n	8009f3e <_scanf_float+0x1e2>
 8009f3c:	e73f      	b.n	8009dbe <_scanf_float+0x62>
 8009f3e:	2403      	movs	r4, #3
 8009f40:	e7b4      	b.n	8009eac <_scanf_float+0x150>
 8009f42:	2c06      	cmp	r4, #6
 8009f44:	d000      	beq.n	8009f48 <_scanf_float+0x1ec>
 8009f46:	e73a      	b.n	8009dbe <_scanf_float+0x62>
 8009f48:	2407      	movs	r4, #7
 8009f4a:	e7af      	b.n	8009eac <_scanf_float+0x150>
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	0591      	lsls	r1, r2, #22
 8009f50:	d400      	bmi.n	8009f54 <_scanf_float+0x1f8>
 8009f52:	e734      	b.n	8009dbe <_scanf_float+0x62>
 8009f54:	4942      	ldr	r1, [pc, #264]	; (800a060 <_scanf_float+0x304>)
 8009f56:	400a      	ands	r2, r1
 8009f58:	603a      	str	r2, [r7, #0]
 8009f5a:	9a01      	ldr	r2, [sp, #4]
 8009f5c:	9205      	str	r2, [sp, #20]
 8009f5e:	e7a5      	b.n	8009eac <_scanf_float+0x150>
 8009f60:	21a0      	movs	r1, #160	; 0xa0
 8009f62:	2080      	movs	r0, #128	; 0x80
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	00c9      	lsls	r1, r1, #3
 8009f68:	4011      	ands	r1, r2
 8009f6a:	00c0      	lsls	r0, r0, #3
 8009f6c:	4281      	cmp	r1, r0
 8009f6e:	d006      	beq.n	8009f7e <_scanf_float+0x222>
 8009f70:	4202      	tst	r2, r0
 8009f72:	d100      	bne.n	8009f76 <_scanf_float+0x21a>
 8009f74:	e723      	b.n	8009dbe <_scanf_float+0x62>
 8009f76:	9901      	ldr	r1, [sp, #4]
 8009f78:	2900      	cmp	r1, #0
 8009f7a:	d100      	bne.n	8009f7e <_scanf_float+0x222>
 8009f7c:	e726      	b.n	8009dcc <_scanf_float+0x70>
 8009f7e:	0591      	lsls	r1, r2, #22
 8009f80:	d404      	bmi.n	8009f8c <_scanf_float+0x230>
 8009f82:	9901      	ldr	r1, [sp, #4]
 8009f84:	9805      	ldr	r0, [sp, #20]
 8009f86:	9509      	str	r5, [sp, #36]	; 0x24
 8009f88:	1a09      	subs	r1, r1, r0
 8009f8a:	9108      	str	r1, [sp, #32]
 8009f8c:	4933      	ldr	r1, [pc, #204]	; (800a05c <_scanf_float+0x300>)
 8009f8e:	400a      	ands	r2, r1
 8009f90:	21c0      	movs	r1, #192	; 0xc0
 8009f92:	0049      	lsls	r1, r1, #1
 8009f94:	430a      	orrs	r2, r1
 8009f96:	603a      	str	r2, [r7, #0]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	9201      	str	r2, [sp, #4]
 8009f9c:	e786      	b.n	8009eac <_scanf_float+0x150>
 8009f9e:	2203      	movs	r2, #3
 8009fa0:	e79e      	b.n	8009ee0 <_scanf_float+0x184>
 8009fa2:	23c0      	movs	r3, #192	; 0xc0
 8009fa4:	005b      	lsls	r3, r3, #1
 8009fa6:	0031      	movs	r1, r6
 8009fa8:	58fb      	ldr	r3, [r7, r3]
 8009faa:	9802      	ldr	r0, [sp, #8]
 8009fac:	4798      	blx	r3
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d100      	bne.n	8009fb4 <_scanf_float+0x258>
 8009fb2:	e6f6      	b.n	8009da2 <_scanf_float+0x46>
 8009fb4:	e703      	b.n	8009dbe <_scanf_float+0x62>
 8009fb6:	3d01      	subs	r5, #1
 8009fb8:	593b      	ldr	r3, [r7, r4]
 8009fba:	0032      	movs	r2, r6
 8009fbc:	7829      	ldrb	r1, [r5, #0]
 8009fbe:	9802      	ldr	r0, [sp, #8]
 8009fc0:	4798      	blx	r3
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	613b      	str	r3, [r7, #16]
 8009fc8:	e707      	b.n	8009dda <_scanf_float+0x7e>
 8009fca:	1e63      	subs	r3, r4, #1
 8009fcc:	2b06      	cmp	r3, #6
 8009fce:	d80e      	bhi.n	8009fee <_scanf_float+0x292>
 8009fd0:	9503      	str	r5, [sp, #12]
 8009fd2:	2c02      	cmp	r4, #2
 8009fd4:	d920      	bls.n	800a018 <_scanf_float+0x2bc>
 8009fd6:	1b63      	subs	r3, r4, r5
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	9306      	str	r3, [sp, #24]
 8009fdc:	9b03      	ldr	r3, [sp, #12]
 8009fde:	9a06      	ldr	r2, [sp, #24]
 8009fe0:	189b      	adds	r3, r3, r2
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d827      	bhi.n	800a038 <_scanf_float+0x2dc>
 8009fe8:	3c03      	subs	r4, #3
 8009fea:	b2e4      	uxtb	r4, r4
 8009fec:	1b2d      	subs	r5, r5, r4
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	05da      	lsls	r2, r3, #23
 8009ff2:	d552      	bpl.n	800a09a <_scanf_float+0x33e>
 8009ff4:	055b      	lsls	r3, r3, #21
 8009ff6:	d535      	bpl.n	800a064 <_scanf_float+0x308>
 8009ff8:	24be      	movs	r4, #190	; 0xbe
 8009ffa:	0064      	lsls	r4, r4, #1
 8009ffc:	9b04      	ldr	r3, [sp, #16]
 8009ffe:	429d      	cmp	r5, r3
 800a000:	d800      	bhi.n	800a004 <_scanf_float+0x2a8>
 800a002:	e6ee      	b.n	8009de2 <_scanf_float+0x86>
 800a004:	3d01      	subs	r5, #1
 800a006:	593b      	ldr	r3, [r7, r4]
 800a008:	0032      	movs	r2, r6
 800a00a:	7829      	ldrb	r1, [r5, #0]
 800a00c:	9802      	ldr	r0, [sp, #8]
 800a00e:	4798      	blx	r3
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	3b01      	subs	r3, #1
 800a014:	613b      	str	r3, [r7, #16]
 800a016:	e7f1      	b.n	8009ffc <_scanf_float+0x2a0>
 800a018:	24be      	movs	r4, #190	; 0xbe
 800a01a:	0064      	lsls	r4, r4, #1
 800a01c:	9b04      	ldr	r3, [sp, #16]
 800a01e:	429d      	cmp	r5, r3
 800a020:	d800      	bhi.n	800a024 <_scanf_float+0x2c8>
 800a022:	e6de      	b.n	8009de2 <_scanf_float+0x86>
 800a024:	3d01      	subs	r5, #1
 800a026:	593b      	ldr	r3, [r7, r4]
 800a028:	0032      	movs	r2, r6
 800a02a:	7829      	ldrb	r1, [r5, #0]
 800a02c:	9802      	ldr	r0, [sp, #8]
 800a02e:	4798      	blx	r3
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	3b01      	subs	r3, #1
 800a034:	613b      	str	r3, [r7, #16]
 800a036:	e7f1      	b.n	800a01c <_scanf_float+0x2c0>
 800a038:	9b03      	ldr	r3, [sp, #12]
 800a03a:	0032      	movs	r2, r6
 800a03c:	3b01      	subs	r3, #1
 800a03e:	7819      	ldrb	r1, [r3, #0]
 800a040:	9303      	str	r3, [sp, #12]
 800a042:	23be      	movs	r3, #190	; 0xbe
 800a044:	005b      	lsls	r3, r3, #1
 800a046:	58fb      	ldr	r3, [r7, r3]
 800a048:	9802      	ldr	r0, [sp, #8]
 800a04a:	4798      	blx	r3
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	3b01      	subs	r3, #1
 800a050:	613b      	str	r3, [r7, #16]
 800a052:	e7c3      	b.n	8009fdc <_scanf_float+0x280>
 800a054:	fffffeff 	.word	0xfffffeff
 800a058:	fffffe7f 	.word	0xfffffe7f
 800a05c:	fffff87f 	.word	0xfffff87f
 800a060:	fffffd7f 	.word	0xfffffd7f
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	1e6c      	subs	r4, r5, #1
 800a068:	7821      	ldrb	r1, [r4, #0]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	613b      	str	r3, [r7, #16]
 800a06e:	2965      	cmp	r1, #101	; 0x65
 800a070:	d00c      	beq.n	800a08c <_scanf_float+0x330>
 800a072:	2945      	cmp	r1, #69	; 0x45
 800a074:	d00a      	beq.n	800a08c <_scanf_float+0x330>
 800a076:	23be      	movs	r3, #190	; 0xbe
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	58fb      	ldr	r3, [r7, r3]
 800a07c:	0032      	movs	r2, r6
 800a07e:	9802      	ldr	r0, [sp, #8]
 800a080:	4798      	blx	r3
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	1eac      	subs	r4, r5, #2
 800a086:	3b01      	subs	r3, #1
 800a088:	7821      	ldrb	r1, [r4, #0]
 800a08a:	613b      	str	r3, [r7, #16]
 800a08c:	23be      	movs	r3, #190	; 0xbe
 800a08e:	005b      	lsls	r3, r3, #1
 800a090:	0032      	movs	r2, r6
 800a092:	58fb      	ldr	r3, [r7, r3]
 800a094:	9802      	ldr	r0, [sp, #8]
 800a096:	4798      	blx	r3
 800a098:	0025      	movs	r5, r4
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	2310      	movs	r3, #16
 800a09e:	0011      	movs	r1, r2
 800a0a0:	4019      	ands	r1, r3
 800a0a2:	9103      	str	r1, [sp, #12]
 800a0a4:	421a      	tst	r2, r3
 800a0a6:	d15b      	bne.n	800a160 <_scanf_float+0x404>
 800a0a8:	22c0      	movs	r2, #192	; 0xc0
 800a0aa:	7029      	strb	r1, [r5, #0]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	00d2      	lsls	r2, r2, #3
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	2280      	movs	r2, #128	; 0x80
 800a0b4:	00d2      	lsls	r2, r2, #3
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d11d      	bne.n	800a0f6 <_scanf_float+0x39a>
 800a0ba:	9b05      	ldr	r3, [sp, #20]
 800a0bc:	9a01      	ldr	r2, [sp, #4]
 800a0be:	9901      	ldr	r1, [sp, #4]
 800a0c0:	1a9a      	subs	r2, r3, r2
 800a0c2:	428b      	cmp	r3, r1
 800a0c4:	d124      	bne.n	800a110 <_scanf_float+0x3b4>
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	9904      	ldr	r1, [sp, #16]
 800a0ca:	9802      	ldr	r0, [sp, #8]
 800a0cc:	f002 fcae 	bl	800ca2c <_strtod_r>
 800a0d0:	9b07      	ldr	r3, [sp, #28]
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	0004      	movs	r4, r0
 800a0d6:	000d      	movs	r5, r1
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	0791      	lsls	r1, r2, #30
 800a0dc:	d525      	bpl.n	800a12a <_scanf_float+0x3ce>
 800a0de:	9907      	ldr	r1, [sp, #28]
 800a0e0:	1d1a      	adds	r2, r3, #4
 800a0e2:	600a      	str	r2, [r1, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	601c      	str	r4, [r3, #0]
 800a0e8:	605d      	str	r5, [r3, #4]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	60fb      	str	r3, [r7, #12]
 800a0f0:	9803      	ldr	r0, [sp, #12]
 800a0f2:	b00b      	add	sp, #44	; 0x2c
 800a0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0f6:	9b08      	ldr	r3, [sp, #32]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d0e4      	beq.n	800a0c6 <_scanf_float+0x36a>
 800a0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fe:	9a03      	ldr	r2, [sp, #12]
 800a100:	1c59      	adds	r1, r3, #1
 800a102:	9802      	ldr	r0, [sp, #8]
 800a104:	230a      	movs	r3, #10
 800a106:	f7ff f99b 	bl	8009440 <_strtol_r>
 800a10a:	9b08      	ldr	r3, [sp, #32]
 800a10c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a10e:	1ac2      	subs	r2, r0, r3
 800a110:	003b      	movs	r3, r7
 800a112:	3370      	adds	r3, #112	; 0x70
 800a114:	33ff      	adds	r3, #255	; 0xff
 800a116:	429d      	cmp	r5, r3
 800a118:	d302      	bcc.n	800a120 <_scanf_float+0x3c4>
 800a11a:	003d      	movs	r5, r7
 800a11c:	356f      	adds	r5, #111	; 0x6f
 800a11e:	35ff      	adds	r5, #255	; 0xff
 800a120:	0028      	movs	r0, r5
 800a122:	4910      	ldr	r1, [pc, #64]	; (800a164 <_scanf_float+0x408>)
 800a124:	f000 f8e6 	bl	800a2f4 <siprintf>
 800a128:	e7cd      	b.n	800a0c6 <_scanf_float+0x36a>
 800a12a:	1d19      	adds	r1, r3, #4
 800a12c:	0752      	lsls	r2, r2, #29
 800a12e:	d502      	bpl.n	800a136 <_scanf_float+0x3da>
 800a130:	9a07      	ldr	r2, [sp, #28]
 800a132:	6011      	str	r1, [r2, #0]
 800a134:	e7d6      	b.n	800a0e4 <_scanf_float+0x388>
 800a136:	9a07      	ldr	r2, [sp, #28]
 800a138:	0020      	movs	r0, r4
 800a13a:	6011      	str	r1, [r2, #0]
 800a13c:	681e      	ldr	r6, [r3, #0]
 800a13e:	0022      	movs	r2, r4
 800a140:	002b      	movs	r3, r5
 800a142:	0029      	movs	r1, r5
 800a144:	f7f9 f83c 	bl	80031c0 <__aeabi_dcmpun>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d004      	beq.n	800a156 <_scanf_float+0x3fa>
 800a14c:	4806      	ldr	r0, [pc, #24]	; (800a168 <_scanf_float+0x40c>)
 800a14e:	f000 f9e5 	bl	800a51c <nanf>
 800a152:	6030      	str	r0, [r6, #0]
 800a154:	e7c9      	b.n	800a0ea <_scanf_float+0x38e>
 800a156:	0020      	movs	r0, r4
 800a158:	0029      	movs	r1, r5
 800a15a:	f7f9 f923 	bl	80033a4 <__aeabi_d2f>
 800a15e:	e7f8      	b.n	800a152 <_scanf_float+0x3f6>
 800a160:	2300      	movs	r3, #0
 800a162:	e63f      	b.n	8009de4 <_scanf_float+0x88>
 800a164:	0800df89 	.word	0x0800df89
 800a168:	0800e21c 	.word	0x0800e21c

0800a16c <std>:
 800a16c:	2300      	movs	r3, #0
 800a16e:	b510      	push	{r4, lr}
 800a170:	0004      	movs	r4, r0
 800a172:	6003      	str	r3, [r0, #0]
 800a174:	6043      	str	r3, [r0, #4]
 800a176:	6083      	str	r3, [r0, #8]
 800a178:	8181      	strh	r1, [r0, #12]
 800a17a:	6643      	str	r3, [r0, #100]	; 0x64
 800a17c:	81c2      	strh	r2, [r0, #14]
 800a17e:	6103      	str	r3, [r0, #16]
 800a180:	6143      	str	r3, [r0, #20]
 800a182:	6183      	str	r3, [r0, #24]
 800a184:	0019      	movs	r1, r3
 800a186:	2208      	movs	r2, #8
 800a188:	305c      	adds	r0, #92	; 0x5c
 800a18a:	f000 f91f 	bl	800a3cc <memset>
 800a18e:	4b0b      	ldr	r3, [pc, #44]	; (800a1bc <std+0x50>)
 800a190:	6224      	str	r4, [r4, #32]
 800a192:	6263      	str	r3, [r4, #36]	; 0x24
 800a194:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <std+0x54>)
 800a196:	62a3      	str	r3, [r4, #40]	; 0x28
 800a198:	4b0a      	ldr	r3, [pc, #40]	; (800a1c4 <std+0x58>)
 800a19a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a19c:	4b0a      	ldr	r3, [pc, #40]	; (800a1c8 <std+0x5c>)
 800a19e:	6323      	str	r3, [r4, #48]	; 0x30
 800a1a0:	4b0a      	ldr	r3, [pc, #40]	; (800a1cc <std+0x60>)
 800a1a2:	429c      	cmp	r4, r3
 800a1a4:	d005      	beq.n	800a1b2 <std+0x46>
 800a1a6:	4b0a      	ldr	r3, [pc, #40]	; (800a1d0 <std+0x64>)
 800a1a8:	429c      	cmp	r4, r3
 800a1aa:	d002      	beq.n	800a1b2 <std+0x46>
 800a1ac:	4b09      	ldr	r3, [pc, #36]	; (800a1d4 <std+0x68>)
 800a1ae:	429c      	cmp	r4, r3
 800a1b0:	d103      	bne.n	800a1ba <std+0x4e>
 800a1b2:	0020      	movs	r0, r4
 800a1b4:	3058      	adds	r0, #88	; 0x58
 800a1b6:	f000 f9a3 	bl	800a500 <__retarget_lock_init_recursive>
 800a1ba:	bd10      	pop	{r4, pc}
 800a1bc:	0800a335 	.word	0x0800a335
 800a1c0:	0800a35d 	.word	0x0800a35d
 800a1c4:	0800a395 	.word	0x0800a395
 800a1c8:	0800a3c1 	.word	0x0800a3c1
 800a1cc:	20000918 	.word	0x20000918
 800a1d0:	20000980 	.word	0x20000980
 800a1d4:	200009e8 	.word	0x200009e8

0800a1d8 <stdio_exit_handler>:
 800a1d8:	b510      	push	{r4, lr}
 800a1da:	4a03      	ldr	r2, [pc, #12]	; (800a1e8 <stdio_exit_handler+0x10>)
 800a1dc:	4903      	ldr	r1, [pc, #12]	; (800a1ec <stdio_exit_handler+0x14>)
 800a1de:	4804      	ldr	r0, [pc, #16]	; (800a1f0 <stdio_exit_handler+0x18>)
 800a1e0:	f000 f86c 	bl	800a2bc <_fwalk_sglue>
 800a1e4:	bd10      	pop	{r4, pc}
 800a1e6:	46c0      	nop			; (mov r8, r8)
 800a1e8:	20000118 	.word	0x20000118
 800a1ec:	0800ce15 	.word	0x0800ce15
 800a1f0:	20000124 	.word	0x20000124

0800a1f4 <cleanup_stdio>:
 800a1f4:	6841      	ldr	r1, [r0, #4]
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <cleanup_stdio+0x30>)
 800a1f8:	b510      	push	{r4, lr}
 800a1fa:	0004      	movs	r4, r0
 800a1fc:	4299      	cmp	r1, r3
 800a1fe:	d001      	beq.n	800a204 <cleanup_stdio+0x10>
 800a200:	f002 fe08 	bl	800ce14 <_fflush_r>
 800a204:	68a1      	ldr	r1, [r4, #8]
 800a206:	4b08      	ldr	r3, [pc, #32]	; (800a228 <cleanup_stdio+0x34>)
 800a208:	4299      	cmp	r1, r3
 800a20a:	d002      	beq.n	800a212 <cleanup_stdio+0x1e>
 800a20c:	0020      	movs	r0, r4
 800a20e:	f002 fe01 	bl	800ce14 <_fflush_r>
 800a212:	68e1      	ldr	r1, [r4, #12]
 800a214:	4b05      	ldr	r3, [pc, #20]	; (800a22c <cleanup_stdio+0x38>)
 800a216:	4299      	cmp	r1, r3
 800a218:	d002      	beq.n	800a220 <cleanup_stdio+0x2c>
 800a21a:	0020      	movs	r0, r4
 800a21c:	f002 fdfa 	bl	800ce14 <_fflush_r>
 800a220:	bd10      	pop	{r4, pc}
 800a222:	46c0      	nop			; (mov r8, r8)
 800a224:	20000918 	.word	0x20000918
 800a228:	20000980 	.word	0x20000980
 800a22c:	200009e8 	.word	0x200009e8

0800a230 <global_stdio_init.part.0>:
 800a230:	b510      	push	{r4, lr}
 800a232:	4b09      	ldr	r3, [pc, #36]	; (800a258 <global_stdio_init.part.0+0x28>)
 800a234:	4a09      	ldr	r2, [pc, #36]	; (800a25c <global_stdio_init.part.0+0x2c>)
 800a236:	2104      	movs	r1, #4
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	4809      	ldr	r0, [pc, #36]	; (800a260 <global_stdio_init.part.0+0x30>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	f7ff ff95 	bl	800a16c <std>
 800a242:	2201      	movs	r2, #1
 800a244:	2109      	movs	r1, #9
 800a246:	4807      	ldr	r0, [pc, #28]	; (800a264 <global_stdio_init.part.0+0x34>)
 800a248:	f7ff ff90 	bl	800a16c <std>
 800a24c:	2202      	movs	r2, #2
 800a24e:	2112      	movs	r1, #18
 800a250:	4805      	ldr	r0, [pc, #20]	; (800a268 <global_stdio_init.part.0+0x38>)
 800a252:	f7ff ff8b 	bl	800a16c <std>
 800a256:	bd10      	pop	{r4, pc}
 800a258:	20000a50 	.word	0x20000a50
 800a25c:	0800a1d9 	.word	0x0800a1d9
 800a260:	20000918 	.word	0x20000918
 800a264:	20000980 	.word	0x20000980
 800a268:	200009e8 	.word	0x200009e8

0800a26c <__sfp_lock_acquire>:
 800a26c:	b510      	push	{r4, lr}
 800a26e:	4802      	ldr	r0, [pc, #8]	; (800a278 <__sfp_lock_acquire+0xc>)
 800a270:	f000 f947 	bl	800a502 <__retarget_lock_acquire_recursive>
 800a274:	bd10      	pop	{r4, pc}
 800a276:	46c0      	nop			; (mov r8, r8)
 800a278:	20000a59 	.word	0x20000a59

0800a27c <__sfp_lock_release>:
 800a27c:	b510      	push	{r4, lr}
 800a27e:	4802      	ldr	r0, [pc, #8]	; (800a288 <__sfp_lock_release+0xc>)
 800a280:	f000 f940 	bl	800a504 <__retarget_lock_release_recursive>
 800a284:	bd10      	pop	{r4, pc}
 800a286:	46c0      	nop			; (mov r8, r8)
 800a288:	20000a59 	.word	0x20000a59

0800a28c <__sinit>:
 800a28c:	b510      	push	{r4, lr}
 800a28e:	0004      	movs	r4, r0
 800a290:	f7ff ffec 	bl	800a26c <__sfp_lock_acquire>
 800a294:	6a23      	ldr	r3, [r4, #32]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d002      	beq.n	800a2a0 <__sinit+0x14>
 800a29a:	f7ff ffef 	bl	800a27c <__sfp_lock_release>
 800a29e:	bd10      	pop	{r4, pc}
 800a2a0:	4b04      	ldr	r3, [pc, #16]	; (800a2b4 <__sinit+0x28>)
 800a2a2:	6223      	str	r3, [r4, #32]
 800a2a4:	4b04      	ldr	r3, [pc, #16]	; (800a2b8 <__sinit+0x2c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1f6      	bne.n	800a29a <__sinit+0xe>
 800a2ac:	f7ff ffc0 	bl	800a230 <global_stdio_init.part.0>
 800a2b0:	e7f3      	b.n	800a29a <__sinit+0xe>
 800a2b2:	46c0      	nop			; (mov r8, r8)
 800a2b4:	0800a1f5 	.word	0x0800a1f5
 800a2b8:	20000a50 	.word	0x20000a50

0800a2bc <_fwalk_sglue>:
 800a2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2be:	0014      	movs	r4, r2
 800a2c0:	2600      	movs	r6, #0
 800a2c2:	9000      	str	r0, [sp, #0]
 800a2c4:	9101      	str	r1, [sp, #4]
 800a2c6:	68a5      	ldr	r5, [r4, #8]
 800a2c8:	6867      	ldr	r7, [r4, #4]
 800a2ca:	3f01      	subs	r7, #1
 800a2cc:	d504      	bpl.n	800a2d8 <_fwalk_sglue+0x1c>
 800a2ce:	6824      	ldr	r4, [r4, #0]
 800a2d0:	2c00      	cmp	r4, #0
 800a2d2:	d1f8      	bne.n	800a2c6 <_fwalk_sglue+0xa>
 800a2d4:	0030      	movs	r0, r6
 800a2d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2d8:	89ab      	ldrh	r3, [r5, #12]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d908      	bls.n	800a2f0 <_fwalk_sglue+0x34>
 800a2de:	220e      	movs	r2, #14
 800a2e0:	5eab      	ldrsh	r3, [r5, r2]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	d004      	beq.n	800a2f0 <_fwalk_sglue+0x34>
 800a2e6:	0029      	movs	r1, r5
 800a2e8:	9800      	ldr	r0, [sp, #0]
 800a2ea:	9b01      	ldr	r3, [sp, #4]
 800a2ec:	4798      	blx	r3
 800a2ee:	4306      	orrs	r6, r0
 800a2f0:	3568      	adds	r5, #104	; 0x68
 800a2f2:	e7ea      	b.n	800a2ca <_fwalk_sglue+0xe>

0800a2f4 <siprintf>:
 800a2f4:	b40e      	push	{r1, r2, r3}
 800a2f6:	b500      	push	{lr}
 800a2f8:	490b      	ldr	r1, [pc, #44]	; (800a328 <siprintf+0x34>)
 800a2fa:	b09c      	sub	sp, #112	; 0x70
 800a2fc:	ab1d      	add	r3, sp, #116	; 0x74
 800a2fe:	9002      	str	r0, [sp, #8]
 800a300:	9006      	str	r0, [sp, #24]
 800a302:	9107      	str	r1, [sp, #28]
 800a304:	9104      	str	r1, [sp, #16]
 800a306:	4809      	ldr	r0, [pc, #36]	; (800a32c <siprintf+0x38>)
 800a308:	4909      	ldr	r1, [pc, #36]	; (800a330 <siprintf+0x3c>)
 800a30a:	cb04      	ldmia	r3!, {r2}
 800a30c:	9105      	str	r1, [sp, #20]
 800a30e:	6800      	ldr	r0, [r0, #0]
 800a310:	a902      	add	r1, sp, #8
 800a312:	9301      	str	r3, [sp, #4]
 800a314:	f002 fbf4 	bl	800cb00 <_svfiprintf_r>
 800a318:	2200      	movs	r2, #0
 800a31a:	9b02      	ldr	r3, [sp, #8]
 800a31c:	701a      	strb	r2, [r3, #0]
 800a31e:	b01c      	add	sp, #112	; 0x70
 800a320:	bc08      	pop	{r3}
 800a322:	b003      	add	sp, #12
 800a324:	4718      	bx	r3
 800a326:	46c0      	nop			; (mov r8, r8)
 800a328:	7fffffff 	.word	0x7fffffff
 800a32c:	20000170 	.word	0x20000170
 800a330:	ffff0208 	.word	0xffff0208

0800a334 <__sread>:
 800a334:	b570      	push	{r4, r5, r6, lr}
 800a336:	000c      	movs	r4, r1
 800a338:	250e      	movs	r5, #14
 800a33a:	5f49      	ldrsh	r1, [r1, r5]
 800a33c:	f000 f88e 	bl	800a45c <_read_r>
 800a340:	2800      	cmp	r0, #0
 800a342:	db03      	blt.n	800a34c <__sread+0x18>
 800a344:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a346:	181b      	adds	r3, r3, r0
 800a348:	6563      	str	r3, [r4, #84]	; 0x54
 800a34a:	bd70      	pop	{r4, r5, r6, pc}
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	4a02      	ldr	r2, [pc, #8]	; (800a358 <__sread+0x24>)
 800a350:	4013      	ands	r3, r2
 800a352:	81a3      	strh	r3, [r4, #12]
 800a354:	e7f9      	b.n	800a34a <__sread+0x16>
 800a356:	46c0      	nop			; (mov r8, r8)
 800a358:	ffffefff 	.word	0xffffefff

0800a35c <__swrite>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	001f      	movs	r7, r3
 800a360:	898b      	ldrh	r3, [r1, #12]
 800a362:	0005      	movs	r5, r0
 800a364:	000c      	movs	r4, r1
 800a366:	0016      	movs	r6, r2
 800a368:	05db      	lsls	r3, r3, #23
 800a36a:	d505      	bpl.n	800a378 <__swrite+0x1c>
 800a36c:	230e      	movs	r3, #14
 800a36e:	5ec9      	ldrsh	r1, [r1, r3]
 800a370:	2200      	movs	r2, #0
 800a372:	2302      	movs	r3, #2
 800a374:	f000 f85e 	bl	800a434 <_lseek_r>
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	4a05      	ldr	r2, [pc, #20]	; (800a390 <__swrite+0x34>)
 800a37c:	0028      	movs	r0, r5
 800a37e:	4013      	ands	r3, r2
 800a380:	81a3      	strh	r3, [r4, #12]
 800a382:	0032      	movs	r2, r6
 800a384:	230e      	movs	r3, #14
 800a386:	5ee1      	ldrsh	r1, [r4, r3]
 800a388:	003b      	movs	r3, r7
 800a38a:	f000 f87b 	bl	800a484 <_write_r>
 800a38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a390:	ffffefff 	.word	0xffffefff

0800a394 <__sseek>:
 800a394:	b570      	push	{r4, r5, r6, lr}
 800a396:	000c      	movs	r4, r1
 800a398:	250e      	movs	r5, #14
 800a39a:	5f49      	ldrsh	r1, [r1, r5]
 800a39c:	f000 f84a 	bl	800a434 <_lseek_r>
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	1c42      	adds	r2, r0, #1
 800a3a4:	d103      	bne.n	800a3ae <__sseek+0x1a>
 800a3a6:	4a05      	ldr	r2, [pc, #20]	; (800a3bc <__sseek+0x28>)
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	81a3      	strh	r3, [r4, #12]
 800a3ac:	bd70      	pop	{r4, r5, r6, pc}
 800a3ae:	2280      	movs	r2, #128	; 0x80
 800a3b0:	0152      	lsls	r2, r2, #5
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	6560      	str	r0, [r4, #84]	; 0x54
 800a3b8:	e7f8      	b.n	800a3ac <__sseek+0x18>
 800a3ba:	46c0      	nop			; (mov r8, r8)
 800a3bc:	ffffefff 	.word	0xffffefff

0800a3c0 <__sclose>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	230e      	movs	r3, #14
 800a3c4:	5ec9      	ldrsh	r1, [r1, r3]
 800a3c6:	f000 f823 	bl	800a410 <_close_r>
 800a3ca:	bd10      	pop	{r4, pc}

0800a3cc <memset>:
 800a3cc:	0003      	movs	r3, r0
 800a3ce:	1882      	adds	r2, r0, r2
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d100      	bne.n	800a3d6 <memset+0xa>
 800a3d4:	4770      	bx	lr
 800a3d6:	7019      	strb	r1, [r3, #0]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	e7f9      	b.n	800a3d0 <memset+0x4>

0800a3dc <strstr>:
 800a3dc:	780a      	ldrb	r2, [r1, #0]
 800a3de:	b530      	push	{r4, r5, lr}
 800a3e0:	2a00      	cmp	r2, #0
 800a3e2:	d10c      	bne.n	800a3fe <strstr+0x22>
 800a3e4:	bd30      	pop	{r4, r5, pc}
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d108      	bne.n	800a3fc <strstr+0x20>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	5ccc      	ldrb	r4, [r1, r3]
 800a3ee:	2c00      	cmp	r4, #0
 800a3f0:	d0f8      	beq.n	800a3e4 <strstr+0x8>
 800a3f2:	5cc5      	ldrb	r5, [r0, r3]
 800a3f4:	42a5      	cmp	r5, r4
 800a3f6:	d101      	bne.n	800a3fc <strstr+0x20>
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	e7f7      	b.n	800a3ec <strstr+0x10>
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	7803      	ldrb	r3, [r0, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1f0      	bne.n	800a3e6 <strstr+0xa>
 800a404:	0018      	movs	r0, r3
 800a406:	e7ed      	b.n	800a3e4 <strstr+0x8>

0800a408 <_localeconv_r>:
 800a408:	4800      	ldr	r0, [pc, #0]	; (800a40c <_localeconv_r+0x4>)
 800a40a:	4770      	bx	lr
 800a40c:	20000264 	.word	0x20000264

0800a410 <_close_r>:
 800a410:	2300      	movs	r3, #0
 800a412:	b570      	push	{r4, r5, r6, lr}
 800a414:	4d06      	ldr	r5, [pc, #24]	; (800a430 <_close_r+0x20>)
 800a416:	0004      	movs	r4, r0
 800a418:	0008      	movs	r0, r1
 800a41a:	602b      	str	r3, [r5, #0]
 800a41c:	f7fa fb79 	bl	8004b12 <_close>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d103      	bne.n	800a42c <_close_r+0x1c>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d000      	beq.n	800a42c <_close_r+0x1c>
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	bd70      	pop	{r4, r5, r6, pc}
 800a42e:	46c0      	nop			; (mov r8, r8)
 800a430:	20000a54 	.word	0x20000a54

0800a434 <_lseek_r>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	0004      	movs	r4, r0
 800a438:	0008      	movs	r0, r1
 800a43a:	0011      	movs	r1, r2
 800a43c:	001a      	movs	r2, r3
 800a43e:	2300      	movs	r3, #0
 800a440:	4d05      	ldr	r5, [pc, #20]	; (800a458 <_lseek_r+0x24>)
 800a442:	602b      	str	r3, [r5, #0]
 800a444:	f7fa fb86 	bl	8004b54 <_lseek>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d103      	bne.n	800a454 <_lseek_r+0x20>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d000      	beq.n	800a454 <_lseek_r+0x20>
 800a452:	6023      	str	r3, [r4, #0]
 800a454:	bd70      	pop	{r4, r5, r6, pc}
 800a456:	46c0      	nop			; (mov r8, r8)
 800a458:	20000a54 	.word	0x20000a54

0800a45c <_read_r>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	0004      	movs	r4, r0
 800a460:	0008      	movs	r0, r1
 800a462:	0011      	movs	r1, r2
 800a464:	001a      	movs	r2, r3
 800a466:	2300      	movs	r3, #0
 800a468:	4d05      	ldr	r5, [pc, #20]	; (800a480 <_read_r+0x24>)
 800a46a:	602b      	str	r3, [r5, #0]
 800a46c:	f7fa fb18 	bl	8004aa0 <_read>
 800a470:	1c43      	adds	r3, r0, #1
 800a472:	d103      	bne.n	800a47c <_read_r+0x20>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d000      	beq.n	800a47c <_read_r+0x20>
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	bd70      	pop	{r4, r5, r6, pc}
 800a47e:	46c0      	nop			; (mov r8, r8)
 800a480:	20000a54 	.word	0x20000a54

0800a484 <_write_r>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	0004      	movs	r4, r0
 800a488:	0008      	movs	r0, r1
 800a48a:	0011      	movs	r1, r2
 800a48c:	001a      	movs	r2, r3
 800a48e:	2300      	movs	r3, #0
 800a490:	4d05      	ldr	r5, [pc, #20]	; (800a4a8 <_write_r+0x24>)
 800a492:	602b      	str	r3, [r5, #0]
 800a494:	f7fa fb21 	bl	8004ada <_write>
 800a498:	1c43      	adds	r3, r0, #1
 800a49a:	d103      	bne.n	800a4a4 <_write_r+0x20>
 800a49c:	682b      	ldr	r3, [r5, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d000      	beq.n	800a4a4 <_write_r+0x20>
 800a4a2:	6023      	str	r3, [r4, #0]
 800a4a4:	bd70      	pop	{r4, r5, r6, pc}
 800a4a6:	46c0      	nop			; (mov r8, r8)
 800a4a8:	20000a54 	.word	0x20000a54

0800a4ac <__errno>:
 800a4ac:	4b01      	ldr	r3, [pc, #4]	; (800a4b4 <__errno+0x8>)
 800a4ae:	6818      	ldr	r0, [r3, #0]
 800a4b0:	4770      	bx	lr
 800a4b2:	46c0      	nop			; (mov r8, r8)
 800a4b4:	20000170 	.word	0x20000170

0800a4b8 <__libc_init_array>:
 800a4b8:	b570      	push	{r4, r5, r6, lr}
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	4c0c      	ldr	r4, [pc, #48]	; (800a4f0 <__libc_init_array+0x38>)
 800a4be:	4d0d      	ldr	r5, [pc, #52]	; (800a4f4 <__libc_init_array+0x3c>)
 800a4c0:	1b64      	subs	r4, r4, r5
 800a4c2:	10a4      	asrs	r4, r4, #2
 800a4c4:	42a6      	cmp	r6, r4
 800a4c6:	d109      	bne.n	800a4dc <__libc_init_array+0x24>
 800a4c8:	2600      	movs	r6, #0
 800a4ca:	f003 fbe7 	bl	800dc9c <_init>
 800a4ce:	4c0a      	ldr	r4, [pc, #40]	; (800a4f8 <__libc_init_array+0x40>)
 800a4d0:	4d0a      	ldr	r5, [pc, #40]	; (800a4fc <__libc_init_array+0x44>)
 800a4d2:	1b64      	subs	r4, r4, r5
 800a4d4:	10a4      	asrs	r4, r4, #2
 800a4d6:	42a6      	cmp	r6, r4
 800a4d8:	d105      	bne.n	800a4e6 <__libc_init_array+0x2e>
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
 800a4dc:	00b3      	lsls	r3, r6, #2
 800a4de:	58eb      	ldr	r3, [r5, r3]
 800a4e0:	4798      	blx	r3
 800a4e2:	3601      	adds	r6, #1
 800a4e4:	e7ee      	b.n	800a4c4 <__libc_init_array+0xc>
 800a4e6:	00b3      	lsls	r3, r6, #2
 800a4e8:	58eb      	ldr	r3, [r5, r3]
 800a4ea:	4798      	blx	r3
 800a4ec:	3601      	adds	r6, #1
 800a4ee:	e7f2      	b.n	800a4d6 <__libc_init_array+0x1e>
 800a4f0:	0800e288 	.word	0x0800e288
 800a4f4:	0800e288 	.word	0x0800e288
 800a4f8:	0800e28c 	.word	0x0800e28c
 800a4fc:	0800e288 	.word	0x0800e288

0800a500 <__retarget_lock_init_recursive>:
 800a500:	4770      	bx	lr

0800a502 <__retarget_lock_acquire_recursive>:
 800a502:	4770      	bx	lr

0800a504 <__retarget_lock_release_recursive>:
 800a504:	4770      	bx	lr

0800a506 <memchr>:
 800a506:	b2c9      	uxtb	r1, r1
 800a508:	1882      	adds	r2, r0, r2
 800a50a:	4290      	cmp	r0, r2
 800a50c:	d101      	bne.n	800a512 <memchr+0xc>
 800a50e:	2000      	movs	r0, #0
 800a510:	4770      	bx	lr
 800a512:	7803      	ldrb	r3, [r0, #0]
 800a514:	428b      	cmp	r3, r1
 800a516:	d0fb      	beq.n	800a510 <memchr+0xa>
 800a518:	3001      	adds	r0, #1
 800a51a:	e7f6      	b.n	800a50a <memchr+0x4>

0800a51c <nanf>:
 800a51c:	4800      	ldr	r0, [pc, #0]	; (800a520 <nanf+0x4>)
 800a51e:	4770      	bx	lr
 800a520:	7fc00000 	.word	0x7fc00000

0800a524 <quorem>:
 800a524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a526:	6902      	ldr	r2, [r0, #16]
 800a528:	690b      	ldr	r3, [r1, #16]
 800a52a:	b089      	sub	sp, #36	; 0x24
 800a52c:	0007      	movs	r7, r0
 800a52e:	9104      	str	r1, [sp, #16]
 800a530:	2000      	movs	r0, #0
 800a532:	429a      	cmp	r2, r3
 800a534:	db69      	blt.n	800a60a <quorem+0xe6>
 800a536:	3b01      	subs	r3, #1
 800a538:	009c      	lsls	r4, r3, #2
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	000b      	movs	r3, r1
 800a53e:	3314      	adds	r3, #20
 800a540:	9306      	str	r3, [sp, #24]
 800a542:	191b      	adds	r3, r3, r4
 800a544:	9305      	str	r3, [sp, #20]
 800a546:	003b      	movs	r3, r7
 800a548:	3314      	adds	r3, #20
 800a54a:	9303      	str	r3, [sp, #12]
 800a54c:	191c      	adds	r4, r3, r4
 800a54e:	9b05      	ldr	r3, [sp, #20]
 800a550:	6826      	ldr	r6, [r4, #0]
 800a552:	681d      	ldr	r5, [r3, #0]
 800a554:	0030      	movs	r0, r6
 800a556:	3501      	adds	r5, #1
 800a558:	0029      	movs	r1, r5
 800a55a:	f7f5 fdf1 	bl	8000140 <__udivsi3>
 800a55e:	9002      	str	r0, [sp, #8]
 800a560:	42ae      	cmp	r6, r5
 800a562:	d329      	bcc.n	800a5b8 <quorem+0x94>
 800a564:	9b06      	ldr	r3, [sp, #24]
 800a566:	2600      	movs	r6, #0
 800a568:	469c      	mov	ip, r3
 800a56a:	9d03      	ldr	r5, [sp, #12]
 800a56c:	9606      	str	r6, [sp, #24]
 800a56e:	4662      	mov	r2, ip
 800a570:	ca08      	ldmia	r2!, {r3}
 800a572:	6828      	ldr	r0, [r5, #0]
 800a574:	4694      	mov	ip, r2
 800a576:	9a02      	ldr	r2, [sp, #8]
 800a578:	b299      	uxth	r1, r3
 800a57a:	4351      	muls	r1, r2
 800a57c:	0c1b      	lsrs	r3, r3, #16
 800a57e:	4353      	muls	r3, r2
 800a580:	1989      	adds	r1, r1, r6
 800a582:	0c0a      	lsrs	r2, r1, #16
 800a584:	189b      	adds	r3, r3, r2
 800a586:	9307      	str	r3, [sp, #28]
 800a588:	0c1e      	lsrs	r6, r3, #16
 800a58a:	9b06      	ldr	r3, [sp, #24]
 800a58c:	b282      	uxth	r2, r0
 800a58e:	18d2      	adds	r2, r2, r3
 800a590:	466b      	mov	r3, sp
 800a592:	b289      	uxth	r1, r1
 800a594:	8b9b      	ldrh	r3, [r3, #28]
 800a596:	1a52      	subs	r2, r2, r1
 800a598:	0c01      	lsrs	r1, r0, #16
 800a59a:	1ac9      	subs	r1, r1, r3
 800a59c:	1413      	asrs	r3, r2, #16
 800a59e:	18cb      	adds	r3, r1, r3
 800a5a0:	1419      	asrs	r1, r3, #16
 800a5a2:	b292      	uxth	r2, r2
 800a5a4:	041b      	lsls	r3, r3, #16
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	c508      	stmia	r5!, {r3}
 800a5aa:	9b05      	ldr	r3, [sp, #20]
 800a5ac:	9106      	str	r1, [sp, #24]
 800a5ae:	4563      	cmp	r3, ip
 800a5b0:	d2dd      	bcs.n	800a56e <quorem+0x4a>
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d030      	beq.n	800a61a <quorem+0xf6>
 800a5b8:	0038      	movs	r0, r7
 800a5ba:	9904      	ldr	r1, [sp, #16]
 800a5bc:	f001 fa2a 	bl	800ba14 <__mcmp>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	db21      	blt.n	800a608 <quorem+0xe4>
 800a5c4:	0038      	movs	r0, r7
 800a5c6:	2600      	movs	r6, #0
 800a5c8:	9b02      	ldr	r3, [sp, #8]
 800a5ca:	9c04      	ldr	r4, [sp, #16]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	9302      	str	r3, [sp, #8]
 800a5d0:	3014      	adds	r0, #20
 800a5d2:	3414      	adds	r4, #20
 800a5d4:	6803      	ldr	r3, [r0, #0]
 800a5d6:	cc02      	ldmia	r4!, {r1}
 800a5d8:	b29d      	uxth	r5, r3
 800a5da:	19ad      	adds	r5, r5, r6
 800a5dc:	b28a      	uxth	r2, r1
 800a5de:	1aaa      	subs	r2, r5, r2
 800a5e0:	0c09      	lsrs	r1, r1, #16
 800a5e2:	0c1b      	lsrs	r3, r3, #16
 800a5e4:	1a5b      	subs	r3, r3, r1
 800a5e6:	1411      	asrs	r1, r2, #16
 800a5e8:	185b      	adds	r3, r3, r1
 800a5ea:	141e      	asrs	r6, r3, #16
 800a5ec:	b292      	uxth	r2, r2
 800a5ee:	041b      	lsls	r3, r3, #16
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	c008      	stmia	r0!, {r3}
 800a5f4:	9b05      	ldr	r3, [sp, #20]
 800a5f6:	42a3      	cmp	r3, r4
 800a5f8:	d2ec      	bcs.n	800a5d4 <quorem+0xb0>
 800a5fa:	9b01      	ldr	r3, [sp, #4]
 800a5fc:	9a03      	ldr	r2, [sp, #12]
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	18d3      	adds	r3, r2, r3
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	2a00      	cmp	r2, #0
 800a606:	d015      	beq.n	800a634 <quorem+0x110>
 800a608:	9802      	ldr	r0, [sp, #8]
 800a60a:	b009      	add	sp, #36	; 0x24
 800a60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d106      	bne.n	800a622 <quorem+0xfe>
 800a614:	9b01      	ldr	r3, [sp, #4]
 800a616:	3b01      	subs	r3, #1
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	3c04      	subs	r4, #4
 800a61e:	42a3      	cmp	r3, r4
 800a620:	d3f5      	bcc.n	800a60e <quorem+0xea>
 800a622:	9b01      	ldr	r3, [sp, #4]
 800a624:	613b      	str	r3, [r7, #16]
 800a626:	e7c7      	b.n	800a5b8 <quorem+0x94>
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	2a00      	cmp	r2, #0
 800a62c:	d106      	bne.n	800a63c <quorem+0x118>
 800a62e:	9a01      	ldr	r2, [sp, #4]
 800a630:	3a01      	subs	r2, #1
 800a632:	9201      	str	r2, [sp, #4]
 800a634:	9a03      	ldr	r2, [sp, #12]
 800a636:	3b04      	subs	r3, #4
 800a638:	429a      	cmp	r2, r3
 800a63a:	d3f5      	bcc.n	800a628 <quorem+0x104>
 800a63c:	9b01      	ldr	r3, [sp, #4]
 800a63e:	613b      	str	r3, [r7, #16]
 800a640:	e7e2      	b.n	800a608 <quorem+0xe4>
	...

0800a644 <_dtoa_r>:
 800a644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a646:	0014      	movs	r4, r2
 800a648:	001d      	movs	r5, r3
 800a64a:	69c6      	ldr	r6, [r0, #28]
 800a64c:	b09d      	sub	sp, #116	; 0x74
 800a64e:	9408      	str	r4, [sp, #32]
 800a650:	9509      	str	r5, [sp, #36]	; 0x24
 800a652:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a654:	9004      	str	r0, [sp, #16]
 800a656:	2e00      	cmp	r6, #0
 800a658:	d10f      	bne.n	800a67a <_dtoa_r+0x36>
 800a65a:	2010      	movs	r0, #16
 800a65c:	f000 fe4a 	bl	800b2f4 <malloc>
 800a660:	9b04      	ldr	r3, [sp, #16]
 800a662:	1e02      	subs	r2, r0, #0
 800a664:	61d8      	str	r0, [r3, #28]
 800a666:	d104      	bne.n	800a672 <_dtoa_r+0x2e>
 800a668:	21ef      	movs	r1, #239	; 0xef
 800a66a:	4bc6      	ldr	r3, [pc, #792]	; (800a984 <_dtoa_r+0x340>)
 800a66c:	48c6      	ldr	r0, [pc, #792]	; (800a988 <_dtoa_r+0x344>)
 800a66e:	f002 fc43 	bl	800cef8 <__assert_func>
 800a672:	6046      	str	r6, [r0, #4]
 800a674:	6086      	str	r6, [r0, #8]
 800a676:	6006      	str	r6, [r0, #0]
 800a678:	60c6      	str	r6, [r0, #12]
 800a67a:	9b04      	ldr	r3, [sp, #16]
 800a67c:	69db      	ldr	r3, [r3, #28]
 800a67e:	6819      	ldr	r1, [r3, #0]
 800a680:	2900      	cmp	r1, #0
 800a682:	d00b      	beq.n	800a69c <_dtoa_r+0x58>
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	2301      	movs	r3, #1
 800a688:	4093      	lsls	r3, r2
 800a68a:	604a      	str	r2, [r1, #4]
 800a68c:	608b      	str	r3, [r1, #8]
 800a68e:	9804      	ldr	r0, [sp, #16]
 800a690:	f000 ff32 	bl	800b4f8 <_Bfree>
 800a694:	2200      	movs	r2, #0
 800a696:	9b04      	ldr	r3, [sp, #16]
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	2d00      	cmp	r5, #0
 800a69e:	da1e      	bge.n	800a6de <_dtoa_r+0x9a>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	006b      	lsls	r3, r5, #1
 800a6a6:	085b      	lsrs	r3, r3, #1
 800a6a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a6ac:	4bb7      	ldr	r3, [pc, #732]	; (800a98c <_dtoa_r+0x348>)
 800a6ae:	4ab7      	ldr	r2, [pc, #732]	; (800a98c <_dtoa_r+0x348>)
 800a6b0:	403b      	ands	r3, r7
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d116      	bne.n	800a6e4 <_dtoa_r+0xa0>
 800a6b6:	4bb6      	ldr	r3, [pc, #728]	; (800a990 <_dtoa_r+0x34c>)
 800a6b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	033b      	lsls	r3, r7, #12
 800a6be:	0b1b      	lsrs	r3, r3, #12
 800a6c0:	4323      	orrs	r3, r4
 800a6c2:	d101      	bne.n	800a6c8 <_dtoa_r+0x84>
 800a6c4:	f000 fdb5 	bl	800b232 <_dtoa_r+0xbee>
 800a6c8:	4bb2      	ldr	r3, [pc, #712]	; (800a994 <_dtoa_r+0x350>)
 800a6ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a6cc:	9306      	str	r3, [sp, #24]
 800a6ce:	2a00      	cmp	r2, #0
 800a6d0:	d002      	beq.n	800a6d8 <_dtoa_r+0x94>
 800a6d2:	4bb1      	ldr	r3, [pc, #708]	; (800a998 <_dtoa_r+0x354>)
 800a6d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a6d6:	6013      	str	r3, [r2, #0]
 800a6d8:	9806      	ldr	r0, [sp, #24]
 800a6da:	b01d      	add	sp, #116	; 0x74
 800a6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6de:	2300      	movs	r3, #0
 800a6e0:	603b      	str	r3, [r7, #0]
 800a6e2:	e7e2      	b.n	800a6aa <_dtoa_r+0x66>
 800a6e4:	9a08      	ldr	r2, [sp, #32]
 800a6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e8:	9210      	str	r2, [sp, #64]	; 0x40
 800a6ea:	9311      	str	r3, [sp, #68]	; 0x44
 800a6ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a6ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f7f5 feaa 	bl	800044c <__aeabi_dcmpeq>
 800a6f8:	1e06      	subs	r6, r0, #0
 800a6fa:	d009      	beq.n	800a710 <_dtoa_r+0xcc>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a700:	6013      	str	r3, [r2, #0]
 800a702:	4ba6      	ldr	r3, [pc, #664]	; (800a99c <_dtoa_r+0x358>)
 800a704:	9306      	str	r3, [sp, #24]
 800a706:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d0e5      	beq.n	800a6d8 <_dtoa_r+0x94>
 800a70c:	4ba4      	ldr	r3, [pc, #656]	; (800a9a0 <_dtoa_r+0x35c>)
 800a70e:	e7e1      	b.n	800a6d4 <_dtoa_r+0x90>
 800a710:	ab1a      	add	r3, sp, #104	; 0x68
 800a712:	9301      	str	r3, [sp, #4]
 800a714:	ab1b      	add	r3, sp, #108	; 0x6c
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	9804      	ldr	r0, [sp, #16]
 800a71a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a71c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a71e:	f001 fa95 	bl	800bc4c <__d2b>
 800a722:	007a      	lsls	r2, r7, #1
 800a724:	9005      	str	r0, [sp, #20]
 800a726:	0d52      	lsrs	r2, r2, #21
 800a728:	d100      	bne.n	800a72c <_dtoa_r+0xe8>
 800a72a:	e07b      	b.n	800a824 <_dtoa_r+0x1e0>
 800a72c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a72e:	9617      	str	r6, [sp, #92]	; 0x5c
 800a730:	0319      	lsls	r1, r3, #12
 800a732:	4b9c      	ldr	r3, [pc, #624]	; (800a9a4 <_dtoa_r+0x360>)
 800a734:	0b09      	lsrs	r1, r1, #12
 800a736:	430b      	orrs	r3, r1
 800a738:	499b      	ldr	r1, [pc, #620]	; (800a9a8 <_dtoa_r+0x364>)
 800a73a:	1857      	adds	r7, r2, r1
 800a73c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a73e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a740:	0019      	movs	r1, r3
 800a742:	2200      	movs	r2, #0
 800a744:	4b99      	ldr	r3, [pc, #612]	; (800a9ac <_dtoa_r+0x368>)
 800a746:	f7f8 f9b9 	bl	8002abc <__aeabi_dsub>
 800a74a:	4a99      	ldr	r2, [pc, #612]	; (800a9b0 <_dtoa_r+0x36c>)
 800a74c:	4b99      	ldr	r3, [pc, #612]	; (800a9b4 <_dtoa_r+0x370>)
 800a74e:	f7f7 fef3 	bl	8002538 <__aeabi_dmul>
 800a752:	4a99      	ldr	r2, [pc, #612]	; (800a9b8 <_dtoa_r+0x374>)
 800a754:	4b99      	ldr	r3, [pc, #612]	; (800a9bc <_dtoa_r+0x378>)
 800a756:	f7f6 ff95 	bl	8001684 <__aeabi_dadd>
 800a75a:	0004      	movs	r4, r0
 800a75c:	0038      	movs	r0, r7
 800a75e:	000d      	movs	r5, r1
 800a760:	f7f8 fd82 	bl	8003268 <__aeabi_i2d>
 800a764:	4a96      	ldr	r2, [pc, #600]	; (800a9c0 <_dtoa_r+0x37c>)
 800a766:	4b97      	ldr	r3, [pc, #604]	; (800a9c4 <_dtoa_r+0x380>)
 800a768:	f7f7 fee6 	bl	8002538 <__aeabi_dmul>
 800a76c:	0002      	movs	r2, r0
 800a76e:	000b      	movs	r3, r1
 800a770:	0020      	movs	r0, r4
 800a772:	0029      	movs	r1, r5
 800a774:	f7f6 ff86 	bl	8001684 <__aeabi_dadd>
 800a778:	0004      	movs	r4, r0
 800a77a:	000d      	movs	r5, r1
 800a77c:	f7f8 fd3e 	bl	80031fc <__aeabi_d2iz>
 800a780:	2200      	movs	r2, #0
 800a782:	9003      	str	r0, [sp, #12]
 800a784:	2300      	movs	r3, #0
 800a786:	0020      	movs	r0, r4
 800a788:	0029      	movs	r1, r5
 800a78a:	f7f5 fe65 	bl	8000458 <__aeabi_dcmplt>
 800a78e:	2800      	cmp	r0, #0
 800a790:	d00b      	beq.n	800a7aa <_dtoa_r+0x166>
 800a792:	9803      	ldr	r0, [sp, #12]
 800a794:	f7f8 fd68 	bl	8003268 <__aeabi_i2d>
 800a798:	002b      	movs	r3, r5
 800a79a:	0022      	movs	r2, r4
 800a79c:	f7f5 fe56 	bl	800044c <__aeabi_dcmpeq>
 800a7a0:	4243      	negs	r3, r0
 800a7a2:	4158      	adcs	r0, r3
 800a7a4:	9b03      	ldr	r3, [sp, #12]
 800a7a6:	1a1b      	subs	r3, r3, r0
 800a7a8:	9303      	str	r3, [sp, #12]
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	9316      	str	r3, [sp, #88]	; 0x58
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	2b16      	cmp	r3, #22
 800a7b2:	d810      	bhi.n	800a7d6 <_dtoa_r+0x192>
 800a7b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a7b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a7b8:	9a03      	ldr	r2, [sp, #12]
 800a7ba:	4b83      	ldr	r3, [pc, #524]	; (800a9c8 <_dtoa_r+0x384>)
 800a7bc:	00d2      	lsls	r2, r2, #3
 800a7be:	189b      	adds	r3, r3, r2
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	f7f5 fe48 	bl	8000458 <__aeabi_dcmplt>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d047      	beq.n	800a85c <_dtoa_r+0x218>
 800a7cc:	9b03      	ldr	r3, [sp, #12]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	9303      	str	r3, [sp, #12]
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	9316      	str	r3, [sp, #88]	; 0x58
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a7da:	920a      	str	r2, [sp, #40]	; 0x28
 800a7dc:	1bdb      	subs	r3, r3, r7
 800a7de:	1e5a      	subs	r2, r3, #1
 800a7e0:	d53e      	bpl.n	800a860 <_dtoa_r+0x21c>
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	930a      	str	r3, [sp, #40]	; 0x28
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	930c      	str	r3, [sp, #48]	; 0x30
 800a7ec:	9b03      	ldr	r3, [sp, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	db38      	blt.n	800a864 <_dtoa_r+0x220>
 800a7f2:	9a03      	ldr	r2, [sp, #12]
 800a7f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7f6:	4694      	mov	ip, r2
 800a7f8:	4463      	add	r3, ip
 800a7fa:	930c      	str	r3, [sp, #48]	; 0x30
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	9213      	str	r2, [sp, #76]	; 0x4c
 800a800:	930d      	str	r3, [sp, #52]	; 0x34
 800a802:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a804:	2401      	movs	r4, #1
 800a806:	2b09      	cmp	r3, #9
 800a808:	d867      	bhi.n	800a8da <_dtoa_r+0x296>
 800a80a:	2b05      	cmp	r3, #5
 800a80c:	dd02      	ble.n	800a814 <_dtoa_r+0x1d0>
 800a80e:	2400      	movs	r4, #0
 800a810:	3b04      	subs	r3, #4
 800a812:	9322      	str	r3, [sp, #136]	; 0x88
 800a814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a816:	1e98      	subs	r0, r3, #2
 800a818:	2803      	cmp	r0, #3
 800a81a:	d867      	bhi.n	800a8ec <_dtoa_r+0x2a8>
 800a81c:	f7f5 fc7c 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a820:	5b383a2b 	.word	0x5b383a2b
 800a824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a826:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a828:	18f6      	adds	r6, r6, r3
 800a82a:	4b68      	ldr	r3, [pc, #416]	; (800a9cc <_dtoa_r+0x388>)
 800a82c:	18f2      	adds	r2, r6, r3
 800a82e:	2a20      	cmp	r2, #32
 800a830:	dd0f      	ble.n	800a852 <_dtoa_r+0x20e>
 800a832:	2340      	movs	r3, #64	; 0x40
 800a834:	1a9b      	subs	r3, r3, r2
 800a836:	409f      	lsls	r7, r3
 800a838:	4b65      	ldr	r3, [pc, #404]	; (800a9d0 <_dtoa_r+0x38c>)
 800a83a:	0038      	movs	r0, r7
 800a83c:	18f3      	adds	r3, r6, r3
 800a83e:	40dc      	lsrs	r4, r3
 800a840:	4320      	orrs	r0, r4
 800a842:	f7f8 fd41 	bl	80032c8 <__aeabi_ui2d>
 800a846:	2201      	movs	r2, #1
 800a848:	4b62      	ldr	r3, [pc, #392]	; (800a9d4 <_dtoa_r+0x390>)
 800a84a:	1e77      	subs	r7, r6, #1
 800a84c:	18cb      	adds	r3, r1, r3
 800a84e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a850:	e776      	b.n	800a740 <_dtoa_r+0xfc>
 800a852:	2320      	movs	r3, #32
 800a854:	0020      	movs	r0, r4
 800a856:	1a9b      	subs	r3, r3, r2
 800a858:	4098      	lsls	r0, r3
 800a85a:	e7f2      	b.n	800a842 <_dtoa_r+0x1fe>
 800a85c:	9016      	str	r0, [sp, #88]	; 0x58
 800a85e:	e7ba      	b.n	800a7d6 <_dtoa_r+0x192>
 800a860:	920c      	str	r2, [sp, #48]	; 0x30
 800a862:	e7c3      	b.n	800a7ec <_dtoa_r+0x1a8>
 800a864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a866:	9a03      	ldr	r2, [sp, #12]
 800a868:	1a9b      	subs	r3, r3, r2
 800a86a:	930a      	str	r3, [sp, #40]	; 0x28
 800a86c:	4253      	negs	r3, r2
 800a86e:	930d      	str	r3, [sp, #52]	; 0x34
 800a870:	2300      	movs	r3, #0
 800a872:	9313      	str	r3, [sp, #76]	; 0x4c
 800a874:	e7c5      	b.n	800a802 <_dtoa_r+0x1be>
 800a876:	2300      	movs	r3, #0
 800a878:	930f      	str	r3, [sp, #60]	; 0x3c
 800a87a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a87c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a87e:	9307      	str	r3, [sp, #28]
 800a880:	2b00      	cmp	r3, #0
 800a882:	dc13      	bgt.n	800a8ac <_dtoa_r+0x268>
 800a884:	2301      	movs	r3, #1
 800a886:	001a      	movs	r2, r3
 800a888:	930b      	str	r3, [sp, #44]	; 0x2c
 800a88a:	9307      	str	r3, [sp, #28]
 800a88c:	9223      	str	r2, [sp, #140]	; 0x8c
 800a88e:	e00d      	b.n	800a8ac <_dtoa_r+0x268>
 800a890:	2301      	movs	r3, #1
 800a892:	e7f1      	b.n	800a878 <_dtoa_r+0x234>
 800a894:	2300      	movs	r3, #0
 800a896:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a898:	930f      	str	r3, [sp, #60]	; 0x3c
 800a89a:	4694      	mov	ip, r2
 800a89c:	9b03      	ldr	r3, [sp, #12]
 800a89e:	4463      	add	r3, ip
 800a8a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	9307      	str	r3, [sp, #28]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	dc00      	bgt.n	800a8ac <_dtoa_r+0x268>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	9a04      	ldr	r2, [sp, #16]
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	69d0      	ldr	r0, [r2, #28]
 800a8b2:	2204      	movs	r2, #4
 800a8b4:	0015      	movs	r5, r2
 800a8b6:	3514      	adds	r5, #20
 800a8b8:	429d      	cmp	r5, r3
 800a8ba:	d91b      	bls.n	800a8f4 <_dtoa_r+0x2b0>
 800a8bc:	6041      	str	r1, [r0, #4]
 800a8be:	9804      	ldr	r0, [sp, #16]
 800a8c0:	f000 fdd6 	bl	800b470 <_Balloc>
 800a8c4:	9006      	str	r0, [sp, #24]
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d117      	bne.n	800a8fa <_dtoa_r+0x2b6>
 800a8ca:	21b0      	movs	r1, #176	; 0xb0
 800a8cc:	4b42      	ldr	r3, [pc, #264]	; (800a9d8 <_dtoa_r+0x394>)
 800a8ce:	482e      	ldr	r0, [pc, #184]	; (800a988 <_dtoa_r+0x344>)
 800a8d0:	9a06      	ldr	r2, [sp, #24]
 800a8d2:	31ff      	adds	r1, #255	; 0xff
 800a8d4:	e6cb      	b.n	800a66e <_dtoa_r+0x2a>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e7dd      	b.n	800a896 <_dtoa_r+0x252>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	940f      	str	r4, [sp, #60]	; 0x3c
 800a8de:	9322      	str	r3, [sp, #136]	; 0x88
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8e4:	9307      	str	r3, [sp, #28]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	3313      	adds	r3, #19
 800a8ea:	e7cf      	b.n	800a88c <_dtoa_r+0x248>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8f0:	3b02      	subs	r3, #2
 800a8f2:	e7f6      	b.n	800a8e2 <_dtoa_r+0x29e>
 800a8f4:	3101      	adds	r1, #1
 800a8f6:	0052      	lsls	r2, r2, #1
 800a8f8:	e7dc      	b.n	800a8b4 <_dtoa_r+0x270>
 800a8fa:	9b04      	ldr	r3, [sp, #16]
 800a8fc:	9a06      	ldr	r2, [sp, #24]
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	601a      	str	r2, [r3, #0]
 800a902:	9b07      	ldr	r3, [sp, #28]
 800a904:	2b0e      	cmp	r3, #14
 800a906:	d900      	bls.n	800a90a <_dtoa_r+0x2c6>
 800a908:	e0e5      	b.n	800aad6 <_dtoa_r+0x492>
 800a90a:	2c00      	cmp	r4, #0
 800a90c:	d100      	bne.n	800a910 <_dtoa_r+0x2cc>
 800a90e:	e0e2      	b.n	800aad6 <_dtoa_r+0x492>
 800a910:	9b03      	ldr	r3, [sp, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	dd64      	ble.n	800a9e0 <_dtoa_r+0x39c>
 800a916:	210f      	movs	r1, #15
 800a918:	9a03      	ldr	r2, [sp, #12]
 800a91a:	4b2b      	ldr	r3, [pc, #172]	; (800a9c8 <_dtoa_r+0x384>)
 800a91c:	400a      	ands	r2, r1
 800a91e:	00d2      	lsls	r2, r2, #3
 800a920:	189b      	adds	r3, r3, r2
 800a922:	681e      	ldr	r6, [r3, #0]
 800a924:	685f      	ldr	r7, [r3, #4]
 800a926:	9b03      	ldr	r3, [sp, #12]
 800a928:	2402      	movs	r4, #2
 800a92a:	111d      	asrs	r5, r3, #4
 800a92c:	05db      	lsls	r3, r3, #23
 800a92e:	d50a      	bpl.n	800a946 <_dtoa_r+0x302>
 800a930:	4b2a      	ldr	r3, [pc, #168]	; (800a9dc <_dtoa_r+0x398>)
 800a932:	400d      	ands	r5, r1
 800a934:	6a1a      	ldr	r2, [r3, #32]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a93a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a93c:	f7f7 fa02 	bl	8001d44 <__aeabi_ddiv>
 800a940:	9008      	str	r0, [sp, #32]
 800a942:	9109      	str	r1, [sp, #36]	; 0x24
 800a944:	3401      	adds	r4, #1
 800a946:	4b25      	ldr	r3, [pc, #148]	; (800a9dc <_dtoa_r+0x398>)
 800a948:	930e      	str	r3, [sp, #56]	; 0x38
 800a94a:	2d00      	cmp	r5, #0
 800a94c:	d108      	bne.n	800a960 <_dtoa_r+0x31c>
 800a94e:	9808      	ldr	r0, [sp, #32]
 800a950:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a952:	0032      	movs	r2, r6
 800a954:	003b      	movs	r3, r7
 800a956:	f7f7 f9f5 	bl	8001d44 <__aeabi_ddiv>
 800a95a:	9008      	str	r0, [sp, #32]
 800a95c:	9109      	str	r1, [sp, #36]	; 0x24
 800a95e:	e05a      	b.n	800aa16 <_dtoa_r+0x3d2>
 800a960:	2301      	movs	r3, #1
 800a962:	421d      	tst	r5, r3
 800a964:	d009      	beq.n	800a97a <_dtoa_r+0x336>
 800a966:	18e4      	adds	r4, r4, r3
 800a968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a96a:	0030      	movs	r0, r6
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	0039      	movs	r1, r7
 800a972:	f7f7 fde1 	bl	8002538 <__aeabi_dmul>
 800a976:	0006      	movs	r6, r0
 800a978:	000f      	movs	r7, r1
 800a97a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a97c:	106d      	asrs	r5, r5, #1
 800a97e:	3308      	adds	r3, #8
 800a980:	e7e2      	b.n	800a948 <_dtoa_r+0x304>
 800a982:	46c0      	nop			; (mov r8, r8)
 800a984:	0800df9b 	.word	0x0800df9b
 800a988:	0800dfb2 	.word	0x0800dfb2
 800a98c:	7ff00000 	.word	0x7ff00000
 800a990:	0000270f 	.word	0x0000270f
 800a994:	0800df97 	.word	0x0800df97
 800a998:	0800df9a 	.word	0x0800df9a
 800a99c:	0800df65 	.word	0x0800df65
 800a9a0:	0800df66 	.word	0x0800df66
 800a9a4:	3ff00000 	.word	0x3ff00000
 800a9a8:	fffffc01 	.word	0xfffffc01
 800a9ac:	3ff80000 	.word	0x3ff80000
 800a9b0:	636f4361 	.word	0x636f4361
 800a9b4:	3fd287a7 	.word	0x3fd287a7
 800a9b8:	8b60c8b3 	.word	0x8b60c8b3
 800a9bc:	3fc68a28 	.word	0x3fc68a28
 800a9c0:	509f79fb 	.word	0x509f79fb
 800a9c4:	3fd34413 	.word	0x3fd34413
 800a9c8:	0800e0a0 	.word	0x0800e0a0
 800a9cc:	00000432 	.word	0x00000432
 800a9d0:	00000412 	.word	0x00000412
 800a9d4:	fe100000 	.word	0xfe100000
 800a9d8:	0800e00a 	.word	0x0800e00a
 800a9dc:	0800e078 	.word	0x0800e078
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	2402      	movs	r4, #2
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d016      	beq.n	800aa16 <_dtoa_r+0x3d2>
 800a9e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a9ea:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a9ec:	220f      	movs	r2, #15
 800a9ee:	425d      	negs	r5, r3
 800a9f0:	402a      	ands	r2, r5
 800a9f2:	4bdd      	ldr	r3, [pc, #884]	; (800ad68 <_dtoa_r+0x724>)
 800a9f4:	00d2      	lsls	r2, r2, #3
 800a9f6:	189b      	adds	r3, r3, r2
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	f7f7 fd9c 	bl	8002538 <__aeabi_dmul>
 800aa00:	2701      	movs	r7, #1
 800aa02:	2300      	movs	r3, #0
 800aa04:	9008      	str	r0, [sp, #32]
 800aa06:	9109      	str	r1, [sp, #36]	; 0x24
 800aa08:	4ed8      	ldr	r6, [pc, #864]	; (800ad6c <_dtoa_r+0x728>)
 800aa0a:	112d      	asrs	r5, r5, #4
 800aa0c:	2d00      	cmp	r5, #0
 800aa0e:	d000      	beq.n	800aa12 <_dtoa_r+0x3ce>
 800aa10:	e091      	b.n	800ab36 <_dtoa_r+0x4f2>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1a1      	bne.n	800a95a <_dtoa_r+0x316>
 800aa16:	9e08      	ldr	r6, [sp, #32]
 800aa18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d100      	bne.n	800aa22 <_dtoa_r+0x3de>
 800aa20:	e094      	b.n	800ab4c <_dtoa_r+0x508>
 800aa22:	2200      	movs	r2, #0
 800aa24:	0030      	movs	r0, r6
 800aa26:	0039      	movs	r1, r7
 800aa28:	4bd1      	ldr	r3, [pc, #836]	; (800ad70 <_dtoa_r+0x72c>)
 800aa2a:	f7f5 fd15 	bl	8000458 <__aeabi_dcmplt>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d100      	bne.n	800aa34 <_dtoa_r+0x3f0>
 800aa32:	e08b      	b.n	800ab4c <_dtoa_r+0x508>
 800aa34:	9b07      	ldr	r3, [sp, #28]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d100      	bne.n	800aa3c <_dtoa_r+0x3f8>
 800aa3a:	e087      	b.n	800ab4c <_dtoa_r+0x508>
 800aa3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	dd45      	ble.n	800aace <_dtoa_r+0x48a>
 800aa42:	9b03      	ldr	r3, [sp, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	3b01      	subs	r3, #1
 800aa48:	930e      	str	r3, [sp, #56]	; 0x38
 800aa4a:	0030      	movs	r0, r6
 800aa4c:	4bc9      	ldr	r3, [pc, #804]	; (800ad74 <_dtoa_r+0x730>)
 800aa4e:	0039      	movs	r1, r7
 800aa50:	f7f7 fd72 	bl	8002538 <__aeabi_dmul>
 800aa54:	9008      	str	r0, [sp, #32]
 800aa56:	9109      	str	r1, [sp, #36]	; 0x24
 800aa58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa5a:	3401      	adds	r4, #1
 800aa5c:	0020      	movs	r0, r4
 800aa5e:	9e08      	ldr	r6, [sp, #32]
 800aa60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa62:	9312      	str	r3, [sp, #72]	; 0x48
 800aa64:	f7f8 fc00 	bl	8003268 <__aeabi_i2d>
 800aa68:	0032      	movs	r2, r6
 800aa6a:	003b      	movs	r3, r7
 800aa6c:	f7f7 fd64 	bl	8002538 <__aeabi_dmul>
 800aa70:	2200      	movs	r2, #0
 800aa72:	4bc1      	ldr	r3, [pc, #772]	; (800ad78 <_dtoa_r+0x734>)
 800aa74:	f7f6 fe06 	bl	8001684 <__aeabi_dadd>
 800aa78:	4ac0      	ldr	r2, [pc, #768]	; (800ad7c <_dtoa_r+0x738>)
 800aa7a:	9014      	str	r0, [sp, #80]	; 0x50
 800aa7c:	9115      	str	r1, [sp, #84]	; 0x54
 800aa7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa80:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800aa82:	4694      	mov	ip, r2
 800aa84:	9308      	str	r3, [sp, #32]
 800aa86:	9409      	str	r4, [sp, #36]	; 0x24
 800aa88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa8a:	4463      	add	r3, ip
 800aa8c:	9318      	str	r3, [sp, #96]	; 0x60
 800aa8e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d15e      	bne.n	800ab54 <_dtoa_r+0x510>
 800aa96:	2200      	movs	r2, #0
 800aa98:	4bb9      	ldr	r3, [pc, #740]	; (800ad80 <_dtoa_r+0x73c>)
 800aa9a:	0030      	movs	r0, r6
 800aa9c:	0039      	movs	r1, r7
 800aa9e:	f7f8 f80d 	bl	8002abc <__aeabi_dsub>
 800aaa2:	9a08      	ldr	r2, [sp, #32]
 800aaa4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aaa6:	0004      	movs	r4, r0
 800aaa8:	000d      	movs	r5, r1
 800aaaa:	f7f5 fce9 	bl	8000480 <__aeabi_dcmpgt>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d000      	beq.n	800aab4 <_dtoa_r+0x470>
 800aab2:	e2b3      	b.n	800b01c <_dtoa_r+0x9d8>
 800aab4:	48b3      	ldr	r0, [pc, #716]	; (800ad84 <_dtoa_r+0x740>)
 800aab6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800aab8:	4684      	mov	ip, r0
 800aaba:	4461      	add	r1, ip
 800aabc:	000b      	movs	r3, r1
 800aabe:	0020      	movs	r0, r4
 800aac0:	0029      	movs	r1, r5
 800aac2:	9a08      	ldr	r2, [sp, #32]
 800aac4:	f7f5 fcc8 	bl	8000458 <__aeabi_dcmplt>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d000      	beq.n	800aace <_dtoa_r+0x48a>
 800aacc:	e2a3      	b.n	800b016 <_dtoa_r+0x9d2>
 800aace:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aad0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800aad2:	9308      	str	r3, [sp, #32]
 800aad4:	9409      	str	r4, [sp, #36]	; 0x24
 800aad6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aad8:	2b00      	cmp	r3, #0
 800aada:	da00      	bge.n	800aade <_dtoa_r+0x49a>
 800aadc:	e179      	b.n	800add2 <_dtoa_r+0x78e>
 800aade:	9a03      	ldr	r2, [sp, #12]
 800aae0:	2a0e      	cmp	r2, #14
 800aae2:	dd00      	ble.n	800aae6 <_dtoa_r+0x4a2>
 800aae4:	e175      	b.n	800add2 <_dtoa_r+0x78e>
 800aae6:	4ba0      	ldr	r3, [pc, #640]	; (800ad68 <_dtoa_r+0x724>)
 800aae8:	00d2      	lsls	r2, r2, #3
 800aaea:	189b      	adds	r3, r3, r2
 800aaec:	681e      	ldr	r6, [r3, #0]
 800aaee:	685f      	ldr	r7, [r3, #4]
 800aaf0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	db00      	blt.n	800aaf8 <_dtoa_r+0x4b4>
 800aaf6:	e0e5      	b.n	800acc4 <_dtoa_r+0x680>
 800aaf8:	9b07      	ldr	r3, [sp, #28]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	dd00      	ble.n	800ab00 <_dtoa_r+0x4bc>
 800aafe:	e0e1      	b.n	800acc4 <_dtoa_r+0x680>
 800ab00:	d000      	beq.n	800ab04 <_dtoa_r+0x4c0>
 800ab02:	e288      	b.n	800b016 <_dtoa_r+0x9d2>
 800ab04:	2200      	movs	r2, #0
 800ab06:	0030      	movs	r0, r6
 800ab08:	0039      	movs	r1, r7
 800ab0a:	4b9d      	ldr	r3, [pc, #628]	; (800ad80 <_dtoa_r+0x73c>)
 800ab0c:	f7f7 fd14 	bl	8002538 <__aeabi_dmul>
 800ab10:	9a08      	ldr	r2, [sp, #32]
 800ab12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab14:	f7f5 fcbe 	bl	8000494 <__aeabi_dcmpge>
 800ab18:	9e07      	ldr	r6, [sp, #28]
 800ab1a:	0037      	movs	r7, r6
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d000      	beq.n	800ab22 <_dtoa_r+0x4de>
 800ab20:	e25f      	b.n	800afe2 <_dtoa_r+0x99e>
 800ab22:	9b06      	ldr	r3, [sp, #24]
 800ab24:	9a06      	ldr	r2, [sp, #24]
 800ab26:	3301      	adds	r3, #1
 800ab28:	9308      	str	r3, [sp, #32]
 800ab2a:	2331      	movs	r3, #49	; 0x31
 800ab2c:	7013      	strb	r3, [r2, #0]
 800ab2e:	9b03      	ldr	r3, [sp, #12]
 800ab30:	3301      	adds	r3, #1
 800ab32:	9303      	str	r3, [sp, #12]
 800ab34:	e25a      	b.n	800afec <_dtoa_r+0x9a8>
 800ab36:	423d      	tst	r5, r7
 800ab38:	d005      	beq.n	800ab46 <_dtoa_r+0x502>
 800ab3a:	6832      	ldr	r2, [r6, #0]
 800ab3c:	6873      	ldr	r3, [r6, #4]
 800ab3e:	f7f7 fcfb 	bl	8002538 <__aeabi_dmul>
 800ab42:	003b      	movs	r3, r7
 800ab44:	3401      	adds	r4, #1
 800ab46:	106d      	asrs	r5, r5, #1
 800ab48:	3608      	adds	r6, #8
 800ab4a:	e75f      	b.n	800aa0c <_dtoa_r+0x3c8>
 800ab4c:	9b03      	ldr	r3, [sp, #12]
 800ab4e:	930e      	str	r3, [sp, #56]	; 0x38
 800ab50:	9b07      	ldr	r3, [sp, #28]
 800ab52:	e783      	b.n	800aa5c <_dtoa_r+0x418>
 800ab54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab56:	4b84      	ldr	r3, [pc, #528]	; (800ad68 <_dtoa_r+0x724>)
 800ab58:	3a01      	subs	r2, #1
 800ab5a:	00d2      	lsls	r2, r2, #3
 800ab5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ab5e:	189b      	adds	r3, r3, r2
 800ab60:	9c08      	ldr	r4, [sp, #32]
 800ab62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	2900      	cmp	r1, #0
 800ab6a:	d051      	beq.n	800ac10 <_dtoa_r+0x5cc>
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	4986      	ldr	r1, [pc, #536]	; (800ad88 <_dtoa_r+0x744>)
 800ab70:	f7f7 f8e8 	bl	8001d44 <__aeabi_ddiv>
 800ab74:	0022      	movs	r2, r4
 800ab76:	002b      	movs	r3, r5
 800ab78:	f7f7 ffa0 	bl	8002abc <__aeabi_dsub>
 800ab7c:	9a06      	ldr	r2, [sp, #24]
 800ab7e:	0004      	movs	r4, r0
 800ab80:	4694      	mov	ip, r2
 800ab82:	000d      	movs	r5, r1
 800ab84:	9b06      	ldr	r3, [sp, #24]
 800ab86:	9314      	str	r3, [sp, #80]	; 0x50
 800ab88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab8a:	4463      	add	r3, ip
 800ab8c:	9318      	str	r3, [sp, #96]	; 0x60
 800ab8e:	0039      	movs	r1, r7
 800ab90:	0030      	movs	r0, r6
 800ab92:	f7f8 fb33 	bl	80031fc <__aeabi_d2iz>
 800ab96:	9012      	str	r0, [sp, #72]	; 0x48
 800ab98:	f7f8 fb66 	bl	8003268 <__aeabi_i2d>
 800ab9c:	0002      	movs	r2, r0
 800ab9e:	000b      	movs	r3, r1
 800aba0:	0030      	movs	r0, r6
 800aba2:	0039      	movs	r1, r7
 800aba4:	f7f7 ff8a 	bl	8002abc <__aeabi_dsub>
 800aba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abaa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abac:	3301      	adds	r3, #1
 800abae:	9308      	str	r3, [sp, #32]
 800abb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abb2:	0006      	movs	r6, r0
 800abb4:	3330      	adds	r3, #48	; 0x30
 800abb6:	7013      	strb	r3, [r2, #0]
 800abb8:	0022      	movs	r2, r4
 800abba:	002b      	movs	r3, r5
 800abbc:	000f      	movs	r7, r1
 800abbe:	f7f5 fc4b 	bl	8000458 <__aeabi_dcmplt>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d174      	bne.n	800acb0 <_dtoa_r+0x66c>
 800abc6:	0032      	movs	r2, r6
 800abc8:	003b      	movs	r3, r7
 800abca:	2000      	movs	r0, #0
 800abcc:	4968      	ldr	r1, [pc, #416]	; (800ad70 <_dtoa_r+0x72c>)
 800abce:	f7f7 ff75 	bl	8002abc <__aeabi_dsub>
 800abd2:	0022      	movs	r2, r4
 800abd4:	002b      	movs	r3, r5
 800abd6:	f7f5 fc3f 	bl	8000458 <__aeabi_dcmplt>
 800abda:	2800      	cmp	r0, #0
 800abdc:	d000      	beq.n	800abe0 <_dtoa_r+0x59c>
 800abde:	e0d7      	b.n	800ad90 <_dtoa_r+0x74c>
 800abe0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800abe2:	9a08      	ldr	r2, [sp, #32]
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d100      	bne.n	800abea <_dtoa_r+0x5a6>
 800abe8:	e771      	b.n	800aace <_dtoa_r+0x48a>
 800abea:	2200      	movs	r2, #0
 800abec:	0020      	movs	r0, r4
 800abee:	0029      	movs	r1, r5
 800abf0:	4b60      	ldr	r3, [pc, #384]	; (800ad74 <_dtoa_r+0x730>)
 800abf2:	f7f7 fca1 	bl	8002538 <__aeabi_dmul>
 800abf6:	4b5f      	ldr	r3, [pc, #380]	; (800ad74 <_dtoa_r+0x730>)
 800abf8:	0004      	movs	r4, r0
 800abfa:	000d      	movs	r5, r1
 800abfc:	0030      	movs	r0, r6
 800abfe:	0039      	movs	r1, r7
 800ac00:	2200      	movs	r2, #0
 800ac02:	f7f7 fc99 	bl	8002538 <__aeabi_dmul>
 800ac06:	9b08      	ldr	r3, [sp, #32]
 800ac08:	0006      	movs	r6, r0
 800ac0a:	000f      	movs	r7, r1
 800ac0c:	9314      	str	r3, [sp, #80]	; 0x50
 800ac0e:	e7be      	b.n	800ab8e <_dtoa_r+0x54a>
 800ac10:	0020      	movs	r0, r4
 800ac12:	0029      	movs	r1, r5
 800ac14:	f7f7 fc90 	bl	8002538 <__aeabi_dmul>
 800ac18:	9a06      	ldr	r2, [sp, #24]
 800ac1a:	9b06      	ldr	r3, [sp, #24]
 800ac1c:	4694      	mov	ip, r2
 800ac1e:	9308      	str	r3, [sp, #32]
 800ac20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac22:	9014      	str	r0, [sp, #80]	; 0x50
 800ac24:	9115      	str	r1, [sp, #84]	; 0x54
 800ac26:	4463      	add	r3, ip
 800ac28:	9319      	str	r3, [sp, #100]	; 0x64
 800ac2a:	0030      	movs	r0, r6
 800ac2c:	0039      	movs	r1, r7
 800ac2e:	f7f8 fae5 	bl	80031fc <__aeabi_d2iz>
 800ac32:	9018      	str	r0, [sp, #96]	; 0x60
 800ac34:	f7f8 fb18 	bl	8003268 <__aeabi_i2d>
 800ac38:	0002      	movs	r2, r0
 800ac3a:	000b      	movs	r3, r1
 800ac3c:	0030      	movs	r0, r6
 800ac3e:	0039      	movs	r1, r7
 800ac40:	f7f7 ff3c 	bl	8002abc <__aeabi_dsub>
 800ac44:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ac46:	9b08      	ldr	r3, [sp, #32]
 800ac48:	3630      	adds	r6, #48	; 0x30
 800ac4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac4c:	701e      	strb	r6, [r3, #0]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	0004      	movs	r4, r0
 800ac52:	000d      	movs	r5, r1
 800ac54:	9308      	str	r3, [sp, #32]
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d12d      	bne.n	800acb6 <_dtoa_r+0x672>
 800ac5a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ac5c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ac5e:	9a06      	ldr	r2, [sp, #24]
 800ac60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac62:	4694      	mov	ip, r2
 800ac64:	4463      	add	r3, ip
 800ac66:	2200      	movs	r2, #0
 800ac68:	9308      	str	r3, [sp, #32]
 800ac6a:	4b47      	ldr	r3, [pc, #284]	; (800ad88 <_dtoa_r+0x744>)
 800ac6c:	f7f6 fd0a 	bl	8001684 <__aeabi_dadd>
 800ac70:	0002      	movs	r2, r0
 800ac72:	000b      	movs	r3, r1
 800ac74:	0020      	movs	r0, r4
 800ac76:	0029      	movs	r1, r5
 800ac78:	f7f5 fc02 	bl	8000480 <__aeabi_dcmpgt>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d000      	beq.n	800ac82 <_dtoa_r+0x63e>
 800ac80:	e086      	b.n	800ad90 <_dtoa_r+0x74c>
 800ac82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac86:	2000      	movs	r0, #0
 800ac88:	493f      	ldr	r1, [pc, #252]	; (800ad88 <_dtoa_r+0x744>)
 800ac8a:	f7f7 ff17 	bl	8002abc <__aeabi_dsub>
 800ac8e:	0002      	movs	r2, r0
 800ac90:	000b      	movs	r3, r1
 800ac92:	0020      	movs	r0, r4
 800ac94:	0029      	movs	r1, r5
 800ac96:	f7f5 fbdf 	bl	8000458 <__aeabi_dcmplt>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d100      	bne.n	800aca0 <_dtoa_r+0x65c>
 800ac9e:	e716      	b.n	800aace <_dtoa_r+0x48a>
 800aca0:	9b08      	ldr	r3, [sp, #32]
 800aca2:	001a      	movs	r2, r3
 800aca4:	3a01      	subs	r2, #1
 800aca6:	9208      	str	r2, [sp, #32]
 800aca8:	7812      	ldrb	r2, [r2, #0]
 800acaa:	2a30      	cmp	r2, #48	; 0x30
 800acac:	d0f8      	beq.n	800aca0 <_dtoa_r+0x65c>
 800acae:	9308      	str	r3, [sp, #32]
 800acb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acb2:	9303      	str	r3, [sp, #12]
 800acb4:	e046      	b.n	800ad44 <_dtoa_r+0x700>
 800acb6:	2200      	movs	r2, #0
 800acb8:	4b2e      	ldr	r3, [pc, #184]	; (800ad74 <_dtoa_r+0x730>)
 800acba:	f7f7 fc3d 	bl	8002538 <__aeabi_dmul>
 800acbe:	0006      	movs	r6, r0
 800acc0:	000f      	movs	r7, r1
 800acc2:	e7b2      	b.n	800ac2a <_dtoa_r+0x5e6>
 800acc4:	9b06      	ldr	r3, [sp, #24]
 800acc6:	9a06      	ldr	r2, [sp, #24]
 800acc8:	930a      	str	r3, [sp, #40]	; 0x28
 800acca:	9b07      	ldr	r3, [sp, #28]
 800accc:	9c08      	ldr	r4, [sp, #32]
 800acce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800acd0:	3b01      	subs	r3, #1
 800acd2:	189b      	adds	r3, r3, r2
 800acd4:	930b      	str	r3, [sp, #44]	; 0x2c
 800acd6:	0032      	movs	r2, r6
 800acd8:	003b      	movs	r3, r7
 800acda:	0020      	movs	r0, r4
 800acdc:	0029      	movs	r1, r5
 800acde:	f7f7 f831 	bl	8001d44 <__aeabi_ddiv>
 800ace2:	f7f8 fa8b 	bl	80031fc <__aeabi_d2iz>
 800ace6:	9007      	str	r0, [sp, #28]
 800ace8:	f7f8 fabe 	bl	8003268 <__aeabi_i2d>
 800acec:	0032      	movs	r2, r6
 800acee:	003b      	movs	r3, r7
 800acf0:	f7f7 fc22 	bl	8002538 <__aeabi_dmul>
 800acf4:	0002      	movs	r2, r0
 800acf6:	000b      	movs	r3, r1
 800acf8:	0020      	movs	r0, r4
 800acfa:	0029      	movs	r1, r5
 800acfc:	f7f7 fede 	bl	8002abc <__aeabi_dsub>
 800ad00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad02:	001a      	movs	r2, r3
 800ad04:	3201      	adds	r2, #1
 800ad06:	920a      	str	r2, [sp, #40]	; 0x28
 800ad08:	9208      	str	r2, [sp, #32]
 800ad0a:	9a07      	ldr	r2, [sp, #28]
 800ad0c:	3230      	adds	r2, #48	; 0x30
 800ad0e:	701a      	strb	r2, [r3, #0]
 800ad10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d14f      	bne.n	800adb6 <_dtoa_r+0x772>
 800ad16:	0002      	movs	r2, r0
 800ad18:	000b      	movs	r3, r1
 800ad1a:	f7f6 fcb3 	bl	8001684 <__aeabi_dadd>
 800ad1e:	0032      	movs	r2, r6
 800ad20:	003b      	movs	r3, r7
 800ad22:	0004      	movs	r4, r0
 800ad24:	000d      	movs	r5, r1
 800ad26:	f7f5 fbab 	bl	8000480 <__aeabi_dcmpgt>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d12e      	bne.n	800ad8c <_dtoa_r+0x748>
 800ad2e:	0032      	movs	r2, r6
 800ad30:	003b      	movs	r3, r7
 800ad32:	0020      	movs	r0, r4
 800ad34:	0029      	movs	r1, r5
 800ad36:	f7f5 fb89 	bl	800044c <__aeabi_dcmpeq>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d002      	beq.n	800ad44 <_dtoa_r+0x700>
 800ad3e:	9b07      	ldr	r3, [sp, #28]
 800ad40:	07de      	lsls	r6, r3, #31
 800ad42:	d423      	bmi.n	800ad8c <_dtoa_r+0x748>
 800ad44:	9905      	ldr	r1, [sp, #20]
 800ad46:	9804      	ldr	r0, [sp, #16]
 800ad48:	f000 fbd6 	bl	800b4f8 <_Bfree>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	9a08      	ldr	r2, [sp, #32]
 800ad50:	7013      	strb	r3, [r2, #0]
 800ad52:	9b03      	ldr	r3, [sp, #12]
 800ad54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ad56:	3301      	adds	r3, #1
 800ad58:	6013      	str	r3, [r2, #0]
 800ad5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d100      	bne.n	800ad62 <_dtoa_r+0x71e>
 800ad60:	e4ba      	b.n	800a6d8 <_dtoa_r+0x94>
 800ad62:	9a08      	ldr	r2, [sp, #32]
 800ad64:	601a      	str	r2, [r3, #0]
 800ad66:	e4b7      	b.n	800a6d8 <_dtoa_r+0x94>
 800ad68:	0800e0a0 	.word	0x0800e0a0
 800ad6c:	0800e078 	.word	0x0800e078
 800ad70:	3ff00000 	.word	0x3ff00000
 800ad74:	40240000 	.word	0x40240000
 800ad78:	401c0000 	.word	0x401c0000
 800ad7c:	fcc00000 	.word	0xfcc00000
 800ad80:	40140000 	.word	0x40140000
 800ad84:	7cc00000 	.word	0x7cc00000
 800ad88:	3fe00000 	.word	0x3fe00000
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	930e      	str	r3, [sp, #56]	; 0x38
 800ad90:	9b08      	ldr	r3, [sp, #32]
 800ad92:	9308      	str	r3, [sp, #32]
 800ad94:	3b01      	subs	r3, #1
 800ad96:	781a      	ldrb	r2, [r3, #0]
 800ad98:	2a39      	cmp	r2, #57	; 0x39
 800ad9a:	d108      	bne.n	800adae <_dtoa_r+0x76a>
 800ad9c:	9a06      	ldr	r2, [sp, #24]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d1f7      	bne.n	800ad92 <_dtoa_r+0x74e>
 800ada2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ada4:	9906      	ldr	r1, [sp, #24]
 800ada6:	3201      	adds	r2, #1
 800ada8:	920e      	str	r2, [sp, #56]	; 0x38
 800adaa:	2230      	movs	r2, #48	; 0x30
 800adac:	700a      	strb	r2, [r1, #0]
 800adae:	781a      	ldrb	r2, [r3, #0]
 800adb0:	3201      	adds	r2, #1
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	e77c      	b.n	800acb0 <_dtoa_r+0x66c>
 800adb6:	2200      	movs	r2, #0
 800adb8:	4ba9      	ldr	r3, [pc, #676]	; (800b060 <_dtoa_r+0xa1c>)
 800adba:	f7f7 fbbd 	bl	8002538 <__aeabi_dmul>
 800adbe:	2200      	movs	r2, #0
 800adc0:	2300      	movs	r3, #0
 800adc2:	0004      	movs	r4, r0
 800adc4:	000d      	movs	r5, r1
 800adc6:	f7f5 fb41 	bl	800044c <__aeabi_dcmpeq>
 800adca:	2800      	cmp	r0, #0
 800adcc:	d100      	bne.n	800add0 <_dtoa_r+0x78c>
 800adce:	e782      	b.n	800acd6 <_dtoa_r+0x692>
 800add0:	e7b8      	b.n	800ad44 <_dtoa_r+0x700>
 800add2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800add4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800add6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800add8:	2f00      	cmp	r7, #0
 800adda:	d012      	beq.n	800ae02 <_dtoa_r+0x7be>
 800addc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800adde:	2a01      	cmp	r2, #1
 800ade0:	dc6e      	bgt.n	800aec0 <_dtoa_r+0x87c>
 800ade2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ade4:	2a00      	cmp	r2, #0
 800ade6:	d065      	beq.n	800aeb4 <_dtoa_r+0x870>
 800ade8:	4a9e      	ldr	r2, [pc, #632]	; (800b064 <_dtoa_r+0xa20>)
 800adea:	189b      	adds	r3, r3, r2
 800adec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adee:	2101      	movs	r1, #1
 800adf0:	18d2      	adds	r2, r2, r3
 800adf2:	920a      	str	r2, [sp, #40]	; 0x28
 800adf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adf6:	9804      	ldr	r0, [sp, #16]
 800adf8:	18d3      	adds	r3, r2, r3
 800adfa:	930c      	str	r3, [sp, #48]	; 0x30
 800adfc:	f000 fc78 	bl	800b6f0 <__i2b>
 800ae00:	0007      	movs	r7, r0
 800ae02:	2c00      	cmp	r4, #0
 800ae04:	d00e      	beq.n	800ae24 <_dtoa_r+0x7e0>
 800ae06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	dd0b      	ble.n	800ae24 <_dtoa_r+0x7e0>
 800ae0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae0e:	0023      	movs	r3, r4
 800ae10:	4294      	cmp	r4, r2
 800ae12:	dd00      	ble.n	800ae16 <_dtoa_r+0x7d2>
 800ae14:	0013      	movs	r3, r2
 800ae16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae18:	1ae4      	subs	r4, r4, r3
 800ae1a:	1ad2      	subs	r2, r2, r3
 800ae1c:	920a      	str	r2, [sp, #40]	; 0x28
 800ae1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	930c      	str	r3, [sp, #48]	; 0x30
 800ae24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d01e      	beq.n	800ae68 <_dtoa_r+0x824>
 800ae2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d05c      	beq.n	800aeea <_dtoa_r+0x8a6>
 800ae30:	2d00      	cmp	r5, #0
 800ae32:	dd10      	ble.n	800ae56 <_dtoa_r+0x812>
 800ae34:	0039      	movs	r1, r7
 800ae36:	002a      	movs	r2, r5
 800ae38:	9804      	ldr	r0, [sp, #16]
 800ae3a:	f000 fd21 	bl	800b880 <__pow5mult>
 800ae3e:	9a05      	ldr	r2, [sp, #20]
 800ae40:	0001      	movs	r1, r0
 800ae42:	0007      	movs	r7, r0
 800ae44:	9804      	ldr	r0, [sp, #16]
 800ae46:	f000 fc6b 	bl	800b720 <__multiply>
 800ae4a:	0006      	movs	r6, r0
 800ae4c:	9905      	ldr	r1, [sp, #20]
 800ae4e:	9804      	ldr	r0, [sp, #16]
 800ae50:	f000 fb52 	bl	800b4f8 <_Bfree>
 800ae54:	9605      	str	r6, [sp, #20]
 800ae56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae58:	1b5a      	subs	r2, r3, r5
 800ae5a:	42ab      	cmp	r3, r5
 800ae5c:	d004      	beq.n	800ae68 <_dtoa_r+0x824>
 800ae5e:	9905      	ldr	r1, [sp, #20]
 800ae60:	9804      	ldr	r0, [sp, #16]
 800ae62:	f000 fd0d 	bl	800b880 <__pow5mult>
 800ae66:	9005      	str	r0, [sp, #20]
 800ae68:	2101      	movs	r1, #1
 800ae6a:	9804      	ldr	r0, [sp, #16]
 800ae6c:	f000 fc40 	bl	800b6f0 <__i2b>
 800ae70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae72:	0006      	movs	r6, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	dd3a      	ble.n	800aeee <_dtoa_r+0x8aa>
 800ae78:	001a      	movs	r2, r3
 800ae7a:	0001      	movs	r1, r0
 800ae7c:	9804      	ldr	r0, [sp, #16]
 800ae7e:	f000 fcff 	bl	800b880 <__pow5mult>
 800ae82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae84:	0006      	movs	r6, r0
 800ae86:	2500      	movs	r5, #0
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	dc38      	bgt.n	800aefe <_dtoa_r+0x8ba>
 800ae8c:	2500      	movs	r5, #0
 800ae8e:	9b08      	ldr	r3, [sp, #32]
 800ae90:	42ab      	cmp	r3, r5
 800ae92:	d130      	bne.n	800aef6 <_dtoa_r+0x8b2>
 800ae94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae96:	031b      	lsls	r3, r3, #12
 800ae98:	42ab      	cmp	r3, r5
 800ae9a:	d12c      	bne.n	800aef6 <_dtoa_r+0x8b2>
 800ae9c:	4b72      	ldr	r3, [pc, #456]	; (800b068 <_dtoa_r+0xa24>)
 800ae9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aea0:	4213      	tst	r3, r2
 800aea2:	d028      	beq.n	800aef6 <_dtoa_r+0x8b2>
 800aea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea6:	3501      	adds	r5, #1
 800aea8:	3301      	adds	r3, #1
 800aeaa:	930a      	str	r3, [sp, #40]	; 0x28
 800aeac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aeae:	3301      	adds	r3, #1
 800aeb0:	930c      	str	r3, [sp, #48]	; 0x30
 800aeb2:	e020      	b.n	800aef6 <_dtoa_r+0x8b2>
 800aeb4:	2336      	movs	r3, #54	; 0x36
 800aeb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aeb8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800aeba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aebc:	1a9b      	subs	r3, r3, r2
 800aebe:	e795      	b.n	800adec <_dtoa_r+0x7a8>
 800aec0:	9b07      	ldr	r3, [sp, #28]
 800aec2:	1e5d      	subs	r5, r3, #1
 800aec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aec6:	42ab      	cmp	r3, r5
 800aec8:	db07      	blt.n	800aeda <_dtoa_r+0x896>
 800aeca:	1b5d      	subs	r5, r3, r5
 800aecc:	9b07      	ldr	r3, [sp, #28]
 800aece:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	da8b      	bge.n	800adec <_dtoa_r+0x7a8>
 800aed4:	1ae4      	subs	r4, r4, r3
 800aed6:	2300      	movs	r3, #0
 800aed8:	e788      	b.n	800adec <_dtoa_r+0x7a8>
 800aeda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aedc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aede:	1aeb      	subs	r3, r5, r3
 800aee0:	18d3      	adds	r3, r2, r3
 800aee2:	950d      	str	r5, [sp, #52]	; 0x34
 800aee4:	9313      	str	r3, [sp, #76]	; 0x4c
 800aee6:	2500      	movs	r5, #0
 800aee8:	e7f0      	b.n	800aecc <_dtoa_r+0x888>
 800aeea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aeec:	e7b7      	b.n	800ae5e <_dtoa_r+0x81a>
 800aeee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aef0:	2500      	movs	r5, #0
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	ddca      	ble.n	800ae8c <_dtoa_r+0x848>
 800aef6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aef8:	2001      	movs	r0, #1
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d008      	beq.n	800af10 <_dtoa_r+0x8cc>
 800aefe:	6933      	ldr	r3, [r6, #16]
 800af00:	3303      	adds	r3, #3
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	18f3      	adds	r3, r6, r3
 800af06:	6858      	ldr	r0, [r3, #4]
 800af08:	f000 fbaa 	bl	800b660 <__hi0bits>
 800af0c:	2320      	movs	r3, #32
 800af0e:	1a18      	subs	r0, r3, r0
 800af10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af12:	1818      	adds	r0, r3, r0
 800af14:	0002      	movs	r2, r0
 800af16:	231f      	movs	r3, #31
 800af18:	401a      	ands	r2, r3
 800af1a:	4218      	tst	r0, r3
 800af1c:	d047      	beq.n	800afae <_dtoa_r+0x96a>
 800af1e:	3301      	adds	r3, #1
 800af20:	1a9b      	subs	r3, r3, r2
 800af22:	2b04      	cmp	r3, #4
 800af24:	dd3f      	ble.n	800afa6 <_dtoa_r+0x962>
 800af26:	231c      	movs	r3, #28
 800af28:	1a9b      	subs	r3, r3, r2
 800af2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af2c:	18e4      	adds	r4, r4, r3
 800af2e:	18d2      	adds	r2, r2, r3
 800af30:	920a      	str	r2, [sp, #40]	; 0x28
 800af32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af34:	18d3      	adds	r3, r2, r3
 800af36:	930c      	str	r3, [sp, #48]	; 0x30
 800af38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	dd05      	ble.n	800af4a <_dtoa_r+0x906>
 800af3e:	001a      	movs	r2, r3
 800af40:	9905      	ldr	r1, [sp, #20]
 800af42:	9804      	ldr	r0, [sp, #16]
 800af44:	f000 fcf8 	bl	800b938 <__lshift>
 800af48:	9005      	str	r0, [sp, #20]
 800af4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	dd05      	ble.n	800af5c <_dtoa_r+0x918>
 800af50:	0031      	movs	r1, r6
 800af52:	001a      	movs	r2, r3
 800af54:	9804      	ldr	r0, [sp, #16]
 800af56:	f000 fcef 	bl	800b938 <__lshift>
 800af5a:	0006      	movs	r6, r0
 800af5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d027      	beq.n	800afb2 <_dtoa_r+0x96e>
 800af62:	0031      	movs	r1, r6
 800af64:	9805      	ldr	r0, [sp, #20]
 800af66:	f000 fd55 	bl	800ba14 <__mcmp>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	da21      	bge.n	800afb2 <_dtoa_r+0x96e>
 800af6e:	9b03      	ldr	r3, [sp, #12]
 800af70:	220a      	movs	r2, #10
 800af72:	3b01      	subs	r3, #1
 800af74:	9303      	str	r3, [sp, #12]
 800af76:	9905      	ldr	r1, [sp, #20]
 800af78:	2300      	movs	r3, #0
 800af7a:	9804      	ldr	r0, [sp, #16]
 800af7c:	f000 fae0 	bl	800b540 <__multadd>
 800af80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af82:	9005      	str	r0, [sp, #20]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d100      	bne.n	800af8a <_dtoa_r+0x946>
 800af88:	e15d      	b.n	800b246 <_dtoa_r+0xc02>
 800af8a:	2300      	movs	r3, #0
 800af8c:	0039      	movs	r1, r7
 800af8e:	220a      	movs	r2, #10
 800af90:	9804      	ldr	r0, [sp, #16]
 800af92:	f000 fad5 	bl	800b540 <__multadd>
 800af96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af98:	0007      	movs	r7, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	dc49      	bgt.n	800b032 <_dtoa_r+0x9ee>
 800af9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	dc0e      	bgt.n	800afc2 <_dtoa_r+0x97e>
 800afa4:	e045      	b.n	800b032 <_dtoa_r+0x9ee>
 800afa6:	2b04      	cmp	r3, #4
 800afa8:	d0c6      	beq.n	800af38 <_dtoa_r+0x8f4>
 800afaa:	331c      	adds	r3, #28
 800afac:	e7bd      	b.n	800af2a <_dtoa_r+0x8e6>
 800afae:	0013      	movs	r3, r2
 800afb0:	e7fb      	b.n	800afaa <_dtoa_r+0x966>
 800afb2:	9b07      	ldr	r3, [sp, #28]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dc36      	bgt.n	800b026 <_dtoa_r+0x9e2>
 800afb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afba:	2b02      	cmp	r3, #2
 800afbc:	dd33      	ble.n	800b026 <_dtoa_r+0x9e2>
 800afbe:	9b07      	ldr	r3, [sp, #28]
 800afc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800afc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10c      	bne.n	800afe2 <_dtoa_r+0x99e>
 800afc8:	0031      	movs	r1, r6
 800afca:	2205      	movs	r2, #5
 800afcc:	9804      	ldr	r0, [sp, #16]
 800afce:	f000 fab7 	bl	800b540 <__multadd>
 800afd2:	0006      	movs	r6, r0
 800afd4:	0001      	movs	r1, r0
 800afd6:	9805      	ldr	r0, [sp, #20]
 800afd8:	f000 fd1c 	bl	800ba14 <__mcmp>
 800afdc:	2800      	cmp	r0, #0
 800afde:	dd00      	ble.n	800afe2 <_dtoa_r+0x99e>
 800afe0:	e59f      	b.n	800ab22 <_dtoa_r+0x4de>
 800afe2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afe4:	43db      	mvns	r3, r3
 800afe6:	9303      	str	r3, [sp, #12]
 800afe8:	9b06      	ldr	r3, [sp, #24]
 800afea:	9308      	str	r3, [sp, #32]
 800afec:	2500      	movs	r5, #0
 800afee:	0031      	movs	r1, r6
 800aff0:	9804      	ldr	r0, [sp, #16]
 800aff2:	f000 fa81 	bl	800b4f8 <_Bfree>
 800aff6:	2f00      	cmp	r7, #0
 800aff8:	d100      	bne.n	800affc <_dtoa_r+0x9b8>
 800affa:	e6a3      	b.n	800ad44 <_dtoa_r+0x700>
 800affc:	2d00      	cmp	r5, #0
 800affe:	d005      	beq.n	800b00c <_dtoa_r+0x9c8>
 800b000:	42bd      	cmp	r5, r7
 800b002:	d003      	beq.n	800b00c <_dtoa_r+0x9c8>
 800b004:	0029      	movs	r1, r5
 800b006:	9804      	ldr	r0, [sp, #16]
 800b008:	f000 fa76 	bl	800b4f8 <_Bfree>
 800b00c:	0039      	movs	r1, r7
 800b00e:	9804      	ldr	r0, [sp, #16]
 800b010:	f000 fa72 	bl	800b4f8 <_Bfree>
 800b014:	e696      	b.n	800ad44 <_dtoa_r+0x700>
 800b016:	2600      	movs	r6, #0
 800b018:	0037      	movs	r7, r6
 800b01a:	e7e2      	b.n	800afe2 <_dtoa_r+0x99e>
 800b01c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b01e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b020:	9303      	str	r3, [sp, #12]
 800b022:	0037      	movs	r7, r6
 800b024:	e57d      	b.n	800ab22 <_dtoa_r+0x4de>
 800b026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d100      	bne.n	800b02e <_dtoa_r+0x9ea>
 800b02c:	e0c3      	b.n	800b1b6 <_dtoa_r+0xb72>
 800b02e:	9b07      	ldr	r3, [sp, #28]
 800b030:	930b      	str	r3, [sp, #44]	; 0x2c
 800b032:	2c00      	cmp	r4, #0
 800b034:	dd05      	ble.n	800b042 <_dtoa_r+0x9fe>
 800b036:	0039      	movs	r1, r7
 800b038:	0022      	movs	r2, r4
 800b03a:	9804      	ldr	r0, [sp, #16]
 800b03c:	f000 fc7c 	bl	800b938 <__lshift>
 800b040:	0007      	movs	r7, r0
 800b042:	0038      	movs	r0, r7
 800b044:	2d00      	cmp	r5, #0
 800b046:	d024      	beq.n	800b092 <_dtoa_r+0xa4e>
 800b048:	6879      	ldr	r1, [r7, #4]
 800b04a:	9804      	ldr	r0, [sp, #16]
 800b04c:	f000 fa10 	bl	800b470 <_Balloc>
 800b050:	1e04      	subs	r4, r0, #0
 800b052:	d111      	bne.n	800b078 <_dtoa_r+0xa34>
 800b054:	0022      	movs	r2, r4
 800b056:	4b05      	ldr	r3, [pc, #20]	; (800b06c <_dtoa_r+0xa28>)
 800b058:	4805      	ldr	r0, [pc, #20]	; (800b070 <_dtoa_r+0xa2c>)
 800b05a:	4906      	ldr	r1, [pc, #24]	; (800b074 <_dtoa_r+0xa30>)
 800b05c:	f7ff fb07 	bl	800a66e <_dtoa_r+0x2a>
 800b060:	40240000 	.word	0x40240000
 800b064:	00000433 	.word	0x00000433
 800b068:	7ff00000 	.word	0x7ff00000
 800b06c:	0800e00a 	.word	0x0800e00a
 800b070:	0800dfb2 	.word	0x0800dfb2
 800b074:	000002ef 	.word	0x000002ef
 800b078:	0039      	movs	r1, r7
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	310c      	adds	r1, #12
 800b07e:	3202      	adds	r2, #2
 800b080:	0092      	lsls	r2, r2, #2
 800b082:	300c      	adds	r0, #12
 800b084:	f001 ff28 	bl	800ced8 <memcpy>
 800b088:	2201      	movs	r2, #1
 800b08a:	0021      	movs	r1, r4
 800b08c:	9804      	ldr	r0, [sp, #16]
 800b08e:	f000 fc53 	bl	800b938 <__lshift>
 800b092:	9b06      	ldr	r3, [sp, #24]
 800b094:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b096:	9307      	str	r3, [sp, #28]
 800b098:	3b01      	subs	r3, #1
 800b09a:	189b      	adds	r3, r3, r2
 800b09c:	2201      	movs	r2, #1
 800b09e:	003d      	movs	r5, r7
 800b0a0:	0007      	movs	r7, r0
 800b0a2:	930e      	str	r3, [sp, #56]	; 0x38
 800b0a4:	9b08      	ldr	r3, [sp, #32]
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	930d      	str	r3, [sp, #52]	; 0x34
 800b0aa:	0031      	movs	r1, r6
 800b0ac:	9805      	ldr	r0, [sp, #20]
 800b0ae:	f7ff fa39 	bl	800a524 <quorem>
 800b0b2:	0029      	movs	r1, r5
 800b0b4:	0004      	movs	r4, r0
 800b0b6:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0b8:	9805      	ldr	r0, [sp, #20]
 800b0ba:	f000 fcab 	bl	800ba14 <__mcmp>
 800b0be:	003a      	movs	r2, r7
 800b0c0:	900c      	str	r0, [sp, #48]	; 0x30
 800b0c2:	0031      	movs	r1, r6
 800b0c4:	9804      	ldr	r0, [sp, #16]
 800b0c6:	f000 fcc1 	bl	800ba4c <__mdiff>
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	68c3      	ldr	r3, [r0, #12]
 800b0ce:	3430      	adds	r4, #48	; 0x30
 800b0d0:	9008      	str	r0, [sp, #32]
 800b0d2:	920a      	str	r2, [sp, #40]	; 0x28
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d104      	bne.n	800b0e2 <_dtoa_r+0xa9e>
 800b0d8:	0001      	movs	r1, r0
 800b0da:	9805      	ldr	r0, [sp, #20]
 800b0dc:	f000 fc9a 	bl	800ba14 <__mcmp>
 800b0e0:	900a      	str	r0, [sp, #40]	; 0x28
 800b0e2:	9908      	ldr	r1, [sp, #32]
 800b0e4:	9804      	ldr	r0, [sp, #16]
 800b0e6:	f000 fa07 	bl	800b4f8 <_Bfree>
 800b0ea:	9b07      	ldr	r3, [sp, #28]
 800b0ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	9308      	str	r3, [sp, #32]
 800b0f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	d109      	bne.n	800b110 <_dtoa_r+0xacc>
 800b0fc:	2c39      	cmp	r4, #57	; 0x39
 800b0fe:	d022      	beq.n	800b146 <_dtoa_r+0xb02>
 800b100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b102:	2b00      	cmp	r3, #0
 800b104:	dd01      	ble.n	800b10a <_dtoa_r+0xac6>
 800b106:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b108:	3431      	adds	r4, #49	; 0x31
 800b10a:	9b07      	ldr	r3, [sp, #28]
 800b10c:	701c      	strb	r4, [r3, #0]
 800b10e:	e76e      	b.n	800afee <_dtoa_r+0x9aa>
 800b110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b112:	2b00      	cmp	r3, #0
 800b114:	db04      	blt.n	800b120 <_dtoa_r+0xadc>
 800b116:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b118:	4313      	orrs	r3, r2
 800b11a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b11c:	4313      	orrs	r3, r2
 800b11e:	d11e      	bne.n	800b15e <_dtoa_r+0xb1a>
 800b120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b122:	2b00      	cmp	r3, #0
 800b124:	ddf1      	ble.n	800b10a <_dtoa_r+0xac6>
 800b126:	9905      	ldr	r1, [sp, #20]
 800b128:	2201      	movs	r2, #1
 800b12a:	9804      	ldr	r0, [sp, #16]
 800b12c:	f000 fc04 	bl	800b938 <__lshift>
 800b130:	0031      	movs	r1, r6
 800b132:	9005      	str	r0, [sp, #20]
 800b134:	f000 fc6e 	bl	800ba14 <__mcmp>
 800b138:	2800      	cmp	r0, #0
 800b13a:	dc02      	bgt.n	800b142 <_dtoa_r+0xafe>
 800b13c:	d1e5      	bne.n	800b10a <_dtoa_r+0xac6>
 800b13e:	07e3      	lsls	r3, r4, #31
 800b140:	d5e3      	bpl.n	800b10a <_dtoa_r+0xac6>
 800b142:	2c39      	cmp	r4, #57	; 0x39
 800b144:	d1df      	bne.n	800b106 <_dtoa_r+0xac2>
 800b146:	2339      	movs	r3, #57	; 0x39
 800b148:	9a07      	ldr	r2, [sp, #28]
 800b14a:	7013      	strb	r3, [r2, #0]
 800b14c:	9b08      	ldr	r3, [sp, #32]
 800b14e:	9308      	str	r3, [sp, #32]
 800b150:	3b01      	subs	r3, #1
 800b152:	781a      	ldrb	r2, [r3, #0]
 800b154:	2a39      	cmp	r2, #57	; 0x39
 800b156:	d063      	beq.n	800b220 <_dtoa_r+0xbdc>
 800b158:	3201      	adds	r2, #1
 800b15a:	701a      	strb	r2, [r3, #0]
 800b15c:	e747      	b.n	800afee <_dtoa_r+0x9aa>
 800b15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b160:	2b00      	cmp	r3, #0
 800b162:	dd03      	ble.n	800b16c <_dtoa_r+0xb28>
 800b164:	2c39      	cmp	r4, #57	; 0x39
 800b166:	d0ee      	beq.n	800b146 <_dtoa_r+0xb02>
 800b168:	3401      	adds	r4, #1
 800b16a:	e7ce      	b.n	800b10a <_dtoa_r+0xac6>
 800b16c:	9b07      	ldr	r3, [sp, #28]
 800b16e:	9a07      	ldr	r2, [sp, #28]
 800b170:	701c      	strb	r4, [r3, #0]
 800b172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b174:	4293      	cmp	r3, r2
 800b176:	d03e      	beq.n	800b1f6 <_dtoa_r+0xbb2>
 800b178:	2300      	movs	r3, #0
 800b17a:	220a      	movs	r2, #10
 800b17c:	9905      	ldr	r1, [sp, #20]
 800b17e:	9804      	ldr	r0, [sp, #16]
 800b180:	f000 f9de 	bl	800b540 <__multadd>
 800b184:	2300      	movs	r3, #0
 800b186:	9005      	str	r0, [sp, #20]
 800b188:	220a      	movs	r2, #10
 800b18a:	0029      	movs	r1, r5
 800b18c:	9804      	ldr	r0, [sp, #16]
 800b18e:	42bd      	cmp	r5, r7
 800b190:	d106      	bne.n	800b1a0 <_dtoa_r+0xb5c>
 800b192:	f000 f9d5 	bl	800b540 <__multadd>
 800b196:	0005      	movs	r5, r0
 800b198:	0007      	movs	r7, r0
 800b19a:	9b08      	ldr	r3, [sp, #32]
 800b19c:	9307      	str	r3, [sp, #28]
 800b19e:	e784      	b.n	800b0aa <_dtoa_r+0xa66>
 800b1a0:	f000 f9ce 	bl	800b540 <__multadd>
 800b1a4:	0039      	movs	r1, r7
 800b1a6:	0005      	movs	r5, r0
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	220a      	movs	r2, #10
 800b1ac:	9804      	ldr	r0, [sp, #16]
 800b1ae:	f000 f9c7 	bl	800b540 <__multadd>
 800b1b2:	0007      	movs	r7, r0
 800b1b4:	e7f1      	b.n	800b19a <_dtoa_r+0xb56>
 800b1b6:	9b07      	ldr	r3, [sp, #28]
 800b1b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1ba:	2500      	movs	r5, #0
 800b1bc:	0031      	movs	r1, r6
 800b1be:	9805      	ldr	r0, [sp, #20]
 800b1c0:	f7ff f9b0 	bl	800a524 <quorem>
 800b1c4:	9b06      	ldr	r3, [sp, #24]
 800b1c6:	3030      	adds	r0, #48	; 0x30
 800b1c8:	5558      	strb	r0, [r3, r5]
 800b1ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1cc:	3501      	adds	r5, #1
 800b1ce:	0004      	movs	r4, r0
 800b1d0:	42ab      	cmp	r3, r5
 800b1d2:	dd07      	ble.n	800b1e4 <_dtoa_r+0xba0>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	220a      	movs	r2, #10
 800b1d8:	9905      	ldr	r1, [sp, #20]
 800b1da:	9804      	ldr	r0, [sp, #16]
 800b1dc:	f000 f9b0 	bl	800b540 <__multadd>
 800b1e0:	9005      	str	r0, [sp, #20]
 800b1e2:	e7eb      	b.n	800b1bc <_dtoa_r+0xb78>
 800b1e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	2a00      	cmp	r2, #0
 800b1ea:	dd00      	ble.n	800b1ee <_dtoa_r+0xbaa>
 800b1ec:	0013      	movs	r3, r2
 800b1ee:	2500      	movs	r5, #0
 800b1f0:	9a06      	ldr	r2, [sp, #24]
 800b1f2:	18d3      	adds	r3, r2, r3
 800b1f4:	9308      	str	r3, [sp, #32]
 800b1f6:	9905      	ldr	r1, [sp, #20]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	9804      	ldr	r0, [sp, #16]
 800b1fc:	f000 fb9c 	bl	800b938 <__lshift>
 800b200:	0031      	movs	r1, r6
 800b202:	9005      	str	r0, [sp, #20]
 800b204:	f000 fc06 	bl	800ba14 <__mcmp>
 800b208:	2800      	cmp	r0, #0
 800b20a:	dc9f      	bgt.n	800b14c <_dtoa_r+0xb08>
 800b20c:	d101      	bne.n	800b212 <_dtoa_r+0xbce>
 800b20e:	07e4      	lsls	r4, r4, #31
 800b210:	d49c      	bmi.n	800b14c <_dtoa_r+0xb08>
 800b212:	9b08      	ldr	r3, [sp, #32]
 800b214:	9308      	str	r3, [sp, #32]
 800b216:	3b01      	subs	r3, #1
 800b218:	781a      	ldrb	r2, [r3, #0]
 800b21a:	2a30      	cmp	r2, #48	; 0x30
 800b21c:	d0fa      	beq.n	800b214 <_dtoa_r+0xbd0>
 800b21e:	e6e6      	b.n	800afee <_dtoa_r+0x9aa>
 800b220:	9a06      	ldr	r2, [sp, #24]
 800b222:	429a      	cmp	r2, r3
 800b224:	d193      	bne.n	800b14e <_dtoa_r+0xb0a>
 800b226:	9b03      	ldr	r3, [sp, #12]
 800b228:	3301      	adds	r3, #1
 800b22a:	9303      	str	r3, [sp, #12]
 800b22c:	2331      	movs	r3, #49	; 0x31
 800b22e:	7013      	strb	r3, [r2, #0]
 800b230:	e6dd      	b.n	800afee <_dtoa_r+0x9aa>
 800b232:	4b09      	ldr	r3, [pc, #36]	; (800b258 <_dtoa_r+0xc14>)
 800b234:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b236:	9306      	str	r3, [sp, #24]
 800b238:	4b08      	ldr	r3, [pc, #32]	; (800b25c <_dtoa_r+0xc18>)
 800b23a:	2a00      	cmp	r2, #0
 800b23c:	d001      	beq.n	800b242 <_dtoa_r+0xbfe>
 800b23e:	f7ff fa49 	bl	800a6d4 <_dtoa_r+0x90>
 800b242:	f7ff fa49 	bl	800a6d8 <_dtoa_r+0x94>
 800b246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b248:	2b00      	cmp	r3, #0
 800b24a:	dcb6      	bgt.n	800b1ba <_dtoa_r+0xb76>
 800b24c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b24e:	2b02      	cmp	r3, #2
 800b250:	dd00      	ble.n	800b254 <_dtoa_r+0xc10>
 800b252:	e6b6      	b.n	800afc2 <_dtoa_r+0x97e>
 800b254:	e7b1      	b.n	800b1ba <_dtoa_r+0xb76>
 800b256:	46c0      	nop			; (mov r8, r8)
 800b258:	0800df8e 	.word	0x0800df8e
 800b25c:	0800df96 	.word	0x0800df96

0800b260 <_free_r>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	0005      	movs	r5, r0
 800b264:	2900      	cmp	r1, #0
 800b266:	d010      	beq.n	800b28a <_free_r+0x2a>
 800b268:	1f0c      	subs	r4, r1, #4
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	da00      	bge.n	800b272 <_free_r+0x12>
 800b270:	18e4      	adds	r4, r4, r3
 800b272:	0028      	movs	r0, r5
 800b274:	f000 f8ec 	bl	800b450 <__malloc_lock>
 800b278:	4a1d      	ldr	r2, [pc, #116]	; (800b2f0 <_free_r+0x90>)
 800b27a:	6813      	ldr	r3, [r2, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d105      	bne.n	800b28c <_free_r+0x2c>
 800b280:	6063      	str	r3, [r4, #4]
 800b282:	6014      	str	r4, [r2, #0]
 800b284:	0028      	movs	r0, r5
 800b286:	f000 f8eb 	bl	800b460 <__malloc_unlock>
 800b28a:	bd70      	pop	{r4, r5, r6, pc}
 800b28c:	42a3      	cmp	r3, r4
 800b28e:	d908      	bls.n	800b2a2 <_free_r+0x42>
 800b290:	6820      	ldr	r0, [r4, #0]
 800b292:	1821      	adds	r1, r4, r0
 800b294:	428b      	cmp	r3, r1
 800b296:	d1f3      	bne.n	800b280 <_free_r+0x20>
 800b298:	6819      	ldr	r1, [r3, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	1809      	adds	r1, r1, r0
 800b29e:	6021      	str	r1, [r4, #0]
 800b2a0:	e7ee      	b.n	800b280 <_free_r+0x20>
 800b2a2:	001a      	movs	r2, r3
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <_free_r+0x4e>
 800b2aa:	42a3      	cmp	r3, r4
 800b2ac:	d9f9      	bls.n	800b2a2 <_free_r+0x42>
 800b2ae:	6811      	ldr	r1, [r2, #0]
 800b2b0:	1850      	adds	r0, r2, r1
 800b2b2:	42a0      	cmp	r0, r4
 800b2b4:	d10b      	bne.n	800b2ce <_free_r+0x6e>
 800b2b6:	6820      	ldr	r0, [r4, #0]
 800b2b8:	1809      	adds	r1, r1, r0
 800b2ba:	1850      	adds	r0, r2, r1
 800b2bc:	6011      	str	r1, [r2, #0]
 800b2be:	4283      	cmp	r3, r0
 800b2c0:	d1e0      	bne.n	800b284 <_free_r+0x24>
 800b2c2:	6818      	ldr	r0, [r3, #0]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	1841      	adds	r1, r0, r1
 800b2c8:	6011      	str	r1, [r2, #0]
 800b2ca:	6053      	str	r3, [r2, #4]
 800b2cc:	e7da      	b.n	800b284 <_free_r+0x24>
 800b2ce:	42a0      	cmp	r0, r4
 800b2d0:	d902      	bls.n	800b2d8 <_free_r+0x78>
 800b2d2:	230c      	movs	r3, #12
 800b2d4:	602b      	str	r3, [r5, #0]
 800b2d6:	e7d5      	b.n	800b284 <_free_r+0x24>
 800b2d8:	6820      	ldr	r0, [r4, #0]
 800b2da:	1821      	adds	r1, r4, r0
 800b2dc:	428b      	cmp	r3, r1
 800b2de:	d103      	bne.n	800b2e8 <_free_r+0x88>
 800b2e0:	6819      	ldr	r1, [r3, #0]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	1809      	adds	r1, r1, r0
 800b2e6:	6021      	str	r1, [r4, #0]
 800b2e8:	6063      	str	r3, [r4, #4]
 800b2ea:	6054      	str	r4, [r2, #4]
 800b2ec:	e7ca      	b.n	800b284 <_free_r+0x24>
 800b2ee:	46c0      	nop			; (mov r8, r8)
 800b2f0:	20000a5c 	.word	0x20000a5c

0800b2f4 <malloc>:
 800b2f4:	b510      	push	{r4, lr}
 800b2f6:	4b03      	ldr	r3, [pc, #12]	; (800b304 <malloc+0x10>)
 800b2f8:	0001      	movs	r1, r0
 800b2fa:	6818      	ldr	r0, [r3, #0]
 800b2fc:	f000 f826 	bl	800b34c <_malloc_r>
 800b300:	bd10      	pop	{r4, pc}
 800b302:	46c0      	nop			; (mov r8, r8)
 800b304:	20000170 	.word	0x20000170

0800b308 <sbrk_aligned>:
 800b308:	b570      	push	{r4, r5, r6, lr}
 800b30a:	4e0f      	ldr	r6, [pc, #60]	; (800b348 <sbrk_aligned+0x40>)
 800b30c:	000d      	movs	r5, r1
 800b30e:	6831      	ldr	r1, [r6, #0]
 800b310:	0004      	movs	r4, r0
 800b312:	2900      	cmp	r1, #0
 800b314:	d102      	bne.n	800b31c <sbrk_aligned+0x14>
 800b316:	f001 fdcd 	bl	800ceb4 <_sbrk_r>
 800b31a:	6030      	str	r0, [r6, #0]
 800b31c:	0029      	movs	r1, r5
 800b31e:	0020      	movs	r0, r4
 800b320:	f001 fdc8 	bl	800ceb4 <_sbrk_r>
 800b324:	1c43      	adds	r3, r0, #1
 800b326:	d00a      	beq.n	800b33e <sbrk_aligned+0x36>
 800b328:	2303      	movs	r3, #3
 800b32a:	1cc5      	adds	r5, r0, #3
 800b32c:	439d      	bics	r5, r3
 800b32e:	42a8      	cmp	r0, r5
 800b330:	d007      	beq.n	800b342 <sbrk_aligned+0x3a>
 800b332:	1a29      	subs	r1, r5, r0
 800b334:	0020      	movs	r0, r4
 800b336:	f001 fdbd 	bl	800ceb4 <_sbrk_r>
 800b33a:	3001      	adds	r0, #1
 800b33c:	d101      	bne.n	800b342 <sbrk_aligned+0x3a>
 800b33e:	2501      	movs	r5, #1
 800b340:	426d      	negs	r5, r5
 800b342:	0028      	movs	r0, r5
 800b344:	bd70      	pop	{r4, r5, r6, pc}
 800b346:	46c0      	nop			; (mov r8, r8)
 800b348:	20000a60 	.word	0x20000a60

0800b34c <_malloc_r>:
 800b34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b34e:	2203      	movs	r2, #3
 800b350:	1ccb      	adds	r3, r1, #3
 800b352:	4393      	bics	r3, r2
 800b354:	3308      	adds	r3, #8
 800b356:	0006      	movs	r6, r0
 800b358:	001f      	movs	r7, r3
 800b35a:	2b0c      	cmp	r3, #12
 800b35c:	d238      	bcs.n	800b3d0 <_malloc_r+0x84>
 800b35e:	270c      	movs	r7, #12
 800b360:	42b9      	cmp	r1, r7
 800b362:	d837      	bhi.n	800b3d4 <_malloc_r+0x88>
 800b364:	0030      	movs	r0, r6
 800b366:	f000 f873 	bl	800b450 <__malloc_lock>
 800b36a:	4b38      	ldr	r3, [pc, #224]	; (800b44c <_malloc_r+0x100>)
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	001c      	movs	r4, r3
 800b372:	2c00      	cmp	r4, #0
 800b374:	d133      	bne.n	800b3de <_malloc_r+0x92>
 800b376:	0039      	movs	r1, r7
 800b378:	0030      	movs	r0, r6
 800b37a:	f7ff ffc5 	bl	800b308 <sbrk_aligned>
 800b37e:	0004      	movs	r4, r0
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	d15e      	bne.n	800b442 <_malloc_r+0xf6>
 800b384:	9b00      	ldr	r3, [sp, #0]
 800b386:	681c      	ldr	r4, [r3, #0]
 800b388:	0025      	movs	r5, r4
 800b38a:	2d00      	cmp	r5, #0
 800b38c:	d14e      	bne.n	800b42c <_malloc_r+0xe0>
 800b38e:	2c00      	cmp	r4, #0
 800b390:	d051      	beq.n	800b436 <_malloc_r+0xea>
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	0029      	movs	r1, r5
 800b396:	18e3      	adds	r3, r4, r3
 800b398:	0030      	movs	r0, r6
 800b39a:	9301      	str	r3, [sp, #4]
 800b39c:	f001 fd8a 	bl	800ceb4 <_sbrk_r>
 800b3a0:	9b01      	ldr	r3, [sp, #4]
 800b3a2:	4283      	cmp	r3, r0
 800b3a4:	d147      	bne.n	800b436 <_malloc_r+0xea>
 800b3a6:	6823      	ldr	r3, [r4, #0]
 800b3a8:	0030      	movs	r0, r6
 800b3aa:	1aff      	subs	r7, r7, r3
 800b3ac:	0039      	movs	r1, r7
 800b3ae:	f7ff ffab 	bl	800b308 <sbrk_aligned>
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	d03f      	beq.n	800b436 <_malloc_r+0xea>
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	19db      	adds	r3, r3, r7
 800b3ba:	6023      	str	r3, [r4, #0]
 800b3bc:	9b00      	ldr	r3, [sp, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d040      	beq.n	800b446 <_malloc_r+0xfa>
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	42a2      	cmp	r2, r4
 800b3c8:	d133      	bne.n	800b432 <_malloc_r+0xe6>
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	605a      	str	r2, [r3, #4]
 800b3ce:	e014      	b.n	800b3fa <_malloc_r+0xae>
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	dac5      	bge.n	800b360 <_malloc_r+0x14>
 800b3d4:	230c      	movs	r3, #12
 800b3d6:	2500      	movs	r5, #0
 800b3d8:	6033      	str	r3, [r6, #0]
 800b3da:	0028      	movs	r0, r5
 800b3dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b3de:	6821      	ldr	r1, [r4, #0]
 800b3e0:	1bc9      	subs	r1, r1, r7
 800b3e2:	d420      	bmi.n	800b426 <_malloc_r+0xda>
 800b3e4:	290b      	cmp	r1, #11
 800b3e6:	d918      	bls.n	800b41a <_malloc_r+0xce>
 800b3e8:	19e2      	adds	r2, r4, r7
 800b3ea:	6027      	str	r7, [r4, #0]
 800b3ec:	42a3      	cmp	r3, r4
 800b3ee:	d112      	bne.n	800b416 <_malloc_r+0xca>
 800b3f0:	9b00      	ldr	r3, [sp, #0]
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	6863      	ldr	r3, [r4, #4]
 800b3f6:	6011      	str	r1, [r2, #0]
 800b3f8:	6053      	str	r3, [r2, #4]
 800b3fa:	0030      	movs	r0, r6
 800b3fc:	0025      	movs	r5, r4
 800b3fe:	f000 f82f 	bl	800b460 <__malloc_unlock>
 800b402:	2207      	movs	r2, #7
 800b404:	350b      	adds	r5, #11
 800b406:	1d23      	adds	r3, r4, #4
 800b408:	4395      	bics	r5, r2
 800b40a:	1aea      	subs	r2, r5, r3
 800b40c:	429d      	cmp	r5, r3
 800b40e:	d0e4      	beq.n	800b3da <_malloc_r+0x8e>
 800b410:	1b5b      	subs	r3, r3, r5
 800b412:	50a3      	str	r3, [r4, r2]
 800b414:	e7e1      	b.n	800b3da <_malloc_r+0x8e>
 800b416:	605a      	str	r2, [r3, #4]
 800b418:	e7ec      	b.n	800b3f4 <_malloc_r+0xa8>
 800b41a:	6862      	ldr	r2, [r4, #4]
 800b41c:	42a3      	cmp	r3, r4
 800b41e:	d1d5      	bne.n	800b3cc <_malloc_r+0x80>
 800b420:	9b00      	ldr	r3, [sp, #0]
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	e7e9      	b.n	800b3fa <_malloc_r+0xae>
 800b426:	0023      	movs	r3, r4
 800b428:	6864      	ldr	r4, [r4, #4]
 800b42a:	e7a2      	b.n	800b372 <_malloc_r+0x26>
 800b42c:	002c      	movs	r4, r5
 800b42e:	686d      	ldr	r5, [r5, #4]
 800b430:	e7ab      	b.n	800b38a <_malloc_r+0x3e>
 800b432:	0013      	movs	r3, r2
 800b434:	e7c4      	b.n	800b3c0 <_malloc_r+0x74>
 800b436:	230c      	movs	r3, #12
 800b438:	0030      	movs	r0, r6
 800b43a:	6033      	str	r3, [r6, #0]
 800b43c:	f000 f810 	bl	800b460 <__malloc_unlock>
 800b440:	e7cb      	b.n	800b3da <_malloc_r+0x8e>
 800b442:	6027      	str	r7, [r4, #0]
 800b444:	e7d9      	b.n	800b3fa <_malloc_r+0xae>
 800b446:	605b      	str	r3, [r3, #4]
 800b448:	deff      	udf	#255	; 0xff
 800b44a:	46c0      	nop			; (mov r8, r8)
 800b44c:	20000a5c 	.word	0x20000a5c

0800b450 <__malloc_lock>:
 800b450:	b510      	push	{r4, lr}
 800b452:	4802      	ldr	r0, [pc, #8]	; (800b45c <__malloc_lock+0xc>)
 800b454:	f7ff f855 	bl	800a502 <__retarget_lock_acquire_recursive>
 800b458:	bd10      	pop	{r4, pc}
 800b45a:	46c0      	nop			; (mov r8, r8)
 800b45c:	20000a58 	.word	0x20000a58

0800b460 <__malloc_unlock>:
 800b460:	b510      	push	{r4, lr}
 800b462:	4802      	ldr	r0, [pc, #8]	; (800b46c <__malloc_unlock+0xc>)
 800b464:	f7ff f84e 	bl	800a504 <__retarget_lock_release_recursive>
 800b468:	bd10      	pop	{r4, pc}
 800b46a:	46c0      	nop			; (mov r8, r8)
 800b46c:	20000a58 	.word	0x20000a58

0800b470 <_Balloc>:
 800b470:	b570      	push	{r4, r5, r6, lr}
 800b472:	69c5      	ldr	r5, [r0, #28]
 800b474:	0006      	movs	r6, r0
 800b476:	000c      	movs	r4, r1
 800b478:	2d00      	cmp	r5, #0
 800b47a:	d10e      	bne.n	800b49a <_Balloc+0x2a>
 800b47c:	2010      	movs	r0, #16
 800b47e:	f7ff ff39 	bl	800b2f4 <malloc>
 800b482:	1e02      	subs	r2, r0, #0
 800b484:	61f0      	str	r0, [r6, #28]
 800b486:	d104      	bne.n	800b492 <_Balloc+0x22>
 800b488:	216b      	movs	r1, #107	; 0x6b
 800b48a:	4b19      	ldr	r3, [pc, #100]	; (800b4f0 <_Balloc+0x80>)
 800b48c:	4819      	ldr	r0, [pc, #100]	; (800b4f4 <_Balloc+0x84>)
 800b48e:	f001 fd33 	bl	800cef8 <__assert_func>
 800b492:	6045      	str	r5, [r0, #4]
 800b494:	6085      	str	r5, [r0, #8]
 800b496:	6005      	str	r5, [r0, #0]
 800b498:	60c5      	str	r5, [r0, #12]
 800b49a:	69f5      	ldr	r5, [r6, #28]
 800b49c:	68eb      	ldr	r3, [r5, #12]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d013      	beq.n	800b4ca <_Balloc+0x5a>
 800b4a2:	69f3      	ldr	r3, [r6, #28]
 800b4a4:	00a2      	lsls	r2, r4, #2
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	189b      	adds	r3, r3, r2
 800b4aa:	6818      	ldr	r0, [r3, #0]
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d118      	bne.n	800b4e2 <_Balloc+0x72>
 800b4b0:	2101      	movs	r1, #1
 800b4b2:	000d      	movs	r5, r1
 800b4b4:	40a5      	lsls	r5, r4
 800b4b6:	1d6a      	adds	r2, r5, #5
 800b4b8:	0030      	movs	r0, r6
 800b4ba:	0092      	lsls	r2, r2, #2
 800b4bc:	f001 fd3a 	bl	800cf34 <_calloc_r>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d00c      	beq.n	800b4de <_Balloc+0x6e>
 800b4c4:	6044      	str	r4, [r0, #4]
 800b4c6:	6085      	str	r5, [r0, #8]
 800b4c8:	e00d      	b.n	800b4e6 <_Balloc+0x76>
 800b4ca:	2221      	movs	r2, #33	; 0x21
 800b4cc:	2104      	movs	r1, #4
 800b4ce:	0030      	movs	r0, r6
 800b4d0:	f001 fd30 	bl	800cf34 <_calloc_r>
 800b4d4:	69f3      	ldr	r3, [r6, #28]
 800b4d6:	60e8      	str	r0, [r5, #12]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1e1      	bne.n	800b4a2 <_Balloc+0x32>
 800b4de:	2000      	movs	r0, #0
 800b4e0:	bd70      	pop	{r4, r5, r6, pc}
 800b4e2:	6802      	ldr	r2, [r0, #0]
 800b4e4:	601a      	str	r2, [r3, #0]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	6103      	str	r3, [r0, #16]
 800b4ea:	60c3      	str	r3, [r0, #12]
 800b4ec:	e7f8      	b.n	800b4e0 <_Balloc+0x70>
 800b4ee:	46c0      	nop			; (mov r8, r8)
 800b4f0:	0800df9b 	.word	0x0800df9b
 800b4f4:	0800e01b 	.word	0x0800e01b

0800b4f8 <_Bfree>:
 800b4f8:	b570      	push	{r4, r5, r6, lr}
 800b4fa:	69c6      	ldr	r6, [r0, #28]
 800b4fc:	0005      	movs	r5, r0
 800b4fe:	000c      	movs	r4, r1
 800b500:	2e00      	cmp	r6, #0
 800b502:	d10e      	bne.n	800b522 <_Bfree+0x2a>
 800b504:	2010      	movs	r0, #16
 800b506:	f7ff fef5 	bl	800b2f4 <malloc>
 800b50a:	1e02      	subs	r2, r0, #0
 800b50c:	61e8      	str	r0, [r5, #28]
 800b50e:	d104      	bne.n	800b51a <_Bfree+0x22>
 800b510:	218f      	movs	r1, #143	; 0x8f
 800b512:	4b09      	ldr	r3, [pc, #36]	; (800b538 <_Bfree+0x40>)
 800b514:	4809      	ldr	r0, [pc, #36]	; (800b53c <_Bfree+0x44>)
 800b516:	f001 fcef 	bl	800cef8 <__assert_func>
 800b51a:	6046      	str	r6, [r0, #4]
 800b51c:	6086      	str	r6, [r0, #8]
 800b51e:	6006      	str	r6, [r0, #0]
 800b520:	60c6      	str	r6, [r0, #12]
 800b522:	2c00      	cmp	r4, #0
 800b524:	d007      	beq.n	800b536 <_Bfree+0x3e>
 800b526:	69eb      	ldr	r3, [r5, #28]
 800b528:	6862      	ldr	r2, [r4, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	0092      	lsls	r2, r2, #2
 800b52e:	189b      	adds	r3, r3, r2
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	6022      	str	r2, [r4, #0]
 800b534:	601c      	str	r4, [r3, #0]
 800b536:	bd70      	pop	{r4, r5, r6, pc}
 800b538:	0800df9b 	.word	0x0800df9b
 800b53c:	0800e01b 	.word	0x0800e01b

0800b540 <__multadd>:
 800b540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b542:	000e      	movs	r6, r1
 800b544:	9001      	str	r0, [sp, #4]
 800b546:	000c      	movs	r4, r1
 800b548:	001d      	movs	r5, r3
 800b54a:	2000      	movs	r0, #0
 800b54c:	690f      	ldr	r7, [r1, #16]
 800b54e:	3614      	adds	r6, #20
 800b550:	6833      	ldr	r3, [r6, #0]
 800b552:	3001      	adds	r0, #1
 800b554:	b299      	uxth	r1, r3
 800b556:	4351      	muls	r1, r2
 800b558:	0c1b      	lsrs	r3, r3, #16
 800b55a:	4353      	muls	r3, r2
 800b55c:	1949      	adds	r1, r1, r5
 800b55e:	0c0d      	lsrs	r5, r1, #16
 800b560:	195b      	adds	r3, r3, r5
 800b562:	0c1d      	lsrs	r5, r3, #16
 800b564:	b289      	uxth	r1, r1
 800b566:	041b      	lsls	r3, r3, #16
 800b568:	185b      	adds	r3, r3, r1
 800b56a:	c608      	stmia	r6!, {r3}
 800b56c:	4287      	cmp	r7, r0
 800b56e:	dcef      	bgt.n	800b550 <__multadd+0x10>
 800b570:	2d00      	cmp	r5, #0
 800b572:	d022      	beq.n	800b5ba <__multadd+0x7a>
 800b574:	68a3      	ldr	r3, [r4, #8]
 800b576:	42bb      	cmp	r3, r7
 800b578:	dc19      	bgt.n	800b5ae <__multadd+0x6e>
 800b57a:	6861      	ldr	r1, [r4, #4]
 800b57c:	9801      	ldr	r0, [sp, #4]
 800b57e:	3101      	adds	r1, #1
 800b580:	f7ff ff76 	bl	800b470 <_Balloc>
 800b584:	1e06      	subs	r6, r0, #0
 800b586:	d105      	bne.n	800b594 <__multadd+0x54>
 800b588:	0032      	movs	r2, r6
 800b58a:	21ba      	movs	r1, #186	; 0xba
 800b58c:	4b0c      	ldr	r3, [pc, #48]	; (800b5c0 <__multadd+0x80>)
 800b58e:	480d      	ldr	r0, [pc, #52]	; (800b5c4 <__multadd+0x84>)
 800b590:	f001 fcb2 	bl	800cef8 <__assert_func>
 800b594:	0021      	movs	r1, r4
 800b596:	6922      	ldr	r2, [r4, #16]
 800b598:	310c      	adds	r1, #12
 800b59a:	3202      	adds	r2, #2
 800b59c:	0092      	lsls	r2, r2, #2
 800b59e:	300c      	adds	r0, #12
 800b5a0:	f001 fc9a 	bl	800ced8 <memcpy>
 800b5a4:	0021      	movs	r1, r4
 800b5a6:	9801      	ldr	r0, [sp, #4]
 800b5a8:	f7ff ffa6 	bl	800b4f8 <_Bfree>
 800b5ac:	0034      	movs	r4, r6
 800b5ae:	1d3b      	adds	r3, r7, #4
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	18e3      	adds	r3, r4, r3
 800b5b4:	605d      	str	r5, [r3, #4]
 800b5b6:	1c7b      	adds	r3, r7, #1
 800b5b8:	6123      	str	r3, [r4, #16]
 800b5ba:	0020      	movs	r0, r4
 800b5bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5be:	46c0      	nop			; (mov r8, r8)
 800b5c0:	0800e00a 	.word	0x0800e00a
 800b5c4:	0800e01b 	.word	0x0800e01b

0800b5c8 <__s2b>:
 800b5c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5ca:	0006      	movs	r6, r0
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	000c      	movs	r4, r1
 800b5d0:	3008      	adds	r0, #8
 800b5d2:	2109      	movs	r1, #9
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	0015      	movs	r5, r2
 800b5d8:	f7f4 fe3c 	bl	8000254 <__divsi3>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	2100      	movs	r1, #0
 800b5e0:	4283      	cmp	r3, r0
 800b5e2:	db0a      	blt.n	800b5fa <__s2b+0x32>
 800b5e4:	0030      	movs	r0, r6
 800b5e6:	f7ff ff43 	bl	800b470 <_Balloc>
 800b5ea:	1e01      	subs	r1, r0, #0
 800b5ec:	d108      	bne.n	800b600 <__s2b+0x38>
 800b5ee:	000a      	movs	r2, r1
 800b5f0:	4b19      	ldr	r3, [pc, #100]	; (800b658 <__s2b+0x90>)
 800b5f2:	481a      	ldr	r0, [pc, #104]	; (800b65c <__s2b+0x94>)
 800b5f4:	31d3      	adds	r1, #211	; 0xd3
 800b5f6:	f001 fc7f 	bl	800cef8 <__assert_func>
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	3101      	adds	r1, #1
 800b5fe:	e7ef      	b.n	800b5e0 <__s2b+0x18>
 800b600:	9b08      	ldr	r3, [sp, #32]
 800b602:	6143      	str	r3, [r0, #20]
 800b604:	2301      	movs	r3, #1
 800b606:	6103      	str	r3, [r0, #16]
 800b608:	2d09      	cmp	r5, #9
 800b60a:	dd18      	ble.n	800b63e <__s2b+0x76>
 800b60c:	0023      	movs	r3, r4
 800b60e:	3309      	adds	r3, #9
 800b610:	001f      	movs	r7, r3
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	1964      	adds	r4, r4, r5
 800b616:	783b      	ldrb	r3, [r7, #0]
 800b618:	220a      	movs	r2, #10
 800b61a:	0030      	movs	r0, r6
 800b61c:	3b30      	subs	r3, #48	; 0x30
 800b61e:	f7ff ff8f 	bl	800b540 <__multadd>
 800b622:	3701      	adds	r7, #1
 800b624:	0001      	movs	r1, r0
 800b626:	42a7      	cmp	r7, r4
 800b628:	d1f5      	bne.n	800b616 <__s2b+0x4e>
 800b62a:	002c      	movs	r4, r5
 800b62c:	9b00      	ldr	r3, [sp, #0]
 800b62e:	3c08      	subs	r4, #8
 800b630:	191c      	adds	r4, r3, r4
 800b632:	002f      	movs	r7, r5
 800b634:	9b01      	ldr	r3, [sp, #4]
 800b636:	429f      	cmp	r7, r3
 800b638:	db04      	blt.n	800b644 <__s2b+0x7c>
 800b63a:	0008      	movs	r0, r1
 800b63c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b63e:	2509      	movs	r5, #9
 800b640:	340a      	adds	r4, #10
 800b642:	e7f6      	b.n	800b632 <__s2b+0x6a>
 800b644:	1b63      	subs	r3, r4, r5
 800b646:	5ddb      	ldrb	r3, [r3, r7]
 800b648:	220a      	movs	r2, #10
 800b64a:	0030      	movs	r0, r6
 800b64c:	3b30      	subs	r3, #48	; 0x30
 800b64e:	f7ff ff77 	bl	800b540 <__multadd>
 800b652:	3701      	adds	r7, #1
 800b654:	0001      	movs	r1, r0
 800b656:	e7ed      	b.n	800b634 <__s2b+0x6c>
 800b658:	0800e00a 	.word	0x0800e00a
 800b65c:	0800e01b 	.word	0x0800e01b

0800b660 <__hi0bits>:
 800b660:	0003      	movs	r3, r0
 800b662:	0c02      	lsrs	r2, r0, #16
 800b664:	2000      	movs	r0, #0
 800b666:	4282      	cmp	r2, r0
 800b668:	d101      	bne.n	800b66e <__hi0bits+0xe>
 800b66a:	041b      	lsls	r3, r3, #16
 800b66c:	3010      	adds	r0, #16
 800b66e:	0e1a      	lsrs	r2, r3, #24
 800b670:	d101      	bne.n	800b676 <__hi0bits+0x16>
 800b672:	3008      	adds	r0, #8
 800b674:	021b      	lsls	r3, r3, #8
 800b676:	0f1a      	lsrs	r2, r3, #28
 800b678:	d101      	bne.n	800b67e <__hi0bits+0x1e>
 800b67a:	3004      	adds	r0, #4
 800b67c:	011b      	lsls	r3, r3, #4
 800b67e:	0f9a      	lsrs	r2, r3, #30
 800b680:	d101      	bne.n	800b686 <__hi0bits+0x26>
 800b682:	3002      	adds	r0, #2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	2b00      	cmp	r3, #0
 800b688:	db03      	blt.n	800b692 <__hi0bits+0x32>
 800b68a:	3001      	adds	r0, #1
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	d400      	bmi.n	800b692 <__hi0bits+0x32>
 800b690:	2020      	movs	r0, #32
 800b692:	4770      	bx	lr

0800b694 <__lo0bits>:
 800b694:	6803      	ldr	r3, [r0, #0]
 800b696:	0001      	movs	r1, r0
 800b698:	2207      	movs	r2, #7
 800b69a:	0018      	movs	r0, r3
 800b69c:	4010      	ands	r0, r2
 800b69e:	4213      	tst	r3, r2
 800b6a0:	d00d      	beq.n	800b6be <__lo0bits+0x2a>
 800b6a2:	3a06      	subs	r2, #6
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	4213      	tst	r3, r2
 800b6a8:	d105      	bne.n	800b6b6 <__lo0bits+0x22>
 800b6aa:	3002      	adds	r0, #2
 800b6ac:	4203      	tst	r3, r0
 800b6ae:	d003      	beq.n	800b6b8 <__lo0bits+0x24>
 800b6b0:	40d3      	lsrs	r3, r2
 800b6b2:	0010      	movs	r0, r2
 800b6b4:	600b      	str	r3, [r1, #0]
 800b6b6:	4770      	bx	lr
 800b6b8:	089b      	lsrs	r3, r3, #2
 800b6ba:	600b      	str	r3, [r1, #0]
 800b6bc:	e7fb      	b.n	800b6b6 <__lo0bits+0x22>
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	2a00      	cmp	r2, #0
 800b6c2:	d101      	bne.n	800b6c8 <__lo0bits+0x34>
 800b6c4:	2010      	movs	r0, #16
 800b6c6:	0c1b      	lsrs	r3, r3, #16
 800b6c8:	b2da      	uxtb	r2, r3
 800b6ca:	2a00      	cmp	r2, #0
 800b6cc:	d101      	bne.n	800b6d2 <__lo0bits+0x3e>
 800b6ce:	3008      	adds	r0, #8
 800b6d0:	0a1b      	lsrs	r3, r3, #8
 800b6d2:	071a      	lsls	r2, r3, #28
 800b6d4:	d101      	bne.n	800b6da <__lo0bits+0x46>
 800b6d6:	3004      	adds	r0, #4
 800b6d8:	091b      	lsrs	r3, r3, #4
 800b6da:	079a      	lsls	r2, r3, #30
 800b6dc:	d101      	bne.n	800b6e2 <__lo0bits+0x4e>
 800b6de:	3002      	adds	r0, #2
 800b6e0:	089b      	lsrs	r3, r3, #2
 800b6e2:	07da      	lsls	r2, r3, #31
 800b6e4:	d4e9      	bmi.n	800b6ba <__lo0bits+0x26>
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	085b      	lsrs	r3, r3, #1
 800b6ea:	d1e6      	bne.n	800b6ba <__lo0bits+0x26>
 800b6ec:	2020      	movs	r0, #32
 800b6ee:	e7e2      	b.n	800b6b6 <__lo0bits+0x22>

0800b6f0 <__i2b>:
 800b6f0:	b510      	push	{r4, lr}
 800b6f2:	000c      	movs	r4, r1
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	f7ff febb 	bl	800b470 <_Balloc>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d107      	bne.n	800b70e <__i2b+0x1e>
 800b6fe:	2146      	movs	r1, #70	; 0x46
 800b700:	4c05      	ldr	r4, [pc, #20]	; (800b718 <__i2b+0x28>)
 800b702:	0002      	movs	r2, r0
 800b704:	4b05      	ldr	r3, [pc, #20]	; (800b71c <__i2b+0x2c>)
 800b706:	0020      	movs	r0, r4
 800b708:	31ff      	adds	r1, #255	; 0xff
 800b70a:	f001 fbf5 	bl	800cef8 <__assert_func>
 800b70e:	2301      	movs	r3, #1
 800b710:	6144      	str	r4, [r0, #20]
 800b712:	6103      	str	r3, [r0, #16]
 800b714:	bd10      	pop	{r4, pc}
 800b716:	46c0      	nop			; (mov r8, r8)
 800b718:	0800e01b 	.word	0x0800e01b
 800b71c:	0800e00a 	.word	0x0800e00a

0800b720 <__multiply>:
 800b720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b722:	0015      	movs	r5, r2
 800b724:	690a      	ldr	r2, [r1, #16]
 800b726:	692b      	ldr	r3, [r5, #16]
 800b728:	000c      	movs	r4, r1
 800b72a:	b08b      	sub	sp, #44	; 0x2c
 800b72c:	429a      	cmp	r2, r3
 800b72e:	da01      	bge.n	800b734 <__multiply+0x14>
 800b730:	002c      	movs	r4, r5
 800b732:	000d      	movs	r5, r1
 800b734:	6927      	ldr	r7, [r4, #16]
 800b736:	692e      	ldr	r6, [r5, #16]
 800b738:	6861      	ldr	r1, [r4, #4]
 800b73a:	19bb      	adds	r3, r7, r6
 800b73c:	9303      	str	r3, [sp, #12]
 800b73e:	68a3      	ldr	r3, [r4, #8]
 800b740:	19ba      	adds	r2, r7, r6
 800b742:	4293      	cmp	r3, r2
 800b744:	da00      	bge.n	800b748 <__multiply+0x28>
 800b746:	3101      	adds	r1, #1
 800b748:	f7ff fe92 	bl	800b470 <_Balloc>
 800b74c:	9002      	str	r0, [sp, #8]
 800b74e:	2800      	cmp	r0, #0
 800b750:	d106      	bne.n	800b760 <__multiply+0x40>
 800b752:	21b1      	movs	r1, #177	; 0xb1
 800b754:	4b48      	ldr	r3, [pc, #288]	; (800b878 <__multiply+0x158>)
 800b756:	4849      	ldr	r0, [pc, #292]	; (800b87c <__multiply+0x15c>)
 800b758:	9a02      	ldr	r2, [sp, #8]
 800b75a:	0049      	lsls	r1, r1, #1
 800b75c:	f001 fbcc 	bl	800cef8 <__assert_func>
 800b760:	9b02      	ldr	r3, [sp, #8]
 800b762:	2200      	movs	r2, #0
 800b764:	3314      	adds	r3, #20
 800b766:	469c      	mov	ip, r3
 800b768:	19bb      	adds	r3, r7, r6
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4463      	add	r3, ip
 800b76e:	9304      	str	r3, [sp, #16]
 800b770:	4663      	mov	r3, ip
 800b772:	9904      	ldr	r1, [sp, #16]
 800b774:	428b      	cmp	r3, r1
 800b776:	d32a      	bcc.n	800b7ce <__multiply+0xae>
 800b778:	0023      	movs	r3, r4
 800b77a:	00bf      	lsls	r7, r7, #2
 800b77c:	3314      	adds	r3, #20
 800b77e:	3514      	adds	r5, #20
 800b780:	9308      	str	r3, [sp, #32]
 800b782:	00b6      	lsls	r6, r6, #2
 800b784:	19db      	adds	r3, r3, r7
 800b786:	9305      	str	r3, [sp, #20]
 800b788:	19ab      	adds	r3, r5, r6
 800b78a:	9309      	str	r3, [sp, #36]	; 0x24
 800b78c:	2304      	movs	r3, #4
 800b78e:	9306      	str	r3, [sp, #24]
 800b790:	0023      	movs	r3, r4
 800b792:	9a05      	ldr	r2, [sp, #20]
 800b794:	3315      	adds	r3, #21
 800b796:	9501      	str	r5, [sp, #4]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d305      	bcc.n	800b7a8 <__multiply+0x88>
 800b79c:	1b13      	subs	r3, r2, r4
 800b79e:	3b15      	subs	r3, #21
 800b7a0:	089b      	lsrs	r3, r3, #2
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	9306      	str	r3, [sp, #24]
 800b7a8:	9b01      	ldr	r3, [sp, #4]
 800b7aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d310      	bcc.n	800b7d2 <__multiply+0xb2>
 800b7b0:	9b03      	ldr	r3, [sp, #12]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	dd05      	ble.n	800b7c2 <__multiply+0xa2>
 800b7b6:	9b04      	ldr	r3, [sp, #16]
 800b7b8:	3b04      	subs	r3, #4
 800b7ba:	9304      	str	r3, [sp, #16]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d056      	beq.n	800b870 <__multiply+0x150>
 800b7c2:	9b02      	ldr	r3, [sp, #8]
 800b7c4:	9a03      	ldr	r2, [sp, #12]
 800b7c6:	0018      	movs	r0, r3
 800b7c8:	611a      	str	r2, [r3, #16]
 800b7ca:	b00b      	add	sp, #44	; 0x2c
 800b7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7ce:	c304      	stmia	r3!, {r2}
 800b7d0:	e7cf      	b.n	800b772 <__multiply+0x52>
 800b7d2:	9b01      	ldr	r3, [sp, #4]
 800b7d4:	6818      	ldr	r0, [r3, #0]
 800b7d6:	b280      	uxth	r0, r0
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d01e      	beq.n	800b81a <__multiply+0xfa>
 800b7dc:	4667      	mov	r7, ip
 800b7de:	2500      	movs	r5, #0
 800b7e0:	9e08      	ldr	r6, [sp, #32]
 800b7e2:	ce02      	ldmia	r6!, {r1}
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	9307      	str	r3, [sp, #28]
 800b7e8:	b28b      	uxth	r3, r1
 800b7ea:	4343      	muls	r3, r0
 800b7ec:	001a      	movs	r2, r3
 800b7ee:	466b      	mov	r3, sp
 800b7f0:	8b9b      	ldrh	r3, [r3, #28]
 800b7f2:	18d3      	adds	r3, r2, r3
 800b7f4:	195b      	adds	r3, r3, r5
 800b7f6:	0c0d      	lsrs	r5, r1, #16
 800b7f8:	4345      	muls	r5, r0
 800b7fa:	9a07      	ldr	r2, [sp, #28]
 800b7fc:	0c11      	lsrs	r1, r2, #16
 800b7fe:	1869      	adds	r1, r5, r1
 800b800:	0c1a      	lsrs	r2, r3, #16
 800b802:	188a      	adds	r2, r1, r2
 800b804:	b29b      	uxth	r3, r3
 800b806:	0c15      	lsrs	r5, r2, #16
 800b808:	0412      	lsls	r2, r2, #16
 800b80a:	431a      	orrs	r2, r3
 800b80c:	9b05      	ldr	r3, [sp, #20]
 800b80e:	c704      	stmia	r7!, {r2}
 800b810:	42b3      	cmp	r3, r6
 800b812:	d8e6      	bhi.n	800b7e2 <__multiply+0xc2>
 800b814:	4663      	mov	r3, ip
 800b816:	9a06      	ldr	r2, [sp, #24]
 800b818:	509d      	str	r5, [r3, r2]
 800b81a:	9b01      	ldr	r3, [sp, #4]
 800b81c:	6818      	ldr	r0, [r3, #0]
 800b81e:	0c00      	lsrs	r0, r0, #16
 800b820:	d020      	beq.n	800b864 <__multiply+0x144>
 800b822:	4663      	mov	r3, ip
 800b824:	0025      	movs	r5, r4
 800b826:	4661      	mov	r1, ip
 800b828:	2700      	movs	r7, #0
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3514      	adds	r5, #20
 800b82e:	682a      	ldr	r2, [r5, #0]
 800b830:	680e      	ldr	r6, [r1, #0]
 800b832:	b292      	uxth	r2, r2
 800b834:	4342      	muls	r2, r0
 800b836:	0c36      	lsrs	r6, r6, #16
 800b838:	1992      	adds	r2, r2, r6
 800b83a:	19d2      	adds	r2, r2, r7
 800b83c:	0416      	lsls	r6, r2, #16
 800b83e:	b29b      	uxth	r3, r3
 800b840:	431e      	orrs	r6, r3
 800b842:	600e      	str	r6, [r1, #0]
 800b844:	cd40      	ldmia	r5!, {r6}
 800b846:	684b      	ldr	r3, [r1, #4]
 800b848:	0c36      	lsrs	r6, r6, #16
 800b84a:	4346      	muls	r6, r0
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	0c12      	lsrs	r2, r2, #16
 800b850:	18f3      	adds	r3, r6, r3
 800b852:	189b      	adds	r3, r3, r2
 800b854:	9a05      	ldr	r2, [sp, #20]
 800b856:	0c1f      	lsrs	r7, r3, #16
 800b858:	3104      	adds	r1, #4
 800b85a:	42aa      	cmp	r2, r5
 800b85c:	d8e7      	bhi.n	800b82e <__multiply+0x10e>
 800b85e:	4662      	mov	r2, ip
 800b860:	9906      	ldr	r1, [sp, #24]
 800b862:	5053      	str	r3, [r2, r1]
 800b864:	9b01      	ldr	r3, [sp, #4]
 800b866:	3304      	adds	r3, #4
 800b868:	9301      	str	r3, [sp, #4]
 800b86a:	2304      	movs	r3, #4
 800b86c:	449c      	add	ip, r3
 800b86e:	e79b      	b.n	800b7a8 <__multiply+0x88>
 800b870:	9b03      	ldr	r3, [sp, #12]
 800b872:	3b01      	subs	r3, #1
 800b874:	9303      	str	r3, [sp, #12]
 800b876:	e79b      	b.n	800b7b0 <__multiply+0x90>
 800b878:	0800e00a 	.word	0x0800e00a
 800b87c:	0800e01b 	.word	0x0800e01b

0800b880 <__pow5mult>:
 800b880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b882:	2303      	movs	r3, #3
 800b884:	0015      	movs	r5, r2
 800b886:	0007      	movs	r7, r0
 800b888:	000e      	movs	r6, r1
 800b88a:	401a      	ands	r2, r3
 800b88c:	421d      	tst	r5, r3
 800b88e:	d008      	beq.n	800b8a2 <__pow5mult+0x22>
 800b890:	4925      	ldr	r1, [pc, #148]	; (800b928 <__pow5mult+0xa8>)
 800b892:	3a01      	subs	r2, #1
 800b894:	0092      	lsls	r2, r2, #2
 800b896:	5852      	ldr	r2, [r2, r1]
 800b898:	2300      	movs	r3, #0
 800b89a:	0031      	movs	r1, r6
 800b89c:	f7ff fe50 	bl	800b540 <__multadd>
 800b8a0:	0006      	movs	r6, r0
 800b8a2:	10ad      	asrs	r5, r5, #2
 800b8a4:	d03d      	beq.n	800b922 <__pow5mult+0xa2>
 800b8a6:	69fc      	ldr	r4, [r7, #28]
 800b8a8:	2c00      	cmp	r4, #0
 800b8aa:	d10f      	bne.n	800b8cc <__pow5mult+0x4c>
 800b8ac:	2010      	movs	r0, #16
 800b8ae:	f7ff fd21 	bl	800b2f4 <malloc>
 800b8b2:	1e02      	subs	r2, r0, #0
 800b8b4:	61f8      	str	r0, [r7, #28]
 800b8b6:	d105      	bne.n	800b8c4 <__pow5mult+0x44>
 800b8b8:	21b4      	movs	r1, #180	; 0xb4
 800b8ba:	4b1c      	ldr	r3, [pc, #112]	; (800b92c <__pow5mult+0xac>)
 800b8bc:	481c      	ldr	r0, [pc, #112]	; (800b930 <__pow5mult+0xb0>)
 800b8be:	31ff      	adds	r1, #255	; 0xff
 800b8c0:	f001 fb1a 	bl	800cef8 <__assert_func>
 800b8c4:	6044      	str	r4, [r0, #4]
 800b8c6:	6084      	str	r4, [r0, #8]
 800b8c8:	6004      	str	r4, [r0, #0]
 800b8ca:	60c4      	str	r4, [r0, #12]
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	689c      	ldr	r4, [r3, #8]
 800b8d0:	9301      	str	r3, [sp, #4]
 800b8d2:	2c00      	cmp	r4, #0
 800b8d4:	d108      	bne.n	800b8e8 <__pow5mult+0x68>
 800b8d6:	0038      	movs	r0, r7
 800b8d8:	4916      	ldr	r1, [pc, #88]	; (800b934 <__pow5mult+0xb4>)
 800b8da:	f7ff ff09 	bl	800b6f0 <__i2b>
 800b8de:	9b01      	ldr	r3, [sp, #4]
 800b8e0:	0004      	movs	r4, r0
 800b8e2:	6098      	str	r0, [r3, #8]
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	6003      	str	r3, [r0, #0]
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	421d      	tst	r5, r3
 800b8ec:	d00a      	beq.n	800b904 <__pow5mult+0x84>
 800b8ee:	0031      	movs	r1, r6
 800b8f0:	0022      	movs	r2, r4
 800b8f2:	0038      	movs	r0, r7
 800b8f4:	f7ff ff14 	bl	800b720 <__multiply>
 800b8f8:	0031      	movs	r1, r6
 800b8fa:	9001      	str	r0, [sp, #4]
 800b8fc:	0038      	movs	r0, r7
 800b8fe:	f7ff fdfb 	bl	800b4f8 <_Bfree>
 800b902:	9e01      	ldr	r6, [sp, #4]
 800b904:	106d      	asrs	r5, r5, #1
 800b906:	d00c      	beq.n	800b922 <__pow5mult+0xa2>
 800b908:	6820      	ldr	r0, [r4, #0]
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d107      	bne.n	800b91e <__pow5mult+0x9e>
 800b90e:	0022      	movs	r2, r4
 800b910:	0021      	movs	r1, r4
 800b912:	0038      	movs	r0, r7
 800b914:	f7ff ff04 	bl	800b720 <__multiply>
 800b918:	2300      	movs	r3, #0
 800b91a:	6020      	str	r0, [r4, #0]
 800b91c:	6003      	str	r3, [r0, #0]
 800b91e:	0004      	movs	r4, r0
 800b920:	e7e2      	b.n	800b8e8 <__pow5mult+0x68>
 800b922:	0030      	movs	r0, r6
 800b924:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b926:	46c0      	nop			; (mov r8, r8)
 800b928:	0800e168 	.word	0x0800e168
 800b92c:	0800df9b 	.word	0x0800df9b
 800b930:	0800e01b 	.word	0x0800e01b
 800b934:	00000271 	.word	0x00000271

0800b938 <__lshift>:
 800b938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b93a:	000c      	movs	r4, r1
 800b93c:	0017      	movs	r7, r2
 800b93e:	6923      	ldr	r3, [r4, #16]
 800b940:	1155      	asrs	r5, r2, #5
 800b942:	b087      	sub	sp, #28
 800b944:	18eb      	adds	r3, r5, r3
 800b946:	9302      	str	r3, [sp, #8]
 800b948:	3301      	adds	r3, #1
 800b94a:	9301      	str	r3, [sp, #4]
 800b94c:	6849      	ldr	r1, [r1, #4]
 800b94e:	68a3      	ldr	r3, [r4, #8]
 800b950:	9004      	str	r0, [sp, #16]
 800b952:	9a01      	ldr	r2, [sp, #4]
 800b954:	4293      	cmp	r3, r2
 800b956:	db10      	blt.n	800b97a <__lshift+0x42>
 800b958:	9804      	ldr	r0, [sp, #16]
 800b95a:	f7ff fd89 	bl	800b470 <_Balloc>
 800b95e:	2300      	movs	r3, #0
 800b960:	0002      	movs	r2, r0
 800b962:	0006      	movs	r6, r0
 800b964:	0019      	movs	r1, r3
 800b966:	3214      	adds	r2, #20
 800b968:	4298      	cmp	r0, r3
 800b96a:	d10c      	bne.n	800b986 <__lshift+0x4e>
 800b96c:	31df      	adds	r1, #223	; 0xdf
 800b96e:	0032      	movs	r2, r6
 800b970:	4b26      	ldr	r3, [pc, #152]	; (800ba0c <__lshift+0xd4>)
 800b972:	4827      	ldr	r0, [pc, #156]	; (800ba10 <__lshift+0xd8>)
 800b974:	31ff      	adds	r1, #255	; 0xff
 800b976:	f001 fabf 	bl	800cef8 <__assert_func>
 800b97a:	3101      	adds	r1, #1
 800b97c:	005b      	lsls	r3, r3, #1
 800b97e:	e7e8      	b.n	800b952 <__lshift+0x1a>
 800b980:	0098      	lsls	r0, r3, #2
 800b982:	5011      	str	r1, [r2, r0]
 800b984:	3301      	adds	r3, #1
 800b986:	42ab      	cmp	r3, r5
 800b988:	dbfa      	blt.n	800b980 <__lshift+0x48>
 800b98a:	43eb      	mvns	r3, r5
 800b98c:	17db      	asrs	r3, r3, #31
 800b98e:	401d      	ands	r5, r3
 800b990:	211f      	movs	r1, #31
 800b992:	0023      	movs	r3, r4
 800b994:	0038      	movs	r0, r7
 800b996:	00ad      	lsls	r5, r5, #2
 800b998:	1955      	adds	r5, r2, r5
 800b99a:	6922      	ldr	r2, [r4, #16]
 800b99c:	3314      	adds	r3, #20
 800b99e:	0092      	lsls	r2, r2, #2
 800b9a0:	4008      	ands	r0, r1
 800b9a2:	4684      	mov	ip, r0
 800b9a4:	189a      	adds	r2, r3, r2
 800b9a6:	420f      	tst	r7, r1
 800b9a8:	d02a      	beq.n	800ba00 <__lshift+0xc8>
 800b9aa:	3101      	adds	r1, #1
 800b9ac:	1a09      	subs	r1, r1, r0
 800b9ae:	9105      	str	r1, [sp, #20]
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	9503      	str	r5, [sp, #12]
 800b9b4:	4667      	mov	r7, ip
 800b9b6:	6818      	ldr	r0, [r3, #0]
 800b9b8:	40b8      	lsls	r0, r7
 800b9ba:	4308      	orrs	r0, r1
 800b9bc:	9903      	ldr	r1, [sp, #12]
 800b9be:	c101      	stmia	r1!, {r0}
 800b9c0:	9103      	str	r1, [sp, #12]
 800b9c2:	9805      	ldr	r0, [sp, #20]
 800b9c4:	cb02      	ldmia	r3!, {r1}
 800b9c6:	40c1      	lsrs	r1, r0
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d8f3      	bhi.n	800b9b4 <__lshift+0x7c>
 800b9cc:	0020      	movs	r0, r4
 800b9ce:	3015      	adds	r0, #21
 800b9d0:	2304      	movs	r3, #4
 800b9d2:	4282      	cmp	r2, r0
 800b9d4:	d304      	bcc.n	800b9e0 <__lshift+0xa8>
 800b9d6:	1b13      	subs	r3, r2, r4
 800b9d8:	3b15      	subs	r3, #21
 800b9da:	089b      	lsrs	r3, r3, #2
 800b9dc:	3301      	adds	r3, #1
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	50e9      	str	r1, [r5, r3]
 800b9e2:	2900      	cmp	r1, #0
 800b9e4:	d002      	beq.n	800b9ec <__lshift+0xb4>
 800b9e6:	9b02      	ldr	r3, [sp, #8]
 800b9e8:	3302      	adds	r3, #2
 800b9ea:	9301      	str	r3, [sp, #4]
 800b9ec:	9b01      	ldr	r3, [sp, #4]
 800b9ee:	9804      	ldr	r0, [sp, #16]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	0021      	movs	r1, r4
 800b9f4:	6133      	str	r3, [r6, #16]
 800b9f6:	f7ff fd7f 	bl	800b4f8 <_Bfree>
 800b9fa:	0030      	movs	r0, r6
 800b9fc:	b007      	add	sp, #28
 800b9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba00:	cb02      	ldmia	r3!, {r1}
 800ba02:	c502      	stmia	r5!, {r1}
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d8fb      	bhi.n	800ba00 <__lshift+0xc8>
 800ba08:	e7f0      	b.n	800b9ec <__lshift+0xb4>
 800ba0a:	46c0      	nop			; (mov r8, r8)
 800ba0c:	0800e00a 	.word	0x0800e00a
 800ba10:	0800e01b 	.word	0x0800e01b

0800ba14 <__mcmp>:
 800ba14:	b530      	push	{r4, r5, lr}
 800ba16:	690b      	ldr	r3, [r1, #16]
 800ba18:	6904      	ldr	r4, [r0, #16]
 800ba1a:	0002      	movs	r2, r0
 800ba1c:	1ae0      	subs	r0, r4, r3
 800ba1e:	429c      	cmp	r4, r3
 800ba20:	d10e      	bne.n	800ba40 <__mcmp+0x2c>
 800ba22:	3214      	adds	r2, #20
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	3114      	adds	r1, #20
 800ba28:	0014      	movs	r4, r2
 800ba2a:	18c9      	adds	r1, r1, r3
 800ba2c:	18d2      	adds	r2, r2, r3
 800ba2e:	3a04      	subs	r2, #4
 800ba30:	3904      	subs	r1, #4
 800ba32:	6815      	ldr	r5, [r2, #0]
 800ba34:	680b      	ldr	r3, [r1, #0]
 800ba36:	429d      	cmp	r5, r3
 800ba38:	d003      	beq.n	800ba42 <__mcmp+0x2e>
 800ba3a:	2001      	movs	r0, #1
 800ba3c:	429d      	cmp	r5, r3
 800ba3e:	d303      	bcc.n	800ba48 <__mcmp+0x34>
 800ba40:	bd30      	pop	{r4, r5, pc}
 800ba42:	4294      	cmp	r4, r2
 800ba44:	d3f3      	bcc.n	800ba2e <__mcmp+0x1a>
 800ba46:	e7fb      	b.n	800ba40 <__mcmp+0x2c>
 800ba48:	4240      	negs	r0, r0
 800ba4a:	e7f9      	b.n	800ba40 <__mcmp+0x2c>

0800ba4c <__mdiff>:
 800ba4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba4e:	000e      	movs	r6, r1
 800ba50:	0007      	movs	r7, r0
 800ba52:	0011      	movs	r1, r2
 800ba54:	0030      	movs	r0, r6
 800ba56:	b087      	sub	sp, #28
 800ba58:	0014      	movs	r4, r2
 800ba5a:	f7ff ffdb 	bl	800ba14 <__mcmp>
 800ba5e:	1e05      	subs	r5, r0, #0
 800ba60:	d110      	bne.n	800ba84 <__mdiff+0x38>
 800ba62:	0001      	movs	r1, r0
 800ba64:	0038      	movs	r0, r7
 800ba66:	f7ff fd03 	bl	800b470 <_Balloc>
 800ba6a:	1e02      	subs	r2, r0, #0
 800ba6c:	d104      	bne.n	800ba78 <__mdiff+0x2c>
 800ba6e:	4b3f      	ldr	r3, [pc, #252]	; (800bb6c <__mdiff+0x120>)
 800ba70:	483f      	ldr	r0, [pc, #252]	; (800bb70 <__mdiff+0x124>)
 800ba72:	4940      	ldr	r1, [pc, #256]	; (800bb74 <__mdiff+0x128>)
 800ba74:	f001 fa40 	bl	800cef8 <__assert_func>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	6145      	str	r5, [r0, #20]
 800ba7c:	6103      	str	r3, [r0, #16]
 800ba7e:	0010      	movs	r0, r2
 800ba80:	b007      	add	sp, #28
 800ba82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba84:	2301      	movs	r3, #1
 800ba86:	9301      	str	r3, [sp, #4]
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	db04      	blt.n	800ba96 <__mdiff+0x4a>
 800ba8c:	0023      	movs	r3, r4
 800ba8e:	0034      	movs	r4, r6
 800ba90:	001e      	movs	r6, r3
 800ba92:	2300      	movs	r3, #0
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	0038      	movs	r0, r7
 800ba98:	6861      	ldr	r1, [r4, #4]
 800ba9a:	f7ff fce9 	bl	800b470 <_Balloc>
 800ba9e:	1e02      	subs	r2, r0, #0
 800baa0:	d103      	bne.n	800baaa <__mdiff+0x5e>
 800baa2:	4b32      	ldr	r3, [pc, #200]	; (800bb6c <__mdiff+0x120>)
 800baa4:	4832      	ldr	r0, [pc, #200]	; (800bb70 <__mdiff+0x124>)
 800baa6:	4934      	ldr	r1, [pc, #208]	; (800bb78 <__mdiff+0x12c>)
 800baa8:	e7e4      	b.n	800ba74 <__mdiff+0x28>
 800baaa:	9b01      	ldr	r3, [sp, #4]
 800baac:	2700      	movs	r7, #0
 800baae:	60c3      	str	r3, [r0, #12]
 800bab0:	6920      	ldr	r0, [r4, #16]
 800bab2:	3414      	adds	r4, #20
 800bab4:	0083      	lsls	r3, r0, #2
 800bab6:	18e3      	adds	r3, r4, r3
 800bab8:	0021      	movs	r1, r4
 800baba:	9401      	str	r4, [sp, #4]
 800babc:	0034      	movs	r4, r6
 800babe:	9302      	str	r3, [sp, #8]
 800bac0:	6933      	ldr	r3, [r6, #16]
 800bac2:	3414      	adds	r4, #20
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	18e3      	adds	r3, r4, r3
 800bac8:	9303      	str	r3, [sp, #12]
 800baca:	0013      	movs	r3, r2
 800bacc:	3314      	adds	r3, #20
 800bace:	469c      	mov	ip, r3
 800bad0:	9305      	str	r3, [sp, #20]
 800bad2:	9104      	str	r1, [sp, #16]
 800bad4:	9b04      	ldr	r3, [sp, #16]
 800bad6:	cc02      	ldmia	r4!, {r1}
 800bad8:	cb20      	ldmia	r3!, {r5}
 800bada:	9304      	str	r3, [sp, #16]
 800badc:	b2ab      	uxth	r3, r5
 800bade:	19df      	adds	r7, r3, r7
 800bae0:	b28b      	uxth	r3, r1
 800bae2:	1afb      	subs	r3, r7, r3
 800bae4:	0c09      	lsrs	r1, r1, #16
 800bae6:	0c2d      	lsrs	r5, r5, #16
 800bae8:	1a6d      	subs	r5, r5, r1
 800baea:	1419      	asrs	r1, r3, #16
 800baec:	1869      	adds	r1, r5, r1
 800baee:	b29b      	uxth	r3, r3
 800baf0:	140f      	asrs	r7, r1, #16
 800baf2:	0409      	lsls	r1, r1, #16
 800baf4:	4319      	orrs	r1, r3
 800baf6:	4663      	mov	r3, ip
 800baf8:	c302      	stmia	r3!, {r1}
 800bafa:	469c      	mov	ip, r3
 800bafc:	9b03      	ldr	r3, [sp, #12]
 800bafe:	42a3      	cmp	r3, r4
 800bb00:	d8e8      	bhi.n	800bad4 <__mdiff+0x88>
 800bb02:	0031      	movs	r1, r6
 800bb04:	9c03      	ldr	r4, [sp, #12]
 800bb06:	3115      	adds	r1, #21
 800bb08:	2304      	movs	r3, #4
 800bb0a:	428c      	cmp	r4, r1
 800bb0c:	d304      	bcc.n	800bb18 <__mdiff+0xcc>
 800bb0e:	1ba3      	subs	r3, r4, r6
 800bb10:	3b15      	subs	r3, #21
 800bb12:	089b      	lsrs	r3, r3, #2
 800bb14:	3301      	adds	r3, #1
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	9901      	ldr	r1, [sp, #4]
 800bb1a:	18cd      	adds	r5, r1, r3
 800bb1c:	9905      	ldr	r1, [sp, #20]
 800bb1e:	002e      	movs	r6, r5
 800bb20:	18cb      	adds	r3, r1, r3
 800bb22:	469c      	mov	ip, r3
 800bb24:	9902      	ldr	r1, [sp, #8]
 800bb26:	428e      	cmp	r6, r1
 800bb28:	d310      	bcc.n	800bb4c <__mdiff+0x100>
 800bb2a:	9e02      	ldr	r6, [sp, #8]
 800bb2c:	1ee9      	subs	r1, r5, #3
 800bb2e:	2400      	movs	r4, #0
 800bb30:	428e      	cmp	r6, r1
 800bb32:	d304      	bcc.n	800bb3e <__mdiff+0xf2>
 800bb34:	0031      	movs	r1, r6
 800bb36:	3103      	adds	r1, #3
 800bb38:	1b49      	subs	r1, r1, r5
 800bb3a:	0889      	lsrs	r1, r1, #2
 800bb3c:	008c      	lsls	r4, r1, #2
 800bb3e:	191b      	adds	r3, r3, r4
 800bb40:	3b04      	subs	r3, #4
 800bb42:	6819      	ldr	r1, [r3, #0]
 800bb44:	2900      	cmp	r1, #0
 800bb46:	d00f      	beq.n	800bb68 <__mdiff+0x11c>
 800bb48:	6110      	str	r0, [r2, #16]
 800bb4a:	e798      	b.n	800ba7e <__mdiff+0x32>
 800bb4c:	ce02      	ldmia	r6!, {r1}
 800bb4e:	b28c      	uxth	r4, r1
 800bb50:	19e4      	adds	r4, r4, r7
 800bb52:	0c0f      	lsrs	r7, r1, #16
 800bb54:	1421      	asrs	r1, r4, #16
 800bb56:	1879      	adds	r1, r7, r1
 800bb58:	b2a4      	uxth	r4, r4
 800bb5a:	140f      	asrs	r7, r1, #16
 800bb5c:	0409      	lsls	r1, r1, #16
 800bb5e:	4321      	orrs	r1, r4
 800bb60:	4664      	mov	r4, ip
 800bb62:	c402      	stmia	r4!, {r1}
 800bb64:	46a4      	mov	ip, r4
 800bb66:	e7dd      	b.n	800bb24 <__mdiff+0xd8>
 800bb68:	3801      	subs	r0, #1
 800bb6a:	e7e9      	b.n	800bb40 <__mdiff+0xf4>
 800bb6c:	0800e00a 	.word	0x0800e00a
 800bb70:	0800e01b 	.word	0x0800e01b
 800bb74:	00000237 	.word	0x00000237
 800bb78:	00000245 	.word	0x00000245

0800bb7c <__ulp>:
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	4b0b      	ldr	r3, [pc, #44]	; (800bbac <__ulp+0x30>)
 800bb80:	4019      	ands	r1, r3
 800bb82:	4b0b      	ldr	r3, [pc, #44]	; (800bbb0 <__ulp+0x34>)
 800bb84:	18c9      	adds	r1, r1, r3
 800bb86:	4281      	cmp	r1, r0
 800bb88:	dc06      	bgt.n	800bb98 <__ulp+0x1c>
 800bb8a:	4249      	negs	r1, r1
 800bb8c:	150b      	asrs	r3, r1, #20
 800bb8e:	2b13      	cmp	r3, #19
 800bb90:	dc03      	bgt.n	800bb9a <__ulp+0x1e>
 800bb92:	2180      	movs	r1, #128	; 0x80
 800bb94:	0309      	lsls	r1, r1, #12
 800bb96:	4119      	asrs	r1, r3
 800bb98:	4770      	bx	lr
 800bb9a:	3b14      	subs	r3, #20
 800bb9c:	2001      	movs	r0, #1
 800bb9e:	2b1e      	cmp	r3, #30
 800bba0:	dc02      	bgt.n	800bba8 <__ulp+0x2c>
 800bba2:	2080      	movs	r0, #128	; 0x80
 800bba4:	0600      	lsls	r0, r0, #24
 800bba6:	40d8      	lsrs	r0, r3
 800bba8:	2100      	movs	r1, #0
 800bbaa:	e7f5      	b.n	800bb98 <__ulp+0x1c>
 800bbac:	7ff00000 	.word	0x7ff00000
 800bbb0:	fcc00000 	.word	0xfcc00000

0800bbb4 <__b2d>:
 800bbb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbb6:	0006      	movs	r6, r0
 800bbb8:	6903      	ldr	r3, [r0, #16]
 800bbba:	3614      	adds	r6, #20
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	18f3      	adds	r3, r6, r3
 800bbc0:	1f1d      	subs	r5, r3, #4
 800bbc2:	682c      	ldr	r4, [r5, #0]
 800bbc4:	000f      	movs	r7, r1
 800bbc6:	0020      	movs	r0, r4
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	f7ff fd49 	bl	800b660 <__hi0bits>
 800bbce:	2220      	movs	r2, #32
 800bbd0:	1a12      	subs	r2, r2, r0
 800bbd2:	603a      	str	r2, [r7, #0]
 800bbd4:	0003      	movs	r3, r0
 800bbd6:	4a1c      	ldr	r2, [pc, #112]	; (800bc48 <__b2d+0x94>)
 800bbd8:	280a      	cmp	r0, #10
 800bbda:	dc15      	bgt.n	800bc08 <__b2d+0x54>
 800bbdc:	210b      	movs	r1, #11
 800bbde:	0027      	movs	r7, r4
 800bbe0:	1a09      	subs	r1, r1, r0
 800bbe2:	40cf      	lsrs	r7, r1
 800bbe4:	433a      	orrs	r2, r7
 800bbe6:	468c      	mov	ip, r1
 800bbe8:	0011      	movs	r1, r2
 800bbea:	2200      	movs	r2, #0
 800bbec:	42ae      	cmp	r6, r5
 800bbee:	d202      	bcs.n	800bbf6 <__b2d+0x42>
 800bbf0:	9a01      	ldr	r2, [sp, #4]
 800bbf2:	3a08      	subs	r2, #8
 800bbf4:	6812      	ldr	r2, [r2, #0]
 800bbf6:	3315      	adds	r3, #21
 800bbf8:	409c      	lsls	r4, r3
 800bbfa:	4663      	mov	r3, ip
 800bbfc:	0027      	movs	r7, r4
 800bbfe:	40da      	lsrs	r2, r3
 800bc00:	4317      	orrs	r7, r2
 800bc02:	0038      	movs	r0, r7
 800bc04:	b003      	add	sp, #12
 800bc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc08:	2700      	movs	r7, #0
 800bc0a:	42ae      	cmp	r6, r5
 800bc0c:	d202      	bcs.n	800bc14 <__b2d+0x60>
 800bc0e:	9d01      	ldr	r5, [sp, #4]
 800bc10:	3d08      	subs	r5, #8
 800bc12:	682f      	ldr	r7, [r5, #0]
 800bc14:	210b      	movs	r1, #11
 800bc16:	4249      	negs	r1, r1
 800bc18:	468c      	mov	ip, r1
 800bc1a:	449c      	add	ip, r3
 800bc1c:	2b0b      	cmp	r3, #11
 800bc1e:	d010      	beq.n	800bc42 <__b2d+0x8e>
 800bc20:	4661      	mov	r1, ip
 800bc22:	2320      	movs	r3, #32
 800bc24:	408c      	lsls	r4, r1
 800bc26:	1a5b      	subs	r3, r3, r1
 800bc28:	0039      	movs	r1, r7
 800bc2a:	40d9      	lsrs	r1, r3
 800bc2c:	430c      	orrs	r4, r1
 800bc2e:	4322      	orrs	r2, r4
 800bc30:	0011      	movs	r1, r2
 800bc32:	2200      	movs	r2, #0
 800bc34:	42b5      	cmp	r5, r6
 800bc36:	d901      	bls.n	800bc3c <__b2d+0x88>
 800bc38:	3d04      	subs	r5, #4
 800bc3a:	682a      	ldr	r2, [r5, #0]
 800bc3c:	4664      	mov	r4, ip
 800bc3e:	40a7      	lsls	r7, r4
 800bc40:	e7dd      	b.n	800bbfe <__b2d+0x4a>
 800bc42:	4322      	orrs	r2, r4
 800bc44:	0011      	movs	r1, r2
 800bc46:	e7dc      	b.n	800bc02 <__b2d+0x4e>
 800bc48:	3ff00000 	.word	0x3ff00000

0800bc4c <__d2b>:
 800bc4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc4e:	2101      	movs	r1, #1
 800bc50:	0014      	movs	r4, r2
 800bc52:	001d      	movs	r5, r3
 800bc54:	9f08      	ldr	r7, [sp, #32]
 800bc56:	f7ff fc0b 	bl	800b470 <_Balloc>
 800bc5a:	1e06      	subs	r6, r0, #0
 800bc5c:	d105      	bne.n	800bc6a <__d2b+0x1e>
 800bc5e:	0032      	movs	r2, r6
 800bc60:	4b24      	ldr	r3, [pc, #144]	; (800bcf4 <__d2b+0xa8>)
 800bc62:	4825      	ldr	r0, [pc, #148]	; (800bcf8 <__d2b+0xac>)
 800bc64:	4925      	ldr	r1, [pc, #148]	; (800bcfc <__d2b+0xb0>)
 800bc66:	f001 f947 	bl	800cef8 <__assert_func>
 800bc6a:	032b      	lsls	r3, r5, #12
 800bc6c:	006d      	lsls	r5, r5, #1
 800bc6e:	0b1b      	lsrs	r3, r3, #12
 800bc70:	0d6d      	lsrs	r5, r5, #21
 800bc72:	d125      	bne.n	800bcc0 <__d2b+0x74>
 800bc74:	9301      	str	r3, [sp, #4]
 800bc76:	2c00      	cmp	r4, #0
 800bc78:	d028      	beq.n	800bccc <__d2b+0x80>
 800bc7a:	4668      	mov	r0, sp
 800bc7c:	9400      	str	r4, [sp, #0]
 800bc7e:	f7ff fd09 	bl	800b694 <__lo0bits>
 800bc82:	9b01      	ldr	r3, [sp, #4]
 800bc84:	9900      	ldr	r1, [sp, #0]
 800bc86:	2800      	cmp	r0, #0
 800bc88:	d01e      	beq.n	800bcc8 <__d2b+0x7c>
 800bc8a:	2220      	movs	r2, #32
 800bc8c:	001c      	movs	r4, r3
 800bc8e:	1a12      	subs	r2, r2, r0
 800bc90:	4094      	lsls	r4, r2
 800bc92:	0022      	movs	r2, r4
 800bc94:	40c3      	lsrs	r3, r0
 800bc96:	430a      	orrs	r2, r1
 800bc98:	6172      	str	r2, [r6, #20]
 800bc9a:	9301      	str	r3, [sp, #4]
 800bc9c:	9c01      	ldr	r4, [sp, #4]
 800bc9e:	61b4      	str	r4, [r6, #24]
 800bca0:	1e63      	subs	r3, r4, #1
 800bca2:	419c      	sbcs	r4, r3
 800bca4:	3401      	adds	r4, #1
 800bca6:	6134      	str	r4, [r6, #16]
 800bca8:	2d00      	cmp	r5, #0
 800bcaa:	d017      	beq.n	800bcdc <__d2b+0x90>
 800bcac:	2435      	movs	r4, #53	; 0x35
 800bcae:	4b14      	ldr	r3, [pc, #80]	; (800bd00 <__d2b+0xb4>)
 800bcb0:	18ed      	adds	r5, r5, r3
 800bcb2:	182d      	adds	r5, r5, r0
 800bcb4:	603d      	str	r5, [r7, #0]
 800bcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcb8:	1a24      	subs	r4, r4, r0
 800bcba:	601c      	str	r4, [r3, #0]
 800bcbc:	0030      	movs	r0, r6
 800bcbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bcc0:	2280      	movs	r2, #128	; 0x80
 800bcc2:	0352      	lsls	r2, r2, #13
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	e7d5      	b.n	800bc74 <__d2b+0x28>
 800bcc8:	6171      	str	r1, [r6, #20]
 800bcca:	e7e7      	b.n	800bc9c <__d2b+0x50>
 800bccc:	a801      	add	r0, sp, #4
 800bcce:	f7ff fce1 	bl	800b694 <__lo0bits>
 800bcd2:	9b01      	ldr	r3, [sp, #4]
 800bcd4:	2401      	movs	r4, #1
 800bcd6:	6173      	str	r3, [r6, #20]
 800bcd8:	3020      	adds	r0, #32
 800bcda:	e7e4      	b.n	800bca6 <__d2b+0x5a>
 800bcdc:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <__d2b+0xb8>)
 800bcde:	18c0      	adds	r0, r0, r3
 800bce0:	4b09      	ldr	r3, [pc, #36]	; (800bd08 <__d2b+0xbc>)
 800bce2:	6038      	str	r0, [r7, #0]
 800bce4:	18e3      	adds	r3, r4, r3
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	18f3      	adds	r3, r6, r3
 800bcea:	6958      	ldr	r0, [r3, #20]
 800bcec:	f7ff fcb8 	bl	800b660 <__hi0bits>
 800bcf0:	0164      	lsls	r4, r4, #5
 800bcf2:	e7e0      	b.n	800bcb6 <__d2b+0x6a>
 800bcf4:	0800e00a 	.word	0x0800e00a
 800bcf8:	0800e01b 	.word	0x0800e01b
 800bcfc:	0000030f 	.word	0x0000030f
 800bd00:	fffffbcd 	.word	0xfffffbcd
 800bd04:	fffffbce 	.word	0xfffffbce
 800bd08:	3fffffff 	.word	0x3fffffff

0800bd0c <__ratio>:
 800bd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	000f      	movs	r7, r1
 800bd12:	a904      	add	r1, sp, #16
 800bd14:	0006      	movs	r6, r0
 800bd16:	f7ff ff4d 	bl	800bbb4 <__b2d>
 800bd1a:	9000      	str	r0, [sp, #0]
 800bd1c:	9101      	str	r1, [sp, #4]
 800bd1e:	9c00      	ldr	r4, [sp, #0]
 800bd20:	9d01      	ldr	r5, [sp, #4]
 800bd22:	0038      	movs	r0, r7
 800bd24:	a905      	add	r1, sp, #20
 800bd26:	f7ff ff45 	bl	800bbb4 <__b2d>
 800bd2a:	9002      	str	r0, [sp, #8]
 800bd2c:	9103      	str	r1, [sp, #12]
 800bd2e:	9a02      	ldr	r2, [sp, #8]
 800bd30:	9b03      	ldr	r3, [sp, #12]
 800bd32:	6930      	ldr	r0, [r6, #16]
 800bd34:	6939      	ldr	r1, [r7, #16]
 800bd36:	9e04      	ldr	r6, [sp, #16]
 800bd38:	1a40      	subs	r0, r0, r1
 800bd3a:	9905      	ldr	r1, [sp, #20]
 800bd3c:	0140      	lsls	r0, r0, #5
 800bd3e:	1a71      	subs	r1, r6, r1
 800bd40:	1841      	adds	r1, r0, r1
 800bd42:	0508      	lsls	r0, r1, #20
 800bd44:	2900      	cmp	r1, #0
 800bd46:	dd07      	ble.n	800bd58 <__ratio+0x4c>
 800bd48:	9901      	ldr	r1, [sp, #4]
 800bd4a:	1845      	adds	r5, r0, r1
 800bd4c:	0020      	movs	r0, r4
 800bd4e:	0029      	movs	r1, r5
 800bd50:	f7f5 fff8 	bl	8001d44 <__aeabi_ddiv>
 800bd54:	b007      	add	sp, #28
 800bd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd58:	9903      	ldr	r1, [sp, #12]
 800bd5a:	1a0b      	subs	r3, r1, r0
 800bd5c:	e7f6      	b.n	800bd4c <__ratio+0x40>

0800bd5e <__copybits>:
 800bd5e:	b570      	push	{r4, r5, r6, lr}
 800bd60:	0014      	movs	r4, r2
 800bd62:	0005      	movs	r5, r0
 800bd64:	3901      	subs	r1, #1
 800bd66:	6913      	ldr	r3, [r2, #16]
 800bd68:	1149      	asrs	r1, r1, #5
 800bd6a:	3101      	adds	r1, #1
 800bd6c:	0089      	lsls	r1, r1, #2
 800bd6e:	3414      	adds	r4, #20
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	1841      	adds	r1, r0, r1
 800bd74:	18e3      	adds	r3, r4, r3
 800bd76:	42a3      	cmp	r3, r4
 800bd78:	d80d      	bhi.n	800bd96 <__copybits+0x38>
 800bd7a:	0014      	movs	r4, r2
 800bd7c:	3411      	adds	r4, #17
 800bd7e:	2500      	movs	r5, #0
 800bd80:	429c      	cmp	r4, r3
 800bd82:	d803      	bhi.n	800bd8c <__copybits+0x2e>
 800bd84:	1a9b      	subs	r3, r3, r2
 800bd86:	3b11      	subs	r3, #17
 800bd88:	089b      	lsrs	r3, r3, #2
 800bd8a:	009d      	lsls	r5, r3, #2
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	1940      	adds	r0, r0, r5
 800bd90:	4281      	cmp	r1, r0
 800bd92:	d803      	bhi.n	800bd9c <__copybits+0x3e>
 800bd94:	bd70      	pop	{r4, r5, r6, pc}
 800bd96:	cc40      	ldmia	r4!, {r6}
 800bd98:	c540      	stmia	r5!, {r6}
 800bd9a:	e7ec      	b.n	800bd76 <__copybits+0x18>
 800bd9c:	c008      	stmia	r0!, {r3}
 800bd9e:	e7f7      	b.n	800bd90 <__copybits+0x32>

0800bda0 <__any_on>:
 800bda0:	0002      	movs	r2, r0
 800bda2:	6900      	ldr	r0, [r0, #16]
 800bda4:	b510      	push	{r4, lr}
 800bda6:	3214      	adds	r2, #20
 800bda8:	114b      	asrs	r3, r1, #5
 800bdaa:	4298      	cmp	r0, r3
 800bdac:	db13      	blt.n	800bdd6 <__any_on+0x36>
 800bdae:	dd0c      	ble.n	800bdca <__any_on+0x2a>
 800bdb0:	241f      	movs	r4, #31
 800bdb2:	0008      	movs	r0, r1
 800bdb4:	4020      	ands	r0, r4
 800bdb6:	4221      	tst	r1, r4
 800bdb8:	d007      	beq.n	800bdca <__any_on+0x2a>
 800bdba:	0099      	lsls	r1, r3, #2
 800bdbc:	588c      	ldr	r4, [r1, r2]
 800bdbe:	0021      	movs	r1, r4
 800bdc0:	40c1      	lsrs	r1, r0
 800bdc2:	4081      	lsls	r1, r0
 800bdc4:	2001      	movs	r0, #1
 800bdc6:	428c      	cmp	r4, r1
 800bdc8:	d104      	bne.n	800bdd4 <__any_on+0x34>
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	18d3      	adds	r3, r2, r3
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d803      	bhi.n	800bdda <__any_on+0x3a>
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	bd10      	pop	{r4, pc}
 800bdd6:	0003      	movs	r3, r0
 800bdd8:	e7f7      	b.n	800bdca <__any_on+0x2a>
 800bdda:	3b04      	subs	r3, #4
 800bddc:	6819      	ldr	r1, [r3, #0]
 800bdde:	2900      	cmp	r1, #0
 800bde0:	d0f5      	beq.n	800bdce <__any_on+0x2e>
 800bde2:	2001      	movs	r0, #1
 800bde4:	e7f6      	b.n	800bdd4 <__any_on+0x34>
	...

0800bde8 <sulp>:
 800bde8:	b570      	push	{r4, r5, r6, lr}
 800bdea:	0016      	movs	r6, r2
 800bdec:	000d      	movs	r5, r1
 800bdee:	f7ff fec5 	bl	800bb7c <__ulp>
 800bdf2:	2e00      	cmp	r6, #0
 800bdf4:	d00d      	beq.n	800be12 <sulp+0x2a>
 800bdf6:	236b      	movs	r3, #107	; 0x6b
 800bdf8:	006a      	lsls	r2, r5, #1
 800bdfa:	0d52      	lsrs	r2, r2, #21
 800bdfc:	1a9b      	subs	r3, r3, r2
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	dd07      	ble.n	800be12 <sulp+0x2a>
 800be02:	2400      	movs	r4, #0
 800be04:	4a03      	ldr	r2, [pc, #12]	; (800be14 <sulp+0x2c>)
 800be06:	051b      	lsls	r3, r3, #20
 800be08:	189d      	adds	r5, r3, r2
 800be0a:	002b      	movs	r3, r5
 800be0c:	0022      	movs	r2, r4
 800be0e:	f7f6 fb93 	bl	8002538 <__aeabi_dmul>
 800be12:	bd70      	pop	{r4, r5, r6, pc}
 800be14:	3ff00000 	.word	0x3ff00000

0800be18 <_strtod_l>:
 800be18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be1a:	b0a1      	sub	sp, #132	; 0x84
 800be1c:	9219      	str	r2, [sp, #100]	; 0x64
 800be1e:	2200      	movs	r2, #0
 800be20:	2600      	movs	r6, #0
 800be22:	2700      	movs	r7, #0
 800be24:	9004      	str	r0, [sp, #16]
 800be26:	9107      	str	r1, [sp, #28]
 800be28:	921c      	str	r2, [sp, #112]	; 0x70
 800be2a:	911b      	str	r1, [sp, #108]	; 0x6c
 800be2c:	780a      	ldrb	r2, [r1, #0]
 800be2e:	2a2b      	cmp	r2, #43	; 0x2b
 800be30:	d055      	beq.n	800bede <_strtod_l+0xc6>
 800be32:	d841      	bhi.n	800beb8 <_strtod_l+0xa0>
 800be34:	2a0d      	cmp	r2, #13
 800be36:	d83b      	bhi.n	800beb0 <_strtod_l+0x98>
 800be38:	2a08      	cmp	r2, #8
 800be3a:	d83b      	bhi.n	800beb4 <_strtod_l+0x9c>
 800be3c:	2a00      	cmp	r2, #0
 800be3e:	d044      	beq.n	800beca <_strtod_l+0xb2>
 800be40:	2200      	movs	r2, #0
 800be42:	920f      	str	r2, [sp, #60]	; 0x3c
 800be44:	2100      	movs	r1, #0
 800be46:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800be48:	9109      	str	r1, [sp, #36]	; 0x24
 800be4a:	782a      	ldrb	r2, [r5, #0]
 800be4c:	2a30      	cmp	r2, #48	; 0x30
 800be4e:	d000      	beq.n	800be52 <_strtod_l+0x3a>
 800be50:	e085      	b.n	800bf5e <_strtod_l+0x146>
 800be52:	786a      	ldrb	r2, [r5, #1]
 800be54:	3120      	adds	r1, #32
 800be56:	438a      	bics	r2, r1
 800be58:	2a58      	cmp	r2, #88	; 0x58
 800be5a:	d000      	beq.n	800be5e <_strtod_l+0x46>
 800be5c:	e075      	b.n	800bf4a <_strtod_l+0x132>
 800be5e:	9302      	str	r3, [sp, #8]
 800be60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be62:	4a97      	ldr	r2, [pc, #604]	; (800c0c0 <_strtod_l+0x2a8>)
 800be64:	9301      	str	r3, [sp, #4]
 800be66:	ab1c      	add	r3, sp, #112	; 0x70
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	9804      	ldr	r0, [sp, #16]
 800be6c:	ab1d      	add	r3, sp, #116	; 0x74
 800be6e:	a91b      	add	r1, sp, #108	; 0x6c
 800be70:	f001 f8f8 	bl	800d064 <__gethex>
 800be74:	230f      	movs	r3, #15
 800be76:	0002      	movs	r2, r0
 800be78:	401a      	ands	r2, r3
 800be7a:	0004      	movs	r4, r0
 800be7c:	9205      	str	r2, [sp, #20]
 800be7e:	4218      	tst	r0, r3
 800be80:	d005      	beq.n	800be8e <_strtod_l+0x76>
 800be82:	2a06      	cmp	r2, #6
 800be84:	d12d      	bne.n	800bee2 <_strtod_l+0xca>
 800be86:	1c6b      	adds	r3, r5, #1
 800be88:	931b      	str	r3, [sp, #108]	; 0x6c
 800be8a:	2300      	movs	r3, #0
 800be8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800be8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <_strtod_l+0x82>
 800be94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be96:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800be98:	6013      	str	r3, [r2, #0]
 800be9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d01b      	beq.n	800bed8 <_strtod_l+0xc0>
 800bea0:	2380      	movs	r3, #128	; 0x80
 800bea2:	0032      	movs	r2, r6
 800bea4:	061b      	lsls	r3, r3, #24
 800bea6:	18fb      	adds	r3, r7, r3
 800bea8:	0010      	movs	r0, r2
 800beaa:	0019      	movs	r1, r3
 800beac:	b021      	add	sp, #132	; 0x84
 800beae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beb0:	2a20      	cmp	r2, #32
 800beb2:	d1c5      	bne.n	800be40 <_strtod_l+0x28>
 800beb4:	3101      	adds	r1, #1
 800beb6:	e7b8      	b.n	800be2a <_strtod_l+0x12>
 800beb8:	2a2d      	cmp	r2, #45	; 0x2d
 800beba:	d1c1      	bne.n	800be40 <_strtod_l+0x28>
 800bebc:	3a2c      	subs	r2, #44	; 0x2c
 800bebe:	920f      	str	r2, [sp, #60]	; 0x3c
 800bec0:	1c4a      	adds	r2, r1, #1
 800bec2:	921b      	str	r2, [sp, #108]	; 0x6c
 800bec4:	784a      	ldrb	r2, [r1, #1]
 800bec6:	2a00      	cmp	r2, #0
 800bec8:	d1bc      	bne.n	800be44 <_strtod_l+0x2c>
 800beca:	9b07      	ldr	r3, [sp, #28]
 800becc:	931b      	str	r3, [sp, #108]	; 0x6c
 800bece:	2300      	movs	r3, #0
 800bed0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bed2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1dd      	bne.n	800be94 <_strtod_l+0x7c>
 800bed8:	0032      	movs	r2, r6
 800beda:	003b      	movs	r3, r7
 800bedc:	e7e4      	b.n	800bea8 <_strtod_l+0x90>
 800bede:	2200      	movs	r2, #0
 800bee0:	e7ed      	b.n	800bebe <_strtod_l+0xa6>
 800bee2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bee4:	2a00      	cmp	r2, #0
 800bee6:	d007      	beq.n	800bef8 <_strtod_l+0xe0>
 800bee8:	2135      	movs	r1, #53	; 0x35
 800beea:	a81e      	add	r0, sp, #120	; 0x78
 800beec:	f7ff ff37 	bl	800bd5e <__copybits>
 800bef0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bef2:	9804      	ldr	r0, [sp, #16]
 800bef4:	f7ff fb00 	bl	800b4f8 <_Bfree>
 800bef8:	9805      	ldr	r0, [sp, #20]
 800befa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800befc:	3801      	subs	r0, #1
 800befe:	2804      	cmp	r0, #4
 800bf00:	d806      	bhi.n	800bf10 <_strtod_l+0xf8>
 800bf02:	f7f4 f909 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bf06:	0312      	.short	0x0312
 800bf08:	1e1c      	.short	0x1e1c
 800bf0a:	12          	.byte	0x12
 800bf0b:	00          	.byte	0x00
 800bf0c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800bf0e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800bf10:	05e4      	lsls	r4, r4, #23
 800bf12:	d502      	bpl.n	800bf1a <_strtod_l+0x102>
 800bf14:	2380      	movs	r3, #128	; 0x80
 800bf16:	061b      	lsls	r3, r3, #24
 800bf18:	431f      	orrs	r7, r3
 800bf1a:	4b6a      	ldr	r3, [pc, #424]	; (800c0c4 <_strtod_l+0x2ac>)
 800bf1c:	423b      	tst	r3, r7
 800bf1e:	d1b6      	bne.n	800be8e <_strtod_l+0x76>
 800bf20:	f7fe fac4 	bl	800a4ac <__errno>
 800bf24:	2322      	movs	r3, #34	; 0x22
 800bf26:	6003      	str	r3, [r0, #0]
 800bf28:	e7b1      	b.n	800be8e <_strtod_l+0x76>
 800bf2a:	4967      	ldr	r1, [pc, #412]	; (800c0c8 <_strtod_l+0x2b0>)
 800bf2c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bf2e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800bf30:	400a      	ands	r2, r1
 800bf32:	4966      	ldr	r1, [pc, #408]	; (800c0cc <_strtod_l+0x2b4>)
 800bf34:	185b      	adds	r3, r3, r1
 800bf36:	051b      	lsls	r3, r3, #20
 800bf38:	431a      	orrs	r2, r3
 800bf3a:	0017      	movs	r7, r2
 800bf3c:	e7e8      	b.n	800bf10 <_strtod_l+0xf8>
 800bf3e:	4f61      	ldr	r7, [pc, #388]	; (800c0c4 <_strtod_l+0x2ac>)
 800bf40:	e7e6      	b.n	800bf10 <_strtod_l+0xf8>
 800bf42:	2601      	movs	r6, #1
 800bf44:	4f62      	ldr	r7, [pc, #392]	; (800c0d0 <_strtod_l+0x2b8>)
 800bf46:	4276      	negs	r6, r6
 800bf48:	e7e2      	b.n	800bf10 <_strtod_l+0xf8>
 800bf4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf4c:	1c5a      	adds	r2, r3, #1
 800bf4e:	921b      	str	r2, [sp, #108]	; 0x6c
 800bf50:	785b      	ldrb	r3, [r3, #1]
 800bf52:	2b30      	cmp	r3, #48	; 0x30
 800bf54:	d0f9      	beq.n	800bf4a <_strtod_l+0x132>
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d099      	beq.n	800be8e <_strtod_l+0x76>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5e:	2500      	movs	r5, #0
 800bf60:	220a      	movs	r2, #10
 800bf62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf64:	950d      	str	r5, [sp, #52]	; 0x34
 800bf66:	9310      	str	r3, [sp, #64]	; 0x40
 800bf68:	9508      	str	r5, [sp, #32]
 800bf6a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bf6c:	7804      	ldrb	r4, [r0, #0]
 800bf6e:	0023      	movs	r3, r4
 800bf70:	3b30      	subs	r3, #48	; 0x30
 800bf72:	b2d9      	uxtb	r1, r3
 800bf74:	2909      	cmp	r1, #9
 800bf76:	d927      	bls.n	800bfc8 <_strtod_l+0x1b0>
 800bf78:	2201      	movs	r2, #1
 800bf7a:	4956      	ldr	r1, [pc, #344]	; (800c0d4 <_strtod_l+0x2bc>)
 800bf7c:	f000 ff88 	bl	800ce90 <strncmp>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	d031      	beq.n	800bfe8 <_strtod_l+0x1d0>
 800bf84:	2000      	movs	r0, #0
 800bf86:	0023      	movs	r3, r4
 800bf88:	4684      	mov	ip, r0
 800bf8a:	9a08      	ldr	r2, [sp, #32]
 800bf8c:	900c      	str	r0, [sp, #48]	; 0x30
 800bf8e:	9205      	str	r2, [sp, #20]
 800bf90:	2220      	movs	r2, #32
 800bf92:	0019      	movs	r1, r3
 800bf94:	4391      	bics	r1, r2
 800bf96:	000a      	movs	r2, r1
 800bf98:	2100      	movs	r1, #0
 800bf9a:	9106      	str	r1, [sp, #24]
 800bf9c:	2a45      	cmp	r2, #69	; 0x45
 800bf9e:	d000      	beq.n	800bfa2 <_strtod_l+0x18a>
 800bfa0:	e0c2      	b.n	800c128 <_strtod_l+0x310>
 800bfa2:	9b05      	ldr	r3, [sp, #20]
 800bfa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfa6:	4303      	orrs	r3, r0
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	428b      	cmp	r3, r1
 800bfac:	d08d      	beq.n	800beca <_strtod_l+0xb2>
 800bfae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfb0:	9307      	str	r3, [sp, #28]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	931b      	str	r3, [sp, #108]	; 0x6c
 800bfb6:	9b07      	ldr	r3, [sp, #28]
 800bfb8:	785b      	ldrb	r3, [r3, #1]
 800bfba:	2b2b      	cmp	r3, #43	; 0x2b
 800bfbc:	d071      	beq.n	800c0a2 <_strtod_l+0x28a>
 800bfbe:	000c      	movs	r4, r1
 800bfc0:	2b2d      	cmp	r3, #45	; 0x2d
 800bfc2:	d174      	bne.n	800c0ae <_strtod_l+0x296>
 800bfc4:	2401      	movs	r4, #1
 800bfc6:	e06d      	b.n	800c0a4 <_strtod_l+0x28c>
 800bfc8:	9908      	ldr	r1, [sp, #32]
 800bfca:	2908      	cmp	r1, #8
 800bfcc:	dc09      	bgt.n	800bfe2 <_strtod_l+0x1ca>
 800bfce:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bfd0:	4351      	muls	r1, r2
 800bfd2:	185b      	adds	r3, r3, r1
 800bfd4:	930d      	str	r3, [sp, #52]	; 0x34
 800bfd6:	9b08      	ldr	r3, [sp, #32]
 800bfd8:	3001      	adds	r0, #1
 800bfda:	3301      	adds	r3, #1
 800bfdc:	9308      	str	r3, [sp, #32]
 800bfde:	901b      	str	r0, [sp, #108]	; 0x6c
 800bfe0:	e7c3      	b.n	800bf6a <_strtod_l+0x152>
 800bfe2:	4355      	muls	r5, r2
 800bfe4:	195d      	adds	r5, r3, r5
 800bfe6:	e7f6      	b.n	800bfd6 <_strtod_l+0x1be>
 800bfe8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	921b      	str	r2, [sp, #108]	; 0x6c
 800bfee:	9a08      	ldr	r2, [sp, #32]
 800bff0:	785b      	ldrb	r3, [r3, #1]
 800bff2:	2a00      	cmp	r2, #0
 800bff4:	d03a      	beq.n	800c06c <_strtod_l+0x254>
 800bff6:	900c      	str	r0, [sp, #48]	; 0x30
 800bff8:	9205      	str	r2, [sp, #20]
 800bffa:	001a      	movs	r2, r3
 800bffc:	3a30      	subs	r2, #48	; 0x30
 800bffe:	2a09      	cmp	r2, #9
 800c000:	d912      	bls.n	800c028 <_strtod_l+0x210>
 800c002:	2201      	movs	r2, #1
 800c004:	4694      	mov	ip, r2
 800c006:	e7c3      	b.n	800bf90 <_strtod_l+0x178>
 800c008:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c00a:	3001      	adds	r0, #1
 800c00c:	1c5a      	adds	r2, r3, #1
 800c00e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c010:	785b      	ldrb	r3, [r3, #1]
 800c012:	2b30      	cmp	r3, #48	; 0x30
 800c014:	d0f8      	beq.n	800c008 <_strtod_l+0x1f0>
 800c016:	001a      	movs	r2, r3
 800c018:	3a31      	subs	r2, #49	; 0x31
 800c01a:	2a08      	cmp	r2, #8
 800c01c:	d83c      	bhi.n	800c098 <_strtod_l+0x280>
 800c01e:	900c      	str	r0, [sp, #48]	; 0x30
 800c020:	2000      	movs	r0, #0
 800c022:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c024:	9005      	str	r0, [sp, #20]
 800c026:	9210      	str	r2, [sp, #64]	; 0x40
 800c028:	001a      	movs	r2, r3
 800c02a:	1c41      	adds	r1, r0, #1
 800c02c:	3a30      	subs	r2, #48	; 0x30
 800c02e:	2b30      	cmp	r3, #48	; 0x30
 800c030:	d016      	beq.n	800c060 <_strtod_l+0x248>
 800c032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c034:	185b      	adds	r3, r3, r1
 800c036:	930c      	str	r3, [sp, #48]	; 0x30
 800c038:	9b05      	ldr	r3, [sp, #20]
 800c03a:	210a      	movs	r1, #10
 800c03c:	469c      	mov	ip, r3
 800c03e:	4484      	add	ip, r0
 800c040:	4563      	cmp	r3, ip
 800c042:	d115      	bne.n	800c070 <_strtod_l+0x258>
 800c044:	9905      	ldr	r1, [sp, #20]
 800c046:	9b05      	ldr	r3, [sp, #20]
 800c048:	3101      	adds	r1, #1
 800c04a:	1809      	adds	r1, r1, r0
 800c04c:	181b      	adds	r3, r3, r0
 800c04e:	9105      	str	r1, [sp, #20]
 800c050:	2b08      	cmp	r3, #8
 800c052:	dc19      	bgt.n	800c088 <_strtod_l+0x270>
 800c054:	230a      	movs	r3, #10
 800c056:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c058:	434b      	muls	r3, r1
 800c05a:	2100      	movs	r1, #0
 800c05c:	18d3      	adds	r3, r2, r3
 800c05e:	930d      	str	r3, [sp, #52]	; 0x34
 800c060:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c062:	0008      	movs	r0, r1
 800c064:	1c5a      	adds	r2, r3, #1
 800c066:	921b      	str	r2, [sp, #108]	; 0x6c
 800c068:	785b      	ldrb	r3, [r3, #1]
 800c06a:	e7c6      	b.n	800bffa <_strtod_l+0x1e2>
 800c06c:	9808      	ldr	r0, [sp, #32]
 800c06e:	e7d0      	b.n	800c012 <_strtod_l+0x1fa>
 800c070:	1c5c      	adds	r4, r3, #1
 800c072:	2b08      	cmp	r3, #8
 800c074:	dc04      	bgt.n	800c080 <_strtod_l+0x268>
 800c076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c078:	434b      	muls	r3, r1
 800c07a:	930d      	str	r3, [sp, #52]	; 0x34
 800c07c:	0023      	movs	r3, r4
 800c07e:	e7df      	b.n	800c040 <_strtod_l+0x228>
 800c080:	2c10      	cmp	r4, #16
 800c082:	dcfb      	bgt.n	800c07c <_strtod_l+0x264>
 800c084:	434d      	muls	r5, r1
 800c086:	e7f9      	b.n	800c07c <_strtod_l+0x264>
 800c088:	9b05      	ldr	r3, [sp, #20]
 800c08a:	2100      	movs	r1, #0
 800c08c:	2b10      	cmp	r3, #16
 800c08e:	dce7      	bgt.n	800c060 <_strtod_l+0x248>
 800c090:	230a      	movs	r3, #10
 800c092:	435d      	muls	r5, r3
 800c094:	1955      	adds	r5, r2, r5
 800c096:	e7e3      	b.n	800c060 <_strtod_l+0x248>
 800c098:	2200      	movs	r2, #0
 800c09a:	920c      	str	r2, [sp, #48]	; 0x30
 800c09c:	9205      	str	r2, [sp, #20]
 800c09e:	3201      	adds	r2, #1
 800c0a0:	e7b0      	b.n	800c004 <_strtod_l+0x1ec>
 800c0a2:	2400      	movs	r4, #0
 800c0a4:	9b07      	ldr	r3, [sp, #28]
 800c0a6:	3302      	adds	r3, #2
 800c0a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c0aa:	9b07      	ldr	r3, [sp, #28]
 800c0ac:	789b      	ldrb	r3, [r3, #2]
 800c0ae:	001a      	movs	r2, r3
 800c0b0:	3a30      	subs	r2, #48	; 0x30
 800c0b2:	2a09      	cmp	r2, #9
 800c0b4:	d914      	bls.n	800c0e0 <_strtod_l+0x2c8>
 800c0b6:	9a07      	ldr	r2, [sp, #28]
 800c0b8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	e033      	b.n	800c126 <_strtod_l+0x30e>
 800c0be:	46c0      	nop			; (mov r8, r8)
 800c0c0:	0800e178 	.word	0x0800e178
 800c0c4:	7ff00000 	.word	0x7ff00000
 800c0c8:	ffefffff 	.word	0xffefffff
 800c0cc:	00000433 	.word	0x00000433
 800c0d0:	7fffffff 	.word	0x7fffffff
 800c0d4:	0800e174 	.word	0x0800e174
 800c0d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0da:	1c5a      	adds	r2, r3, #1
 800c0dc:	921b      	str	r2, [sp, #108]	; 0x6c
 800c0de:	785b      	ldrb	r3, [r3, #1]
 800c0e0:	2b30      	cmp	r3, #48	; 0x30
 800c0e2:	d0f9      	beq.n	800c0d8 <_strtod_l+0x2c0>
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	9206      	str	r2, [sp, #24]
 800c0e8:	001a      	movs	r2, r3
 800c0ea:	3a31      	subs	r2, #49	; 0x31
 800c0ec:	2a08      	cmp	r2, #8
 800c0ee:	d81b      	bhi.n	800c128 <_strtod_l+0x310>
 800c0f0:	3b30      	subs	r3, #48	; 0x30
 800c0f2:	930e      	str	r3, [sp, #56]	; 0x38
 800c0f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0f6:	9306      	str	r3, [sp, #24]
 800c0f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0fa:	1c59      	adds	r1, r3, #1
 800c0fc:	911b      	str	r1, [sp, #108]	; 0x6c
 800c0fe:	785b      	ldrb	r3, [r3, #1]
 800c100:	001a      	movs	r2, r3
 800c102:	3a30      	subs	r2, #48	; 0x30
 800c104:	2a09      	cmp	r2, #9
 800c106:	d93a      	bls.n	800c17e <_strtod_l+0x366>
 800c108:	9a06      	ldr	r2, [sp, #24]
 800c10a:	1a8a      	subs	r2, r1, r2
 800c10c:	49b2      	ldr	r1, [pc, #712]	; (800c3d8 <_strtod_l+0x5c0>)
 800c10e:	9106      	str	r1, [sp, #24]
 800c110:	2a08      	cmp	r2, #8
 800c112:	dc04      	bgt.n	800c11e <_strtod_l+0x306>
 800c114:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c116:	9206      	str	r2, [sp, #24]
 800c118:	428a      	cmp	r2, r1
 800c11a:	dd00      	ble.n	800c11e <_strtod_l+0x306>
 800c11c:	9106      	str	r1, [sp, #24]
 800c11e:	2c00      	cmp	r4, #0
 800c120:	d002      	beq.n	800c128 <_strtod_l+0x310>
 800c122:	9a06      	ldr	r2, [sp, #24]
 800c124:	4252      	negs	r2, r2
 800c126:	9206      	str	r2, [sp, #24]
 800c128:	9a05      	ldr	r2, [sp, #20]
 800c12a:	2a00      	cmp	r2, #0
 800c12c:	d14d      	bne.n	800c1ca <_strtod_l+0x3b2>
 800c12e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c130:	4310      	orrs	r0, r2
 800c132:	d000      	beq.n	800c136 <_strtod_l+0x31e>
 800c134:	e6ab      	b.n	800be8e <_strtod_l+0x76>
 800c136:	4662      	mov	r2, ip
 800c138:	2a00      	cmp	r2, #0
 800c13a:	d000      	beq.n	800c13e <_strtod_l+0x326>
 800c13c:	e6c5      	b.n	800beca <_strtod_l+0xb2>
 800c13e:	2b69      	cmp	r3, #105	; 0x69
 800c140:	d027      	beq.n	800c192 <_strtod_l+0x37a>
 800c142:	dc23      	bgt.n	800c18c <_strtod_l+0x374>
 800c144:	2b49      	cmp	r3, #73	; 0x49
 800c146:	d024      	beq.n	800c192 <_strtod_l+0x37a>
 800c148:	2b4e      	cmp	r3, #78	; 0x4e
 800c14a:	d000      	beq.n	800c14e <_strtod_l+0x336>
 800c14c:	e6bd      	b.n	800beca <_strtod_l+0xb2>
 800c14e:	49a3      	ldr	r1, [pc, #652]	; (800c3dc <_strtod_l+0x5c4>)
 800c150:	a81b      	add	r0, sp, #108	; 0x6c
 800c152:	f001 f9bd 	bl	800d4d0 <__match>
 800c156:	2800      	cmp	r0, #0
 800c158:	d100      	bne.n	800c15c <_strtod_l+0x344>
 800c15a:	e6b6      	b.n	800beca <_strtod_l+0xb2>
 800c15c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	2b28      	cmp	r3, #40	; 0x28
 800c162:	d12c      	bne.n	800c1be <_strtod_l+0x3a6>
 800c164:	499e      	ldr	r1, [pc, #632]	; (800c3e0 <_strtod_l+0x5c8>)
 800c166:	aa1e      	add	r2, sp, #120	; 0x78
 800c168:	a81b      	add	r0, sp, #108	; 0x6c
 800c16a:	f001 f9c5 	bl	800d4f8 <__hexnan>
 800c16e:	2805      	cmp	r0, #5
 800c170:	d125      	bne.n	800c1be <_strtod_l+0x3a6>
 800c172:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c174:	4a9b      	ldr	r2, [pc, #620]	; (800c3e4 <_strtod_l+0x5cc>)
 800c176:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c178:	431a      	orrs	r2, r3
 800c17a:	0017      	movs	r7, r2
 800c17c:	e687      	b.n	800be8e <_strtod_l+0x76>
 800c17e:	220a      	movs	r2, #10
 800c180:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c182:	434a      	muls	r2, r1
 800c184:	18d2      	adds	r2, r2, r3
 800c186:	3a30      	subs	r2, #48	; 0x30
 800c188:	920e      	str	r2, [sp, #56]	; 0x38
 800c18a:	e7b5      	b.n	800c0f8 <_strtod_l+0x2e0>
 800c18c:	2b6e      	cmp	r3, #110	; 0x6e
 800c18e:	d0de      	beq.n	800c14e <_strtod_l+0x336>
 800c190:	e69b      	b.n	800beca <_strtod_l+0xb2>
 800c192:	4995      	ldr	r1, [pc, #596]	; (800c3e8 <_strtod_l+0x5d0>)
 800c194:	a81b      	add	r0, sp, #108	; 0x6c
 800c196:	f001 f99b 	bl	800d4d0 <__match>
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d100      	bne.n	800c1a0 <_strtod_l+0x388>
 800c19e:	e694      	b.n	800beca <_strtod_l+0xb2>
 800c1a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1a2:	4992      	ldr	r1, [pc, #584]	; (800c3ec <_strtod_l+0x5d4>)
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	a81b      	add	r0, sp, #108	; 0x6c
 800c1a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c1aa:	f001 f991 	bl	800d4d0 <__match>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d102      	bne.n	800c1b8 <_strtod_l+0x3a0>
 800c1b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c1b8:	2600      	movs	r6, #0
 800c1ba:	4f8a      	ldr	r7, [pc, #552]	; (800c3e4 <_strtod_l+0x5cc>)
 800c1bc:	e667      	b.n	800be8e <_strtod_l+0x76>
 800c1be:	488c      	ldr	r0, [pc, #560]	; (800c3f0 <_strtod_l+0x5d8>)
 800c1c0:	f000 fe94 	bl	800ceec <nan>
 800c1c4:	0006      	movs	r6, r0
 800c1c6:	000f      	movs	r7, r1
 800c1c8:	e661      	b.n	800be8e <_strtod_l+0x76>
 800c1ca:	9b06      	ldr	r3, [sp, #24]
 800c1cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1ce:	1a9b      	subs	r3, r3, r2
 800c1d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1d2:	9b08      	ldr	r3, [sp, #32]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d101      	bne.n	800c1dc <_strtod_l+0x3c4>
 800c1d8:	9b05      	ldr	r3, [sp, #20]
 800c1da:	9308      	str	r3, [sp, #32]
 800c1dc:	9c05      	ldr	r4, [sp, #20]
 800c1de:	2c10      	cmp	r4, #16
 800c1e0:	dd00      	ble.n	800c1e4 <_strtod_l+0x3cc>
 800c1e2:	2410      	movs	r4, #16
 800c1e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c1e6:	f7f7 f86f 	bl	80032c8 <__aeabi_ui2d>
 800c1ea:	9b05      	ldr	r3, [sp, #20]
 800c1ec:	0006      	movs	r6, r0
 800c1ee:	000f      	movs	r7, r1
 800c1f0:	2b09      	cmp	r3, #9
 800c1f2:	dd15      	ble.n	800c220 <_strtod_l+0x408>
 800c1f4:	0022      	movs	r2, r4
 800c1f6:	4b7f      	ldr	r3, [pc, #508]	; (800c3f4 <_strtod_l+0x5dc>)
 800c1f8:	3a09      	subs	r2, #9
 800c1fa:	00d2      	lsls	r2, r2, #3
 800c1fc:	189b      	adds	r3, r3, r2
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	f7f6 f999 	bl	8002538 <__aeabi_dmul>
 800c206:	0006      	movs	r6, r0
 800c208:	0028      	movs	r0, r5
 800c20a:	000f      	movs	r7, r1
 800c20c:	f7f7 f85c 	bl	80032c8 <__aeabi_ui2d>
 800c210:	0002      	movs	r2, r0
 800c212:	000b      	movs	r3, r1
 800c214:	0030      	movs	r0, r6
 800c216:	0039      	movs	r1, r7
 800c218:	f7f5 fa34 	bl	8001684 <__aeabi_dadd>
 800c21c:	0006      	movs	r6, r0
 800c21e:	000f      	movs	r7, r1
 800c220:	9b05      	ldr	r3, [sp, #20]
 800c222:	2b0f      	cmp	r3, #15
 800c224:	dc39      	bgt.n	800c29a <_strtod_l+0x482>
 800c226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d100      	bne.n	800c22e <_strtod_l+0x416>
 800c22c:	e62f      	b.n	800be8e <_strtod_l+0x76>
 800c22e:	dd24      	ble.n	800c27a <_strtod_l+0x462>
 800c230:	2b16      	cmp	r3, #22
 800c232:	dc09      	bgt.n	800c248 <_strtod_l+0x430>
 800c234:	496f      	ldr	r1, [pc, #444]	; (800c3f4 <_strtod_l+0x5dc>)
 800c236:	00db      	lsls	r3, r3, #3
 800c238:	18c9      	adds	r1, r1, r3
 800c23a:	0032      	movs	r2, r6
 800c23c:	6808      	ldr	r0, [r1, #0]
 800c23e:	6849      	ldr	r1, [r1, #4]
 800c240:	003b      	movs	r3, r7
 800c242:	f7f6 f979 	bl	8002538 <__aeabi_dmul>
 800c246:	e7bd      	b.n	800c1c4 <_strtod_l+0x3ac>
 800c248:	2325      	movs	r3, #37	; 0x25
 800c24a:	9a05      	ldr	r2, [sp, #20]
 800c24c:	1a9b      	subs	r3, r3, r2
 800c24e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c250:	4293      	cmp	r3, r2
 800c252:	db22      	blt.n	800c29a <_strtod_l+0x482>
 800c254:	240f      	movs	r4, #15
 800c256:	9b05      	ldr	r3, [sp, #20]
 800c258:	4d66      	ldr	r5, [pc, #408]	; (800c3f4 <_strtod_l+0x5dc>)
 800c25a:	1ae4      	subs	r4, r4, r3
 800c25c:	00e1      	lsls	r1, r4, #3
 800c25e:	1869      	adds	r1, r5, r1
 800c260:	0032      	movs	r2, r6
 800c262:	6808      	ldr	r0, [r1, #0]
 800c264:	6849      	ldr	r1, [r1, #4]
 800c266:	003b      	movs	r3, r7
 800c268:	f7f6 f966 	bl	8002538 <__aeabi_dmul>
 800c26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c26e:	1b1c      	subs	r4, r3, r4
 800c270:	00e4      	lsls	r4, r4, #3
 800c272:	192d      	adds	r5, r5, r4
 800c274:	682a      	ldr	r2, [r5, #0]
 800c276:	686b      	ldr	r3, [r5, #4]
 800c278:	e7e3      	b.n	800c242 <_strtod_l+0x42a>
 800c27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c27c:	3316      	adds	r3, #22
 800c27e:	db0c      	blt.n	800c29a <_strtod_l+0x482>
 800c280:	9906      	ldr	r1, [sp, #24]
 800c282:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c284:	4b5b      	ldr	r3, [pc, #364]	; (800c3f4 <_strtod_l+0x5dc>)
 800c286:	1a52      	subs	r2, r2, r1
 800c288:	00d2      	lsls	r2, r2, #3
 800c28a:	189b      	adds	r3, r3, r2
 800c28c:	0030      	movs	r0, r6
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	0039      	movs	r1, r7
 800c294:	f7f5 fd56 	bl	8001d44 <__aeabi_ddiv>
 800c298:	e794      	b.n	800c1c4 <_strtod_l+0x3ac>
 800c29a:	9b05      	ldr	r3, [sp, #20]
 800c29c:	1b1c      	subs	r4, r3, r4
 800c29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a0:	18e4      	adds	r4, r4, r3
 800c2a2:	2c00      	cmp	r4, #0
 800c2a4:	dd72      	ble.n	800c38c <_strtod_l+0x574>
 800c2a6:	220f      	movs	r2, #15
 800c2a8:	0023      	movs	r3, r4
 800c2aa:	4013      	ands	r3, r2
 800c2ac:	4214      	tst	r4, r2
 800c2ae:	d00a      	beq.n	800c2c6 <_strtod_l+0x4ae>
 800c2b0:	4950      	ldr	r1, [pc, #320]	; (800c3f4 <_strtod_l+0x5dc>)
 800c2b2:	00db      	lsls	r3, r3, #3
 800c2b4:	18c9      	adds	r1, r1, r3
 800c2b6:	0032      	movs	r2, r6
 800c2b8:	6808      	ldr	r0, [r1, #0]
 800c2ba:	6849      	ldr	r1, [r1, #4]
 800c2bc:	003b      	movs	r3, r7
 800c2be:	f7f6 f93b 	bl	8002538 <__aeabi_dmul>
 800c2c2:	0006      	movs	r6, r0
 800c2c4:	000f      	movs	r7, r1
 800c2c6:	230f      	movs	r3, #15
 800c2c8:	439c      	bics	r4, r3
 800c2ca:	d04a      	beq.n	800c362 <_strtod_l+0x54a>
 800c2cc:	3326      	adds	r3, #38	; 0x26
 800c2ce:	33ff      	adds	r3, #255	; 0xff
 800c2d0:	429c      	cmp	r4, r3
 800c2d2:	dd22      	ble.n	800c31a <_strtod_l+0x502>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	9305      	str	r3, [sp, #20]
 800c2d8:	9306      	str	r3, [sp, #24]
 800c2da:	930d      	str	r3, [sp, #52]	; 0x34
 800c2dc:	9308      	str	r3, [sp, #32]
 800c2de:	2322      	movs	r3, #34	; 0x22
 800c2e0:	2600      	movs	r6, #0
 800c2e2:	9a04      	ldr	r2, [sp, #16]
 800c2e4:	4f3f      	ldr	r7, [pc, #252]	; (800c3e4 <_strtod_l+0x5cc>)
 800c2e6:	6013      	str	r3, [r2, #0]
 800c2e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2ea:	42b3      	cmp	r3, r6
 800c2ec:	d100      	bne.n	800c2f0 <_strtod_l+0x4d8>
 800c2ee:	e5ce      	b.n	800be8e <_strtod_l+0x76>
 800c2f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c2f2:	9804      	ldr	r0, [sp, #16]
 800c2f4:	f7ff f900 	bl	800b4f8 <_Bfree>
 800c2f8:	9908      	ldr	r1, [sp, #32]
 800c2fa:	9804      	ldr	r0, [sp, #16]
 800c2fc:	f7ff f8fc 	bl	800b4f8 <_Bfree>
 800c300:	9906      	ldr	r1, [sp, #24]
 800c302:	9804      	ldr	r0, [sp, #16]
 800c304:	f7ff f8f8 	bl	800b4f8 <_Bfree>
 800c308:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c30a:	9804      	ldr	r0, [sp, #16]
 800c30c:	f7ff f8f4 	bl	800b4f8 <_Bfree>
 800c310:	9905      	ldr	r1, [sp, #20]
 800c312:	9804      	ldr	r0, [sp, #16]
 800c314:	f7ff f8f0 	bl	800b4f8 <_Bfree>
 800c318:	e5b9      	b.n	800be8e <_strtod_l+0x76>
 800c31a:	2300      	movs	r3, #0
 800c31c:	0030      	movs	r0, r6
 800c31e:	0039      	movs	r1, r7
 800c320:	4d35      	ldr	r5, [pc, #212]	; (800c3f8 <_strtod_l+0x5e0>)
 800c322:	1124      	asrs	r4, r4, #4
 800c324:	9307      	str	r3, [sp, #28]
 800c326:	2c01      	cmp	r4, #1
 800c328:	dc1e      	bgt.n	800c368 <_strtod_l+0x550>
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d001      	beq.n	800c332 <_strtod_l+0x51a>
 800c32e:	0006      	movs	r6, r0
 800c330:	000f      	movs	r7, r1
 800c332:	4b32      	ldr	r3, [pc, #200]	; (800c3fc <_strtod_l+0x5e4>)
 800c334:	9a07      	ldr	r2, [sp, #28]
 800c336:	18ff      	adds	r7, r7, r3
 800c338:	4b2f      	ldr	r3, [pc, #188]	; (800c3f8 <_strtod_l+0x5e0>)
 800c33a:	00d2      	lsls	r2, r2, #3
 800c33c:	189d      	adds	r5, r3, r2
 800c33e:	6828      	ldr	r0, [r5, #0]
 800c340:	6869      	ldr	r1, [r5, #4]
 800c342:	0032      	movs	r2, r6
 800c344:	003b      	movs	r3, r7
 800c346:	f7f6 f8f7 	bl	8002538 <__aeabi_dmul>
 800c34a:	4b26      	ldr	r3, [pc, #152]	; (800c3e4 <_strtod_l+0x5cc>)
 800c34c:	4a2c      	ldr	r2, [pc, #176]	; (800c400 <_strtod_l+0x5e8>)
 800c34e:	0006      	movs	r6, r0
 800c350:	400b      	ands	r3, r1
 800c352:	4293      	cmp	r3, r2
 800c354:	d8be      	bhi.n	800c2d4 <_strtod_l+0x4bc>
 800c356:	4a2b      	ldr	r2, [pc, #172]	; (800c404 <_strtod_l+0x5ec>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d913      	bls.n	800c384 <_strtod_l+0x56c>
 800c35c:	2601      	movs	r6, #1
 800c35e:	4f2a      	ldr	r7, [pc, #168]	; (800c408 <_strtod_l+0x5f0>)
 800c360:	4276      	negs	r6, r6
 800c362:	2300      	movs	r3, #0
 800c364:	9307      	str	r3, [sp, #28]
 800c366:	e088      	b.n	800c47a <_strtod_l+0x662>
 800c368:	2201      	movs	r2, #1
 800c36a:	4214      	tst	r4, r2
 800c36c:	d004      	beq.n	800c378 <_strtod_l+0x560>
 800c36e:	682a      	ldr	r2, [r5, #0]
 800c370:	686b      	ldr	r3, [r5, #4]
 800c372:	f7f6 f8e1 	bl	8002538 <__aeabi_dmul>
 800c376:	2301      	movs	r3, #1
 800c378:	9a07      	ldr	r2, [sp, #28]
 800c37a:	1064      	asrs	r4, r4, #1
 800c37c:	3201      	adds	r2, #1
 800c37e:	9207      	str	r2, [sp, #28]
 800c380:	3508      	adds	r5, #8
 800c382:	e7d0      	b.n	800c326 <_strtod_l+0x50e>
 800c384:	23d4      	movs	r3, #212	; 0xd4
 800c386:	049b      	lsls	r3, r3, #18
 800c388:	18cf      	adds	r7, r1, r3
 800c38a:	e7ea      	b.n	800c362 <_strtod_l+0x54a>
 800c38c:	2c00      	cmp	r4, #0
 800c38e:	d0e8      	beq.n	800c362 <_strtod_l+0x54a>
 800c390:	4264      	negs	r4, r4
 800c392:	230f      	movs	r3, #15
 800c394:	0022      	movs	r2, r4
 800c396:	401a      	ands	r2, r3
 800c398:	421c      	tst	r4, r3
 800c39a:	d00a      	beq.n	800c3b2 <_strtod_l+0x59a>
 800c39c:	4b15      	ldr	r3, [pc, #84]	; (800c3f4 <_strtod_l+0x5dc>)
 800c39e:	00d2      	lsls	r2, r2, #3
 800c3a0:	189b      	adds	r3, r3, r2
 800c3a2:	0030      	movs	r0, r6
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	0039      	movs	r1, r7
 800c3aa:	f7f5 fccb 	bl	8001d44 <__aeabi_ddiv>
 800c3ae:	0006      	movs	r6, r0
 800c3b0:	000f      	movs	r7, r1
 800c3b2:	1124      	asrs	r4, r4, #4
 800c3b4:	d0d5      	beq.n	800c362 <_strtod_l+0x54a>
 800c3b6:	2c1f      	cmp	r4, #31
 800c3b8:	dd28      	ble.n	800c40c <_strtod_l+0x5f4>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9305      	str	r3, [sp, #20]
 800c3be:	9306      	str	r3, [sp, #24]
 800c3c0:	930d      	str	r3, [sp, #52]	; 0x34
 800c3c2:	9308      	str	r3, [sp, #32]
 800c3c4:	2322      	movs	r3, #34	; 0x22
 800c3c6:	9a04      	ldr	r2, [sp, #16]
 800c3c8:	2600      	movs	r6, #0
 800c3ca:	6013      	str	r3, [r2, #0]
 800c3cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3ce:	2700      	movs	r7, #0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d18d      	bne.n	800c2f0 <_strtod_l+0x4d8>
 800c3d4:	e55b      	b.n	800be8e <_strtod_l+0x76>
 800c3d6:	46c0      	nop			; (mov r8, r8)
 800c3d8:	00004e1f 	.word	0x00004e1f
 800c3dc:	0800df62 	.word	0x0800df62
 800c3e0:	0800e18c 	.word	0x0800e18c
 800c3e4:	7ff00000 	.word	0x7ff00000
 800c3e8:	0800df5a 	.word	0x0800df5a
 800c3ec:	0800df91 	.word	0x0800df91
 800c3f0:	0800e21c 	.word	0x0800e21c
 800c3f4:	0800e0a0 	.word	0x0800e0a0
 800c3f8:	0800e078 	.word	0x0800e078
 800c3fc:	fcb00000 	.word	0xfcb00000
 800c400:	7ca00000 	.word	0x7ca00000
 800c404:	7c900000 	.word	0x7c900000
 800c408:	7fefffff 	.word	0x7fefffff
 800c40c:	2310      	movs	r3, #16
 800c40e:	0022      	movs	r2, r4
 800c410:	401a      	ands	r2, r3
 800c412:	9207      	str	r2, [sp, #28]
 800c414:	421c      	tst	r4, r3
 800c416:	d001      	beq.n	800c41c <_strtod_l+0x604>
 800c418:	335a      	adds	r3, #90	; 0x5a
 800c41a:	9307      	str	r3, [sp, #28]
 800c41c:	0030      	movs	r0, r6
 800c41e:	0039      	movs	r1, r7
 800c420:	2300      	movs	r3, #0
 800c422:	4dc4      	ldr	r5, [pc, #784]	; (800c734 <_strtod_l+0x91c>)
 800c424:	2201      	movs	r2, #1
 800c426:	4214      	tst	r4, r2
 800c428:	d004      	beq.n	800c434 <_strtod_l+0x61c>
 800c42a:	682a      	ldr	r2, [r5, #0]
 800c42c:	686b      	ldr	r3, [r5, #4]
 800c42e:	f7f6 f883 	bl	8002538 <__aeabi_dmul>
 800c432:	2301      	movs	r3, #1
 800c434:	1064      	asrs	r4, r4, #1
 800c436:	3508      	adds	r5, #8
 800c438:	2c00      	cmp	r4, #0
 800c43a:	d1f3      	bne.n	800c424 <_strtod_l+0x60c>
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d001      	beq.n	800c444 <_strtod_l+0x62c>
 800c440:	0006      	movs	r6, r0
 800c442:	000f      	movs	r7, r1
 800c444:	9b07      	ldr	r3, [sp, #28]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00f      	beq.n	800c46a <_strtod_l+0x652>
 800c44a:	236b      	movs	r3, #107	; 0x6b
 800c44c:	007a      	lsls	r2, r7, #1
 800c44e:	0d52      	lsrs	r2, r2, #21
 800c450:	0039      	movs	r1, r7
 800c452:	1a9b      	subs	r3, r3, r2
 800c454:	2b00      	cmp	r3, #0
 800c456:	dd08      	ble.n	800c46a <_strtod_l+0x652>
 800c458:	2b1f      	cmp	r3, #31
 800c45a:	dc00      	bgt.n	800c45e <_strtod_l+0x646>
 800c45c:	e121      	b.n	800c6a2 <_strtod_l+0x88a>
 800c45e:	2600      	movs	r6, #0
 800c460:	2b34      	cmp	r3, #52	; 0x34
 800c462:	dc00      	bgt.n	800c466 <_strtod_l+0x64e>
 800c464:	e116      	b.n	800c694 <_strtod_l+0x87c>
 800c466:	27dc      	movs	r7, #220	; 0xdc
 800c468:	04bf      	lsls	r7, r7, #18
 800c46a:	2200      	movs	r2, #0
 800c46c:	2300      	movs	r3, #0
 800c46e:	0030      	movs	r0, r6
 800c470:	0039      	movs	r1, r7
 800c472:	f7f3 ffeb 	bl	800044c <__aeabi_dcmpeq>
 800c476:	2800      	cmp	r0, #0
 800c478:	d19f      	bne.n	800c3ba <_strtod_l+0x5a2>
 800c47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c47c:	9a08      	ldr	r2, [sp, #32]
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c482:	9b05      	ldr	r3, [sp, #20]
 800c484:	9804      	ldr	r0, [sp, #16]
 800c486:	f7ff f89f 	bl	800b5c8 <__s2b>
 800c48a:	900d      	str	r0, [sp, #52]	; 0x34
 800c48c:	2800      	cmp	r0, #0
 800c48e:	d100      	bne.n	800c492 <_strtod_l+0x67a>
 800c490:	e720      	b.n	800c2d4 <_strtod_l+0x4bc>
 800c492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c494:	9906      	ldr	r1, [sp, #24]
 800c496:	17da      	asrs	r2, r3, #31
 800c498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c49a:	1a5b      	subs	r3, r3, r1
 800c49c:	401a      	ands	r2, r3
 800c49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a0:	9215      	str	r2, [sp, #84]	; 0x54
 800c4a2:	43db      	mvns	r3, r3
 800c4a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4a6:	17db      	asrs	r3, r3, #31
 800c4a8:	401a      	ands	r2, r3
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	9218      	str	r2, [sp, #96]	; 0x60
 800c4ae:	9305      	str	r3, [sp, #20]
 800c4b0:	9306      	str	r3, [sp, #24]
 800c4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4b4:	9804      	ldr	r0, [sp, #16]
 800c4b6:	6859      	ldr	r1, [r3, #4]
 800c4b8:	f7fe ffda 	bl	800b470 <_Balloc>
 800c4bc:	9008      	str	r0, [sp, #32]
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d100      	bne.n	800c4c4 <_strtod_l+0x6ac>
 800c4c2:	e70c      	b.n	800c2de <_strtod_l+0x4c6>
 800c4c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4c6:	300c      	adds	r0, #12
 800c4c8:	0019      	movs	r1, r3
 800c4ca:	691a      	ldr	r2, [r3, #16]
 800c4cc:	310c      	adds	r1, #12
 800c4ce:	3202      	adds	r2, #2
 800c4d0:	0092      	lsls	r2, r2, #2
 800c4d2:	f000 fd01 	bl	800ced8 <memcpy>
 800c4d6:	ab1e      	add	r3, sp, #120	; 0x78
 800c4d8:	9301      	str	r3, [sp, #4]
 800c4da:	ab1d      	add	r3, sp, #116	; 0x74
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	0032      	movs	r2, r6
 800c4e0:	003b      	movs	r3, r7
 800c4e2:	9804      	ldr	r0, [sp, #16]
 800c4e4:	9610      	str	r6, [sp, #64]	; 0x40
 800c4e6:	9711      	str	r7, [sp, #68]	; 0x44
 800c4e8:	f7ff fbb0 	bl	800bc4c <__d2b>
 800c4ec:	901c      	str	r0, [sp, #112]	; 0x70
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d100      	bne.n	800c4f4 <_strtod_l+0x6dc>
 800c4f2:	e6f4      	b.n	800c2de <_strtod_l+0x4c6>
 800c4f4:	2101      	movs	r1, #1
 800c4f6:	9804      	ldr	r0, [sp, #16]
 800c4f8:	f7ff f8fa 	bl	800b6f0 <__i2b>
 800c4fc:	9006      	str	r0, [sp, #24]
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d100      	bne.n	800c504 <_strtod_l+0x6ec>
 800c502:	e6ec      	b.n	800c2de <_strtod_l+0x4c6>
 800c504:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c506:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c508:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c50a:	1ad4      	subs	r4, r2, r3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	db01      	blt.n	800c514 <_strtod_l+0x6fc>
 800c510:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800c512:	195d      	adds	r5, r3, r5
 800c514:	9907      	ldr	r1, [sp, #28]
 800c516:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c518:	1a5b      	subs	r3, r3, r1
 800c51a:	2136      	movs	r1, #54	; 0x36
 800c51c:	189b      	adds	r3, r3, r2
 800c51e:	1a8a      	subs	r2, r1, r2
 800c520:	4985      	ldr	r1, [pc, #532]	; (800c738 <_strtod_l+0x920>)
 800c522:	2001      	movs	r0, #1
 800c524:	468c      	mov	ip, r1
 800c526:	2100      	movs	r1, #0
 800c528:	3b01      	subs	r3, #1
 800c52a:	9114      	str	r1, [sp, #80]	; 0x50
 800c52c:	9012      	str	r0, [sp, #72]	; 0x48
 800c52e:	4563      	cmp	r3, ip
 800c530:	da07      	bge.n	800c542 <_strtod_l+0x72a>
 800c532:	4661      	mov	r1, ip
 800c534:	1ac9      	subs	r1, r1, r3
 800c536:	1a52      	subs	r2, r2, r1
 800c538:	291f      	cmp	r1, #31
 800c53a:	dd00      	ble.n	800c53e <_strtod_l+0x726>
 800c53c:	e0b6      	b.n	800c6ac <_strtod_l+0x894>
 800c53e:	4088      	lsls	r0, r1
 800c540:	9012      	str	r0, [sp, #72]	; 0x48
 800c542:	18ab      	adds	r3, r5, r2
 800c544:	930c      	str	r3, [sp, #48]	; 0x30
 800c546:	18a4      	adds	r4, r4, r2
 800c548:	9b07      	ldr	r3, [sp, #28]
 800c54a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c54c:	191c      	adds	r4, r3, r4
 800c54e:	002b      	movs	r3, r5
 800c550:	4295      	cmp	r5, r2
 800c552:	dd00      	ble.n	800c556 <_strtod_l+0x73e>
 800c554:	0013      	movs	r3, r2
 800c556:	42a3      	cmp	r3, r4
 800c558:	dd00      	ble.n	800c55c <_strtod_l+0x744>
 800c55a:	0023      	movs	r3, r4
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	dd04      	ble.n	800c56a <_strtod_l+0x752>
 800c560:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c562:	1ae4      	subs	r4, r4, r3
 800c564:	1ad2      	subs	r2, r2, r3
 800c566:	920c      	str	r2, [sp, #48]	; 0x30
 800c568:	1aed      	subs	r5, r5, r3
 800c56a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	dd17      	ble.n	800c5a0 <_strtod_l+0x788>
 800c570:	001a      	movs	r2, r3
 800c572:	9906      	ldr	r1, [sp, #24]
 800c574:	9804      	ldr	r0, [sp, #16]
 800c576:	f7ff f983 	bl	800b880 <__pow5mult>
 800c57a:	9006      	str	r0, [sp, #24]
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d100      	bne.n	800c582 <_strtod_l+0x76a>
 800c580:	e6ad      	b.n	800c2de <_strtod_l+0x4c6>
 800c582:	0001      	movs	r1, r0
 800c584:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c586:	9804      	ldr	r0, [sp, #16]
 800c588:	f7ff f8ca 	bl	800b720 <__multiply>
 800c58c:	900e      	str	r0, [sp, #56]	; 0x38
 800c58e:	2800      	cmp	r0, #0
 800c590:	d100      	bne.n	800c594 <_strtod_l+0x77c>
 800c592:	e6a4      	b.n	800c2de <_strtod_l+0x4c6>
 800c594:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c596:	9804      	ldr	r0, [sp, #16]
 800c598:	f7fe ffae 	bl	800b4f8 <_Bfree>
 800c59c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c59e:	931c      	str	r3, [sp, #112]	; 0x70
 800c5a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	dd00      	ble.n	800c5a8 <_strtod_l+0x790>
 800c5a6:	e087      	b.n	800c6b8 <_strtod_l+0x8a0>
 800c5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	dd08      	ble.n	800c5c0 <_strtod_l+0x7a8>
 800c5ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c5b0:	9908      	ldr	r1, [sp, #32]
 800c5b2:	9804      	ldr	r0, [sp, #16]
 800c5b4:	f7ff f964 	bl	800b880 <__pow5mult>
 800c5b8:	9008      	str	r0, [sp, #32]
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d100      	bne.n	800c5c0 <_strtod_l+0x7a8>
 800c5be:	e68e      	b.n	800c2de <_strtod_l+0x4c6>
 800c5c0:	2c00      	cmp	r4, #0
 800c5c2:	dd08      	ble.n	800c5d6 <_strtod_l+0x7be>
 800c5c4:	0022      	movs	r2, r4
 800c5c6:	9908      	ldr	r1, [sp, #32]
 800c5c8:	9804      	ldr	r0, [sp, #16]
 800c5ca:	f7ff f9b5 	bl	800b938 <__lshift>
 800c5ce:	9008      	str	r0, [sp, #32]
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d100      	bne.n	800c5d6 <_strtod_l+0x7be>
 800c5d4:	e683      	b.n	800c2de <_strtod_l+0x4c6>
 800c5d6:	2d00      	cmp	r5, #0
 800c5d8:	dd08      	ble.n	800c5ec <_strtod_l+0x7d4>
 800c5da:	002a      	movs	r2, r5
 800c5dc:	9906      	ldr	r1, [sp, #24]
 800c5de:	9804      	ldr	r0, [sp, #16]
 800c5e0:	f7ff f9aa 	bl	800b938 <__lshift>
 800c5e4:	9006      	str	r0, [sp, #24]
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d100      	bne.n	800c5ec <_strtod_l+0x7d4>
 800c5ea:	e678      	b.n	800c2de <_strtod_l+0x4c6>
 800c5ec:	9a08      	ldr	r2, [sp, #32]
 800c5ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c5f0:	9804      	ldr	r0, [sp, #16]
 800c5f2:	f7ff fa2b 	bl	800ba4c <__mdiff>
 800c5f6:	9005      	str	r0, [sp, #20]
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	d100      	bne.n	800c5fe <_strtod_l+0x7e6>
 800c5fc:	e66f      	b.n	800c2de <_strtod_l+0x4c6>
 800c5fe:	2200      	movs	r2, #0
 800c600:	68c3      	ldr	r3, [r0, #12]
 800c602:	9906      	ldr	r1, [sp, #24]
 800c604:	60c2      	str	r2, [r0, #12]
 800c606:	930c      	str	r3, [sp, #48]	; 0x30
 800c608:	f7ff fa04 	bl	800ba14 <__mcmp>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	da5d      	bge.n	800c6cc <_strtod_l+0x8b4>
 800c610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c612:	4333      	orrs	r3, r6
 800c614:	d000      	beq.n	800c618 <_strtod_l+0x800>
 800c616:	e088      	b.n	800c72a <_strtod_l+0x912>
 800c618:	033b      	lsls	r3, r7, #12
 800c61a:	d000      	beq.n	800c61e <_strtod_l+0x806>
 800c61c:	e085      	b.n	800c72a <_strtod_l+0x912>
 800c61e:	22d6      	movs	r2, #214	; 0xd6
 800c620:	4b46      	ldr	r3, [pc, #280]	; (800c73c <_strtod_l+0x924>)
 800c622:	04d2      	lsls	r2, r2, #19
 800c624:	403b      	ands	r3, r7
 800c626:	4293      	cmp	r3, r2
 800c628:	d97f      	bls.n	800c72a <_strtod_l+0x912>
 800c62a:	9b05      	ldr	r3, [sp, #20]
 800c62c:	695b      	ldr	r3, [r3, #20]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d103      	bne.n	800c63a <_strtod_l+0x822>
 800c632:	9b05      	ldr	r3, [sp, #20]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	2b01      	cmp	r3, #1
 800c638:	dd77      	ble.n	800c72a <_strtod_l+0x912>
 800c63a:	9905      	ldr	r1, [sp, #20]
 800c63c:	2201      	movs	r2, #1
 800c63e:	9804      	ldr	r0, [sp, #16]
 800c640:	f7ff f97a 	bl	800b938 <__lshift>
 800c644:	9906      	ldr	r1, [sp, #24]
 800c646:	9005      	str	r0, [sp, #20]
 800c648:	f7ff f9e4 	bl	800ba14 <__mcmp>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	dd6c      	ble.n	800c72a <_strtod_l+0x912>
 800c650:	9907      	ldr	r1, [sp, #28]
 800c652:	003b      	movs	r3, r7
 800c654:	4a39      	ldr	r2, [pc, #228]	; (800c73c <_strtod_l+0x924>)
 800c656:	2900      	cmp	r1, #0
 800c658:	d100      	bne.n	800c65c <_strtod_l+0x844>
 800c65a:	e094      	b.n	800c786 <_strtod_l+0x96e>
 800c65c:	0011      	movs	r1, r2
 800c65e:	20d6      	movs	r0, #214	; 0xd6
 800c660:	4039      	ands	r1, r7
 800c662:	04c0      	lsls	r0, r0, #19
 800c664:	4281      	cmp	r1, r0
 800c666:	dd00      	ble.n	800c66a <_strtod_l+0x852>
 800c668:	e08d      	b.n	800c786 <_strtod_l+0x96e>
 800c66a:	23dc      	movs	r3, #220	; 0xdc
 800c66c:	049b      	lsls	r3, r3, #18
 800c66e:	4299      	cmp	r1, r3
 800c670:	dc00      	bgt.n	800c674 <_strtod_l+0x85c>
 800c672:	e6a7      	b.n	800c3c4 <_strtod_l+0x5ac>
 800c674:	0030      	movs	r0, r6
 800c676:	0039      	movs	r1, r7
 800c678:	4b31      	ldr	r3, [pc, #196]	; (800c740 <_strtod_l+0x928>)
 800c67a:	2200      	movs	r2, #0
 800c67c:	f7f5 ff5c 	bl	8002538 <__aeabi_dmul>
 800c680:	4b2e      	ldr	r3, [pc, #184]	; (800c73c <_strtod_l+0x924>)
 800c682:	0006      	movs	r6, r0
 800c684:	000f      	movs	r7, r1
 800c686:	420b      	tst	r3, r1
 800c688:	d000      	beq.n	800c68c <_strtod_l+0x874>
 800c68a:	e631      	b.n	800c2f0 <_strtod_l+0x4d8>
 800c68c:	2322      	movs	r3, #34	; 0x22
 800c68e:	9a04      	ldr	r2, [sp, #16]
 800c690:	6013      	str	r3, [r2, #0]
 800c692:	e62d      	b.n	800c2f0 <_strtod_l+0x4d8>
 800c694:	234b      	movs	r3, #75	; 0x4b
 800c696:	1a9a      	subs	r2, r3, r2
 800c698:	3b4c      	subs	r3, #76	; 0x4c
 800c69a:	4093      	lsls	r3, r2
 800c69c:	4019      	ands	r1, r3
 800c69e:	000f      	movs	r7, r1
 800c6a0:	e6e3      	b.n	800c46a <_strtod_l+0x652>
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	4252      	negs	r2, r2
 800c6a6:	409a      	lsls	r2, r3
 800c6a8:	4016      	ands	r6, r2
 800c6aa:	e6de      	b.n	800c46a <_strtod_l+0x652>
 800c6ac:	4925      	ldr	r1, [pc, #148]	; (800c744 <_strtod_l+0x92c>)
 800c6ae:	1acb      	subs	r3, r1, r3
 800c6b0:	0001      	movs	r1, r0
 800c6b2:	4099      	lsls	r1, r3
 800c6b4:	9114      	str	r1, [sp, #80]	; 0x50
 800c6b6:	e743      	b.n	800c540 <_strtod_l+0x728>
 800c6b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c6bc:	9804      	ldr	r0, [sp, #16]
 800c6be:	f7ff f93b 	bl	800b938 <__lshift>
 800c6c2:	901c      	str	r0, [sp, #112]	; 0x70
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d000      	beq.n	800c6ca <_strtod_l+0x8b2>
 800c6c8:	e76e      	b.n	800c5a8 <_strtod_l+0x790>
 800c6ca:	e608      	b.n	800c2de <_strtod_l+0x4c6>
 800c6cc:	970e      	str	r7, [sp, #56]	; 0x38
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d177      	bne.n	800c7c2 <_strtod_l+0x9aa>
 800c6d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6d4:	033b      	lsls	r3, r7, #12
 800c6d6:	0b1b      	lsrs	r3, r3, #12
 800c6d8:	2a00      	cmp	r2, #0
 800c6da:	d039      	beq.n	800c750 <_strtod_l+0x938>
 800c6dc:	4a1a      	ldr	r2, [pc, #104]	; (800c748 <_strtod_l+0x930>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d139      	bne.n	800c756 <_strtod_l+0x93e>
 800c6e2:	2101      	movs	r1, #1
 800c6e4:	9b07      	ldr	r3, [sp, #28]
 800c6e6:	4249      	negs	r1, r1
 800c6e8:	0032      	movs	r2, r6
 800c6ea:	0008      	movs	r0, r1
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00b      	beq.n	800c708 <_strtod_l+0x8f0>
 800c6f0:	24d4      	movs	r4, #212	; 0xd4
 800c6f2:	4b12      	ldr	r3, [pc, #72]	; (800c73c <_strtod_l+0x924>)
 800c6f4:	0008      	movs	r0, r1
 800c6f6:	403b      	ands	r3, r7
 800c6f8:	04e4      	lsls	r4, r4, #19
 800c6fa:	42a3      	cmp	r3, r4
 800c6fc:	d804      	bhi.n	800c708 <_strtod_l+0x8f0>
 800c6fe:	306c      	adds	r0, #108	; 0x6c
 800c700:	0d1b      	lsrs	r3, r3, #20
 800c702:	1ac3      	subs	r3, r0, r3
 800c704:	4099      	lsls	r1, r3
 800c706:	0008      	movs	r0, r1
 800c708:	4282      	cmp	r2, r0
 800c70a:	d124      	bne.n	800c756 <_strtod_l+0x93e>
 800c70c:	4b0f      	ldr	r3, [pc, #60]	; (800c74c <_strtod_l+0x934>)
 800c70e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c710:	4299      	cmp	r1, r3
 800c712:	d102      	bne.n	800c71a <_strtod_l+0x902>
 800c714:	3201      	adds	r2, #1
 800c716:	d100      	bne.n	800c71a <_strtod_l+0x902>
 800c718:	e5e1      	b.n	800c2de <_strtod_l+0x4c6>
 800c71a:	4b08      	ldr	r3, [pc, #32]	; (800c73c <_strtod_l+0x924>)
 800c71c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c71e:	2600      	movs	r6, #0
 800c720:	401a      	ands	r2, r3
 800c722:	0013      	movs	r3, r2
 800c724:	2280      	movs	r2, #128	; 0x80
 800c726:	0352      	lsls	r2, r2, #13
 800c728:	189f      	adds	r7, r3, r2
 800c72a:	9b07      	ldr	r3, [sp, #28]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1a1      	bne.n	800c674 <_strtod_l+0x85c>
 800c730:	e5de      	b.n	800c2f0 <_strtod_l+0x4d8>
 800c732:	46c0      	nop			; (mov r8, r8)
 800c734:	0800e1a0 	.word	0x0800e1a0
 800c738:	fffffc02 	.word	0xfffffc02
 800c73c:	7ff00000 	.word	0x7ff00000
 800c740:	39500000 	.word	0x39500000
 800c744:	fffffbe2 	.word	0xfffffbe2
 800c748:	000fffff 	.word	0x000fffff
 800c74c:	7fefffff 	.word	0x7fefffff
 800c750:	4333      	orrs	r3, r6
 800c752:	d100      	bne.n	800c756 <_strtod_l+0x93e>
 800c754:	e77c      	b.n	800c650 <_strtod_l+0x838>
 800c756:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d01d      	beq.n	800c798 <_strtod_l+0x980>
 800c75c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c75e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c760:	4213      	tst	r3, r2
 800c762:	d0e2      	beq.n	800c72a <_strtod_l+0x912>
 800c764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c766:	0030      	movs	r0, r6
 800c768:	0039      	movs	r1, r7
 800c76a:	9a07      	ldr	r2, [sp, #28]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d017      	beq.n	800c7a0 <_strtod_l+0x988>
 800c770:	f7ff fb3a 	bl	800bde8 <sulp>
 800c774:	0002      	movs	r2, r0
 800c776:	000b      	movs	r3, r1
 800c778:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c77a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c77c:	f7f4 ff82 	bl	8001684 <__aeabi_dadd>
 800c780:	0006      	movs	r6, r0
 800c782:	000f      	movs	r7, r1
 800c784:	e7d1      	b.n	800c72a <_strtod_l+0x912>
 800c786:	2601      	movs	r6, #1
 800c788:	4013      	ands	r3, r2
 800c78a:	4a98      	ldr	r2, [pc, #608]	; (800c9ec <_strtod_l+0xbd4>)
 800c78c:	4276      	negs	r6, r6
 800c78e:	189b      	adds	r3, r3, r2
 800c790:	4a97      	ldr	r2, [pc, #604]	; (800c9f0 <_strtod_l+0xbd8>)
 800c792:	431a      	orrs	r2, r3
 800c794:	0017      	movs	r7, r2
 800c796:	e7c8      	b.n	800c72a <_strtod_l+0x912>
 800c798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c79a:	4233      	tst	r3, r6
 800c79c:	d0c5      	beq.n	800c72a <_strtod_l+0x912>
 800c79e:	e7e1      	b.n	800c764 <_strtod_l+0x94c>
 800c7a0:	f7ff fb22 	bl	800bde8 <sulp>
 800c7a4:	0002      	movs	r2, r0
 800c7a6:	000b      	movs	r3, r1
 800c7a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c7aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c7ac:	f7f6 f986 	bl	8002abc <__aeabi_dsub>
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	0006      	movs	r6, r0
 800c7b6:	000f      	movs	r7, r1
 800c7b8:	f7f3 fe48 	bl	800044c <__aeabi_dcmpeq>
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	d0b4      	beq.n	800c72a <_strtod_l+0x912>
 800c7c0:	e600      	b.n	800c3c4 <_strtod_l+0x5ac>
 800c7c2:	9906      	ldr	r1, [sp, #24]
 800c7c4:	9805      	ldr	r0, [sp, #20]
 800c7c6:	f7ff faa1 	bl	800bd0c <__ratio>
 800c7ca:	2380      	movs	r3, #128	; 0x80
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	05db      	lsls	r3, r3, #23
 800c7d0:	0004      	movs	r4, r0
 800c7d2:	000d      	movs	r5, r1
 800c7d4:	f7f3 fe4a 	bl	800046c <__aeabi_dcmple>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	d06d      	beq.n	800c8b8 <_strtod_l+0xaa0>
 800c7dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d000      	beq.n	800c7e4 <_strtod_l+0x9cc>
 800c7e2:	e07e      	b.n	800c8e2 <_strtod_l+0xaca>
 800c7e4:	2e00      	cmp	r6, #0
 800c7e6:	d158      	bne.n	800c89a <_strtod_l+0xa82>
 800c7e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7ea:	031b      	lsls	r3, r3, #12
 800c7ec:	d000      	beq.n	800c7f0 <_strtod_l+0x9d8>
 800c7ee:	e07f      	b.n	800c8f0 <_strtod_l+0xad8>
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	0020      	movs	r0, r4
 800c7f4:	0029      	movs	r1, r5
 800c7f6:	4b7f      	ldr	r3, [pc, #508]	; (800c9f4 <_strtod_l+0xbdc>)
 800c7f8:	f7f3 fe2e 	bl	8000458 <__aeabi_dcmplt>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d158      	bne.n	800c8b2 <_strtod_l+0xa9a>
 800c800:	0020      	movs	r0, r4
 800c802:	0029      	movs	r1, r5
 800c804:	2200      	movs	r2, #0
 800c806:	4b7c      	ldr	r3, [pc, #496]	; (800c9f8 <_strtod_l+0xbe0>)
 800c808:	f7f5 fe96 	bl	8002538 <__aeabi_dmul>
 800c80c:	0004      	movs	r4, r0
 800c80e:	000d      	movs	r5, r1
 800c810:	2380      	movs	r3, #128	; 0x80
 800c812:	061b      	lsls	r3, r3, #24
 800c814:	940a      	str	r4, [sp, #40]	; 0x28
 800c816:	18eb      	adds	r3, r5, r3
 800c818:	930b      	str	r3, [sp, #44]	; 0x2c
 800c81a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c81c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c81e:	9212      	str	r2, [sp, #72]	; 0x48
 800c820:	9313      	str	r3, [sp, #76]	; 0x4c
 800c822:	4a76      	ldr	r2, [pc, #472]	; (800c9fc <_strtod_l+0xbe4>)
 800c824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c826:	4013      	ands	r3, r2
 800c828:	9314      	str	r3, [sp, #80]	; 0x50
 800c82a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c82c:	4b74      	ldr	r3, [pc, #464]	; (800ca00 <_strtod_l+0xbe8>)
 800c82e:	429a      	cmp	r2, r3
 800c830:	d000      	beq.n	800c834 <_strtod_l+0xa1c>
 800c832:	e091      	b.n	800c958 <_strtod_l+0xb40>
 800c834:	4a73      	ldr	r2, [pc, #460]	; (800ca04 <_strtod_l+0xbec>)
 800c836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c838:	4694      	mov	ip, r2
 800c83a:	4463      	add	r3, ip
 800c83c:	001f      	movs	r7, r3
 800c83e:	0030      	movs	r0, r6
 800c840:	0019      	movs	r1, r3
 800c842:	f7ff f99b 	bl	800bb7c <__ulp>
 800c846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c84a:	f7f5 fe75 	bl	8002538 <__aeabi_dmul>
 800c84e:	0032      	movs	r2, r6
 800c850:	003b      	movs	r3, r7
 800c852:	f7f4 ff17 	bl	8001684 <__aeabi_dadd>
 800c856:	4a69      	ldr	r2, [pc, #420]	; (800c9fc <_strtod_l+0xbe4>)
 800c858:	4b6b      	ldr	r3, [pc, #428]	; (800ca08 <_strtod_l+0xbf0>)
 800c85a:	0006      	movs	r6, r0
 800c85c:	400a      	ands	r2, r1
 800c85e:	429a      	cmp	r2, r3
 800c860:	d949      	bls.n	800c8f6 <_strtod_l+0xade>
 800c862:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c864:	4b69      	ldr	r3, [pc, #420]	; (800ca0c <_strtod_l+0xbf4>)
 800c866:	429a      	cmp	r2, r3
 800c868:	d103      	bne.n	800c872 <_strtod_l+0xa5a>
 800c86a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c86c:	3301      	adds	r3, #1
 800c86e:	d100      	bne.n	800c872 <_strtod_l+0xa5a>
 800c870:	e535      	b.n	800c2de <_strtod_l+0x4c6>
 800c872:	2601      	movs	r6, #1
 800c874:	4f65      	ldr	r7, [pc, #404]	; (800ca0c <_strtod_l+0xbf4>)
 800c876:	4276      	negs	r6, r6
 800c878:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c87a:	9804      	ldr	r0, [sp, #16]
 800c87c:	f7fe fe3c 	bl	800b4f8 <_Bfree>
 800c880:	9908      	ldr	r1, [sp, #32]
 800c882:	9804      	ldr	r0, [sp, #16]
 800c884:	f7fe fe38 	bl	800b4f8 <_Bfree>
 800c888:	9906      	ldr	r1, [sp, #24]
 800c88a:	9804      	ldr	r0, [sp, #16]
 800c88c:	f7fe fe34 	bl	800b4f8 <_Bfree>
 800c890:	9905      	ldr	r1, [sp, #20]
 800c892:	9804      	ldr	r0, [sp, #16]
 800c894:	f7fe fe30 	bl	800b4f8 <_Bfree>
 800c898:	e60b      	b.n	800c4b2 <_strtod_l+0x69a>
 800c89a:	2e01      	cmp	r6, #1
 800c89c:	d103      	bne.n	800c8a6 <_strtod_l+0xa8e>
 800c89e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d100      	bne.n	800c8a6 <_strtod_l+0xa8e>
 800c8a4:	e58e      	b.n	800c3c4 <_strtod_l+0x5ac>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	4c59      	ldr	r4, [pc, #356]	; (800ca10 <_strtod_l+0xbf8>)
 800c8aa:	930a      	str	r3, [sp, #40]	; 0x28
 800c8ac:	940b      	str	r4, [sp, #44]	; 0x2c
 800c8ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c8b0:	e01c      	b.n	800c8ec <_strtod_l+0xad4>
 800c8b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c8b4:	4d50      	ldr	r5, [pc, #320]	; (800c9f8 <_strtod_l+0xbe0>)
 800c8b6:	e7ab      	b.n	800c810 <_strtod_l+0x9f8>
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	0020      	movs	r0, r4
 800c8bc:	0029      	movs	r1, r5
 800c8be:	4b4e      	ldr	r3, [pc, #312]	; (800c9f8 <_strtod_l+0xbe0>)
 800c8c0:	f7f5 fe3a 	bl	8002538 <__aeabi_dmul>
 800c8c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8c6:	0004      	movs	r4, r0
 800c8c8:	000b      	movs	r3, r1
 800c8ca:	000d      	movs	r5, r1
 800c8cc:	2a00      	cmp	r2, #0
 800c8ce:	d104      	bne.n	800c8da <_strtod_l+0xac2>
 800c8d0:	2280      	movs	r2, #128	; 0x80
 800c8d2:	0612      	lsls	r2, r2, #24
 800c8d4:	900a      	str	r0, [sp, #40]	; 0x28
 800c8d6:	188b      	adds	r3, r1, r2
 800c8d8:	e79e      	b.n	800c818 <_strtod_l+0xa00>
 800c8da:	0002      	movs	r2, r0
 800c8dc:	920a      	str	r2, [sp, #40]	; 0x28
 800c8de:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8e0:	e79b      	b.n	800c81a <_strtod_l+0xa02>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	4c43      	ldr	r4, [pc, #268]	; (800c9f4 <_strtod_l+0xbdc>)
 800c8e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8e8:	940b      	str	r4, [sp, #44]	; 0x2c
 800c8ea:	2400      	movs	r4, #0
 800c8ec:	4d41      	ldr	r5, [pc, #260]	; (800c9f4 <_strtod_l+0xbdc>)
 800c8ee:	e794      	b.n	800c81a <_strtod_l+0xa02>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	4c47      	ldr	r4, [pc, #284]	; (800ca10 <_strtod_l+0xbf8>)
 800c8f4:	e7f7      	b.n	800c8e6 <_strtod_l+0xace>
 800c8f6:	23d4      	movs	r3, #212	; 0xd4
 800c8f8:	049b      	lsls	r3, r3, #18
 800c8fa:	18cf      	adds	r7, r1, r3
 800c8fc:	9b07      	ldr	r3, [sp, #28]
 800c8fe:	970e      	str	r7, [sp, #56]	; 0x38
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1b9      	bne.n	800c878 <_strtod_l+0xa60>
 800c904:	4b3d      	ldr	r3, [pc, #244]	; (800c9fc <_strtod_l+0xbe4>)
 800c906:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c908:	403b      	ands	r3, r7
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d1b4      	bne.n	800c878 <_strtod_l+0xa60>
 800c90e:	0020      	movs	r0, r4
 800c910:	0029      	movs	r1, r5
 800c912:	f7f3 fe87 	bl	8000624 <__aeabi_d2lz>
 800c916:	f7f3 fec1 	bl	800069c <__aeabi_l2d>
 800c91a:	0002      	movs	r2, r0
 800c91c:	000b      	movs	r3, r1
 800c91e:	0020      	movs	r0, r4
 800c920:	0029      	movs	r1, r5
 800c922:	f7f6 f8cb 	bl	8002abc <__aeabi_dsub>
 800c926:	033b      	lsls	r3, r7, #12
 800c928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c92a:	0b1b      	lsrs	r3, r3, #12
 800c92c:	4333      	orrs	r3, r6
 800c92e:	4313      	orrs	r3, r2
 800c930:	0004      	movs	r4, r0
 800c932:	000d      	movs	r5, r1
 800c934:	4a37      	ldr	r2, [pc, #220]	; (800ca14 <_strtod_l+0xbfc>)
 800c936:	2b00      	cmp	r3, #0
 800c938:	d054      	beq.n	800c9e4 <_strtod_l+0xbcc>
 800c93a:	4b37      	ldr	r3, [pc, #220]	; (800ca18 <_strtod_l+0xc00>)
 800c93c:	f7f3 fd8c 	bl	8000458 <__aeabi_dcmplt>
 800c940:	2800      	cmp	r0, #0
 800c942:	d000      	beq.n	800c946 <_strtod_l+0xb2e>
 800c944:	e4d4      	b.n	800c2f0 <_strtod_l+0x4d8>
 800c946:	0020      	movs	r0, r4
 800c948:	0029      	movs	r1, r5
 800c94a:	4a34      	ldr	r2, [pc, #208]	; (800ca1c <_strtod_l+0xc04>)
 800c94c:	4b2a      	ldr	r3, [pc, #168]	; (800c9f8 <_strtod_l+0xbe0>)
 800c94e:	f7f3 fd97 	bl	8000480 <__aeabi_dcmpgt>
 800c952:	2800      	cmp	r0, #0
 800c954:	d090      	beq.n	800c878 <_strtod_l+0xa60>
 800c956:	e4cb      	b.n	800c2f0 <_strtod_l+0x4d8>
 800c958:	9b07      	ldr	r3, [sp, #28]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d02b      	beq.n	800c9b6 <_strtod_l+0xb9e>
 800c95e:	23d4      	movs	r3, #212	; 0xd4
 800c960:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c962:	04db      	lsls	r3, r3, #19
 800c964:	429a      	cmp	r2, r3
 800c966:	d826      	bhi.n	800c9b6 <_strtod_l+0xb9e>
 800c968:	0020      	movs	r0, r4
 800c96a:	0029      	movs	r1, r5
 800c96c:	4a2c      	ldr	r2, [pc, #176]	; (800ca20 <_strtod_l+0xc08>)
 800c96e:	4b2d      	ldr	r3, [pc, #180]	; (800ca24 <_strtod_l+0xc0c>)
 800c970:	f7f3 fd7c 	bl	800046c <__aeabi_dcmple>
 800c974:	2800      	cmp	r0, #0
 800c976:	d017      	beq.n	800c9a8 <_strtod_l+0xb90>
 800c978:	0020      	movs	r0, r4
 800c97a:	0029      	movs	r1, r5
 800c97c:	f7f3 fe34 	bl	80005e8 <__aeabi_d2uiz>
 800c980:	2800      	cmp	r0, #0
 800c982:	d100      	bne.n	800c986 <_strtod_l+0xb6e>
 800c984:	3001      	adds	r0, #1
 800c986:	f7f6 fc9f 	bl	80032c8 <__aeabi_ui2d>
 800c98a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c98c:	0004      	movs	r4, r0
 800c98e:	000b      	movs	r3, r1
 800c990:	000d      	movs	r5, r1
 800c992:	2a00      	cmp	r2, #0
 800c994:	d122      	bne.n	800c9dc <_strtod_l+0xbc4>
 800c996:	2280      	movs	r2, #128	; 0x80
 800c998:	0612      	lsls	r2, r2, #24
 800c99a:	188b      	adds	r3, r1, r2
 800c99c:	9016      	str	r0, [sp, #88]	; 0x58
 800c99e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c9a0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c9a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9a4:	9212      	str	r2, [sp, #72]	; 0x48
 800c9a6:	9313      	str	r3, [sp, #76]	; 0x4c
 800c9a8:	22d6      	movs	r2, #214	; 0xd6
 800c9aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c9ac:	04d2      	lsls	r2, r2, #19
 800c9ae:	189b      	adds	r3, r3, r2
 800c9b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c9b2:	1a9b      	subs	r3, r3, r2
 800c9b4:	9313      	str	r3, [sp, #76]	; 0x4c
 800c9b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c9b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c9ba:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c9bc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800c9be:	f7ff f8dd 	bl	800bb7c <__ulp>
 800c9c2:	0002      	movs	r2, r0
 800c9c4:	000b      	movs	r3, r1
 800c9c6:	0030      	movs	r0, r6
 800c9c8:	0039      	movs	r1, r7
 800c9ca:	f7f5 fdb5 	bl	8002538 <__aeabi_dmul>
 800c9ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9d2:	f7f4 fe57 	bl	8001684 <__aeabi_dadd>
 800c9d6:	0006      	movs	r6, r0
 800c9d8:	000f      	movs	r7, r1
 800c9da:	e78f      	b.n	800c8fc <_strtod_l+0xae4>
 800c9dc:	0002      	movs	r2, r0
 800c9de:	9216      	str	r2, [sp, #88]	; 0x58
 800c9e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c9e2:	e7dd      	b.n	800c9a0 <_strtod_l+0xb88>
 800c9e4:	4b10      	ldr	r3, [pc, #64]	; (800ca28 <_strtod_l+0xc10>)
 800c9e6:	f7f3 fd37 	bl	8000458 <__aeabi_dcmplt>
 800c9ea:	e7b2      	b.n	800c952 <_strtod_l+0xb3a>
 800c9ec:	fff00000 	.word	0xfff00000
 800c9f0:	000fffff 	.word	0x000fffff
 800c9f4:	3ff00000 	.word	0x3ff00000
 800c9f8:	3fe00000 	.word	0x3fe00000
 800c9fc:	7ff00000 	.word	0x7ff00000
 800ca00:	7fe00000 	.word	0x7fe00000
 800ca04:	fcb00000 	.word	0xfcb00000
 800ca08:	7c9fffff 	.word	0x7c9fffff
 800ca0c:	7fefffff 	.word	0x7fefffff
 800ca10:	bff00000 	.word	0xbff00000
 800ca14:	94a03595 	.word	0x94a03595
 800ca18:	3fdfffff 	.word	0x3fdfffff
 800ca1c:	35afe535 	.word	0x35afe535
 800ca20:	ffc00000 	.word	0xffc00000
 800ca24:	41dfffff 	.word	0x41dfffff
 800ca28:	3fcfffff 	.word	0x3fcfffff

0800ca2c <_strtod_r>:
 800ca2c:	b510      	push	{r4, lr}
 800ca2e:	4b02      	ldr	r3, [pc, #8]	; (800ca38 <_strtod_r+0xc>)
 800ca30:	f7ff f9f2 	bl	800be18 <_strtod_l>
 800ca34:	bd10      	pop	{r4, pc}
 800ca36:	46c0      	nop			; (mov r8, r8)
 800ca38:	20000174 	.word	0x20000174

0800ca3c <__ssputs_r>:
 800ca3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	9301      	str	r3, [sp, #4]
 800ca42:	9203      	str	r2, [sp, #12]
 800ca44:	688e      	ldr	r6, [r1, #8]
 800ca46:	9a01      	ldr	r2, [sp, #4]
 800ca48:	0007      	movs	r7, r0
 800ca4a:	000c      	movs	r4, r1
 800ca4c:	680b      	ldr	r3, [r1, #0]
 800ca4e:	4296      	cmp	r6, r2
 800ca50:	d831      	bhi.n	800cab6 <__ssputs_r+0x7a>
 800ca52:	898a      	ldrh	r2, [r1, #12]
 800ca54:	2190      	movs	r1, #144	; 0x90
 800ca56:	00c9      	lsls	r1, r1, #3
 800ca58:	420a      	tst	r2, r1
 800ca5a:	d029      	beq.n	800cab0 <__ssputs_r+0x74>
 800ca5c:	2003      	movs	r0, #3
 800ca5e:	6921      	ldr	r1, [r4, #16]
 800ca60:	1a5b      	subs	r3, r3, r1
 800ca62:	9302      	str	r3, [sp, #8]
 800ca64:	6963      	ldr	r3, [r4, #20]
 800ca66:	4343      	muls	r3, r0
 800ca68:	0fdd      	lsrs	r5, r3, #31
 800ca6a:	18ed      	adds	r5, r5, r3
 800ca6c:	9b01      	ldr	r3, [sp, #4]
 800ca6e:	9802      	ldr	r0, [sp, #8]
 800ca70:	3301      	adds	r3, #1
 800ca72:	181b      	adds	r3, r3, r0
 800ca74:	106d      	asrs	r5, r5, #1
 800ca76:	42ab      	cmp	r3, r5
 800ca78:	d900      	bls.n	800ca7c <__ssputs_r+0x40>
 800ca7a:	001d      	movs	r5, r3
 800ca7c:	0552      	lsls	r2, r2, #21
 800ca7e:	d529      	bpl.n	800cad4 <__ssputs_r+0x98>
 800ca80:	0029      	movs	r1, r5
 800ca82:	0038      	movs	r0, r7
 800ca84:	f7fe fc62 	bl	800b34c <_malloc_r>
 800ca88:	1e06      	subs	r6, r0, #0
 800ca8a:	d02d      	beq.n	800cae8 <__ssputs_r+0xac>
 800ca8c:	9a02      	ldr	r2, [sp, #8]
 800ca8e:	6921      	ldr	r1, [r4, #16]
 800ca90:	f000 fa22 	bl	800ced8 <memcpy>
 800ca94:	89a2      	ldrh	r2, [r4, #12]
 800ca96:	4b19      	ldr	r3, [pc, #100]	; (800cafc <__ssputs_r+0xc0>)
 800ca98:	401a      	ands	r2, r3
 800ca9a:	2380      	movs	r3, #128	; 0x80
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	81a3      	strh	r3, [r4, #12]
 800caa0:	9b02      	ldr	r3, [sp, #8]
 800caa2:	6126      	str	r6, [r4, #16]
 800caa4:	18f6      	adds	r6, r6, r3
 800caa6:	6026      	str	r6, [r4, #0]
 800caa8:	6165      	str	r5, [r4, #20]
 800caaa:	9e01      	ldr	r6, [sp, #4]
 800caac:	1aed      	subs	r5, r5, r3
 800caae:	60a5      	str	r5, [r4, #8]
 800cab0:	9b01      	ldr	r3, [sp, #4]
 800cab2:	429e      	cmp	r6, r3
 800cab4:	d900      	bls.n	800cab8 <__ssputs_r+0x7c>
 800cab6:	9e01      	ldr	r6, [sp, #4]
 800cab8:	0032      	movs	r2, r6
 800caba:	9903      	ldr	r1, [sp, #12]
 800cabc:	6820      	ldr	r0, [r4, #0]
 800cabe:	f000 f9d4 	bl	800ce6a <memmove>
 800cac2:	2000      	movs	r0, #0
 800cac4:	68a3      	ldr	r3, [r4, #8]
 800cac6:	1b9b      	subs	r3, r3, r6
 800cac8:	60a3      	str	r3, [r4, #8]
 800caca:	6823      	ldr	r3, [r4, #0]
 800cacc:	199b      	adds	r3, r3, r6
 800cace:	6023      	str	r3, [r4, #0]
 800cad0:	b005      	add	sp, #20
 800cad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cad4:	002a      	movs	r2, r5
 800cad6:	0038      	movs	r0, r7
 800cad8:	f000 fdc8 	bl	800d66c <_realloc_r>
 800cadc:	1e06      	subs	r6, r0, #0
 800cade:	d1df      	bne.n	800caa0 <__ssputs_r+0x64>
 800cae0:	0038      	movs	r0, r7
 800cae2:	6921      	ldr	r1, [r4, #16]
 800cae4:	f7fe fbbc 	bl	800b260 <_free_r>
 800cae8:	230c      	movs	r3, #12
 800caea:	2001      	movs	r0, #1
 800caec:	603b      	str	r3, [r7, #0]
 800caee:	89a2      	ldrh	r2, [r4, #12]
 800caf0:	3334      	adds	r3, #52	; 0x34
 800caf2:	4313      	orrs	r3, r2
 800caf4:	81a3      	strh	r3, [r4, #12]
 800caf6:	4240      	negs	r0, r0
 800caf8:	e7ea      	b.n	800cad0 <__ssputs_r+0x94>
 800cafa:	46c0      	nop			; (mov r8, r8)
 800cafc:	fffffb7f 	.word	0xfffffb7f

0800cb00 <_svfiprintf_r>:
 800cb00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb02:	b0a1      	sub	sp, #132	; 0x84
 800cb04:	9003      	str	r0, [sp, #12]
 800cb06:	001d      	movs	r5, r3
 800cb08:	898b      	ldrh	r3, [r1, #12]
 800cb0a:	000f      	movs	r7, r1
 800cb0c:	0016      	movs	r6, r2
 800cb0e:	061b      	lsls	r3, r3, #24
 800cb10:	d511      	bpl.n	800cb36 <_svfiprintf_r+0x36>
 800cb12:	690b      	ldr	r3, [r1, #16]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d10e      	bne.n	800cb36 <_svfiprintf_r+0x36>
 800cb18:	2140      	movs	r1, #64	; 0x40
 800cb1a:	f7fe fc17 	bl	800b34c <_malloc_r>
 800cb1e:	6038      	str	r0, [r7, #0]
 800cb20:	6138      	str	r0, [r7, #16]
 800cb22:	2800      	cmp	r0, #0
 800cb24:	d105      	bne.n	800cb32 <_svfiprintf_r+0x32>
 800cb26:	230c      	movs	r3, #12
 800cb28:	9a03      	ldr	r2, [sp, #12]
 800cb2a:	3801      	subs	r0, #1
 800cb2c:	6013      	str	r3, [r2, #0]
 800cb2e:	b021      	add	sp, #132	; 0x84
 800cb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb32:	2340      	movs	r3, #64	; 0x40
 800cb34:	617b      	str	r3, [r7, #20]
 800cb36:	2300      	movs	r3, #0
 800cb38:	ac08      	add	r4, sp, #32
 800cb3a:	6163      	str	r3, [r4, #20]
 800cb3c:	3320      	adds	r3, #32
 800cb3e:	7663      	strb	r3, [r4, #25]
 800cb40:	3310      	adds	r3, #16
 800cb42:	76a3      	strb	r3, [r4, #26]
 800cb44:	9507      	str	r5, [sp, #28]
 800cb46:	0035      	movs	r5, r6
 800cb48:	782b      	ldrb	r3, [r5, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d001      	beq.n	800cb52 <_svfiprintf_r+0x52>
 800cb4e:	2b25      	cmp	r3, #37	; 0x25
 800cb50:	d148      	bne.n	800cbe4 <_svfiprintf_r+0xe4>
 800cb52:	1bab      	subs	r3, r5, r6
 800cb54:	9305      	str	r3, [sp, #20]
 800cb56:	42b5      	cmp	r5, r6
 800cb58:	d00b      	beq.n	800cb72 <_svfiprintf_r+0x72>
 800cb5a:	0032      	movs	r2, r6
 800cb5c:	0039      	movs	r1, r7
 800cb5e:	9803      	ldr	r0, [sp, #12]
 800cb60:	f7ff ff6c 	bl	800ca3c <__ssputs_r>
 800cb64:	3001      	adds	r0, #1
 800cb66:	d100      	bne.n	800cb6a <_svfiprintf_r+0x6a>
 800cb68:	e0af      	b.n	800ccca <_svfiprintf_r+0x1ca>
 800cb6a:	6963      	ldr	r3, [r4, #20]
 800cb6c:	9a05      	ldr	r2, [sp, #20]
 800cb6e:	189b      	adds	r3, r3, r2
 800cb70:	6163      	str	r3, [r4, #20]
 800cb72:	782b      	ldrb	r3, [r5, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d100      	bne.n	800cb7a <_svfiprintf_r+0x7a>
 800cb78:	e0a7      	b.n	800ccca <_svfiprintf_r+0x1ca>
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	4252      	negs	r2, r2
 800cb80:	6062      	str	r2, [r4, #4]
 800cb82:	a904      	add	r1, sp, #16
 800cb84:	3254      	adds	r2, #84	; 0x54
 800cb86:	1852      	adds	r2, r2, r1
 800cb88:	1c6e      	adds	r6, r5, #1
 800cb8a:	6023      	str	r3, [r4, #0]
 800cb8c:	60e3      	str	r3, [r4, #12]
 800cb8e:	60a3      	str	r3, [r4, #8]
 800cb90:	7013      	strb	r3, [r2, #0]
 800cb92:	65a3      	str	r3, [r4, #88]	; 0x58
 800cb94:	4b55      	ldr	r3, [pc, #340]	; (800ccec <_svfiprintf_r+0x1ec>)
 800cb96:	2205      	movs	r2, #5
 800cb98:	0018      	movs	r0, r3
 800cb9a:	7831      	ldrb	r1, [r6, #0]
 800cb9c:	9305      	str	r3, [sp, #20]
 800cb9e:	f7fd fcb2 	bl	800a506 <memchr>
 800cba2:	1c75      	adds	r5, r6, #1
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d11f      	bne.n	800cbe8 <_svfiprintf_r+0xe8>
 800cba8:	6822      	ldr	r2, [r4, #0]
 800cbaa:	06d3      	lsls	r3, r2, #27
 800cbac:	d504      	bpl.n	800cbb8 <_svfiprintf_r+0xb8>
 800cbae:	2353      	movs	r3, #83	; 0x53
 800cbb0:	a904      	add	r1, sp, #16
 800cbb2:	185b      	adds	r3, r3, r1
 800cbb4:	2120      	movs	r1, #32
 800cbb6:	7019      	strb	r1, [r3, #0]
 800cbb8:	0713      	lsls	r3, r2, #28
 800cbba:	d504      	bpl.n	800cbc6 <_svfiprintf_r+0xc6>
 800cbbc:	2353      	movs	r3, #83	; 0x53
 800cbbe:	a904      	add	r1, sp, #16
 800cbc0:	185b      	adds	r3, r3, r1
 800cbc2:	212b      	movs	r1, #43	; 0x2b
 800cbc4:	7019      	strb	r1, [r3, #0]
 800cbc6:	7833      	ldrb	r3, [r6, #0]
 800cbc8:	2b2a      	cmp	r3, #42	; 0x2a
 800cbca:	d016      	beq.n	800cbfa <_svfiprintf_r+0xfa>
 800cbcc:	0035      	movs	r5, r6
 800cbce:	2100      	movs	r1, #0
 800cbd0:	200a      	movs	r0, #10
 800cbd2:	68e3      	ldr	r3, [r4, #12]
 800cbd4:	782a      	ldrb	r2, [r5, #0]
 800cbd6:	1c6e      	adds	r6, r5, #1
 800cbd8:	3a30      	subs	r2, #48	; 0x30
 800cbda:	2a09      	cmp	r2, #9
 800cbdc:	d94e      	bls.n	800cc7c <_svfiprintf_r+0x17c>
 800cbde:	2900      	cmp	r1, #0
 800cbe0:	d111      	bne.n	800cc06 <_svfiprintf_r+0x106>
 800cbe2:	e017      	b.n	800cc14 <_svfiprintf_r+0x114>
 800cbe4:	3501      	adds	r5, #1
 800cbe6:	e7af      	b.n	800cb48 <_svfiprintf_r+0x48>
 800cbe8:	9b05      	ldr	r3, [sp, #20]
 800cbea:	6822      	ldr	r2, [r4, #0]
 800cbec:	1ac0      	subs	r0, r0, r3
 800cbee:	2301      	movs	r3, #1
 800cbf0:	4083      	lsls	r3, r0
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	002e      	movs	r6, r5
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	e7cc      	b.n	800cb94 <_svfiprintf_r+0x94>
 800cbfa:	9b07      	ldr	r3, [sp, #28]
 800cbfc:	1d19      	adds	r1, r3, #4
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	9107      	str	r1, [sp, #28]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	db01      	blt.n	800cc0a <_svfiprintf_r+0x10a>
 800cc06:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc08:	e004      	b.n	800cc14 <_svfiprintf_r+0x114>
 800cc0a:	425b      	negs	r3, r3
 800cc0c:	60e3      	str	r3, [r4, #12]
 800cc0e:	2302      	movs	r3, #2
 800cc10:	4313      	orrs	r3, r2
 800cc12:	6023      	str	r3, [r4, #0]
 800cc14:	782b      	ldrb	r3, [r5, #0]
 800cc16:	2b2e      	cmp	r3, #46	; 0x2e
 800cc18:	d10a      	bne.n	800cc30 <_svfiprintf_r+0x130>
 800cc1a:	786b      	ldrb	r3, [r5, #1]
 800cc1c:	2b2a      	cmp	r3, #42	; 0x2a
 800cc1e:	d135      	bne.n	800cc8c <_svfiprintf_r+0x18c>
 800cc20:	9b07      	ldr	r3, [sp, #28]
 800cc22:	3502      	adds	r5, #2
 800cc24:	1d1a      	adds	r2, r3, #4
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	9207      	str	r2, [sp, #28]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	db2b      	blt.n	800cc86 <_svfiprintf_r+0x186>
 800cc2e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc30:	4e2f      	ldr	r6, [pc, #188]	; (800ccf0 <_svfiprintf_r+0x1f0>)
 800cc32:	2203      	movs	r2, #3
 800cc34:	0030      	movs	r0, r6
 800cc36:	7829      	ldrb	r1, [r5, #0]
 800cc38:	f7fd fc65 	bl	800a506 <memchr>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d006      	beq.n	800cc4e <_svfiprintf_r+0x14e>
 800cc40:	2340      	movs	r3, #64	; 0x40
 800cc42:	1b80      	subs	r0, r0, r6
 800cc44:	4083      	lsls	r3, r0
 800cc46:	6822      	ldr	r2, [r4, #0]
 800cc48:	3501      	adds	r5, #1
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	6023      	str	r3, [r4, #0]
 800cc4e:	7829      	ldrb	r1, [r5, #0]
 800cc50:	2206      	movs	r2, #6
 800cc52:	4828      	ldr	r0, [pc, #160]	; (800ccf4 <_svfiprintf_r+0x1f4>)
 800cc54:	1c6e      	adds	r6, r5, #1
 800cc56:	7621      	strb	r1, [r4, #24]
 800cc58:	f7fd fc55 	bl	800a506 <memchr>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d03c      	beq.n	800ccda <_svfiprintf_r+0x1da>
 800cc60:	4b25      	ldr	r3, [pc, #148]	; (800ccf8 <_svfiprintf_r+0x1f8>)
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d125      	bne.n	800ccb2 <_svfiprintf_r+0x1b2>
 800cc66:	2207      	movs	r2, #7
 800cc68:	9b07      	ldr	r3, [sp, #28]
 800cc6a:	3307      	adds	r3, #7
 800cc6c:	4393      	bics	r3, r2
 800cc6e:	3308      	adds	r3, #8
 800cc70:	9307      	str	r3, [sp, #28]
 800cc72:	6963      	ldr	r3, [r4, #20]
 800cc74:	9a04      	ldr	r2, [sp, #16]
 800cc76:	189b      	adds	r3, r3, r2
 800cc78:	6163      	str	r3, [r4, #20]
 800cc7a:	e764      	b.n	800cb46 <_svfiprintf_r+0x46>
 800cc7c:	4343      	muls	r3, r0
 800cc7e:	0035      	movs	r5, r6
 800cc80:	2101      	movs	r1, #1
 800cc82:	189b      	adds	r3, r3, r2
 800cc84:	e7a6      	b.n	800cbd4 <_svfiprintf_r+0xd4>
 800cc86:	2301      	movs	r3, #1
 800cc88:	425b      	negs	r3, r3
 800cc8a:	e7d0      	b.n	800cc2e <_svfiprintf_r+0x12e>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	200a      	movs	r0, #10
 800cc90:	001a      	movs	r2, r3
 800cc92:	3501      	adds	r5, #1
 800cc94:	6063      	str	r3, [r4, #4]
 800cc96:	7829      	ldrb	r1, [r5, #0]
 800cc98:	1c6e      	adds	r6, r5, #1
 800cc9a:	3930      	subs	r1, #48	; 0x30
 800cc9c:	2909      	cmp	r1, #9
 800cc9e:	d903      	bls.n	800cca8 <_svfiprintf_r+0x1a8>
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d0c5      	beq.n	800cc30 <_svfiprintf_r+0x130>
 800cca4:	9209      	str	r2, [sp, #36]	; 0x24
 800cca6:	e7c3      	b.n	800cc30 <_svfiprintf_r+0x130>
 800cca8:	4342      	muls	r2, r0
 800ccaa:	0035      	movs	r5, r6
 800ccac:	2301      	movs	r3, #1
 800ccae:	1852      	adds	r2, r2, r1
 800ccb0:	e7f1      	b.n	800cc96 <_svfiprintf_r+0x196>
 800ccb2:	aa07      	add	r2, sp, #28
 800ccb4:	9200      	str	r2, [sp, #0]
 800ccb6:	0021      	movs	r1, r4
 800ccb8:	003a      	movs	r2, r7
 800ccba:	4b10      	ldr	r3, [pc, #64]	; (800ccfc <_svfiprintf_r+0x1fc>)
 800ccbc:	9803      	ldr	r0, [sp, #12]
 800ccbe:	f7fc fc77 	bl	80095b0 <_printf_float>
 800ccc2:	9004      	str	r0, [sp, #16]
 800ccc4:	9b04      	ldr	r3, [sp, #16]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	d1d3      	bne.n	800cc72 <_svfiprintf_r+0x172>
 800ccca:	89bb      	ldrh	r3, [r7, #12]
 800cccc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ccce:	065b      	lsls	r3, r3, #25
 800ccd0:	d400      	bmi.n	800ccd4 <_svfiprintf_r+0x1d4>
 800ccd2:	e72c      	b.n	800cb2e <_svfiprintf_r+0x2e>
 800ccd4:	2001      	movs	r0, #1
 800ccd6:	4240      	negs	r0, r0
 800ccd8:	e729      	b.n	800cb2e <_svfiprintf_r+0x2e>
 800ccda:	aa07      	add	r2, sp, #28
 800ccdc:	9200      	str	r2, [sp, #0]
 800ccde:	0021      	movs	r1, r4
 800cce0:	003a      	movs	r2, r7
 800cce2:	4b06      	ldr	r3, [pc, #24]	; (800ccfc <_svfiprintf_r+0x1fc>)
 800cce4:	9803      	ldr	r0, [sp, #12]
 800cce6:	f7fc ff29 	bl	8009b3c <_printf_i>
 800ccea:	e7ea      	b.n	800ccc2 <_svfiprintf_r+0x1c2>
 800ccec:	0800e1c8 	.word	0x0800e1c8
 800ccf0:	0800e1ce 	.word	0x0800e1ce
 800ccf4:	0800e1d2 	.word	0x0800e1d2
 800ccf8:	080095b1 	.word	0x080095b1
 800ccfc:	0800ca3d 	.word	0x0800ca3d

0800cd00 <__sflush_r>:
 800cd00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd02:	898b      	ldrh	r3, [r1, #12]
 800cd04:	0005      	movs	r5, r0
 800cd06:	000c      	movs	r4, r1
 800cd08:	071a      	lsls	r2, r3, #28
 800cd0a:	d45c      	bmi.n	800cdc6 <__sflush_r+0xc6>
 800cd0c:	684a      	ldr	r2, [r1, #4]
 800cd0e:	2a00      	cmp	r2, #0
 800cd10:	dc04      	bgt.n	800cd1c <__sflush_r+0x1c>
 800cd12:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800cd14:	2a00      	cmp	r2, #0
 800cd16:	dc01      	bgt.n	800cd1c <__sflush_r+0x1c>
 800cd18:	2000      	movs	r0, #0
 800cd1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd1c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cd1e:	2f00      	cmp	r7, #0
 800cd20:	d0fa      	beq.n	800cd18 <__sflush_r+0x18>
 800cd22:	2200      	movs	r2, #0
 800cd24:	2080      	movs	r0, #128	; 0x80
 800cd26:	682e      	ldr	r6, [r5, #0]
 800cd28:	602a      	str	r2, [r5, #0]
 800cd2a:	001a      	movs	r2, r3
 800cd2c:	0140      	lsls	r0, r0, #5
 800cd2e:	6a21      	ldr	r1, [r4, #32]
 800cd30:	4002      	ands	r2, r0
 800cd32:	4203      	tst	r3, r0
 800cd34:	d034      	beq.n	800cda0 <__sflush_r+0xa0>
 800cd36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd38:	89a3      	ldrh	r3, [r4, #12]
 800cd3a:	075b      	lsls	r3, r3, #29
 800cd3c:	d506      	bpl.n	800cd4c <__sflush_r+0x4c>
 800cd3e:	6863      	ldr	r3, [r4, #4]
 800cd40:	1ac0      	subs	r0, r0, r3
 800cd42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d001      	beq.n	800cd4c <__sflush_r+0x4c>
 800cd48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd4a:	1ac0      	subs	r0, r0, r3
 800cd4c:	0002      	movs	r2, r0
 800cd4e:	2300      	movs	r3, #0
 800cd50:	0028      	movs	r0, r5
 800cd52:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cd54:	6a21      	ldr	r1, [r4, #32]
 800cd56:	47b8      	blx	r7
 800cd58:	89a2      	ldrh	r2, [r4, #12]
 800cd5a:	1c43      	adds	r3, r0, #1
 800cd5c:	d106      	bne.n	800cd6c <__sflush_r+0x6c>
 800cd5e:	6829      	ldr	r1, [r5, #0]
 800cd60:	291d      	cmp	r1, #29
 800cd62:	d82c      	bhi.n	800cdbe <__sflush_r+0xbe>
 800cd64:	4b2a      	ldr	r3, [pc, #168]	; (800ce10 <__sflush_r+0x110>)
 800cd66:	410b      	asrs	r3, r1
 800cd68:	07db      	lsls	r3, r3, #31
 800cd6a:	d428      	bmi.n	800cdbe <__sflush_r+0xbe>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	6063      	str	r3, [r4, #4]
 800cd70:	6923      	ldr	r3, [r4, #16]
 800cd72:	6023      	str	r3, [r4, #0]
 800cd74:	04d2      	lsls	r2, r2, #19
 800cd76:	d505      	bpl.n	800cd84 <__sflush_r+0x84>
 800cd78:	1c43      	adds	r3, r0, #1
 800cd7a:	d102      	bne.n	800cd82 <__sflush_r+0x82>
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d100      	bne.n	800cd84 <__sflush_r+0x84>
 800cd82:	6560      	str	r0, [r4, #84]	; 0x54
 800cd84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd86:	602e      	str	r6, [r5, #0]
 800cd88:	2900      	cmp	r1, #0
 800cd8a:	d0c5      	beq.n	800cd18 <__sflush_r+0x18>
 800cd8c:	0023      	movs	r3, r4
 800cd8e:	3344      	adds	r3, #68	; 0x44
 800cd90:	4299      	cmp	r1, r3
 800cd92:	d002      	beq.n	800cd9a <__sflush_r+0x9a>
 800cd94:	0028      	movs	r0, r5
 800cd96:	f7fe fa63 	bl	800b260 <_free_r>
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	6360      	str	r0, [r4, #52]	; 0x34
 800cd9e:	e7bc      	b.n	800cd1a <__sflush_r+0x1a>
 800cda0:	2301      	movs	r3, #1
 800cda2:	0028      	movs	r0, r5
 800cda4:	47b8      	blx	r7
 800cda6:	1c43      	adds	r3, r0, #1
 800cda8:	d1c6      	bne.n	800cd38 <__sflush_r+0x38>
 800cdaa:	682b      	ldr	r3, [r5, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d0c3      	beq.n	800cd38 <__sflush_r+0x38>
 800cdb0:	2b1d      	cmp	r3, #29
 800cdb2:	d001      	beq.n	800cdb8 <__sflush_r+0xb8>
 800cdb4:	2b16      	cmp	r3, #22
 800cdb6:	d101      	bne.n	800cdbc <__sflush_r+0xbc>
 800cdb8:	602e      	str	r6, [r5, #0]
 800cdba:	e7ad      	b.n	800cd18 <__sflush_r+0x18>
 800cdbc:	89a2      	ldrh	r2, [r4, #12]
 800cdbe:	2340      	movs	r3, #64	; 0x40
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	81a3      	strh	r3, [r4, #12]
 800cdc4:	e7a9      	b.n	800cd1a <__sflush_r+0x1a>
 800cdc6:	690e      	ldr	r6, [r1, #16]
 800cdc8:	2e00      	cmp	r6, #0
 800cdca:	d0a5      	beq.n	800cd18 <__sflush_r+0x18>
 800cdcc:	680f      	ldr	r7, [r1, #0]
 800cdce:	600e      	str	r6, [r1, #0]
 800cdd0:	1bba      	subs	r2, r7, r6
 800cdd2:	9201      	str	r2, [sp, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	079b      	lsls	r3, r3, #30
 800cdd8:	d100      	bne.n	800cddc <__sflush_r+0xdc>
 800cdda:	694a      	ldr	r2, [r1, #20]
 800cddc:	60a2      	str	r2, [r4, #8]
 800cdde:	9b01      	ldr	r3, [sp, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	dd99      	ble.n	800cd18 <__sflush_r+0x18>
 800cde4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cde6:	0032      	movs	r2, r6
 800cde8:	001f      	movs	r7, r3
 800cdea:	0028      	movs	r0, r5
 800cdec:	9b01      	ldr	r3, [sp, #4]
 800cdee:	6a21      	ldr	r1, [r4, #32]
 800cdf0:	47b8      	blx	r7
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	dc06      	bgt.n	800ce04 <__sflush_r+0x104>
 800cdf6:	2340      	movs	r3, #64	; 0x40
 800cdf8:	2001      	movs	r0, #1
 800cdfa:	89a2      	ldrh	r2, [r4, #12]
 800cdfc:	4240      	negs	r0, r0
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	81a3      	strh	r3, [r4, #12]
 800ce02:	e78a      	b.n	800cd1a <__sflush_r+0x1a>
 800ce04:	9b01      	ldr	r3, [sp, #4]
 800ce06:	1836      	adds	r6, r6, r0
 800ce08:	1a1b      	subs	r3, r3, r0
 800ce0a:	9301      	str	r3, [sp, #4]
 800ce0c:	e7e7      	b.n	800cdde <__sflush_r+0xde>
 800ce0e:	46c0      	nop			; (mov r8, r8)
 800ce10:	dfbffffe 	.word	0xdfbffffe

0800ce14 <_fflush_r>:
 800ce14:	690b      	ldr	r3, [r1, #16]
 800ce16:	b570      	push	{r4, r5, r6, lr}
 800ce18:	0005      	movs	r5, r0
 800ce1a:	000c      	movs	r4, r1
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <_fflush_r+0x12>
 800ce20:	2500      	movs	r5, #0
 800ce22:	0028      	movs	r0, r5
 800ce24:	bd70      	pop	{r4, r5, r6, pc}
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d004      	beq.n	800ce34 <_fflush_r+0x20>
 800ce2a:	6a03      	ldr	r3, [r0, #32]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d101      	bne.n	800ce34 <_fflush_r+0x20>
 800ce30:	f7fd fa2c 	bl	800a28c <__sinit>
 800ce34:	220c      	movs	r2, #12
 800ce36:	5ea3      	ldrsh	r3, [r4, r2]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d0f1      	beq.n	800ce20 <_fflush_r+0xc>
 800ce3c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce3e:	07d2      	lsls	r2, r2, #31
 800ce40:	d404      	bmi.n	800ce4c <_fflush_r+0x38>
 800ce42:	059b      	lsls	r3, r3, #22
 800ce44:	d402      	bmi.n	800ce4c <_fflush_r+0x38>
 800ce46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce48:	f7fd fb5b 	bl	800a502 <__retarget_lock_acquire_recursive>
 800ce4c:	0028      	movs	r0, r5
 800ce4e:	0021      	movs	r1, r4
 800ce50:	f7ff ff56 	bl	800cd00 <__sflush_r>
 800ce54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce56:	0005      	movs	r5, r0
 800ce58:	07db      	lsls	r3, r3, #31
 800ce5a:	d4e2      	bmi.n	800ce22 <_fflush_r+0xe>
 800ce5c:	89a3      	ldrh	r3, [r4, #12]
 800ce5e:	059b      	lsls	r3, r3, #22
 800ce60:	d4df      	bmi.n	800ce22 <_fflush_r+0xe>
 800ce62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce64:	f7fd fb4e 	bl	800a504 <__retarget_lock_release_recursive>
 800ce68:	e7db      	b.n	800ce22 <_fflush_r+0xe>

0800ce6a <memmove>:
 800ce6a:	b510      	push	{r4, lr}
 800ce6c:	4288      	cmp	r0, r1
 800ce6e:	d902      	bls.n	800ce76 <memmove+0xc>
 800ce70:	188b      	adds	r3, r1, r2
 800ce72:	4298      	cmp	r0, r3
 800ce74:	d303      	bcc.n	800ce7e <memmove+0x14>
 800ce76:	2300      	movs	r3, #0
 800ce78:	e007      	b.n	800ce8a <memmove+0x20>
 800ce7a:	5c8b      	ldrb	r3, [r1, r2]
 800ce7c:	5483      	strb	r3, [r0, r2]
 800ce7e:	3a01      	subs	r2, #1
 800ce80:	d2fb      	bcs.n	800ce7a <memmove+0x10>
 800ce82:	bd10      	pop	{r4, pc}
 800ce84:	5ccc      	ldrb	r4, [r1, r3]
 800ce86:	54c4      	strb	r4, [r0, r3]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d1fa      	bne.n	800ce84 <memmove+0x1a>
 800ce8e:	e7f8      	b.n	800ce82 <memmove+0x18>

0800ce90 <strncmp>:
 800ce90:	b530      	push	{r4, r5, lr}
 800ce92:	0005      	movs	r5, r0
 800ce94:	1e10      	subs	r0, r2, #0
 800ce96:	d00b      	beq.n	800ceb0 <strncmp+0x20>
 800ce98:	2400      	movs	r4, #0
 800ce9a:	3a01      	subs	r2, #1
 800ce9c:	5d2b      	ldrb	r3, [r5, r4]
 800ce9e:	5d08      	ldrb	r0, [r1, r4]
 800cea0:	4283      	cmp	r3, r0
 800cea2:	d104      	bne.n	800ceae <strncmp+0x1e>
 800cea4:	42a2      	cmp	r2, r4
 800cea6:	d002      	beq.n	800ceae <strncmp+0x1e>
 800cea8:	3401      	adds	r4, #1
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d1f6      	bne.n	800ce9c <strncmp+0xc>
 800ceae:	1a18      	subs	r0, r3, r0
 800ceb0:	bd30      	pop	{r4, r5, pc}
	...

0800ceb4 <_sbrk_r>:
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	b570      	push	{r4, r5, r6, lr}
 800ceb8:	4d06      	ldr	r5, [pc, #24]	; (800ced4 <_sbrk_r+0x20>)
 800ceba:	0004      	movs	r4, r0
 800cebc:	0008      	movs	r0, r1
 800cebe:	602b      	str	r3, [r5, #0]
 800cec0:	f7f7 fe54 	bl	8004b6c <_sbrk>
 800cec4:	1c43      	adds	r3, r0, #1
 800cec6:	d103      	bne.n	800ced0 <_sbrk_r+0x1c>
 800cec8:	682b      	ldr	r3, [r5, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d000      	beq.n	800ced0 <_sbrk_r+0x1c>
 800cece:	6023      	str	r3, [r4, #0]
 800ced0:	bd70      	pop	{r4, r5, r6, pc}
 800ced2:	46c0      	nop			; (mov r8, r8)
 800ced4:	20000a54 	.word	0x20000a54

0800ced8 <memcpy>:
 800ced8:	2300      	movs	r3, #0
 800ceda:	b510      	push	{r4, lr}
 800cedc:	429a      	cmp	r2, r3
 800cede:	d100      	bne.n	800cee2 <memcpy+0xa>
 800cee0:	bd10      	pop	{r4, pc}
 800cee2:	5ccc      	ldrb	r4, [r1, r3]
 800cee4:	54c4      	strb	r4, [r0, r3]
 800cee6:	3301      	adds	r3, #1
 800cee8:	e7f8      	b.n	800cedc <memcpy+0x4>
	...

0800ceec <nan>:
 800ceec:	2000      	movs	r0, #0
 800ceee:	4901      	ldr	r1, [pc, #4]	; (800cef4 <nan+0x8>)
 800cef0:	4770      	bx	lr
 800cef2:	46c0      	nop			; (mov r8, r8)
 800cef4:	7ff80000 	.word	0x7ff80000

0800cef8 <__assert_func>:
 800cef8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cefa:	0014      	movs	r4, r2
 800cefc:	001a      	movs	r2, r3
 800cefe:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <__assert_func+0x2c>)
 800cf00:	0005      	movs	r5, r0
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	000e      	movs	r6, r1
 800cf06:	68d8      	ldr	r0, [r3, #12]
 800cf08:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <__assert_func+0x30>)
 800cf0a:	2c00      	cmp	r4, #0
 800cf0c:	d101      	bne.n	800cf12 <__assert_func+0x1a>
 800cf0e:	4b07      	ldr	r3, [pc, #28]	; (800cf2c <__assert_func+0x34>)
 800cf10:	001c      	movs	r4, r3
 800cf12:	4907      	ldr	r1, [pc, #28]	; (800cf30 <__assert_func+0x38>)
 800cf14:	9301      	str	r3, [sp, #4]
 800cf16:	9402      	str	r4, [sp, #8]
 800cf18:	002b      	movs	r3, r5
 800cf1a:	9600      	str	r6, [sp, #0]
 800cf1c:	f000 fbe2 	bl	800d6e4 <fiprintf>
 800cf20:	f000 fbf0 	bl	800d704 <abort>
 800cf24:	20000170 	.word	0x20000170
 800cf28:	0800e1e1 	.word	0x0800e1e1
 800cf2c:	0800e21c 	.word	0x0800e21c
 800cf30:	0800e1ee 	.word	0x0800e1ee

0800cf34 <_calloc_r>:
 800cf34:	b570      	push	{r4, r5, r6, lr}
 800cf36:	0c0b      	lsrs	r3, r1, #16
 800cf38:	0c15      	lsrs	r5, r2, #16
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d11e      	bne.n	800cf7c <_calloc_r+0x48>
 800cf3e:	2d00      	cmp	r5, #0
 800cf40:	d10c      	bne.n	800cf5c <_calloc_r+0x28>
 800cf42:	b289      	uxth	r1, r1
 800cf44:	b294      	uxth	r4, r2
 800cf46:	434c      	muls	r4, r1
 800cf48:	0021      	movs	r1, r4
 800cf4a:	f7fe f9ff 	bl	800b34c <_malloc_r>
 800cf4e:	1e05      	subs	r5, r0, #0
 800cf50:	d01b      	beq.n	800cf8a <_calloc_r+0x56>
 800cf52:	0022      	movs	r2, r4
 800cf54:	2100      	movs	r1, #0
 800cf56:	f7fd fa39 	bl	800a3cc <memset>
 800cf5a:	e016      	b.n	800cf8a <_calloc_r+0x56>
 800cf5c:	1c2b      	adds	r3, r5, #0
 800cf5e:	1c0c      	adds	r4, r1, #0
 800cf60:	b289      	uxth	r1, r1
 800cf62:	b292      	uxth	r2, r2
 800cf64:	434a      	muls	r2, r1
 800cf66:	b2a1      	uxth	r1, r4
 800cf68:	b29c      	uxth	r4, r3
 800cf6a:	434c      	muls	r4, r1
 800cf6c:	0c13      	lsrs	r3, r2, #16
 800cf6e:	18e4      	adds	r4, r4, r3
 800cf70:	0c23      	lsrs	r3, r4, #16
 800cf72:	d107      	bne.n	800cf84 <_calloc_r+0x50>
 800cf74:	0424      	lsls	r4, r4, #16
 800cf76:	b292      	uxth	r2, r2
 800cf78:	4314      	orrs	r4, r2
 800cf7a:	e7e5      	b.n	800cf48 <_calloc_r+0x14>
 800cf7c:	2d00      	cmp	r5, #0
 800cf7e:	d101      	bne.n	800cf84 <_calloc_r+0x50>
 800cf80:	1c14      	adds	r4, r2, #0
 800cf82:	e7ed      	b.n	800cf60 <_calloc_r+0x2c>
 800cf84:	230c      	movs	r3, #12
 800cf86:	2500      	movs	r5, #0
 800cf88:	6003      	str	r3, [r0, #0]
 800cf8a:	0028      	movs	r0, r5
 800cf8c:	bd70      	pop	{r4, r5, r6, pc}

0800cf8e <rshift>:
 800cf8e:	0002      	movs	r2, r0
 800cf90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf92:	6904      	ldr	r4, [r0, #16]
 800cf94:	114b      	asrs	r3, r1, #5
 800cf96:	b085      	sub	sp, #20
 800cf98:	3214      	adds	r2, #20
 800cf9a:	9302      	str	r3, [sp, #8]
 800cf9c:	114d      	asrs	r5, r1, #5
 800cf9e:	0013      	movs	r3, r2
 800cfa0:	42ac      	cmp	r4, r5
 800cfa2:	dd32      	ble.n	800d00a <rshift+0x7c>
 800cfa4:	261f      	movs	r6, #31
 800cfa6:	000f      	movs	r7, r1
 800cfa8:	114b      	asrs	r3, r1, #5
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	00a5      	lsls	r5, r4, #2
 800cfae:	18d3      	adds	r3, r2, r3
 800cfb0:	4037      	ands	r7, r6
 800cfb2:	1955      	adds	r5, r2, r5
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	9701      	str	r7, [sp, #4]
 800cfb8:	4231      	tst	r1, r6
 800cfba:	d10d      	bne.n	800cfd8 <rshift+0x4a>
 800cfbc:	0016      	movs	r6, r2
 800cfbe:	0019      	movs	r1, r3
 800cfc0:	428d      	cmp	r5, r1
 800cfc2:	d836      	bhi.n	800d032 <rshift+0xa4>
 800cfc4:	9900      	ldr	r1, [sp, #0]
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	3903      	subs	r1, #3
 800cfca:	428d      	cmp	r5, r1
 800cfcc:	d302      	bcc.n	800cfd4 <rshift+0x46>
 800cfce:	9b02      	ldr	r3, [sp, #8]
 800cfd0:	1ae4      	subs	r4, r4, r3
 800cfd2:	00a3      	lsls	r3, r4, #2
 800cfd4:	18d3      	adds	r3, r2, r3
 800cfd6:	e018      	b.n	800d00a <rshift+0x7c>
 800cfd8:	2120      	movs	r1, #32
 800cfda:	9e01      	ldr	r6, [sp, #4]
 800cfdc:	9f01      	ldr	r7, [sp, #4]
 800cfde:	1b89      	subs	r1, r1, r6
 800cfe0:	9e00      	ldr	r6, [sp, #0]
 800cfe2:	9103      	str	r1, [sp, #12]
 800cfe4:	ce02      	ldmia	r6!, {r1}
 800cfe6:	4694      	mov	ip, r2
 800cfe8:	40f9      	lsrs	r1, r7
 800cfea:	42b5      	cmp	r5, r6
 800cfec:	d816      	bhi.n	800d01c <rshift+0x8e>
 800cfee:	9e00      	ldr	r6, [sp, #0]
 800cff0:	2300      	movs	r3, #0
 800cff2:	3601      	adds	r6, #1
 800cff4:	42b5      	cmp	r5, r6
 800cff6:	d303      	bcc.n	800d000 <rshift+0x72>
 800cff8:	9b02      	ldr	r3, [sp, #8]
 800cffa:	1ae3      	subs	r3, r4, r3
 800cffc:	009b      	lsls	r3, r3, #2
 800cffe:	3b04      	subs	r3, #4
 800d000:	18d3      	adds	r3, r2, r3
 800d002:	6019      	str	r1, [r3, #0]
 800d004:	2900      	cmp	r1, #0
 800d006:	d000      	beq.n	800d00a <rshift+0x7c>
 800d008:	3304      	adds	r3, #4
 800d00a:	1a99      	subs	r1, r3, r2
 800d00c:	1089      	asrs	r1, r1, #2
 800d00e:	6101      	str	r1, [r0, #16]
 800d010:	4293      	cmp	r3, r2
 800d012:	d101      	bne.n	800d018 <rshift+0x8a>
 800d014:	2300      	movs	r3, #0
 800d016:	6143      	str	r3, [r0, #20]
 800d018:	b005      	add	sp, #20
 800d01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d01c:	6837      	ldr	r7, [r6, #0]
 800d01e:	9b03      	ldr	r3, [sp, #12]
 800d020:	409f      	lsls	r7, r3
 800d022:	430f      	orrs	r7, r1
 800d024:	4661      	mov	r1, ip
 800d026:	c180      	stmia	r1!, {r7}
 800d028:	468c      	mov	ip, r1
 800d02a:	9b01      	ldr	r3, [sp, #4]
 800d02c:	ce02      	ldmia	r6!, {r1}
 800d02e:	40d9      	lsrs	r1, r3
 800d030:	e7db      	b.n	800cfea <rshift+0x5c>
 800d032:	c980      	ldmia	r1!, {r7}
 800d034:	c680      	stmia	r6!, {r7}
 800d036:	e7c3      	b.n	800cfc0 <rshift+0x32>

0800d038 <__hexdig_fun>:
 800d038:	0002      	movs	r2, r0
 800d03a:	3a30      	subs	r2, #48	; 0x30
 800d03c:	0003      	movs	r3, r0
 800d03e:	2a09      	cmp	r2, #9
 800d040:	d802      	bhi.n	800d048 <__hexdig_fun+0x10>
 800d042:	3b20      	subs	r3, #32
 800d044:	b2d8      	uxtb	r0, r3
 800d046:	4770      	bx	lr
 800d048:	0002      	movs	r2, r0
 800d04a:	3a61      	subs	r2, #97	; 0x61
 800d04c:	2a05      	cmp	r2, #5
 800d04e:	d801      	bhi.n	800d054 <__hexdig_fun+0x1c>
 800d050:	3b47      	subs	r3, #71	; 0x47
 800d052:	e7f7      	b.n	800d044 <__hexdig_fun+0xc>
 800d054:	001a      	movs	r2, r3
 800d056:	3a41      	subs	r2, #65	; 0x41
 800d058:	2000      	movs	r0, #0
 800d05a:	2a05      	cmp	r2, #5
 800d05c:	d8f3      	bhi.n	800d046 <__hexdig_fun+0xe>
 800d05e:	3b27      	subs	r3, #39	; 0x27
 800d060:	e7f0      	b.n	800d044 <__hexdig_fun+0xc>
	...

0800d064 <__gethex>:
 800d064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d066:	b089      	sub	sp, #36	; 0x24
 800d068:	9307      	str	r3, [sp, #28]
 800d06a:	2302      	movs	r3, #2
 800d06c:	9201      	str	r2, [sp, #4]
 800d06e:	680a      	ldr	r2, [r1, #0]
 800d070:	425b      	negs	r3, r3
 800d072:	9003      	str	r0, [sp, #12]
 800d074:	9106      	str	r1, [sp, #24]
 800d076:	1c96      	adds	r6, r2, #2
 800d078:	1a9b      	subs	r3, r3, r2
 800d07a:	199a      	adds	r2, r3, r6
 800d07c:	9600      	str	r6, [sp, #0]
 800d07e:	9205      	str	r2, [sp, #20]
 800d080:	9a00      	ldr	r2, [sp, #0]
 800d082:	3601      	adds	r6, #1
 800d084:	7810      	ldrb	r0, [r2, #0]
 800d086:	2830      	cmp	r0, #48	; 0x30
 800d088:	d0f7      	beq.n	800d07a <__gethex+0x16>
 800d08a:	f7ff ffd5 	bl	800d038 <__hexdig_fun>
 800d08e:	2300      	movs	r3, #0
 800d090:	001d      	movs	r5, r3
 800d092:	9302      	str	r3, [sp, #8]
 800d094:	4298      	cmp	r0, r3
 800d096:	d11d      	bne.n	800d0d4 <__gethex+0x70>
 800d098:	2201      	movs	r2, #1
 800d09a:	49a6      	ldr	r1, [pc, #664]	; (800d334 <__gethex+0x2d0>)
 800d09c:	9800      	ldr	r0, [sp, #0]
 800d09e:	f7ff fef7 	bl	800ce90 <strncmp>
 800d0a2:	0007      	movs	r7, r0
 800d0a4:	42a8      	cmp	r0, r5
 800d0a6:	d169      	bne.n	800d17c <__gethex+0x118>
 800d0a8:	9b00      	ldr	r3, [sp, #0]
 800d0aa:	0034      	movs	r4, r6
 800d0ac:	7858      	ldrb	r0, [r3, #1]
 800d0ae:	f7ff ffc3 	bl	800d038 <__hexdig_fun>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	9302      	str	r3, [sp, #8]
 800d0b6:	42a8      	cmp	r0, r5
 800d0b8:	d02f      	beq.n	800d11a <__gethex+0xb6>
 800d0ba:	9600      	str	r6, [sp, #0]
 800d0bc:	9b00      	ldr	r3, [sp, #0]
 800d0be:	7818      	ldrb	r0, [r3, #0]
 800d0c0:	2830      	cmp	r0, #48	; 0x30
 800d0c2:	d009      	beq.n	800d0d8 <__gethex+0x74>
 800d0c4:	f7ff ffb8 	bl	800d038 <__hexdig_fun>
 800d0c8:	4242      	negs	r2, r0
 800d0ca:	4142      	adcs	r2, r0
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	0035      	movs	r5, r6
 800d0d0:	9202      	str	r2, [sp, #8]
 800d0d2:	9305      	str	r3, [sp, #20]
 800d0d4:	9c00      	ldr	r4, [sp, #0]
 800d0d6:	e004      	b.n	800d0e2 <__gethex+0x7e>
 800d0d8:	9b00      	ldr	r3, [sp, #0]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	9300      	str	r3, [sp, #0]
 800d0de:	e7ed      	b.n	800d0bc <__gethex+0x58>
 800d0e0:	3401      	adds	r4, #1
 800d0e2:	7820      	ldrb	r0, [r4, #0]
 800d0e4:	f7ff ffa8 	bl	800d038 <__hexdig_fun>
 800d0e8:	1e07      	subs	r7, r0, #0
 800d0ea:	d1f9      	bne.n	800d0e0 <__gethex+0x7c>
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	0020      	movs	r0, r4
 800d0f0:	4990      	ldr	r1, [pc, #576]	; (800d334 <__gethex+0x2d0>)
 800d0f2:	f7ff fecd 	bl	800ce90 <strncmp>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	d10d      	bne.n	800d116 <__gethex+0xb2>
 800d0fa:	2d00      	cmp	r5, #0
 800d0fc:	d106      	bne.n	800d10c <__gethex+0xa8>
 800d0fe:	3401      	adds	r4, #1
 800d100:	0025      	movs	r5, r4
 800d102:	7820      	ldrb	r0, [r4, #0]
 800d104:	f7ff ff98 	bl	800d038 <__hexdig_fun>
 800d108:	2800      	cmp	r0, #0
 800d10a:	d102      	bne.n	800d112 <__gethex+0xae>
 800d10c:	1b2d      	subs	r5, r5, r4
 800d10e:	00af      	lsls	r7, r5, #2
 800d110:	e003      	b.n	800d11a <__gethex+0xb6>
 800d112:	3401      	adds	r4, #1
 800d114:	e7f5      	b.n	800d102 <__gethex+0x9e>
 800d116:	2d00      	cmp	r5, #0
 800d118:	d1f8      	bne.n	800d10c <__gethex+0xa8>
 800d11a:	2220      	movs	r2, #32
 800d11c:	7823      	ldrb	r3, [r4, #0]
 800d11e:	0026      	movs	r6, r4
 800d120:	4393      	bics	r3, r2
 800d122:	2b50      	cmp	r3, #80	; 0x50
 800d124:	d11d      	bne.n	800d162 <__gethex+0xfe>
 800d126:	7863      	ldrb	r3, [r4, #1]
 800d128:	2b2b      	cmp	r3, #43	; 0x2b
 800d12a:	d02c      	beq.n	800d186 <__gethex+0x122>
 800d12c:	2b2d      	cmp	r3, #45	; 0x2d
 800d12e:	d02e      	beq.n	800d18e <__gethex+0x12a>
 800d130:	2300      	movs	r3, #0
 800d132:	1c66      	adds	r6, r4, #1
 800d134:	9304      	str	r3, [sp, #16]
 800d136:	7830      	ldrb	r0, [r6, #0]
 800d138:	f7ff ff7e 	bl	800d038 <__hexdig_fun>
 800d13c:	1e43      	subs	r3, r0, #1
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	2b18      	cmp	r3, #24
 800d142:	d82b      	bhi.n	800d19c <__gethex+0x138>
 800d144:	3810      	subs	r0, #16
 800d146:	0005      	movs	r5, r0
 800d148:	7870      	ldrb	r0, [r6, #1]
 800d14a:	f7ff ff75 	bl	800d038 <__hexdig_fun>
 800d14e:	1e43      	subs	r3, r0, #1
 800d150:	b2db      	uxtb	r3, r3
 800d152:	3601      	adds	r6, #1
 800d154:	2b18      	cmp	r3, #24
 800d156:	d91c      	bls.n	800d192 <__gethex+0x12e>
 800d158:	9b04      	ldr	r3, [sp, #16]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d000      	beq.n	800d160 <__gethex+0xfc>
 800d15e:	426d      	negs	r5, r5
 800d160:	197f      	adds	r7, r7, r5
 800d162:	9b06      	ldr	r3, [sp, #24]
 800d164:	601e      	str	r6, [r3, #0]
 800d166:	9b02      	ldr	r3, [sp, #8]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d019      	beq.n	800d1a0 <__gethex+0x13c>
 800d16c:	2600      	movs	r6, #0
 800d16e:	9b05      	ldr	r3, [sp, #20]
 800d170:	42b3      	cmp	r3, r6
 800d172:	d100      	bne.n	800d176 <__gethex+0x112>
 800d174:	3606      	adds	r6, #6
 800d176:	0030      	movs	r0, r6
 800d178:	b009      	add	sp, #36	; 0x24
 800d17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d17c:	2301      	movs	r3, #1
 800d17e:	2700      	movs	r7, #0
 800d180:	9c00      	ldr	r4, [sp, #0]
 800d182:	9302      	str	r3, [sp, #8]
 800d184:	e7c9      	b.n	800d11a <__gethex+0xb6>
 800d186:	2300      	movs	r3, #0
 800d188:	9304      	str	r3, [sp, #16]
 800d18a:	1ca6      	adds	r6, r4, #2
 800d18c:	e7d3      	b.n	800d136 <__gethex+0xd2>
 800d18e:	2301      	movs	r3, #1
 800d190:	e7fa      	b.n	800d188 <__gethex+0x124>
 800d192:	230a      	movs	r3, #10
 800d194:	435d      	muls	r5, r3
 800d196:	182d      	adds	r5, r5, r0
 800d198:	3d10      	subs	r5, #16
 800d19a:	e7d5      	b.n	800d148 <__gethex+0xe4>
 800d19c:	0026      	movs	r6, r4
 800d19e:	e7e0      	b.n	800d162 <__gethex+0xfe>
 800d1a0:	9b00      	ldr	r3, [sp, #0]
 800d1a2:	9902      	ldr	r1, [sp, #8]
 800d1a4:	1ae3      	subs	r3, r4, r3
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	2b07      	cmp	r3, #7
 800d1aa:	dc0a      	bgt.n	800d1c2 <__gethex+0x15e>
 800d1ac:	9803      	ldr	r0, [sp, #12]
 800d1ae:	f7fe f95f 	bl	800b470 <_Balloc>
 800d1b2:	1e05      	subs	r5, r0, #0
 800d1b4:	d108      	bne.n	800d1c8 <__gethex+0x164>
 800d1b6:	002a      	movs	r2, r5
 800d1b8:	21e4      	movs	r1, #228	; 0xe4
 800d1ba:	4b5f      	ldr	r3, [pc, #380]	; (800d338 <__gethex+0x2d4>)
 800d1bc:	485f      	ldr	r0, [pc, #380]	; (800d33c <__gethex+0x2d8>)
 800d1be:	f7ff fe9b 	bl	800cef8 <__assert_func>
 800d1c2:	3101      	adds	r1, #1
 800d1c4:	105b      	asrs	r3, r3, #1
 800d1c6:	e7ef      	b.n	800d1a8 <__gethex+0x144>
 800d1c8:	0003      	movs	r3, r0
 800d1ca:	3314      	adds	r3, #20
 800d1cc:	9302      	str	r3, [sp, #8]
 800d1ce:	9305      	str	r3, [sp, #20]
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	001e      	movs	r6, r3
 800d1d4:	9304      	str	r3, [sp, #16]
 800d1d6:	9b00      	ldr	r3, [sp, #0]
 800d1d8:	42a3      	cmp	r3, r4
 800d1da:	d33f      	bcc.n	800d25c <__gethex+0x1f8>
 800d1dc:	9c05      	ldr	r4, [sp, #20]
 800d1de:	9b02      	ldr	r3, [sp, #8]
 800d1e0:	c440      	stmia	r4!, {r6}
 800d1e2:	1ae4      	subs	r4, r4, r3
 800d1e4:	10a4      	asrs	r4, r4, #2
 800d1e6:	0030      	movs	r0, r6
 800d1e8:	612c      	str	r4, [r5, #16]
 800d1ea:	f7fe fa39 	bl	800b660 <__hi0bits>
 800d1ee:	9b01      	ldr	r3, [sp, #4]
 800d1f0:	0164      	lsls	r4, r4, #5
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	1a26      	subs	r6, r4, r0
 800d1f6:	9300      	str	r3, [sp, #0]
 800d1f8:	429e      	cmp	r6, r3
 800d1fa:	dd51      	ble.n	800d2a0 <__gethex+0x23c>
 800d1fc:	1af6      	subs	r6, r6, r3
 800d1fe:	0031      	movs	r1, r6
 800d200:	0028      	movs	r0, r5
 800d202:	f7fe fdcd 	bl	800bda0 <__any_on>
 800d206:	1e04      	subs	r4, r0, #0
 800d208:	d016      	beq.n	800d238 <__gethex+0x1d4>
 800d20a:	2401      	movs	r4, #1
 800d20c:	231f      	movs	r3, #31
 800d20e:	0020      	movs	r0, r4
 800d210:	1e72      	subs	r2, r6, #1
 800d212:	4013      	ands	r3, r2
 800d214:	4098      	lsls	r0, r3
 800d216:	0003      	movs	r3, r0
 800d218:	1151      	asrs	r1, r2, #5
 800d21a:	9802      	ldr	r0, [sp, #8]
 800d21c:	0089      	lsls	r1, r1, #2
 800d21e:	5809      	ldr	r1, [r1, r0]
 800d220:	4219      	tst	r1, r3
 800d222:	d009      	beq.n	800d238 <__gethex+0x1d4>
 800d224:	42a2      	cmp	r2, r4
 800d226:	dd06      	ble.n	800d236 <__gethex+0x1d2>
 800d228:	0028      	movs	r0, r5
 800d22a:	1eb1      	subs	r1, r6, #2
 800d22c:	f7fe fdb8 	bl	800bda0 <__any_on>
 800d230:	3402      	adds	r4, #2
 800d232:	2800      	cmp	r0, #0
 800d234:	d100      	bne.n	800d238 <__gethex+0x1d4>
 800d236:	2402      	movs	r4, #2
 800d238:	0031      	movs	r1, r6
 800d23a:	0028      	movs	r0, r5
 800d23c:	f7ff fea7 	bl	800cf8e <rshift>
 800d240:	19bf      	adds	r7, r7, r6
 800d242:	9b01      	ldr	r3, [sp, #4]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	42bb      	cmp	r3, r7
 800d248:	da3a      	bge.n	800d2c0 <__gethex+0x25c>
 800d24a:	0029      	movs	r1, r5
 800d24c:	9803      	ldr	r0, [sp, #12]
 800d24e:	f7fe f953 	bl	800b4f8 <_Bfree>
 800d252:	2300      	movs	r3, #0
 800d254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d256:	26a3      	movs	r6, #163	; 0xa3
 800d258:	6013      	str	r3, [r2, #0]
 800d25a:	e78c      	b.n	800d176 <__gethex+0x112>
 800d25c:	3c01      	subs	r4, #1
 800d25e:	7823      	ldrb	r3, [r4, #0]
 800d260:	2b2e      	cmp	r3, #46	; 0x2e
 800d262:	d012      	beq.n	800d28a <__gethex+0x226>
 800d264:	9b04      	ldr	r3, [sp, #16]
 800d266:	2b20      	cmp	r3, #32
 800d268:	d104      	bne.n	800d274 <__gethex+0x210>
 800d26a:	9b05      	ldr	r3, [sp, #20]
 800d26c:	c340      	stmia	r3!, {r6}
 800d26e:	2600      	movs	r6, #0
 800d270:	9305      	str	r3, [sp, #20]
 800d272:	9604      	str	r6, [sp, #16]
 800d274:	7820      	ldrb	r0, [r4, #0]
 800d276:	f7ff fedf 	bl	800d038 <__hexdig_fun>
 800d27a:	230f      	movs	r3, #15
 800d27c:	4018      	ands	r0, r3
 800d27e:	9b04      	ldr	r3, [sp, #16]
 800d280:	4098      	lsls	r0, r3
 800d282:	3304      	adds	r3, #4
 800d284:	4306      	orrs	r6, r0
 800d286:	9304      	str	r3, [sp, #16]
 800d288:	e7a5      	b.n	800d1d6 <__gethex+0x172>
 800d28a:	9b00      	ldr	r3, [sp, #0]
 800d28c:	42a3      	cmp	r3, r4
 800d28e:	d8e9      	bhi.n	800d264 <__gethex+0x200>
 800d290:	2201      	movs	r2, #1
 800d292:	0020      	movs	r0, r4
 800d294:	4927      	ldr	r1, [pc, #156]	; (800d334 <__gethex+0x2d0>)
 800d296:	f7ff fdfb 	bl	800ce90 <strncmp>
 800d29a:	2800      	cmp	r0, #0
 800d29c:	d1e2      	bne.n	800d264 <__gethex+0x200>
 800d29e:	e79a      	b.n	800d1d6 <__gethex+0x172>
 800d2a0:	9b00      	ldr	r3, [sp, #0]
 800d2a2:	2400      	movs	r4, #0
 800d2a4:	429e      	cmp	r6, r3
 800d2a6:	dacc      	bge.n	800d242 <__gethex+0x1de>
 800d2a8:	1b9e      	subs	r6, r3, r6
 800d2aa:	0029      	movs	r1, r5
 800d2ac:	0032      	movs	r2, r6
 800d2ae:	9803      	ldr	r0, [sp, #12]
 800d2b0:	f7fe fb42 	bl	800b938 <__lshift>
 800d2b4:	0003      	movs	r3, r0
 800d2b6:	3314      	adds	r3, #20
 800d2b8:	0005      	movs	r5, r0
 800d2ba:	1bbf      	subs	r7, r7, r6
 800d2bc:	9302      	str	r3, [sp, #8]
 800d2be:	e7c0      	b.n	800d242 <__gethex+0x1de>
 800d2c0:	9b01      	ldr	r3, [sp, #4]
 800d2c2:	685e      	ldr	r6, [r3, #4]
 800d2c4:	42be      	cmp	r6, r7
 800d2c6:	dd70      	ble.n	800d3aa <__gethex+0x346>
 800d2c8:	9b00      	ldr	r3, [sp, #0]
 800d2ca:	1bf6      	subs	r6, r6, r7
 800d2cc:	42b3      	cmp	r3, r6
 800d2ce:	dc37      	bgt.n	800d340 <__gethex+0x2dc>
 800d2d0:	9b01      	ldr	r3, [sp, #4]
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	2b02      	cmp	r3, #2
 800d2d6:	d024      	beq.n	800d322 <__gethex+0x2be>
 800d2d8:	2b03      	cmp	r3, #3
 800d2da:	d026      	beq.n	800d32a <__gethex+0x2c6>
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d117      	bne.n	800d310 <__gethex+0x2ac>
 800d2e0:	9b00      	ldr	r3, [sp, #0]
 800d2e2:	42b3      	cmp	r3, r6
 800d2e4:	d114      	bne.n	800d310 <__gethex+0x2ac>
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d10b      	bne.n	800d302 <__gethex+0x29e>
 800d2ea:	9b01      	ldr	r3, [sp, #4]
 800d2ec:	9a07      	ldr	r2, [sp, #28]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	2662      	movs	r6, #98	; 0x62
 800d2f2:	6013      	str	r3, [r2, #0]
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	9a02      	ldr	r2, [sp, #8]
 800d2f8:	612b      	str	r3, [r5, #16]
 800d2fa:	6013      	str	r3, [r2, #0]
 800d2fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2fe:	601d      	str	r5, [r3, #0]
 800d300:	e739      	b.n	800d176 <__gethex+0x112>
 800d302:	9900      	ldr	r1, [sp, #0]
 800d304:	0028      	movs	r0, r5
 800d306:	3901      	subs	r1, #1
 800d308:	f7fe fd4a 	bl	800bda0 <__any_on>
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d1ec      	bne.n	800d2ea <__gethex+0x286>
 800d310:	0029      	movs	r1, r5
 800d312:	9803      	ldr	r0, [sp, #12]
 800d314:	f7fe f8f0 	bl	800b4f8 <_Bfree>
 800d318:	2300      	movs	r3, #0
 800d31a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d31c:	2650      	movs	r6, #80	; 0x50
 800d31e:	6013      	str	r3, [r2, #0]
 800d320:	e729      	b.n	800d176 <__gethex+0x112>
 800d322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d324:	2b00      	cmp	r3, #0
 800d326:	d1f3      	bne.n	800d310 <__gethex+0x2ac>
 800d328:	e7df      	b.n	800d2ea <__gethex+0x286>
 800d32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d1dc      	bne.n	800d2ea <__gethex+0x286>
 800d330:	e7ee      	b.n	800d310 <__gethex+0x2ac>
 800d332:	46c0      	nop			; (mov r8, r8)
 800d334:	0800e174 	.word	0x0800e174
 800d338:	0800e00a 	.word	0x0800e00a
 800d33c:	0800e21d 	.word	0x0800e21d
 800d340:	1e77      	subs	r7, r6, #1
 800d342:	2c00      	cmp	r4, #0
 800d344:	d12f      	bne.n	800d3a6 <__gethex+0x342>
 800d346:	2f00      	cmp	r7, #0
 800d348:	d004      	beq.n	800d354 <__gethex+0x2f0>
 800d34a:	0039      	movs	r1, r7
 800d34c:	0028      	movs	r0, r5
 800d34e:	f7fe fd27 	bl	800bda0 <__any_on>
 800d352:	0004      	movs	r4, r0
 800d354:	231f      	movs	r3, #31
 800d356:	117a      	asrs	r2, r7, #5
 800d358:	401f      	ands	r7, r3
 800d35a:	3b1e      	subs	r3, #30
 800d35c:	40bb      	lsls	r3, r7
 800d35e:	9902      	ldr	r1, [sp, #8]
 800d360:	0092      	lsls	r2, r2, #2
 800d362:	5852      	ldr	r2, [r2, r1]
 800d364:	421a      	tst	r2, r3
 800d366:	d001      	beq.n	800d36c <__gethex+0x308>
 800d368:	2302      	movs	r3, #2
 800d36a:	431c      	orrs	r4, r3
 800d36c:	9b00      	ldr	r3, [sp, #0]
 800d36e:	0031      	movs	r1, r6
 800d370:	1b9b      	subs	r3, r3, r6
 800d372:	2602      	movs	r6, #2
 800d374:	0028      	movs	r0, r5
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	f7ff fe09 	bl	800cf8e <rshift>
 800d37c:	9b01      	ldr	r3, [sp, #4]
 800d37e:	685f      	ldr	r7, [r3, #4]
 800d380:	2c00      	cmp	r4, #0
 800d382:	d041      	beq.n	800d408 <__gethex+0x3a4>
 800d384:	9b01      	ldr	r3, [sp, #4]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d010      	beq.n	800d3ae <__gethex+0x34a>
 800d38c:	2b03      	cmp	r3, #3
 800d38e:	d012      	beq.n	800d3b6 <__gethex+0x352>
 800d390:	2b01      	cmp	r3, #1
 800d392:	d106      	bne.n	800d3a2 <__gethex+0x33e>
 800d394:	07a2      	lsls	r2, r4, #30
 800d396:	d504      	bpl.n	800d3a2 <__gethex+0x33e>
 800d398:	9a02      	ldr	r2, [sp, #8]
 800d39a:	6812      	ldr	r2, [r2, #0]
 800d39c:	4314      	orrs	r4, r2
 800d39e:	421c      	tst	r4, r3
 800d3a0:	d10c      	bne.n	800d3bc <__gethex+0x358>
 800d3a2:	2310      	movs	r3, #16
 800d3a4:	e02f      	b.n	800d406 <__gethex+0x3a2>
 800d3a6:	2401      	movs	r4, #1
 800d3a8:	e7d4      	b.n	800d354 <__gethex+0x2f0>
 800d3aa:	2601      	movs	r6, #1
 800d3ac:	e7e8      	b.n	800d380 <__gethex+0x31c>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d3b2:	1a9b      	subs	r3, r3, r2
 800d3b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d0f2      	beq.n	800d3a2 <__gethex+0x33e>
 800d3bc:	692b      	ldr	r3, [r5, #16]
 800d3be:	2000      	movs	r0, #0
 800d3c0:	9302      	str	r3, [sp, #8]
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	9304      	str	r3, [sp, #16]
 800d3c6:	002b      	movs	r3, r5
 800d3c8:	9a04      	ldr	r2, [sp, #16]
 800d3ca:	3314      	adds	r3, #20
 800d3cc:	1899      	adds	r1, r3, r2
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	1c54      	adds	r4, r2, #1
 800d3d2:	d01e      	beq.n	800d412 <__gethex+0x3ae>
 800d3d4:	3201      	adds	r2, #1
 800d3d6:	601a      	str	r2, [r3, #0]
 800d3d8:	002b      	movs	r3, r5
 800d3da:	3314      	adds	r3, #20
 800d3dc:	2e02      	cmp	r6, #2
 800d3de:	d141      	bne.n	800d464 <__gethex+0x400>
 800d3e0:	9a01      	ldr	r2, [sp, #4]
 800d3e2:	9900      	ldr	r1, [sp, #0]
 800d3e4:	6812      	ldr	r2, [r2, #0]
 800d3e6:	3a01      	subs	r2, #1
 800d3e8:	428a      	cmp	r2, r1
 800d3ea:	d10b      	bne.n	800d404 <__gethex+0x3a0>
 800d3ec:	221f      	movs	r2, #31
 800d3ee:	9800      	ldr	r0, [sp, #0]
 800d3f0:	1149      	asrs	r1, r1, #5
 800d3f2:	4002      	ands	r2, r0
 800d3f4:	2001      	movs	r0, #1
 800d3f6:	0004      	movs	r4, r0
 800d3f8:	4094      	lsls	r4, r2
 800d3fa:	0089      	lsls	r1, r1, #2
 800d3fc:	58cb      	ldr	r3, [r1, r3]
 800d3fe:	4223      	tst	r3, r4
 800d400:	d000      	beq.n	800d404 <__gethex+0x3a0>
 800d402:	2601      	movs	r6, #1
 800d404:	2320      	movs	r3, #32
 800d406:	431e      	orrs	r6, r3
 800d408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d40a:	601d      	str	r5, [r3, #0]
 800d40c:	9b07      	ldr	r3, [sp, #28]
 800d40e:	601f      	str	r7, [r3, #0]
 800d410:	e6b1      	b.n	800d176 <__gethex+0x112>
 800d412:	c301      	stmia	r3!, {r0}
 800d414:	4299      	cmp	r1, r3
 800d416:	d8da      	bhi.n	800d3ce <__gethex+0x36a>
 800d418:	68ab      	ldr	r3, [r5, #8]
 800d41a:	9a02      	ldr	r2, [sp, #8]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	db18      	blt.n	800d452 <__gethex+0x3ee>
 800d420:	6869      	ldr	r1, [r5, #4]
 800d422:	9803      	ldr	r0, [sp, #12]
 800d424:	3101      	adds	r1, #1
 800d426:	f7fe f823 	bl	800b470 <_Balloc>
 800d42a:	1e04      	subs	r4, r0, #0
 800d42c:	d104      	bne.n	800d438 <__gethex+0x3d4>
 800d42e:	0022      	movs	r2, r4
 800d430:	2184      	movs	r1, #132	; 0x84
 800d432:	4b1c      	ldr	r3, [pc, #112]	; (800d4a4 <__gethex+0x440>)
 800d434:	481c      	ldr	r0, [pc, #112]	; (800d4a8 <__gethex+0x444>)
 800d436:	e6c2      	b.n	800d1be <__gethex+0x15a>
 800d438:	0029      	movs	r1, r5
 800d43a:	692a      	ldr	r2, [r5, #16]
 800d43c:	310c      	adds	r1, #12
 800d43e:	3202      	adds	r2, #2
 800d440:	0092      	lsls	r2, r2, #2
 800d442:	300c      	adds	r0, #12
 800d444:	f7ff fd48 	bl	800ced8 <memcpy>
 800d448:	0029      	movs	r1, r5
 800d44a:	9803      	ldr	r0, [sp, #12]
 800d44c:	f7fe f854 	bl	800b4f8 <_Bfree>
 800d450:	0025      	movs	r5, r4
 800d452:	692b      	ldr	r3, [r5, #16]
 800d454:	1c5a      	adds	r2, r3, #1
 800d456:	612a      	str	r2, [r5, #16]
 800d458:	2201      	movs	r2, #1
 800d45a:	3304      	adds	r3, #4
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	18eb      	adds	r3, r5, r3
 800d460:	605a      	str	r2, [r3, #4]
 800d462:	e7b9      	b.n	800d3d8 <__gethex+0x374>
 800d464:	692a      	ldr	r2, [r5, #16]
 800d466:	9902      	ldr	r1, [sp, #8]
 800d468:	428a      	cmp	r2, r1
 800d46a:	dd09      	ble.n	800d480 <__gethex+0x41c>
 800d46c:	2101      	movs	r1, #1
 800d46e:	0028      	movs	r0, r5
 800d470:	f7ff fd8d 	bl	800cf8e <rshift>
 800d474:	9b01      	ldr	r3, [sp, #4]
 800d476:	3701      	adds	r7, #1
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	42bb      	cmp	r3, r7
 800d47c:	dac1      	bge.n	800d402 <__gethex+0x39e>
 800d47e:	e6e4      	b.n	800d24a <__gethex+0x1e6>
 800d480:	221f      	movs	r2, #31
 800d482:	9c00      	ldr	r4, [sp, #0]
 800d484:	9900      	ldr	r1, [sp, #0]
 800d486:	2601      	movs	r6, #1
 800d488:	4014      	ands	r4, r2
 800d48a:	4211      	tst	r1, r2
 800d48c:	d0ba      	beq.n	800d404 <__gethex+0x3a0>
 800d48e:	9a04      	ldr	r2, [sp, #16]
 800d490:	189b      	adds	r3, r3, r2
 800d492:	3b04      	subs	r3, #4
 800d494:	6818      	ldr	r0, [r3, #0]
 800d496:	f7fe f8e3 	bl	800b660 <__hi0bits>
 800d49a:	2320      	movs	r3, #32
 800d49c:	1b1b      	subs	r3, r3, r4
 800d49e:	4298      	cmp	r0, r3
 800d4a0:	dbe4      	blt.n	800d46c <__gethex+0x408>
 800d4a2:	e7af      	b.n	800d404 <__gethex+0x3a0>
 800d4a4:	0800e00a 	.word	0x0800e00a
 800d4a8:	0800e21d 	.word	0x0800e21d

0800d4ac <L_shift>:
 800d4ac:	2308      	movs	r3, #8
 800d4ae:	b570      	push	{r4, r5, r6, lr}
 800d4b0:	2520      	movs	r5, #32
 800d4b2:	1a9a      	subs	r2, r3, r2
 800d4b4:	0092      	lsls	r2, r2, #2
 800d4b6:	1aad      	subs	r5, r5, r2
 800d4b8:	6843      	ldr	r3, [r0, #4]
 800d4ba:	6804      	ldr	r4, [r0, #0]
 800d4bc:	001e      	movs	r6, r3
 800d4be:	40ae      	lsls	r6, r5
 800d4c0:	40d3      	lsrs	r3, r2
 800d4c2:	4334      	orrs	r4, r6
 800d4c4:	6004      	str	r4, [r0, #0]
 800d4c6:	6043      	str	r3, [r0, #4]
 800d4c8:	3004      	adds	r0, #4
 800d4ca:	4288      	cmp	r0, r1
 800d4cc:	d3f4      	bcc.n	800d4b8 <L_shift+0xc>
 800d4ce:	bd70      	pop	{r4, r5, r6, pc}

0800d4d0 <__match>:
 800d4d0:	b530      	push	{r4, r5, lr}
 800d4d2:	6803      	ldr	r3, [r0, #0]
 800d4d4:	780c      	ldrb	r4, [r1, #0]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	2c00      	cmp	r4, #0
 800d4da:	d102      	bne.n	800d4e2 <__match+0x12>
 800d4dc:	6003      	str	r3, [r0, #0]
 800d4de:	2001      	movs	r0, #1
 800d4e0:	bd30      	pop	{r4, r5, pc}
 800d4e2:	781a      	ldrb	r2, [r3, #0]
 800d4e4:	0015      	movs	r5, r2
 800d4e6:	3d41      	subs	r5, #65	; 0x41
 800d4e8:	2d19      	cmp	r5, #25
 800d4ea:	d800      	bhi.n	800d4ee <__match+0x1e>
 800d4ec:	3220      	adds	r2, #32
 800d4ee:	3101      	adds	r1, #1
 800d4f0:	42a2      	cmp	r2, r4
 800d4f2:	d0ef      	beq.n	800d4d4 <__match+0x4>
 800d4f4:	2000      	movs	r0, #0
 800d4f6:	e7f3      	b.n	800d4e0 <__match+0x10>

0800d4f8 <__hexnan>:
 800d4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4fa:	680b      	ldr	r3, [r1, #0]
 800d4fc:	b08b      	sub	sp, #44	; 0x2c
 800d4fe:	9201      	str	r2, [sp, #4]
 800d500:	9901      	ldr	r1, [sp, #4]
 800d502:	115a      	asrs	r2, r3, #5
 800d504:	0092      	lsls	r2, r2, #2
 800d506:	188a      	adds	r2, r1, r2
 800d508:	9202      	str	r2, [sp, #8]
 800d50a:	0019      	movs	r1, r3
 800d50c:	221f      	movs	r2, #31
 800d50e:	4011      	ands	r1, r2
 800d510:	9008      	str	r0, [sp, #32]
 800d512:	9106      	str	r1, [sp, #24]
 800d514:	4213      	tst	r3, r2
 800d516:	d002      	beq.n	800d51e <__hexnan+0x26>
 800d518:	9b02      	ldr	r3, [sp, #8]
 800d51a:	3304      	adds	r3, #4
 800d51c:	9302      	str	r3, [sp, #8]
 800d51e:	9b02      	ldr	r3, [sp, #8]
 800d520:	2500      	movs	r5, #0
 800d522:	1f1f      	subs	r7, r3, #4
 800d524:	003e      	movs	r6, r7
 800d526:	003c      	movs	r4, r7
 800d528:	9b08      	ldr	r3, [sp, #32]
 800d52a:	603d      	str	r5, [r7, #0]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	9507      	str	r5, [sp, #28]
 800d530:	9305      	str	r3, [sp, #20]
 800d532:	9503      	str	r5, [sp, #12]
 800d534:	9b05      	ldr	r3, [sp, #20]
 800d536:	3301      	adds	r3, #1
 800d538:	9309      	str	r3, [sp, #36]	; 0x24
 800d53a:	9b05      	ldr	r3, [sp, #20]
 800d53c:	785b      	ldrb	r3, [r3, #1]
 800d53e:	9304      	str	r3, [sp, #16]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d028      	beq.n	800d596 <__hexnan+0x9e>
 800d544:	9804      	ldr	r0, [sp, #16]
 800d546:	f7ff fd77 	bl	800d038 <__hexdig_fun>
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d154      	bne.n	800d5f8 <__hexnan+0x100>
 800d54e:	9b04      	ldr	r3, [sp, #16]
 800d550:	2b20      	cmp	r3, #32
 800d552:	d819      	bhi.n	800d588 <__hexnan+0x90>
 800d554:	9b03      	ldr	r3, [sp, #12]
 800d556:	9a07      	ldr	r2, [sp, #28]
 800d558:	4293      	cmp	r3, r2
 800d55a:	dd12      	ble.n	800d582 <__hexnan+0x8a>
 800d55c:	42b4      	cmp	r4, r6
 800d55e:	d206      	bcs.n	800d56e <__hexnan+0x76>
 800d560:	2d07      	cmp	r5, #7
 800d562:	dc04      	bgt.n	800d56e <__hexnan+0x76>
 800d564:	002a      	movs	r2, r5
 800d566:	0031      	movs	r1, r6
 800d568:	0020      	movs	r0, r4
 800d56a:	f7ff ff9f 	bl	800d4ac <L_shift>
 800d56e:	9b01      	ldr	r3, [sp, #4]
 800d570:	2508      	movs	r5, #8
 800d572:	429c      	cmp	r4, r3
 800d574:	d905      	bls.n	800d582 <__hexnan+0x8a>
 800d576:	1f26      	subs	r6, r4, #4
 800d578:	2500      	movs	r5, #0
 800d57a:	0034      	movs	r4, r6
 800d57c:	9b03      	ldr	r3, [sp, #12]
 800d57e:	6035      	str	r5, [r6, #0]
 800d580:	9307      	str	r3, [sp, #28]
 800d582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d584:	9305      	str	r3, [sp, #20]
 800d586:	e7d5      	b.n	800d534 <__hexnan+0x3c>
 800d588:	9b04      	ldr	r3, [sp, #16]
 800d58a:	2b29      	cmp	r3, #41	; 0x29
 800d58c:	d159      	bne.n	800d642 <__hexnan+0x14a>
 800d58e:	9b05      	ldr	r3, [sp, #20]
 800d590:	9a08      	ldr	r2, [sp, #32]
 800d592:	3302      	adds	r3, #2
 800d594:	6013      	str	r3, [r2, #0]
 800d596:	9b03      	ldr	r3, [sp, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d052      	beq.n	800d642 <__hexnan+0x14a>
 800d59c:	42b4      	cmp	r4, r6
 800d59e:	d206      	bcs.n	800d5ae <__hexnan+0xb6>
 800d5a0:	2d07      	cmp	r5, #7
 800d5a2:	dc04      	bgt.n	800d5ae <__hexnan+0xb6>
 800d5a4:	002a      	movs	r2, r5
 800d5a6:	0031      	movs	r1, r6
 800d5a8:	0020      	movs	r0, r4
 800d5aa:	f7ff ff7f 	bl	800d4ac <L_shift>
 800d5ae:	9b01      	ldr	r3, [sp, #4]
 800d5b0:	429c      	cmp	r4, r3
 800d5b2:	d935      	bls.n	800d620 <__hexnan+0x128>
 800d5b4:	001a      	movs	r2, r3
 800d5b6:	0023      	movs	r3, r4
 800d5b8:	cb02      	ldmia	r3!, {r1}
 800d5ba:	c202      	stmia	r2!, {r1}
 800d5bc:	429f      	cmp	r7, r3
 800d5be:	d2fb      	bcs.n	800d5b8 <__hexnan+0xc0>
 800d5c0:	9b02      	ldr	r3, [sp, #8]
 800d5c2:	1c62      	adds	r2, r4, #1
 800d5c4:	1ed9      	subs	r1, r3, #3
 800d5c6:	2304      	movs	r3, #4
 800d5c8:	4291      	cmp	r1, r2
 800d5ca:	d305      	bcc.n	800d5d8 <__hexnan+0xe0>
 800d5cc:	9b02      	ldr	r3, [sp, #8]
 800d5ce:	3b04      	subs	r3, #4
 800d5d0:	1b1b      	subs	r3, r3, r4
 800d5d2:	089b      	lsrs	r3, r3, #2
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	9a01      	ldr	r2, [sp, #4]
 800d5da:	18d3      	adds	r3, r2, r3
 800d5dc:	2200      	movs	r2, #0
 800d5de:	c304      	stmia	r3!, {r2}
 800d5e0:	429f      	cmp	r7, r3
 800d5e2:	d2fc      	bcs.n	800d5de <__hexnan+0xe6>
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d104      	bne.n	800d5f4 <__hexnan+0xfc>
 800d5ea:	9b01      	ldr	r3, [sp, #4]
 800d5ec:	429f      	cmp	r7, r3
 800d5ee:	d126      	bne.n	800d63e <__hexnan+0x146>
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	603b      	str	r3, [r7, #0]
 800d5f4:	2005      	movs	r0, #5
 800d5f6:	e025      	b.n	800d644 <__hexnan+0x14c>
 800d5f8:	9b03      	ldr	r3, [sp, #12]
 800d5fa:	3501      	adds	r5, #1
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	9303      	str	r3, [sp, #12]
 800d600:	2d08      	cmp	r5, #8
 800d602:	dd06      	ble.n	800d612 <__hexnan+0x11a>
 800d604:	9b01      	ldr	r3, [sp, #4]
 800d606:	429c      	cmp	r4, r3
 800d608:	d9bb      	bls.n	800d582 <__hexnan+0x8a>
 800d60a:	2300      	movs	r3, #0
 800d60c:	2501      	movs	r5, #1
 800d60e:	3c04      	subs	r4, #4
 800d610:	6023      	str	r3, [r4, #0]
 800d612:	220f      	movs	r2, #15
 800d614:	6823      	ldr	r3, [r4, #0]
 800d616:	4010      	ands	r0, r2
 800d618:	011b      	lsls	r3, r3, #4
 800d61a:	4303      	orrs	r3, r0
 800d61c:	6023      	str	r3, [r4, #0]
 800d61e:	e7b0      	b.n	800d582 <__hexnan+0x8a>
 800d620:	9b06      	ldr	r3, [sp, #24]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0de      	beq.n	800d5e4 <__hexnan+0xec>
 800d626:	2320      	movs	r3, #32
 800d628:	9a06      	ldr	r2, [sp, #24]
 800d62a:	9902      	ldr	r1, [sp, #8]
 800d62c:	1a9b      	subs	r3, r3, r2
 800d62e:	2201      	movs	r2, #1
 800d630:	4252      	negs	r2, r2
 800d632:	40da      	lsrs	r2, r3
 800d634:	3904      	subs	r1, #4
 800d636:	680b      	ldr	r3, [r1, #0]
 800d638:	4013      	ands	r3, r2
 800d63a:	600b      	str	r3, [r1, #0]
 800d63c:	e7d2      	b.n	800d5e4 <__hexnan+0xec>
 800d63e:	3f04      	subs	r7, #4
 800d640:	e7d0      	b.n	800d5e4 <__hexnan+0xec>
 800d642:	2004      	movs	r0, #4
 800d644:	b00b      	add	sp, #44	; 0x2c
 800d646:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d648 <__ascii_mbtowc>:
 800d648:	b082      	sub	sp, #8
 800d64a:	2900      	cmp	r1, #0
 800d64c:	d100      	bne.n	800d650 <__ascii_mbtowc+0x8>
 800d64e:	a901      	add	r1, sp, #4
 800d650:	1e10      	subs	r0, r2, #0
 800d652:	d006      	beq.n	800d662 <__ascii_mbtowc+0x1a>
 800d654:	2b00      	cmp	r3, #0
 800d656:	d006      	beq.n	800d666 <__ascii_mbtowc+0x1e>
 800d658:	7813      	ldrb	r3, [r2, #0]
 800d65a:	600b      	str	r3, [r1, #0]
 800d65c:	7810      	ldrb	r0, [r2, #0]
 800d65e:	1e43      	subs	r3, r0, #1
 800d660:	4198      	sbcs	r0, r3
 800d662:	b002      	add	sp, #8
 800d664:	4770      	bx	lr
 800d666:	2002      	movs	r0, #2
 800d668:	4240      	negs	r0, r0
 800d66a:	e7fa      	b.n	800d662 <__ascii_mbtowc+0x1a>

0800d66c <_realloc_r>:
 800d66c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d66e:	0007      	movs	r7, r0
 800d670:	000e      	movs	r6, r1
 800d672:	0014      	movs	r4, r2
 800d674:	2900      	cmp	r1, #0
 800d676:	d105      	bne.n	800d684 <_realloc_r+0x18>
 800d678:	0011      	movs	r1, r2
 800d67a:	f7fd fe67 	bl	800b34c <_malloc_r>
 800d67e:	0005      	movs	r5, r0
 800d680:	0028      	movs	r0, r5
 800d682:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d684:	2a00      	cmp	r2, #0
 800d686:	d103      	bne.n	800d690 <_realloc_r+0x24>
 800d688:	f7fd fdea 	bl	800b260 <_free_r>
 800d68c:	0025      	movs	r5, r4
 800d68e:	e7f7      	b.n	800d680 <_realloc_r+0x14>
 800d690:	f000 f83f 	bl	800d712 <_malloc_usable_size_r>
 800d694:	9001      	str	r0, [sp, #4]
 800d696:	4284      	cmp	r4, r0
 800d698:	d803      	bhi.n	800d6a2 <_realloc_r+0x36>
 800d69a:	0035      	movs	r5, r6
 800d69c:	0843      	lsrs	r3, r0, #1
 800d69e:	42a3      	cmp	r3, r4
 800d6a0:	d3ee      	bcc.n	800d680 <_realloc_r+0x14>
 800d6a2:	0021      	movs	r1, r4
 800d6a4:	0038      	movs	r0, r7
 800d6a6:	f7fd fe51 	bl	800b34c <_malloc_r>
 800d6aa:	1e05      	subs	r5, r0, #0
 800d6ac:	d0e8      	beq.n	800d680 <_realloc_r+0x14>
 800d6ae:	9b01      	ldr	r3, [sp, #4]
 800d6b0:	0022      	movs	r2, r4
 800d6b2:	429c      	cmp	r4, r3
 800d6b4:	d900      	bls.n	800d6b8 <_realloc_r+0x4c>
 800d6b6:	001a      	movs	r2, r3
 800d6b8:	0031      	movs	r1, r6
 800d6ba:	0028      	movs	r0, r5
 800d6bc:	f7ff fc0c 	bl	800ced8 <memcpy>
 800d6c0:	0031      	movs	r1, r6
 800d6c2:	0038      	movs	r0, r7
 800d6c4:	f7fd fdcc 	bl	800b260 <_free_r>
 800d6c8:	e7da      	b.n	800d680 <_realloc_r+0x14>

0800d6ca <__ascii_wctomb>:
 800d6ca:	0003      	movs	r3, r0
 800d6cc:	1e08      	subs	r0, r1, #0
 800d6ce:	d005      	beq.n	800d6dc <__ascii_wctomb+0x12>
 800d6d0:	2aff      	cmp	r2, #255	; 0xff
 800d6d2:	d904      	bls.n	800d6de <__ascii_wctomb+0x14>
 800d6d4:	228a      	movs	r2, #138	; 0x8a
 800d6d6:	2001      	movs	r0, #1
 800d6d8:	601a      	str	r2, [r3, #0]
 800d6da:	4240      	negs	r0, r0
 800d6dc:	4770      	bx	lr
 800d6de:	2001      	movs	r0, #1
 800d6e0:	700a      	strb	r2, [r1, #0]
 800d6e2:	e7fb      	b.n	800d6dc <__ascii_wctomb+0x12>

0800d6e4 <fiprintf>:
 800d6e4:	b40e      	push	{r1, r2, r3}
 800d6e6:	b517      	push	{r0, r1, r2, r4, lr}
 800d6e8:	4c05      	ldr	r4, [pc, #20]	; (800d700 <fiprintf+0x1c>)
 800d6ea:	ab05      	add	r3, sp, #20
 800d6ec:	cb04      	ldmia	r3!, {r2}
 800d6ee:	0001      	movs	r1, r0
 800d6f0:	6820      	ldr	r0, [r4, #0]
 800d6f2:	9301      	str	r3, [sp, #4]
 800d6f4:	f000 f83c 	bl	800d770 <_vfiprintf_r>
 800d6f8:	bc1e      	pop	{r1, r2, r3, r4}
 800d6fa:	bc08      	pop	{r3}
 800d6fc:	b003      	add	sp, #12
 800d6fe:	4718      	bx	r3
 800d700:	20000170 	.word	0x20000170

0800d704 <abort>:
 800d704:	2006      	movs	r0, #6
 800d706:	b510      	push	{r4, lr}
 800d708:	f000 fa1e 	bl	800db48 <raise>
 800d70c:	2001      	movs	r0, #1
 800d70e:	f7f7 f9bb 	bl	8004a88 <_exit>

0800d712 <_malloc_usable_size_r>:
 800d712:	1f0b      	subs	r3, r1, #4
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	1f18      	subs	r0, r3, #4
 800d718:	2b00      	cmp	r3, #0
 800d71a:	da01      	bge.n	800d720 <_malloc_usable_size_r+0xe>
 800d71c:	580b      	ldr	r3, [r1, r0]
 800d71e:	18c0      	adds	r0, r0, r3
 800d720:	4770      	bx	lr

0800d722 <__sfputc_r>:
 800d722:	6893      	ldr	r3, [r2, #8]
 800d724:	b510      	push	{r4, lr}
 800d726:	3b01      	subs	r3, #1
 800d728:	6093      	str	r3, [r2, #8]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	da04      	bge.n	800d738 <__sfputc_r+0x16>
 800d72e:	6994      	ldr	r4, [r2, #24]
 800d730:	42a3      	cmp	r3, r4
 800d732:	db07      	blt.n	800d744 <__sfputc_r+0x22>
 800d734:	290a      	cmp	r1, #10
 800d736:	d005      	beq.n	800d744 <__sfputc_r+0x22>
 800d738:	6813      	ldr	r3, [r2, #0]
 800d73a:	1c58      	adds	r0, r3, #1
 800d73c:	6010      	str	r0, [r2, #0]
 800d73e:	7019      	strb	r1, [r3, #0]
 800d740:	0008      	movs	r0, r1
 800d742:	bd10      	pop	{r4, pc}
 800d744:	f000 f930 	bl	800d9a8 <__swbuf_r>
 800d748:	0001      	movs	r1, r0
 800d74a:	e7f9      	b.n	800d740 <__sfputc_r+0x1e>

0800d74c <__sfputs_r>:
 800d74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d74e:	0006      	movs	r6, r0
 800d750:	000f      	movs	r7, r1
 800d752:	0014      	movs	r4, r2
 800d754:	18d5      	adds	r5, r2, r3
 800d756:	42ac      	cmp	r4, r5
 800d758:	d101      	bne.n	800d75e <__sfputs_r+0x12>
 800d75a:	2000      	movs	r0, #0
 800d75c:	e007      	b.n	800d76e <__sfputs_r+0x22>
 800d75e:	7821      	ldrb	r1, [r4, #0]
 800d760:	003a      	movs	r2, r7
 800d762:	0030      	movs	r0, r6
 800d764:	f7ff ffdd 	bl	800d722 <__sfputc_r>
 800d768:	3401      	adds	r4, #1
 800d76a:	1c43      	adds	r3, r0, #1
 800d76c:	d1f3      	bne.n	800d756 <__sfputs_r+0xa>
 800d76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d770 <_vfiprintf_r>:
 800d770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d772:	b0a1      	sub	sp, #132	; 0x84
 800d774:	000f      	movs	r7, r1
 800d776:	0015      	movs	r5, r2
 800d778:	001e      	movs	r6, r3
 800d77a:	9003      	str	r0, [sp, #12]
 800d77c:	2800      	cmp	r0, #0
 800d77e:	d004      	beq.n	800d78a <_vfiprintf_r+0x1a>
 800d780:	6a03      	ldr	r3, [r0, #32]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d101      	bne.n	800d78a <_vfiprintf_r+0x1a>
 800d786:	f7fc fd81 	bl	800a28c <__sinit>
 800d78a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d78c:	07db      	lsls	r3, r3, #31
 800d78e:	d405      	bmi.n	800d79c <_vfiprintf_r+0x2c>
 800d790:	89bb      	ldrh	r3, [r7, #12]
 800d792:	059b      	lsls	r3, r3, #22
 800d794:	d402      	bmi.n	800d79c <_vfiprintf_r+0x2c>
 800d796:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d798:	f7fc feb3 	bl	800a502 <__retarget_lock_acquire_recursive>
 800d79c:	89bb      	ldrh	r3, [r7, #12]
 800d79e:	071b      	lsls	r3, r3, #28
 800d7a0:	d502      	bpl.n	800d7a8 <_vfiprintf_r+0x38>
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d113      	bne.n	800d7d0 <_vfiprintf_r+0x60>
 800d7a8:	0039      	movs	r1, r7
 800d7aa:	9803      	ldr	r0, [sp, #12]
 800d7ac:	f000 f93e 	bl	800da2c <__swsetup_r>
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d00d      	beq.n	800d7d0 <_vfiprintf_r+0x60>
 800d7b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7b6:	07db      	lsls	r3, r3, #31
 800d7b8:	d503      	bpl.n	800d7c2 <_vfiprintf_r+0x52>
 800d7ba:	2001      	movs	r0, #1
 800d7bc:	4240      	negs	r0, r0
 800d7be:	b021      	add	sp, #132	; 0x84
 800d7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7c2:	89bb      	ldrh	r3, [r7, #12]
 800d7c4:	059b      	lsls	r3, r3, #22
 800d7c6:	d4f8      	bmi.n	800d7ba <_vfiprintf_r+0x4a>
 800d7c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d7ca:	f7fc fe9b 	bl	800a504 <__retarget_lock_release_recursive>
 800d7ce:	e7f4      	b.n	800d7ba <_vfiprintf_r+0x4a>
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	ac08      	add	r4, sp, #32
 800d7d4:	6163      	str	r3, [r4, #20]
 800d7d6:	3320      	adds	r3, #32
 800d7d8:	7663      	strb	r3, [r4, #25]
 800d7da:	3310      	adds	r3, #16
 800d7dc:	76a3      	strb	r3, [r4, #26]
 800d7de:	9607      	str	r6, [sp, #28]
 800d7e0:	002e      	movs	r6, r5
 800d7e2:	7833      	ldrb	r3, [r6, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d001      	beq.n	800d7ec <_vfiprintf_r+0x7c>
 800d7e8:	2b25      	cmp	r3, #37	; 0x25
 800d7ea:	d148      	bne.n	800d87e <_vfiprintf_r+0x10e>
 800d7ec:	1b73      	subs	r3, r6, r5
 800d7ee:	9305      	str	r3, [sp, #20]
 800d7f0:	42ae      	cmp	r6, r5
 800d7f2:	d00b      	beq.n	800d80c <_vfiprintf_r+0x9c>
 800d7f4:	002a      	movs	r2, r5
 800d7f6:	0039      	movs	r1, r7
 800d7f8:	9803      	ldr	r0, [sp, #12]
 800d7fa:	f7ff ffa7 	bl	800d74c <__sfputs_r>
 800d7fe:	3001      	adds	r0, #1
 800d800:	d100      	bne.n	800d804 <_vfiprintf_r+0x94>
 800d802:	e0af      	b.n	800d964 <_vfiprintf_r+0x1f4>
 800d804:	6963      	ldr	r3, [r4, #20]
 800d806:	9a05      	ldr	r2, [sp, #20]
 800d808:	189b      	adds	r3, r3, r2
 800d80a:	6163      	str	r3, [r4, #20]
 800d80c:	7833      	ldrb	r3, [r6, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d100      	bne.n	800d814 <_vfiprintf_r+0xa4>
 800d812:	e0a7      	b.n	800d964 <_vfiprintf_r+0x1f4>
 800d814:	2201      	movs	r2, #1
 800d816:	2300      	movs	r3, #0
 800d818:	4252      	negs	r2, r2
 800d81a:	6062      	str	r2, [r4, #4]
 800d81c:	a904      	add	r1, sp, #16
 800d81e:	3254      	adds	r2, #84	; 0x54
 800d820:	1852      	adds	r2, r2, r1
 800d822:	1c75      	adds	r5, r6, #1
 800d824:	6023      	str	r3, [r4, #0]
 800d826:	60e3      	str	r3, [r4, #12]
 800d828:	60a3      	str	r3, [r4, #8]
 800d82a:	7013      	strb	r3, [r2, #0]
 800d82c:	65a3      	str	r3, [r4, #88]	; 0x58
 800d82e:	4b59      	ldr	r3, [pc, #356]	; (800d994 <_vfiprintf_r+0x224>)
 800d830:	2205      	movs	r2, #5
 800d832:	0018      	movs	r0, r3
 800d834:	7829      	ldrb	r1, [r5, #0]
 800d836:	9305      	str	r3, [sp, #20]
 800d838:	f7fc fe65 	bl	800a506 <memchr>
 800d83c:	1c6e      	adds	r6, r5, #1
 800d83e:	2800      	cmp	r0, #0
 800d840:	d11f      	bne.n	800d882 <_vfiprintf_r+0x112>
 800d842:	6822      	ldr	r2, [r4, #0]
 800d844:	06d3      	lsls	r3, r2, #27
 800d846:	d504      	bpl.n	800d852 <_vfiprintf_r+0xe2>
 800d848:	2353      	movs	r3, #83	; 0x53
 800d84a:	a904      	add	r1, sp, #16
 800d84c:	185b      	adds	r3, r3, r1
 800d84e:	2120      	movs	r1, #32
 800d850:	7019      	strb	r1, [r3, #0]
 800d852:	0713      	lsls	r3, r2, #28
 800d854:	d504      	bpl.n	800d860 <_vfiprintf_r+0xf0>
 800d856:	2353      	movs	r3, #83	; 0x53
 800d858:	a904      	add	r1, sp, #16
 800d85a:	185b      	adds	r3, r3, r1
 800d85c:	212b      	movs	r1, #43	; 0x2b
 800d85e:	7019      	strb	r1, [r3, #0]
 800d860:	782b      	ldrb	r3, [r5, #0]
 800d862:	2b2a      	cmp	r3, #42	; 0x2a
 800d864:	d016      	beq.n	800d894 <_vfiprintf_r+0x124>
 800d866:	002e      	movs	r6, r5
 800d868:	2100      	movs	r1, #0
 800d86a:	200a      	movs	r0, #10
 800d86c:	68e3      	ldr	r3, [r4, #12]
 800d86e:	7832      	ldrb	r2, [r6, #0]
 800d870:	1c75      	adds	r5, r6, #1
 800d872:	3a30      	subs	r2, #48	; 0x30
 800d874:	2a09      	cmp	r2, #9
 800d876:	d94e      	bls.n	800d916 <_vfiprintf_r+0x1a6>
 800d878:	2900      	cmp	r1, #0
 800d87a:	d111      	bne.n	800d8a0 <_vfiprintf_r+0x130>
 800d87c:	e017      	b.n	800d8ae <_vfiprintf_r+0x13e>
 800d87e:	3601      	adds	r6, #1
 800d880:	e7af      	b.n	800d7e2 <_vfiprintf_r+0x72>
 800d882:	9b05      	ldr	r3, [sp, #20]
 800d884:	6822      	ldr	r2, [r4, #0]
 800d886:	1ac0      	subs	r0, r0, r3
 800d888:	2301      	movs	r3, #1
 800d88a:	4083      	lsls	r3, r0
 800d88c:	4313      	orrs	r3, r2
 800d88e:	0035      	movs	r5, r6
 800d890:	6023      	str	r3, [r4, #0]
 800d892:	e7cc      	b.n	800d82e <_vfiprintf_r+0xbe>
 800d894:	9b07      	ldr	r3, [sp, #28]
 800d896:	1d19      	adds	r1, r3, #4
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	9107      	str	r1, [sp, #28]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	db01      	blt.n	800d8a4 <_vfiprintf_r+0x134>
 800d8a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8a2:	e004      	b.n	800d8ae <_vfiprintf_r+0x13e>
 800d8a4:	425b      	negs	r3, r3
 800d8a6:	60e3      	str	r3, [r4, #12]
 800d8a8:	2302      	movs	r3, #2
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	7833      	ldrb	r3, [r6, #0]
 800d8b0:	2b2e      	cmp	r3, #46	; 0x2e
 800d8b2:	d10a      	bne.n	800d8ca <_vfiprintf_r+0x15a>
 800d8b4:	7873      	ldrb	r3, [r6, #1]
 800d8b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d8b8:	d135      	bne.n	800d926 <_vfiprintf_r+0x1b6>
 800d8ba:	9b07      	ldr	r3, [sp, #28]
 800d8bc:	3602      	adds	r6, #2
 800d8be:	1d1a      	adds	r2, r3, #4
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	9207      	str	r2, [sp, #28]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	db2b      	blt.n	800d920 <_vfiprintf_r+0x1b0>
 800d8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ca:	4d33      	ldr	r5, [pc, #204]	; (800d998 <_vfiprintf_r+0x228>)
 800d8cc:	2203      	movs	r2, #3
 800d8ce:	0028      	movs	r0, r5
 800d8d0:	7831      	ldrb	r1, [r6, #0]
 800d8d2:	f7fc fe18 	bl	800a506 <memchr>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d006      	beq.n	800d8e8 <_vfiprintf_r+0x178>
 800d8da:	2340      	movs	r3, #64	; 0x40
 800d8dc:	1b40      	subs	r0, r0, r5
 800d8de:	4083      	lsls	r3, r0
 800d8e0:	6822      	ldr	r2, [r4, #0]
 800d8e2:	3601      	adds	r6, #1
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	6023      	str	r3, [r4, #0]
 800d8e8:	7831      	ldrb	r1, [r6, #0]
 800d8ea:	2206      	movs	r2, #6
 800d8ec:	482b      	ldr	r0, [pc, #172]	; (800d99c <_vfiprintf_r+0x22c>)
 800d8ee:	1c75      	adds	r5, r6, #1
 800d8f0:	7621      	strb	r1, [r4, #24]
 800d8f2:	f7fc fe08 	bl	800a506 <memchr>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d043      	beq.n	800d982 <_vfiprintf_r+0x212>
 800d8fa:	4b29      	ldr	r3, [pc, #164]	; (800d9a0 <_vfiprintf_r+0x230>)
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d125      	bne.n	800d94c <_vfiprintf_r+0x1dc>
 800d900:	2207      	movs	r2, #7
 800d902:	9b07      	ldr	r3, [sp, #28]
 800d904:	3307      	adds	r3, #7
 800d906:	4393      	bics	r3, r2
 800d908:	3308      	adds	r3, #8
 800d90a:	9307      	str	r3, [sp, #28]
 800d90c:	6963      	ldr	r3, [r4, #20]
 800d90e:	9a04      	ldr	r2, [sp, #16]
 800d910:	189b      	adds	r3, r3, r2
 800d912:	6163      	str	r3, [r4, #20]
 800d914:	e764      	b.n	800d7e0 <_vfiprintf_r+0x70>
 800d916:	4343      	muls	r3, r0
 800d918:	002e      	movs	r6, r5
 800d91a:	2101      	movs	r1, #1
 800d91c:	189b      	adds	r3, r3, r2
 800d91e:	e7a6      	b.n	800d86e <_vfiprintf_r+0xfe>
 800d920:	2301      	movs	r3, #1
 800d922:	425b      	negs	r3, r3
 800d924:	e7d0      	b.n	800d8c8 <_vfiprintf_r+0x158>
 800d926:	2300      	movs	r3, #0
 800d928:	200a      	movs	r0, #10
 800d92a:	001a      	movs	r2, r3
 800d92c:	3601      	adds	r6, #1
 800d92e:	6063      	str	r3, [r4, #4]
 800d930:	7831      	ldrb	r1, [r6, #0]
 800d932:	1c75      	adds	r5, r6, #1
 800d934:	3930      	subs	r1, #48	; 0x30
 800d936:	2909      	cmp	r1, #9
 800d938:	d903      	bls.n	800d942 <_vfiprintf_r+0x1d2>
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d0c5      	beq.n	800d8ca <_vfiprintf_r+0x15a>
 800d93e:	9209      	str	r2, [sp, #36]	; 0x24
 800d940:	e7c3      	b.n	800d8ca <_vfiprintf_r+0x15a>
 800d942:	4342      	muls	r2, r0
 800d944:	002e      	movs	r6, r5
 800d946:	2301      	movs	r3, #1
 800d948:	1852      	adds	r2, r2, r1
 800d94a:	e7f1      	b.n	800d930 <_vfiprintf_r+0x1c0>
 800d94c:	aa07      	add	r2, sp, #28
 800d94e:	9200      	str	r2, [sp, #0]
 800d950:	0021      	movs	r1, r4
 800d952:	003a      	movs	r2, r7
 800d954:	4b13      	ldr	r3, [pc, #76]	; (800d9a4 <_vfiprintf_r+0x234>)
 800d956:	9803      	ldr	r0, [sp, #12]
 800d958:	f7fb fe2a 	bl	80095b0 <_printf_float>
 800d95c:	9004      	str	r0, [sp, #16]
 800d95e:	9b04      	ldr	r3, [sp, #16]
 800d960:	3301      	adds	r3, #1
 800d962:	d1d3      	bne.n	800d90c <_vfiprintf_r+0x19c>
 800d964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d966:	07db      	lsls	r3, r3, #31
 800d968:	d405      	bmi.n	800d976 <_vfiprintf_r+0x206>
 800d96a:	89bb      	ldrh	r3, [r7, #12]
 800d96c:	059b      	lsls	r3, r3, #22
 800d96e:	d402      	bmi.n	800d976 <_vfiprintf_r+0x206>
 800d970:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d972:	f7fc fdc7 	bl	800a504 <__retarget_lock_release_recursive>
 800d976:	89bb      	ldrh	r3, [r7, #12]
 800d978:	065b      	lsls	r3, r3, #25
 800d97a:	d500      	bpl.n	800d97e <_vfiprintf_r+0x20e>
 800d97c:	e71d      	b.n	800d7ba <_vfiprintf_r+0x4a>
 800d97e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d980:	e71d      	b.n	800d7be <_vfiprintf_r+0x4e>
 800d982:	aa07      	add	r2, sp, #28
 800d984:	9200      	str	r2, [sp, #0]
 800d986:	0021      	movs	r1, r4
 800d988:	003a      	movs	r2, r7
 800d98a:	4b06      	ldr	r3, [pc, #24]	; (800d9a4 <_vfiprintf_r+0x234>)
 800d98c:	9803      	ldr	r0, [sp, #12]
 800d98e:	f7fc f8d5 	bl	8009b3c <_printf_i>
 800d992:	e7e3      	b.n	800d95c <_vfiprintf_r+0x1ec>
 800d994:	0800e1c8 	.word	0x0800e1c8
 800d998:	0800e1ce 	.word	0x0800e1ce
 800d99c:	0800e1d2 	.word	0x0800e1d2
 800d9a0:	080095b1 	.word	0x080095b1
 800d9a4:	0800d74d 	.word	0x0800d74d

0800d9a8 <__swbuf_r>:
 800d9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9aa:	0006      	movs	r6, r0
 800d9ac:	000d      	movs	r5, r1
 800d9ae:	0014      	movs	r4, r2
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d004      	beq.n	800d9be <__swbuf_r+0x16>
 800d9b4:	6a03      	ldr	r3, [r0, #32]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <__swbuf_r+0x16>
 800d9ba:	f7fc fc67 	bl	800a28c <__sinit>
 800d9be:	69a3      	ldr	r3, [r4, #24]
 800d9c0:	60a3      	str	r3, [r4, #8]
 800d9c2:	89a3      	ldrh	r3, [r4, #12]
 800d9c4:	071b      	lsls	r3, r3, #28
 800d9c6:	d528      	bpl.n	800da1a <__swbuf_r+0x72>
 800d9c8:	6923      	ldr	r3, [r4, #16]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d025      	beq.n	800da1a <__swbuf_r+0x72>
 800d9ce:	6923      	ldr	r3, [r4, #16]
 800d9d0:	6820      	ldr	r0, [r4, #0]
 800d9d2:	b2ef      	uxtb	r7, r5
 800d9d4:	1ac0      	subs	r0, r0, r3
 800d9d6:	6963      	ldr	r3, [r4, #20]
 800d9d8:	b2ed      	uxtb	r5, r5
 800d9da:	4283      	cmp	r3, r0
 800d9dc:	dc05      	bgt.n	800d9ea <__swbuf_r+0x42>
 800d9de:	0021      	movs	r1, r4
 800d9e0:	0030      	movs	r0, r6
 800d9e2:	f7ff fa17 	bl	800ce14 <_fflush_r>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d11d      	bne.n	800da26 <__swbuf_r+0x7e>
 800d9ea:	68a3      	ldr	r3, [r4, #8]
 800d9ec:	3001      	adds	r0, #1
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	60a3      	str	r3, [r4, #8]
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	1c5a      	adds	r2, r3, #1
 800d9f6:	6022      	str	r2, [r4, #0]
 800d9f8:	701f      	strb	r7, [r3, #0]
 800d9fa:	6963      	ldr	r3, [r4, #20]
 800d9fc:	4283      	cmp	r3, r0
 800d9fe:	d004      	beq.n	800da0a <__swbuf_r+0x62>
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	07db      	lsls	r3, r3, #31
 800da04:	d507      	bpl.n	800da16 <__swbuf_r+0x6e>
 800da06:	2d0a      	cmp	r5, #10
 800da08:	d105      	bne.n	800da16 <__swbuf_r+0x6e>
 800da0a:	0021      	movs	r1, r4
 800da0c:	0030      	movs	r0, r6
 800da0e:	f7ff fa01 	bl	800ce14 <_fflush_r>
 800da12:	2800      	cmp	r0, #0
 800da14:	d107      	bne.n	800da26 <__swbuf_r+0x7e>
 800da16:	0028      	movs	r0, r5
 800da18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da1a:	0021      	movs	r1, r4
 800da1c:	0030      	movs	r0, r6
 800da1e:	f000 f805 	bl	800da2c <__swsetup_r>
 800da22:	2800      	cmp	r0, #0
 800da24:	d0d3      	beq.n	800d9ce <__swbuf_r+0x26>
 800da26:	2501      	movs	r5, #1
 800da28:	426d      	negs	r5, r5
 800da2a:	e7f4      	b.n	800da16 <__swbuf_r+0x6e>

0800da2c <__swsetup_r>:
 800da2c:	4b30      	ldr	r3, [pc, #192]	; (800daf0 <__swsetup_r+0xc4>)
 800da2e:	b570      	push	{r4, r5, r6, lr}
 800da30:	0005      	movs	r5, r0
 800da32:	6818      	ldr	r0, [r3, #0]
 800da34:	000c      	movs	r4, r1
 800da36:	2800      	cmp	r0, #0
 800da38:	d004      	beq.n	800da44 <__swsetup_r+0x18>
 800da3a:	6a03      	ldr	r3, [r0, #32]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d101      	bne.n	800da44 <__swsetup_r+0x18>
 800da40:	f7fc fc24 	bl	800a28c <__sinit>
 800da44:	230c      	movs	r3, #12
 800da46:	5ee2      	ldrsh	r2, [r4, r3]
 800da48:	b293      	uxth	r3, r2
 800da4a:	0711      	lsls	r1, r2, #28
 800da4c:	d423      	bmi.n	800da96 <__swsetup_r+0x6a>
 800da4e:	06d9      	lsls	r1, r3, #27
 800da50:	d407      	bmi.n	800da62 <__swsetup_r+0x36>
 800da52:	2309      	movs	r3, #9
 800da54:	2001      	movs	r0, #1
 800da56:	602b      	str	r3, [r5, #0]
 800da58:	3337      	adds	r3, #55	; 0x37
 800da5a:	4313      	orrs	r3, r2
 800da5c:	81a3      	strh	r3, [r4, #12]
 800da5e:	4240      	negs	r0, r0
 800da60:	bd70      	pop	{r4, r5, r6, pc}
 800da62:	075b      	lsls	r3, r3, #29
 800da64:	d513      	bpl.n	800da8e <__swsetup_r+0x62>
 800da66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da68:	2900      	cmp	r1, #0
 800da6a:	d008      	beq.n	800da7e <__swsetup_r+0x52>
 800da6c:	0023      	movs	r3, r4
 800da6e:	3344      	adds	r3, #68	; 0x44
 800da70:	4299      	cmp	r1, r3
 800da72:	d002      	beq.n	800da7a <__swsetup_r+0x4e>
 800da74:	0028      	movs	r0, r5
 800da76:	f7fd fbf3 	bl	800b260 <_free_r>
 800da7a:	2300      	movs	r3, #0
 800da7c:	6363      	str	r3, [r4, #52]	; 0x34
 800da7e:	2224      	movs	r2, #36	; 0x24
 800da80:	89a3      	ldrh	r3, [r4, #12]
 800da82:	4393      	bics	r3, r2
 800da84:	81a3      	strh	r3, [r4, #12]
 800da86:	2300      	movs	r3, #0
 800da88:	6063      	str	r3, [r4, #4]
 800da8a:	6923      	ldr	r3, [r4, #16]
 800da8c:	6023      	str	r3, [r4, #0]
 800da8e:	2308      	movs	r3, #8
 800da90:	89a2      	ldrh	r2, [r4, #12]
 800da92:	4313      	orrs	r3, r2
 800da94:	81a3      	strh	r3, [r4, #12]
 800da96:	6923      	ldr	r3, [r4, #16]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10b      	bne.n	800dab4 <__swsetup_r+0x88>
 800da9c:	21a0      	movs	r1, #160	; 0xa0
 800da9e:	2280      	movs	r2, #128	; 0x80
 800daa0:	89a3      	ldrh	r3, [r4, #12]
 800daa2:	0089      	lsls	r1, r1, #2
 800daa4:	0092      	lsls	r2, r2, #2
 800daa6:	400b      	ands	r3, r1
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d003      	beq.n	800dab4 <__swsetup_r+0x88>
 800daac:	0021      	movs	r1, r4
 800daae:	0028      	movs	r0, r5
 800dab0:	f000 f892 	bl	800dbd8 <__smakebuf_r>
 800dab4:	220c      	movs	r2, #12
 800dab6:	5ea3      	ldrsh	r3, [r4, r2]
 800dab8:	2001      	movs	r0, #1
 800daba:	001a      	movs	r2, r3
 800dabc:	b299      	uxth	r1, r3
 800dabe:	4002      	ands	r2, r0
 800dac0:	4203      	tst	r3, r0
 800dac2:	d00f      	beq.n	800dae4 <__swsetup_r+0xb8>
 800dac4:	2200      	movs	r2, #0
 800dac6:	60a2      	str	r2, [r4, #8]
 800dac8:	6962      	ldr	r2, [r4, #20]
 800daca:	4252      	negs	r2, r2
 800dacc:	61a2      	str	r2, [r4, #24]
 800dace:	2000      	movs	r0, #0
 800dad0:	6922      	ldr	r2, [r4, #16]
 800dad2:	4282      	cmp	r2, r0
 800dad4:	d1c4      	bne.n	800da60 <__swsetup_r+0x34>
 800dad6:	0609      	lsls	r1, r1, #24
 800dad8:	d5c2      	bpl.n	800da60 <__swsetup_r+0x34>
 800dada:	2240      	movs	r2, #64	; 0x40
 800dadc:	4313      	orrs	r3, r2
 800dade:	81a3      	strh	r3, [r4, #12]
 800dae0:	3801      	subs	r0, #1
 800dae2:	e7bd      	b.n	800da60 <__swsetup_r+0x34>
 800dae4:	0788      	lsls	r0, r1, #30
 800dae6:	d400      	bmi.n	800daea <__swsetup_r+0xbe>
 800dae8:	6962      	ldr	r2, [r4, #20]
 800daea:	60a2      	str	r2, [r4, #8]
 800daec:	e7ef      	b.n	800dace <__swsetup_r+0xa2>
 800daee:	46c0      	nop			; (mov r8, r8)
 800daf0:	20000170 	.word	0x20000170

0800daf4 <_raise_r>:
 800daf4:	b570      	push	{r4, r5, r6, lr}
 800daf6:	0004      	movs	r4, r0
 800daf8:	000d      	movs	r5, r1
 800dafa:	291f      	cmp	r1, #31
 800dafc:	d904      	bls.n	800db08 <_raise_r+0x14>
 800dafe:	2316      	movs	r3, #22
 800db00:	6003      	str	r3, [r0, #0]
 800db02:	2001      	movs	r0, #1
 800db04:	4240      	negs	r0, r0
 800db06:	bd70      	pop	{r4, r5, r6, pc}
 800db08:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d004      	beq.n	800db18 <_raise_r+0x24>
 800db0e:	008a      	lsls	r2, r1, #2
 800db10:	189b      	adds	r3, r3, r2
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	2a00      	cmp	r2, #0
 800db16:	d108      	bne.n	800db2a <_raise_r+0x36>
 800db18:	0020      	movs	r0, r4
 800db1a:	f000 f831 	bl	800db80 <_getpid_r>
 800db1e:	002a      	movs	r2, r5
 800db20:	0001      	movs	r1, r0
 800db22:	0020      	movs	r0, r4
 800db24:	f000 f81a 	bl	800db5c <_kill_r>
 800db28:	e7ed      	b.n	800db06 <_raise_r+0x12>
 800db2a:	2000      	movs	r0, #0
 800db2c:	2a01      	cmp	r2, #1
 800db2e:	d0ea      	beq.n	800db06 <_raise_r+0x12>
 800db30:	1c51      	adds	r1, r2, #1
 800db32:	d103      	bne.n	800db3c <_raise_r+0x48>
 800db34:	2316      	movs	r3, #22
 800db36:	3001      	adds	r0, #1
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	e7e4      	b.n	800db06 <_raise_r+0x12>
 800db3c:	2400      	movs	r4, #0
 800db3e:	0028      	movs	r0, r5
 800db40:	601c      	str	r4, [r3, #0]
 800db42:	4790      	blx	r2
 800db44:	0020      	movs	r0, r4
 800db46:	e7de      	b.n	800db06 <_raise_r+0x12>

0800db48 <raise>:
 800db48:	b510      	push	{r4, lr}
 800db4a:	4b03      	ldr	r3, [pc, #12]	; (800db58 <raise+0x10>)
 800db4c:	0001      	movs	r1, r0
 800db4e:	6818      	ldr	r0, [r3, #0]
 800db50:	f7ff ffd0 	bl	800daf4 <_raise_r>
 800db54:	bd10      	pop	{r4, pc}
 800db56:	46c0      	nop			; (mov r8, r8)
 800db58:	20000170 	.word	0x20000170

0800db5c <_kill_r>:
 800db5c:	2300      	movs	r3, #0
 800db5e:	b570      	push	{r4, r5, r6, lr}
 800db60:	4d06      	ldr	r5, [pc, #24]	; (800db7c <_kill_r+0x20>)
 800db62:	0004      	movs	r4, r0
 800db64:	0008      	movs	r0, r1
 800db66:	0011      	movs	r1, r2
 800db68:	602b      	str	r3, [r5, #0]
 800db6a:	f7f6 ff7d 	bl	8004a68 <_kill>
 800db6e:	1c43      	adds	r3, r0, #1
 800db70:	d103      	bne.n	800db7a <_kill_r+0x1e>
 800db72:	682b      	ldr	r3, [r5, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d000      	beq.n	800db7a <_kill_r+0x1e>
 800db78:	6023      	str	r3, [r4, #0]
 800db7a:	bd70      	pop	{r4, r5, r6, pc}
 800db7c:	20000a54 	.word	0x20000a54

0800db80 <_getpid_r>:
 800db80:	b510      	push	{r4, lr}
 800db82:	f7f6 ff6b 	bl	8004a5c <_getpid>
 800db86:	bd10      	pop	{r4, pc}

0800db88 <__swhatbuf_r>:
 800db88:	b570      	push	{r4, r5, r6, lr}
 800db8a:	000e      	movs	r6, r1
 800db8c:	001d      	movs	r5, r3
 800db8e:	230e      	movs	r3, #14
 800db90:	5ec9      	ldrsh	r1, [r1, r3]
 800db92:	0014      	movs	r4, r2
 800db94:	b096      	sub	sp, #88	; 0x58
 800db96:	2900      	cmp	r1, #0
 800db98:	da0c      	bge.n	800dbb4 <__swhatbuf_r+0x2c>
 800db9a:	89b2      	ldrh	r2, [r6, #12]
 800db9c:	2380      	movs	r3, #128	; 0x80
 800db9e:	0011      	movs	r1, r2
 800dba0:	4019      	ands	r1, r3
 800dba2:	421a      	tst	r2, r3
 800dba4:	d013      	beq.n	800dbce <__swhatbuf_r+0x46>
 800dba6:	2100      	movs	r1, #0
 800dba8:	3b40      	subs	r3, #64	; 0x40
 800dbaa:	2000      	movs	r0, #0
 800dbac:	6029      	str	r1, [r5, #0]
 800dbae:	6023      	str	r3, [r4, #0]
 800dbb0:	b016      	add	sp, #88	; 0x58
 800dbb2:	bd70      	pop	{r4, r5, r6, pc}
 800dbb4:	466a      	mov	r2, sp
 800dbb6:	f000 f84d 	bl	800dc54 <_fstat_r>
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	dbed      	blt.n	800db9a <__swhatbuf_r+0x12>
 800dbbe:	23f0      	movs	r3, #240	; 0xf0
 800dbc0:	9901      	ldr	r1, [sp, #4]
 800dbc2:	021b      	lsls	r3, r3, #8
 800dbc4:	4019      	ands	r1, r3
 800dbc6:	4b03      	ldr	r3, [pc, #12]	; (800dbd4 <__swhatbuf_r+0x4c>)
 800dbc8:	18c9      	adds	r1, r1, r3
 800dbca:	424b      	negs	r3, r1
 800dbcc:	4159      	adcs	r1, r3
 800dbce:	2380      	movs	r3, #128	; 0x80
 800dbd0:	00db      	lsls	r3, r3, #3
 800dbd2:	e7ea      	b.n	800dbaa <__swhatbuf_r+0x22>
 800dbd4:	ffffe000 	.word	0xffffe000

0800dbd8 <__smakebuf_r>:
 800dbd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbda:	2602      	movs	r6, #2
 800dbdc:	898b      	ldrh	r3, [r1, #12]
 800dbde:	0005      	movs	r5, r0
 800dbe0:	000c      	movs	r4, r1
 800dbe2:	4233      	tst	r3, r6
 800dbe4:	d006      	beq.n	800dbf4 <__smakebuf_r+0x1c>
 800dbe6:	0023      	movs	r3, r4
 800dbe8:	3347      	adds	r3, #71	; 0x47
 800dbea:	6023      	str	r3, [r4, #0]
 800dbec:	6123      	str	r3, [r4, #16]
 800dbee:	2301      	movs	r3, #1
 800dbf0:	6163      	str	r3, [r4, #20]
 800dbf2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800dbf4:	466a      	mov	r2, sp
 800dbf6:	ab01      	add	r3, sp, #4
 800dbf8:	f7ff ffc6 	bl	800db88 <__swhatbuf_r>
 800dbfc:	9900      	ldr	r1, [sp, #0]
 800dbfe:	0007      	movs	r7, r0
 800dc00:	0028      	movs	r0, r5
 800dc02:	f7fd fba3 	bl	800b34c <_malloc_r>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d108      	bne.n	800dc1c <__smakebuf_r+0x44>
 800dc0a:	220c      	movs	r2, #12
 800dc0c:	5ea3      	ldrsh	r3, [r4, r2]
 800dc0e:	059a      	lsls	r2, r3, #22
 800dc10:	d4ef      	bmi.n	800dbf2 <__smakebuf_r+0x1a>
 800dc12:	2203      	movs	r2, #3
 800dc14:	4393      	bics	r3, r2
 800dc16:	431e      	orrs	r6, r3
 800dc18:	81a6      	strh	r6, [r4, #12]
 800dc1a:	e7e4      	b.n	800dbe6 <__smakebuf_r+0xe>
 800dc1c:	2380      	movs	r3, #128	; 0x80
 800dc1e:	89a2      	ldrh	r2, [r4, #12]
 800dc20:	6020      	str	r0, [r4, #0]
 800dc22:	4313      	orrs	r3, r2
 800dc24:	81a3      	strh	r3, [r4, #12]
 800dc26:	9b00      	ldr	r3, [sp, #0]
 800dc28:	6120      	str	r0, [r4, #16]
 800dc2a:	6163      	str	r3, [r4, #20]
 800dc2c:	9b01      	ldr	r3, [sp, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d00c      	beq.n	800dc4c <__smakebuf_r+0x74>
 800dc32:	0028      	movs	r0, r5
 800dc34:	230e      	movs	r3, #14
 800dc36:	5ee1      	ldrsh	r1, [r4, r3]
 800dc38:	f000 f81e 	bl	800dc78 <_isatty_r>
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	d005      	beq.n	800dc4c <__smakebuf_r+0x74>
 800dc40:	2303      	movs	r3, #3
 800dc42:	89a2      	ldrh	r2, [r4, #12]
 800dc44:	439a      	bics	r2, r3
 800dc46:	3b02      	subs	r3, #2
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	81a3      	strh	r3, [r4, #12]
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	433b      	orrs	r3, r7
 800dc50:	81a3      	strh	r3, [r4, #12]
 800dc52:	e7ce      	b.n	800dbf2 <__smakebuf_r+0x1a>

0800dc54 <_fstat_r>:
 800dc54:	2300      	movs	r3, #0
 800dc56:	b570      	push	{r4, r5, r6, lr}
 800dc58:	4d06      	ldr	r5, [pc, #24]	; (800dc74 <_fstat_r+0x20>)
 800dc5a:	0004      	movs	r4, r0
 800dc5c:	0008      	movs	r0, r1
 800dc5e:	0011      	movs	r1, r2
 800dc60:	602b      	str	r3, [r5, #0]
 800dc62:	f7f6 ff60 	bl	8004b26 <_fstat>
 800dc66:	1c43      	adds	r3, r0, #1
 800dc68:	d103      	bne.n	800dc72 <_fstat_r+0x1e>
 800dc6a:	682b      	ldr	r3, [r5, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d000      	beq.n	800dc72 <_fstat_r+0x1e>
 800dc70:	6023      	str	r3, [r4, #0]
 800dc72:	bd70      	pop	{r4, r5, r6, pc}
 800dc74:	20000a54 	.word	0x20000a54

0800dc78 <_isatty_r>:
 800dc78:	2300      	movs	r3, #0
 800dc7a:	b570      	push	{r4, r5, r6, lr}
 800dc7c:	4d06      	ldr	r5, [pc, #24]	; (800dc98 <_isatty_r+0x20>)
 800dc7e:	0004      	movs	r4, r0
 800dc80:	0008      	movs	r0, r1
 800dc82:	602b      	str	r3, [r5, #0]
 800dc84:	f7f6 ff5d 	bl	8004b42 <_isatty>
 800dc88:	1c43      	adds	r3, r0, #1
 800dc8a:	d103      	bne.n	800dc94 <_isatty_r+0x1c>
 800dc8c:	682b      	ldr	r3, [r5, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d000      	beq.n	800dc94 <_isatty_r+0x1c>
 800dc92:	6023      	str	r3, [r4, #0]
 800dc94:	bd70      	pop	{r4, r5, r6, pc}
 800dc96:	46c0      	nop			; (mov r8, r8)
 800dc98:	20000a54 	.word	0x20000a54

0800dc9c <_init>:
 800dc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9e:	46c0      	nop			; (mov r8, r8)
 800dca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dca2:	bc08      	pop	{r3}
 800dca4:	469e      	mov	lr, r3
 800dca6:	4770      	bx	lr

0800dca8 <_fini>:
 800dca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcaa:	46c0      	nop			; (mov r8, r8)
 800dcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcae:	bc08      	pop	{r3}
 800dcb0:	469e      	mov	lr, r3
 800dcb2:	4770      	bx	lr
